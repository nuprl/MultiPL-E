name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function get_ones(n)\n    local ones = 0\n    while n > 0 do\n\
    \      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ ones\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = get_ones(a)\n\
    \    local ones_b = get_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count = count + 1\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:count('1')\n   \
    \ local b_ones = b:count('1')\n    if a_ones == b_ones then\n      return a <\
    \ b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n   \
    \   count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n\
    \    local b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local oa, ob = ones(a), ones(b)\n    if\
    \ oa == ob then\n      return a < b\n    else\n      return oa < ob\n    end\n\
    \  end)\n  return arr\nend", "  local function get_ones(n)\n    local ones = 0\n\
    \    while n > 0 do\n      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return ones\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ ones_a = get_ones(a)\n    local ones_b = get_ones(b)\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(num)\n    local\
    \ count = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num\
    \ = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local ones_a = a:gsub('[^1]', ''):len()\n    local ones_b = b:gsub('[^1]',\
    \ ''):len()\n    if ones_a == ones_b then\n      return a < b\n    else\n    \
    \  return ones_a < ones_b\n    end\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    local a_ones = a:gsub('[^1]', ''):len()\n    local b_ones = b:gsub('[^1]',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_bin(n)\n    local\
    \ bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n      n =\
    \ math.floor(n / 2)\n    end\n    return bin\n  end\n  table.sort(arr, cmp)\n\
    \  for i, v in ipairs(arr) do\n    arr[i] = to_bin(v)\n  end\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function ones(n)\n    local count = 0\n    while\
    \ n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n \
    \     n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function sort_by_ones(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    end\n    return a_ones < b_ones\n  end\n  table.sort(arr,\
    \ sort_by_ones)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:binary():count('1')\n\
    \    local b_ones = b:binary():count('1')\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local ones = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        ones = ones + 1\n      end\n     \
    \ n = math.floor(n / 2)\n    end\n    return ones\n  end\n  local function compare(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local\
    \ b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local count =\
    \ 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function num_ones(x)\n    local\
    \ n = 0\n    while x > 0 do\n      n = n + (x % 2)\n      x = math.floor(x / 2)\n\
    \    end\n    return n\n  end\n  table.sort(arr, function(a, b)\n    local na,\
    \ nb = num_ones(a), num_ones(b)\n    if na == nb then\n      return a < b\n  \
    \  else\n      return na < nb\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local a1, b1 = a:count('1'),\
    \ b:count('1')\n    if a1 == b1 then\n      return a < b\n    else\n      return\
    \ a1 < b1\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local\
    \ b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local count =\
    \ 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = string.gsub(string.format(\"\
    %b\", a), \"0\", \"\")\n    local b_ones = string.gsub(string.format(\"%b\", b),\
    \ \"0\", \"\")\n    if #a_ones == #b_ones then\n      return a < b\n    else\n\
    \      return #a_ones < #b_ones\n    end\n  end)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:count_ones()\n\
    \    local b_ones = b:count_ones()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function cmp(a, b)\n    local a1, b1 = a:count('1'), b:count('1')\n\
    \    if a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n  \
    \  end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      count = count + (num % 2)\n\
    \      num = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n   \
    \ local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:match('1'):len()\n\
    \    local b_ones = b:match('1'):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:to_binary():count('1')\n    local b_ones\
    \ = b:to_binary():count('1')\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local\
    \ b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local function\
    \ to_binary(n)\n    local bin = ''\n    while n > 0 do\n      bin = tostring(n\
    \ % 2) .. bin\n      n = math.floor(n / 2)\n    end\n    return bin\n  end\n \
    \ local bin_arr = {}\n  for i, n in ipairs(arr) do\n    bin_arr[i] = to_binary(n)\n\
    \  end\n  table.sort(bin_arr, compare)\n  for i, bin in ipairs(bin_arr) do\n \
    \   bin_arr[i] = tonumber(bin, 2)\n  end\n  return bin_arr\nend", "  local function\
    \ cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\n\
    end", "  local function num_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = num_ones(a)\n    local b_ones = num_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ ones = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        ones = ones\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return ones\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:tobinary():gsub('0', ''):len()\n    local b_ones =\
    \ b:tobinary():gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(x)\n    local count = 0\n    while x > 0 do\n    \
    \  count = count + (x % 2)\n      x = math.floor(x / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:count_ones()\n    local\
    \ b_ones = b:count_ones()\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:tobinary():gsub('0',\
    \ ''):len()\n    local b_ones = b:tobinary():gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n      return a < b\n\
    \    else\n      return a1 < b1\n    end\n  end)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  local function to_binary(n)\n    local bin = ''\n    while\
    \ n > 0 do\n      bin = tostring(n % 2) .. bin\n      n = math.floor(n / 2)\n\
    \    end\n    return bin\n  end\n  local bin_arr = {}\n  for i, v in ipairs(arr)\
    \ do\n    bin_arr[i] = to_binary(v)\n  end\n  table.sort(bin_arr, cmp)\n  for\
    \ i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n  end\n  return\
    \ bin_arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function ones(n)\n    local count = 0\n    while\
    \ n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a1, b1 =\
    \ ones(a), ones(b)\n    if a1 == b1 then\n      return a < b\n    else\n     \
    \ return a1 < b1\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function bitcount(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function compare(a, b)\n    local a_ones = bitcount(a)\n    local\
    \ b_ones = bitcount(b)\n    if a_ones == b_ones then\n      return a < b\n   \
    \ else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local ones = 0\n   \
    \ while n > 0 do\n      ones = ones + (n % 2)\n      n = math.floor(n / 2)\n \
    \   end\n    return ones\n  end\n  table.sort(arr, function(a, b)\n    local ones_a\
    \ = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n\
    \      return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:count('1')\n\
    \    local b_ones = b:count('1')\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local function\
    \ to_binary(n)\n    local bin = ''\n    while n > 0 do\n      bin = tostring(n\
    \ % 2) .. bin\n      n = math.floor(n / 2)\n    end\n    return bin\n  end\n \
    \ local bin_arr = {}\n  for _, n in ipairs(arr) do\n    table.insert(bin_arr,\
    \ to_binary(n))\n  end\n  table.sort(bin_arr, compare)\n  local sorted_arr = {}\n\
    \  for _, bin in ipairs(bin_arr) do\n    table.insert(sorted_arr, tonumber(bin,\
    \ 2))\n  end\n  return sorted_arr\nend", "    local function compare(a, b)\n \
    \       local a_ones = a:gsub('0', ''):len()\n        local b_ones = b:gsub('0',\
    \ ''):len()\n        if a_ones == b_ones then\n            return a < b\n    \
    \    else\n            return a_ones < b_ones\n        end\n    end\n    local\
    \ function to_binary(n)\n        local bin = ''\n        while n > 0 do\n    \
    \        bin = tostring(n % 2) .. bin\n            n = math.floor(n / 2)\n   \
    \     end\n        return bin\n    end\n    table.sort(arr, function(a, b)\n \
    \       return compare(to_binary(a), to_binary(b))\n    end)\n    return arr\n\
    end", "  local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local count =\
    \ 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "    local function cmp(a, b)\n        local a_bin = string.format(\"\
    %b\", a)\n        local b_bin = string.format(\"%b\", b)\n        local a_ones\
    \ = a_bin:gsub(\"0\", \"\"):len()\n        local b_ones = b_bin:gsub(\"0\", \"\
    \"):len()\n        if a_ones == b_ones then\n            return a < b\n      \
    \  else\n            return a_ones < b_ones\n        end\n    end\n    table.sort(arr,\
    \ cmp)\n    return arr\nend", "  local function cmp(a, b)\n    local a_ones =\
    \ a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:tobinary():count('1')\n    local b_ones\
    \ = b:tobinary():count('1')\n    if a_ones == b_ones then\n      return a < b\n\
    \    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + n % 2\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      n = n & (n - 1)\n      count =\
    \ count + 1\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n\
    \    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local count_a = count_ones(a)\n    local count_b = count_ones(b)\n    if count_a\
    \ == count_b then\n      return a < b\n    else\n      return count_a < count_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  return table.sort(arr, function(a, b)\n\
    \    local a_ones = a:to_binary():count_ones()\n    local b_ones = b:to_binary():count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n   \
    \   if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local oa, ob = ones(a), ones(b)\n    if oa == ob then\n      return a < b\n\
    \    else\n      return oa < ob\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local\
    \ b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n\
    \      n = math.floor(n / 2)\n    end\n    return c\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local c1, c2 = count_ones(a), count_ones(b)\n    if c1 ==\
    \ c2 then\n      return a < b\n    else\n      return c1 < c2\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "    local function count_ones(n)\n\
    \        local count = 0\n        while n > 0 do\n            count = count +\
    \ n % 2\n            n = math.floor(n / 2)\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend", "  local function count_ones(n)\n  \
    \  local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local c =\
    \ 0\n    while n > 0 do\n      c = c + n % 2\n      n = math.floor(n / 2)\n  \
    \  end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local a1, b1\
    \ = ones(a), ones(b)\n    if a1 == b1 then\n      return a < b\n    else\n   \
    \   return a1 < b1\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ aones = ones(a)\n    local bones = ones(b)\n    if aones == bones then\n   \
    \   return a < b\n    else\n      return aones < bones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local count_a = count_ones(a)\n    local count_b = count_ones(b)\n\
    \    if count_a == count_b then\n      return a < b\n    else\n      return count_a\
    \ < count_b\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + n % 2\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  local function compare(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n\
    \  table.sort(arr, compare)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ c = 0\n    while n > 0 do\n      c = c + n % 2\n      n = math.floor(n / 2)\n\
    \    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local c =\
    \ count_ones(a) - count_ones(b)\n    if c == 0 then\n      return a < b\n    else\n\
    \      return c < 0\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function count_ones(num)\n    local count\
    \ = 0\n    while num > 0 do\n      count = count + num % 2\n      num = math.floor(num\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(num)\n    local\
    \ count = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num\
    \ = math.floor(num / 2)\n    end\n    return count\n  end\n  local function cmp(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "    local\
    \ function count_ones(n)\n        local count = 0\n        while n > 0 do\n  \
    \          if n % 2 == 1 then\n                count = count + 1\n           \
    \ end\n            n = math.floor(n / 2)\n        end\n        return count\n\
    \    end\n    table.sort(arr, function(a, b)\n        local a_ones = count_ones(a)\n\
    \        local b_ones = count_ones(b)\n        if a_ones == b_ones then\n    \
    \        return a < b\n        else\n            return a_ones < b_ones\n    \
    \    end\n    end)\n    return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    local a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = {}\n    while n > 0 do\n      local rest = n % 2\n      n = (n -\
    \ rest) / 2\n      table.insert(bin, rest)\n    end\n    return table.concat(bin):reverse()\n\
    \  end\n  local bin_arr = {}\n  for i, v in ipairs(arr) do\n    bin_arr[i] = to_binary(v)\n\
    \  end\n  table.sort(bin_arr, compare)\n  for i, v in ipairs(bin_arr) do\n   \
    \ bin_arr[i] = tonumber(v, 2)\n  end\n  return bin_arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ ones(n)\n    local count = 0\n    while n > 0 do\n      count = count + (n %\
    \ 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function\
    \ compare(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_binary():count('1')\n\
    \    local b_ones = b:to_binary():count('1')\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local ones = 0\n   \
    \ while n > 0 do\n      if n % 2 == 1 then\n        ones = ones + 1\n      end\n\
    \      n = math.floor(n / 2)\n    end\n    return ones\n  end\n  local function\
    \ compare(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "    local function count_ones(num)\n  \
    \      local count = 0\n        while num > 0 do\n            count = count +\
    \ (num % 2)\n            num = math.floor(num / 2)\n        end\n        return\
    \ count\n    end\n    table.sort(arr, function(a, b)\n        local a_ones = count_ones(a)\n\
    \        local b_ones = count_ones(b)\n        if a_ones == b_ones then\n    \
    \        return a < b\n        else\n            return a_ones < b_ones\n    \
    \    end\n    end)\n    return arr\nend", "  local function sort_by_ones(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    end\n    return ones_a\
    \ < ones_b\n  end\n  local function to_binary(n)\n    local function to_binary_rec(n,\
    \ acc)\n      if n == 0 then\n        return acc\n      end\n      return to_binary_rec(math.floor(n\
    \ / 2), (n % 2) .. acc)\n    end\n    return to_binary_rec(n, '')\n  end\n  local\
    \ function to_binary_str(n)\n    local bin = to_binary(n)\n    return bin:len()\
    \ < 8 and ('0'):rep(8 - bin:len()) .. bin or bin\n  end\n  local function sort_by_ones_dec(a,\
    \ b)\n    local ones_a = to_binary_str(a)\n    local ones_b = to_binary_str(b)\n\
    \    return sort_by_ones(ones_a, ones_b)\n  end\n  table.sort(arr, sort_by_ones_dec)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function compare(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
