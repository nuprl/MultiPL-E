name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1,\
  \ 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local len = finish - start + 1\n    if len == 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0\
    \ then return 'NO' end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    local\
    \ is_prime = true\n    for i = 2, math.sqrt(length) do\n        if length % i\
    \ == 0 then\n            is_prime = false\n            break\n        end\n  \
    \  end\n    if is_prime then\n        return 'YES'\n    else\n        return 'NO'\n\
    \    end\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start1, end1\
    \ = interval1[1], interval1[2]\n  local start2, end2 = interval2[1], interval2[2]\n\
    \  local start, end = math.max(start1, start2), math.min(end1, end2)\n  if start\
    \ > end then return 'NO' end\n  local len = end - start + 1\n  if len == 1 then\
    \ return 'NO' end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then return\
    \ 'NO' end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start1, end1\
    \ = interval1[1], interval1[2]\n    local start2, end2 = interval2[1], interval2[2]\n\
    \    local start, end = math.max(start1, start2), math.min(end1, end2)\n    if\
    \ start > end then return 'NO' end\n    local len = end - start + 1\n    if len\
    \ == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n    local\
    \ finish = math.min(interval1[2], interval2[2])\n    local len = finish - start\
    \ + 1\n    if len <= 0 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local len = finish - start + 1\n  for i = 2, math.sqrt(len)\
    \ do\n    if len % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local length = finish - start + 1\n    if length ==\
    \ 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n\
    \        if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local len = finish - start + 1\n  if\
    \ len == 1 then\n    return 'NO'\n  end\n  local isPrime = true\n  for i = 2,\
    \ math.sqrt(len) do\n    if len % i == 0 then\n      isPrime = false\n      break\n\
    \    end\n  end\n  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n\
    \  end\nend", "  local start = math.max(interval1[1], interval2[1])\n  local finish\
    \ = math.min(interval1[2], interval2[2])\n  if start > finish then\n    return\
    \ 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n  \
    \  return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length < 1 then\n\
    \        return 'NO'\n    end\n    local is_prime = true\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            is_prime = false\n        \
    \    break\n        end\n    end\n    return is_prime and 'YES' or 'NO'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  local isPrime = true\n  for i = 2, math.sqrt(len) do\n\
    \    if len % i == 0 then\n      isPrime = false\n      break\n    end\n  end\n\
    \  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend", " \
    \   local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local len = finish - start + 1\n    if len < 0 then\n   \
    \     return 'NO'\n    end\n    if len == 1 then\n        return 'NO'\n    end\n\
    \    local i = 2\n    while i * i <= len do\n        if len % i == 0 then\n  \
    \          return 'NO'\n        end\n        i = i + 1\n    end\n    return 'YES'\n\
    end", "  local start = math.max(interval1[1], interval2[1])\n  local finish =\
    \ math.min(interval1[2], interval2[2])\n  if start > finish then\n    return 'NO'\n\
    \  end\n  local length = finish - start + 1\n  local isPrime = true\n  for i =\
    \ 2, math.sqrt(length) do\n    if length % i == 0 then\n      isPrime = false\n\
    \      break\n    end\n  end\n  return isPrime and 'YES' or 'NO'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length <= 0 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i\
    \ == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  local\
    \ i = 2\n  while i <= math.sqrt(length) do\n    if length % i == 0 then\n    \
    \  return 'NO'\n    end\n    i = i + 1\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1\
    \ then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length\
    \ % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  \
    \  local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    local isPrime = true\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            isPrime = false\n            break\n\
    \        end\n    end\n    if isPrime then\n        return 'YES'\n    else\n \
    \       return 'NO'\n    end\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ len = finish - start + 1\n  if len < 0 then\n    return 'NO'\n  end\n  local\
    \ isPrime = true\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n \
    \     isPrime = false\n      break\n    end\n  end\n  return isPrime and 'YES'\
    \ or 'NO'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i\
    \ == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 1 then return\
    \ 'NO' end\n  if length == 1 then return 'YES' end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend",
  "    local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    for i = 2, math.sqrt(length) do\n  \
    \      if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  local length = finish\
    \ - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n  local isPrime =\
    \ true\n  for i = 2, math.sqrt(length) do\n    if length % i == 0 then\n     \
    \ isPrime = false\n      break\n    end\n  end\n  return isPrime and 'YES' or\
    \ 'NO'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local finish\
    \ = math.min(interval1[2], interval2[2])\n  if start > finish then\n    return\
    \ 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n    return\
    \ 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n    \
    \  return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ length = finish - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n\
    \  for i = 2, math.floor(math.sqrt(length)) do\n    if length % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local n = finish -\
    \ start + 1\n    if n < 2 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  local length = finish\
    \ - start + 1\n  if length <= 0 then\n    return 'NO'\n  end\n  local isPrime\
    \ = true\n  for i = 2, length - 1 do\n    if length % i == 0 then\n      isPrime\
    \ = false\n      break\n    end\n  end\n  return isPrime and 'YES' or 'NO'\nend",
  "    local start1, end1 = interval1[1], interval1[2]\n    local start2, end2 = interval2[1],\
    \ interval2[2]\n    local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n    if start > end then return 'NO' end\n    local len = end - start\
    \ + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n\
    \        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 1 then\n \
    \   return 'NO'\n  end\n  if length == 1 then\n    return 'YES'\n  end\n  for\
    \ i = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local len = finish - start + 1\n  if\
    \ len == 1 then\n    return 'NO'\n  end\n  local i = 2\n  while i * i <= len do\n\
    \    if len % i == 0 then\n      return 'NO'\n    end\n    i = i + 1\n  end\n\
    \  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "    local start1, end1 = interval1[1], interval1[2]\n\
    \    local start2, end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1,\
    \ start2), math.min(end1, end2)\n    if start > end then return 'NO' end\n   \
    \ local len = end - start + 1\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend", "    local start\
    \ = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length < 2 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 0 then\n \
    \   return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local function\
    \ isPrime(n)\n    if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  return isPrime(finish - start + 1) and 'YES' or 'NO'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    local length = finish - start +\
    \ 1\n    if length < 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.sqrt(len) do\n        if len % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length < 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  local isPrime = true\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      isPrime = false\n      break\n    end\n\
    \  end\n  return isPrime and 'YES' or 'NO'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n\
    \    return 'NO'\n  end\n  local isPrime = true\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      isPrime = false\n      break\n    end\n\
    \  end\n  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n  end\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    local length = finish - start +\
    \ 1\n    if length < 0 then\n        return 'NO'\n    end\n    if length == 1\
    \ then\n        return 'NO'\n    end\n    if length == 2 then\n        return\
    \ 'YES'\n    end\n    if length % 2 == 0 then\n        return 'NO'\n    end\n\
    \    for i = 3, math.floor(math.sqrt(length)) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    local length = finish\
    \ - start + 1\n    if length < 1 then\n        return 'NO'\n    end\n    for i\
    \ = 2, math.floor(math.sqrt(length)) do\n        if length % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start1, end1 = interval1[1], interval1[2]\n    local start2, end2 = interval2[1],\
    \ interval2[2]\n    local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n    if start > end then return 'NO' end\n    local len = end - start\
    \ + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n\
    \        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 1 then return\
    \ 'NO' end\n  if length == 1 then return 'YES' end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend",
  "    local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "    local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n      \
    \      return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start\
    \ = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "  local start, end_ = math.max(interval1[1], interval2[1]), math.min(interval1[2],\
    \ interval2[2])\n  if start > end_ then return 'NO' end\n  local len = end_ -\
    \ start + 1\n  return len == 1 and 'NO' or len == 2 and 'YES' or len % 2 == 0\
    \ and 'NO' or len % 3 == 0 and 'NO' or 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.sqrt(len) do\n        if len % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "    local start1, end1 = interval1[1], interval1[2]\n    local\
    \ start2, end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1,\
    \ start2), math.min(end1, end2)\n    if start > end then return 'NO' end\n   \
    \ local len = end - start + 1\n    if len == 1 then return 'NO' end\n    for i\
    \ = 2, math.sqrt(len) do\n        if len % i == 0 then return 'NO' end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n      \
    \      return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  for i = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return\
    \ 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local len = finish - start + 1\n  if\
    \ len == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if\
    \ len % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  local is_prime\
    \ = true\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n      is_prime\
    \ = false\n      break\n    end\n  end\n  if is_prime then\n    return 'YES'\n\
    \  else\n    return 'NO'\n  end\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    for i = 2, math.sqrt(length) do\n        if length % i == 0\
    \ then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "    local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "    local function isPrime(n)\n        if n <= 1 then return false end\n      \
    \  for i = 2, math.sqrt(n) do\n            if n % i == 0 then return false end\n\
    \        end\n        return true\n    end\n    local function getIntersection(interval1,\
    \ interval2)\n        local start = math.max(interval1[1], interval2[1])\n   \
    \     local finish = math.min(interval1[2], interval2[2])\n        if start >\
    \ finish then return nil end\n        return {start, finish}\n    end\n    local\
    \ intersection = getIntersection(interval1, interval2)\n    if intersection ==\
    \ nil then return 'NO' end\n    local length = intersection[2] - intersection[1]\
    \ + 1\n    return isPrime(length) and 'YES' or 'NO'\nend", "    local start =\
    \ math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    for i = 2, math.sqrt(len) do\n        if\
    \ len % i == 0 then\n            return 'NO'\n        end\n    end\n    return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i\
    \ == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, length\
    \ - 1 do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length < 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start1, end1 = interval1[1], interval1[2]\n  local start2, end2 = interval2[1],\
    \ interval2[2]\n  local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n  if start > end then return 'NO' end\n  local len = end - start + 1\n\
    \  local is_prime = true\n  for i = 2, math.sqrt(len) do\n    if len % i == 0\
    \ then\n      is_prime = false\n      break\n    end\n  end\n  return is_prime\
    \ and 'YES' or 'NO'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  local length = finish\
    \ - start + 1\n  if length < 1 then return 'NO' end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length <= 0 then\n\
    \    return 'NO'\n  end\n  local is_prime = true\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      is_prime = false\n      break\n    end\n\
    \  end\n  return is_prime and 'YES' or 'NO'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local len = finish - start + 1\n  if\
    \ len == 1 then\n    return 'NO'\n  end\n  local isPrime = true\n  for i = 2,\
    \ math.sqrt(len) do\n    if len % i == 0 then\n      isPrime = false\n      break\n\
    \    end\n  end\n  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n\
    \  end\nend", "  local start = math.max(interval1[1], interval2[1])\n  local finish\
    \ = math.min(interval1[2], interval2[2])\n  if start > finish then\n    return\
    \ 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n  \
    \  return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local\
    \ start1, end1 = interval1[1], interval1[2]\n    local start2, end2 = interval2[1],\
    \ interval2[2]\n    local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n    if start > end then return 'NO' end\n    local len = end - start\
    \ + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n\
    \        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local len = finish - start + 1\n  if len < 1 then return 'NO'\
    \ end\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  for _, p in ipairs(primes) do\n \
    \   if len == p then return 'YES' end\n  end\n  return 'NO'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    local is_prime = true\n    for i = 2,\
    \ math.sqrt(length) do\n        if length % i == 0 then\n            is_prime\
    \ = false\n            break\n        end\n    end\n    if is_prime then\n   \
    \     return 'YES'\n    else\n        return 'NO'\n    end\nend", "    local start\
    \ = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length < 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if\
    \ length % i == 0 then\n            return 'NO'\n        end\n    end\n    return\
    \ 'YES'\nend", "    local function isPrime(n)\n        if n < 2 then return false\
    \ end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then return\
    \ false end\n        end\n        return true\n    end\n    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then return 'NO' end\n    return isPrime(finish - start +\
    \ 1) and 'YES' or 'NO'\nend", "    local start1, end1 = interval1[1], interval1[2]\n\
    \    local start2, end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1,\
    \ start2), math.min(end1, end2)\n    if start > end then return 'NO' end\n   \
    \ local len = end - start + 1\n    if len == 1 then return 'NO' end\n    for i\
    \ = 2, math.sqrt(len) do\n        if len % i == 0 then return 'NO' end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    local length = finish\
    \ - start + 1\n    if length < 0 then return 'NO' end\n    local is_prime = true\n\
    \    for i = 2, math.floor(math.sqrt(length)) do\n        if length % i == 0 then\n\
    \            is_prime = false\n            break\n        end\n    end\n    return\
    \ is_prime and 'YES' or 'NO'\nend", "    local start1, end1 = interval1[1], interval1[2]\n\
    \    local start2, end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1,\
    \ start2), math.min(end1, end2)\n    if start > end then return 'NO' end\n   \
    \ local len = end - start + 1\n    if len == 1 then return 'NO' end\n    for i\
    \ = 2, math.sqrt(len) do\n        if len % i == 0 then return 'NO' end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local stop = math.min(interval1[2], interval2[2])\n  local length = stop -\
    \ start + 1\n  if length < 1 then\n    return 'NO'\n  end\n  for i = 2, math.floor(math.sqrt(length))\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local len = finish - start + 1\n  local isPrime = true\n\
    \  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n      isPrime = false\n\
    \      break\n    end\n  end\n  if isPrime then\n    return 'YES'\n  else\n  \
    \  return 'NO'\n  end\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length < 1 then\n        return 'NO'\n\
    \    end\n    local isPrime = true\n    for i = 2, math.floor(math.sqrt(length))\
    \ do\n        if length % i == 0 then\n            isPrime = false\n         \
    \   break\n        end\n    end\n    return isPrime and 'YES' or 'NO'\nend", " \
    \   local start1, end1 = interval1[1], interval1[2]\n    local start2, end2 =\
    \ interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0\
    \ then return 'NO' end\n    end\n    return 'YES'\nend", "    local start1, end1\
    \ = interval1[1], interval1[2]\n    local start2, end2 = interval2[1], interval2[2]\n\
    \    local start, end = math.max(start1, start2), math.min(end1, end2)\n    if\
    \ start > end then return 'NO' end\n    local len = end - start + 1\n    if len\
    \ == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend", "  local function\
    \ isPrime(n)\n    if n <= 1 then return false end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local function getIntersection(interval1, interval2)\n    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then return nil end\n    return {start, finish}\n  end\n \
    \ local function getLength(interval)\n    return interval[2] - interval[1] + 1\n\
    \  end\n  local intersection = getIntersection(interval1, interval2)\n  if intersection\
    \ == nil then return 'NO' end\n  return isPrime(getLength(intersection)) and 'YES'\
    \ or 'NO'\nend", "    local start = math.max(interval1[1], interval2[1])\n   \
    \ local finish = math.min(interval1[2], interval2[2])\n    local length = finish\
    \ - start + 1\n    if length <= 0 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n      \
    \      return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start\
    \ = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length <= 0 then\n\
    \        return 'NO'\n    end\n    local isPrime = true\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            isPrime = false\n         \
    \   break\n        end\n    end\n    return isPrime and 'YES' or 'NO'\nend", " \
    \   local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length < 0 then\n\
    \        return 'NO'\n    end\n    local prime = true\n    for i = 2, math.floor(math.sqrt(length))\
    \ do\n        if length % i == 0 then\n            prime = false\n           \
    \ break\n        end\n    end\n    return prime and 'YES' or 'NO'\nend", "   \
    \ local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    local is_prime = true\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            is_prime = false\n           \
    \ break\n        end\n    end\n    if is_prime then\n        return 'YES'\n  \
    \  else\n        return 'NO'\n    end\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    for i = 2, math.sqrt(length) do\n        if length % i == 0\
    \ then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 1 then\n \
    \   return 'NO'\n  end\n  if length == 1 then\n    return 'YES'\n  end\n  for\
    \ i = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local stop = math.min(interval1[2], interval2[2])\n  if start\
    \ > stop then return 'NO' end\n  local len = stop - start + 1\n  if len == 1 then\
    \ return 'NO' end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then return\
    \ 'NO' end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length < 1 then\n        return 'NO'\n\
    \    end\n    if length == 1 then\n        return 'YES'\n    end\n    if length\
    \ == 2 then\n        return 'NO'\n    end\n    for i = 2, math.floor(math.sqrt(length))\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local length = finish - start + 1\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i\
    \ == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    local isPrime = true\n    for i = 2, math.floor(math.sqrt(length)) do\n \
    \       if length % i == 0 then\n            isPrime = false\n            break\n\
    \        end\n    end\n    if isPrime then\n        return 'YES'\n    else\n \
    \       return 'NO'\n    end\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  local length = finish\
    \ - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n  if length == 1\
    \ then\n    return 'YES'\n  end\n  for i = 2, length - 1 do\n    if length % i\
    \ == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start1, end1 =\
    \ interval1[1], interval1[2]\n  local start2, end2 = interval2[1], interval2[2]\n\
    \  local start, end = math.max(start1, start2), math.min(end1, end2)\n  if start\
    \ > end then return 'NO' end\n  local len = end - start + 1\n  if len == 1 then\
    \ return 'NO' end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then return\
    \ 'NO' end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ length = finish - start + 1\n  if length <= 0 then\n    return 'NO'\n  end\n\
    \  for i = 2, length - 1 do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.floor(math.sqrt(length)) do\n        if length\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local length = finish - start + 1\n    for i = 2,\
    \ math.sqrt(length) do\n        if length % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ length = finish - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n\
    \  for i = 2, math.floor(math.sqrt(length)) do\n    if length % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.sqrt(len) do\n        if len % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local length = finish - start + 1\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "    local a, b = interval1[1], interval1[2]\n    local c, d =\
    \ interval2[1], interval2[2]\n    local start, finish = math.max(a, c), math.min(b,\
    \ d)\n    if start > finish then return 'NO' end\n    local len = finish - start\
    \ + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then return 'NO'\
    \ end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.sqrt(len) do\n        if len % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n    local\
    \ finish = math.min(interval1[2], interval2[2])\n    if start > finish then\n\
    \        return 'NO'\n    end\n    local length = finish - start + 1\n    if length\
    \ == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n\
    \        if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1\
    \ then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length\
    \ % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  \
    \  local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length == 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\nend",
  "    local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length < 2 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  local is_prime = true\n  for i = 2, math.sqrt(len) do\n\
    \    if len % i == 0 then\n      is_prime = false\n      break\n    end\n  end\n\
    \  if is_prime then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend", " \
    \   local start1, end1 = interval1[1], interval1[2]\n    local start2, end2 =\
    \ interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local len = finish - start + 1\n    if len == 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local len = finish - start + 1\n    if len == 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end1 then\n        start1,\
    \ end1 = end1, start1\n    end\n    if start2 > end2 then\n        start2, end2\
    \ = end2, start2\n    end\n    if start1 > end2 or start2 > end1 then\n      \
    \  return 'NO'\n    end\n    local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n    local len = end - start + 1\n    if len <= 1 then\n        return\
    \ 'NO'\n    end\n    for i = 2, math.floor(math.sqrt(len)) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local length = finish - start + 1\n    if length ==\
    \ 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n\
    \        if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  local length = finish\
    \ - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n  for i = 2, length\
    \ - 1 do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  local length = finish - start\
    \ + 1\n  if length <= 0 then\n    return 'NO'\n  end\n  local isPrime = true\n\
    \  for i = 2, math.sqrt(length) do\n    if length % i == 0 then\n      isPrime\
    \ = false\n      break\n    end\n  end\n  return isPrime and 'YES' or 'NO'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ length = finish - start + 1\n  if length < 1 then\n    return 'NO'\n  end\n\
    \  for i = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return\
    \ 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  for i = 2, math.floor(math.sqrt(length)) do\n    if length % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    local is_prime = true\n    for i = 2, math.sqrt(length) do\n\
    \        if length % i == 0 then\n            is_prime = false\n            break\n\
    \        end\n    end\n    if is_prime then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend", "  local start1, end1 = interval1[1], interval1[2]\n\
    \  local start2, end2 = interval2[1], interval2[2]\n  local start, end = math.max(start1,\
    \ start2), math.min(end1, end2)\n  if start > end then return 'NO' end\n  local\
    \ len = end - start + 1\n  if len == 1 then return 'NO' end\n  for i = 2, math.sqrt(len)\
    \ do\n    if len % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend", " \
    \ local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 0 then return\
    \ 'NO' end\n  if length == 1 then return 'NO' end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  local length = finish - start + 1\n  if length < 1 then return\
    \ 'NO' end\n  for i = 2, math.sqrt(length) do\n    if length % i == 0 then return\
    \ 'NO' end\n  end\n  return 'YES'\nend", "  local start1, end1 = interval1[1],\
    \ interval1[2]\n  local start2, end2 = interval2[1], interval2[2]\n  local start,\
    \ end = math.max(start1, start2), math.min(end1, end2)\n  if start > end then\
    \ return 'NO' end\n  local len = end - start + 1\n  if len == 1 then return 'NO'\
    \ end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then return 'NO' end\n\
    \  end\n  return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local len = finish - start + 1\n  for i = 2, math.sqrt(len)\
    \ do\n    if len % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0\
    \ then return 'NO' end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    local is_prime = true\n    for i = 2, math.sqrt(len) do\n \
    \       if len % i == 0 then\n            is_prime = false\n            break\n\
    \        end\n    end\n    if is_prime then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length <= 0 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.floor(math.sqrt(length)) do\n        if length %\
    \ i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local len = finish - start + 1\n    if len == 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "  local start = math.max(interval1[1], interval2[1])\n  local finish =\
    \ math.min(interval1[2], interval2[2])\n  if start > finish then\n    return 'NO'\n\
    \  end\n  local length = finish - start + 1\n  local isPrime = true\n  for i =\
    \ 2, math.floor(math.sqrt(length)) do\n    if length % i == 0 then\n      isPrime\
    \ = false\n      break\n    end\n  end\n  if isPrime then\n    return 'YES'\n\
    \  else\n    return 'NO'\n  end\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.floor(math.sqrt(len)) do\n        if len % i == 0 then\n           \
    \ return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start1,\
    \ end1 = interval1[1], interval1[2]\n    local start2, end2 = interval2[1], interval2[2]\n\
    \    local start, end = math.max(start1, start2), math.min(end1, end2)\n    if\
    \ start > end then return 'NO' end\n    local len = end - start + 1\n    if len\
    \ == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend", "    local start\
    \ = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local length = finish - start + 1\n    if length < 2 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length <= 0 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.floor(math.sqrt(length)) do\n\
    \        if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    local length = finish\
    \ - start + 1\n    if length < 1 then\n        return 'NO'\n    end\n    local\
    \ isPrime = true\n    for i = 2, math.sqrt(length) do\n        if length % i ==\
    \ 0 then\n            isPrime = false\n            break\n        end\n    end\n\
    \    return isPrime and 'YES' or 'NO'\nend", "    local start, end_ = math.max(interval1[1],\
    \ interval2[1]), math.min(interval1[2], interval2[2])\n    local length = end_\
    \ - start + 1\n    if length < 1 then return 'NO' end\n    for i = 2, math.floor(math.sqrt(length))\
    \ do\n        if length % i == 0 then return 'NO' end\n    end\n    return 'YES'\n\
    end", "  local start, end_ = math.max(interval1[1], interval2[1]), math.min(interval1[2],\
    \ interval2[2])\n  if start > end_ then return 'NO' end\n  local len = end_ -\
    \ start + 1\n  if len == 1 then return 'NO' end\n  for i = 2, math.sqrt(len) do\n\
    \    if len % i == 0 then return 'NO' end\n  end\n  return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start1, end1 = interval1[1], interval1[2]\n  local start2, end2 = interval2[1],\
    \ interval2[2]\n  local start, end\n  if start1 < start2 then\n    start = start2\n\
    \  else\n    start = start1\n  end\n  if end1 < end2 then\n    end = end1\n  else\n\
    \    end = end2\n  end\n  if start > end then\n    return 'NO'\n  end\n  local\
    \ len = end - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, len - 1 do\n    if len % i == 0 then\n      return 'NO'\n    end\n  end\n\
    \  return 'YES'\nend", "    local function isPrime(n)\n        if n < 2 then return\
    \ false end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\
    \ return false end\n        end\n        return true\n    end\n    local function\
    \ getIntersection(interval1, interval2)\n        local start = math.max(interval1[1],\
    \ interval2[1])\n        local finish = math.min(interval1[2], interval2[2])\n\
    \        if start > finish then return nil end\n        return {start, finish}\n\
    \    end\n    local intersection = getIntersection(interval1, interval2)\n   \
    \ if not intersection then return 'NO' end\n    return isPrime(intersection[2]\
    \ - intersection[1] + 1) and 'YES' or 'NO'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local len = finish\
    \ - start + 1\n    if len == 1 then\n        return 'NO'\n    end\n    for i =\
    \ 2, math.sqrt(len) do\n        if len % i == 0 then\n            return 'NO'\n\
    \        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  local\
    \ length = finish - start + 1\n  if length <= 0 then\n    return 'NO'\n  end\n\
    \  local isPrime = true\n  for i = 2, math.sqrt(length) do\n    if length % i\
    \ == 0 then\n      isPrime = false\n      break\n    end\n  end\n  return isPrime\
    \ and 'YES' or 'NO'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n      \
    \      return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length < 1 then\n        return 'NO'\n\
    \    end\n    local is_prime = true\n    for i = 2, math.sqrt(length) do\n   \
    \     if length % i == 0 then\n            is_prime = false\n            break\n\
    \        end\n    end\n    return is_prime and 'YES' or 'NO'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  local is_prime = true\n  for i = 2, math.sqrt(len) do\n\
    \    if len % i == 0 then\n      is_prime = false\n      break\n    end\n  end\n\
    \  if is_prime then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend", " \
    \   local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    for i = 2, math.floor(math.sqrt(len)) do\n\
    \        if len % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1\
    \ then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length\
    \ % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  \
    \  local start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start1, end1 = interval1[1], interval1[2]\n    local start2, end2 = interval2[1],\
    \ interval2[2]\n    local start, end = math.max(start1, start2), math.min(end1,\
    \ end2)\n    if start > end then return 'NO' end\n    local len = end - start\
    \ + 1\n    for i = 2, math.floor(math.sqrt(len)) do\n        if len % i == 0 then\
    \ return 'NO' end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ local length = finish - start + 1\n    if length <= 0 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(length) do\n        if length % i == 0 then\n\
    \            return 'NO'\n        end\n    end\n    return 'YES'\nend", "  local\
    \ start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  if len == 1 then\n    return 'NO'\n  end\n  for i =\
    \ 2, math.sqrt(len) do\n    if len % i == 0 then\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local length = finish - start + 1\n\
    \    if length == 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return 'NO'\n        end\n\
    \    end\n    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ if len == 1 then\n        return 'NO'\n    end\n    if len == 2 then\n     \
    \   return 'YES'\n    end\n    if len % 2 == 0 then\n        return 'NO'\n   \
    \ end\n    for i = 3, math.sqrt(len) do\n        if len % i == 0 then\n      \
    \      return 'NO'\n        end\n    end\n    return 'YES'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
