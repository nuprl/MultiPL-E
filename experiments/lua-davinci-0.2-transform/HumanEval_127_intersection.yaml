name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1,\
  \ 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local len = finish - start + 1\n    if len == 1 then\n\
    \        return 'NO'\n    end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    if len == 1 then return 'NO' end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then return 'NO' end\n    end\n    return 'YES'\n\
    end", "    local start1, end1 = interval1[1], interval1[2]\n    local start2,\
    \ end2 = interval2[1], interval2[2]\n    local start, end = math.max(start1, start2),\
    \ math.min(end1, end2)\n    if start > end then return 'NO' end\n    local len\
    \ = end - start + 1\n    for i = 2, math.sqrt(len) do\n        if len % i == 0\
    \ then return 'NO' end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    local\
    \ is_prime = true\n    for i = 2, math.sqrt(length) do\n        if length % i\
    \ == 0 then\n            is_prime = false\n            break\n        end\n  \
    \  end\n    if is_prime then\n        return 'YES'\n    else\n        return 'NO'\n\
    \    end\nend", "  local start = math.max(interval1[1], interval2[1])\n  local\
    \ finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n  \
    \  return 'NO'\n  end\n  local len = finish - start + 1\n  if len == 1 then\n\
    \    return 'NO'\n  end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n\
    \      return 'NO'\n    end\n  end\n  return 'YES'\nend", "  local start1, end1\
    \ = interval1[1], interval1[2]\n  local start2, end2 = interval2[1], interval2[2]\n\
    \  local start, end = math.max(start1, start2), math.min(end1, end2)\n  if start\
    \ > end then return 'NO' end\n  local len = end - start + 1\n  if len == 1 then\
    \ return 'NO' end\n  for i = 2, math.sqrt(len) do\n    if len % i == 0 then return\
    \ 'NO' end\n  end\n  return 'YES'\nend", "    local start = math.max(interval1[1],\
    \ interval2[1])\n    local finish = math.min(interval1[2], interval2[2])\n   \
    \ if start > finish then\n        return 'NO'\n    end\n    local length = finish\
    \ - start + 1\n    if length == 1 then\n        return 'NO'\n    end\n    for\
    \ i = 2, math.sqrt(length) do\n        if length % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "    local start1, end1\
    \ = interval1[1], interval1[2]\n    local start2, end2 = interval2[1], interval2[2]\n\
    \    local start, end = math.max(start1, start2), math.min(end1, end2)\n    if\
    \ start > end then return 'NO' end\n    local len = end - start + 1\n    if len\
    \ == 1 then return 'NO' end\n    for i = 2, math.sqrt(len) do\n        if len\
    \ % i == 0 then return 'NO' end\n    end\n    return 'YES'\nend", "  local start\
    \ = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local length\
    \ = finish - start + 1\n  if length == 1 then\n    return 'NO'\n  end\n  for i\
    \ = 2, math.sqrt(length) do\n    if length % i == 0 then\n      return 'NO'\n\
    \    end\n  end\n  return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local length = finish - start + 1\n\
    \  if length == 1 then\n    return 'NO'\n  end\n  for i = 2, math.sqrt(length)\
    \ do\n    if length % i == 0 then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n    local\
    \ finish = math.min(interval1[2], interval2[2])\n    local len = finish - start\
    \ + 1\n    if len <= 0 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return 'NO'\n        end\n   \
    \ end\n    return 'YES'\nend", "  local start = math.max(interval1[1], interval2[1])\n\
    \  local finish = math.min(interval1[2], interval2[2])\n  if start > finish then\n\
    \    return 'NO'\n  end\n  local len = finish - start + 1\n  for i = 2, math.sqrt(len)\
    \ do\n    if len % i == 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end", "    local start = math.max(interval1[1], interval2[1])\n    local finish\
    \ = math.min(interval1[2], interval2[2])\n    if start > finish then\n       \
    \ return 'NO'\n    end\n    local length = finish - start + 1\n    if length ==\
    \ 1 then\n        return 'NO'\n    end\n    for i = 2, math.sqrt(length) do\n\
    \        if length % i == 0 then\n            return 'NO'\n        end\n    end\n\
    \    return 'YES'\nend", "    local start = math.max(interval1[1], interval2[1])\n\
    \    local finish = math.min(interval1[2], interval2[2])\n    if start > finish\
    \ then\n        return 'NO'\n    end\n    local len = finish - start + 1\n   \
    \ for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n            return\
    \ 'NO'\n        end\n    end\n    return 'YES'\nend", "  local start = math.max(interval1[1],\
    \ interval2[1])\n  local finish = math.min(interval1[2], interval2[2])\n  if start\
    \ > finish then\n    return 'NO'\n  end\n  local len = finish - start + 1\n  if\
    \ len == 1 then\n    return 'NO'\n  end\n  local isPrime = true\n  for i = 2,\
    \ math.sqrt(len) do\n    if len % i == 0 then\n      isPrime = false\n      break\n\
    \    end\n  end\n  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n\
    \  end\nend", "  local start = math.max(interval1[1], interval2[1])\n  local finish\
    \ = math.min(interval1[2], interval2[2])\n  if start > finish then\n    return\
    \ 'NO'\n  end\n  local length = finish - start + 1\n  if length == 1 then\n  \
    \  return 'NO'\n  end\n  for i = 2, math.sqrt(length) do\n    if length % i ==\
    \ 0 then\n      return 'NO'\n    end\n  end\n  return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    if start > finish then\n        return 'NO'\n    end\n  \
    \  local len = finish - start + 1\n    if len == 1 then\n        return 'NO'\n\
    \    end\n    for i = 2, math.sqrt(len) do\n        if len % i == 0 then\n   \
    \         return 'NO'\n        end\n    end\n    return 'YES'\nend", "    local\
    \ start = math.max(interval1[1], interval2[1])\n    local finish = math.min(interval1[2],\
    \ interval2[2])\n    local length = finish - start + 1\n    if length < 1 then\n\
    \        return 'NO'\n    end\n    local is_prime = true\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            is_prime = false\n        \
    \    break\n        end\n    end\n    return is_prime and 'YES' or 'NO'\nend",
  "  local start = math.max(interval1[1], interval2[1])\n  local finish = math.min(interval1[2],\
    \ interval2[2])\n  if start > finish then\n    return 'NO'\n  end\n  local len\
    \ = finish - start + 1\n  local isPrime = true\n  for i = 2, math.sqrt(len) do\n\
    \    if len % i == 0 then\n      isPrime = false\n      break\n    end\n  end\n\
    \  if isPrime then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
