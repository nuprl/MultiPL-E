language: lua
name: HumanEval_111_histogram
results:
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n     \
    \   hist[letter] = (hist[letter] or 0) + 1\n        max = math.max(max, hist[letter])\n\
    \    end\n    local result = {}\n    for letter, count in pairs(hist) do\n   \
    \     if count == max then\n            result[letter] = count\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    local result = {}\n    for letter in string.gmatch(test,\
    \ \"%a\") do\n        if letters[letter] == nil then\n            letters[letter]\
    \ = 1\n        else\n            letters[letter] = letters[letter] + 1\n     \
    \   end\n        if letters[letter] > max then\n            max = letters[letter]\n\
    \        end\n    end\n    for letter, count in pairs(letters) do\n        if\
    \ count == max then\n            result[letter] = count\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if result[i] == nil then\n            result[i] = 1\n        else\n \
    \           result[i] = result[i] + 1\n        end\n        if result[i] > max\
    \ then\n            max = result[i]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    if letters[letter]\
    \ == nil then\n      letters[letter] = 1\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n    end\n    if letters[letter] > max then\n      max = letters[letter]\n\
    \    end\n  end\n  local result = {}\n  for letter, count in pairs(letters) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local count = {}\n    local max = 0\n    local result = {}\n\
    \    for letter in string.gmatch(test, \"%a\") do\n        if letters[letter]\
    \ == nil then\n            letters[letter] = 1\n        else\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n        if letters[letter] > max then\n\
    \            max = letters[letter]\n        end\n    end\n    for letter, value\
    \ in pairs(letters) do\n        if value == max then\n            result[letter]\
    \ = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    result[word]\
    \ = (result[word] or 0) + 1\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if\
    \ v == max then\n      result2[k] = v\n    end\n  end\n  return result2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for word in string.gmatch(test, '%S+') do\n        if result[word]\
    \ == nil then\n            result[word] = 1\n        else\n            result[word]\
    \ = result[word] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsarquztb.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpsarquztb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  for k, v in pairs(result) do\n    if v ~= max then\n      result[k] = nil\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%a+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local max_list = {}\n    for k, v in pairs(result) do\n        if v == max\
    \ then\n            max_list[k] = v\n        end\n    end\n    return max_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if t[i]\
    \ == nil then\n      t[i] = 1\n    else\n      t[i] = t[i] + 1\n    end\n    if\
    \ t[i] > max then\n      max = t[i]\n    end\n  end\n  local result = {}\n  for\
    \ k, v in pairs(t) do\n    if v == max then\n      result[k] = v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local letter = test:sub(i, i)\n    if letter\
    \ ~= ' ' then\n      hist[letter] = (hist[letter] or 0) + 1\n    end\n  end\n\
    \  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5alhvyx7.lua:30:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp5alhvyx7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifuwszt.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpgifuwszt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n     \
    \   hist[letter] = (hist[letter] or 0) + 1\n        max = math.max(max, hist[letter])\n\
    \    end\n    local result = {}\n    for letter, count in pairs(hist) do\n   \
    \     if count == max then\n            result[letter] = count\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ t = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n  \
    \      if t[i] == nil then\n            t[i] = 1\n        else\n            t[i]\
    \ = t[i] + 1\n        end\n        if t[i] > max then\n            max = t[i]\n\
    \        end\n    end\n    local r = {}\n    for k, v in pairs(t) do\n       \
    \ if v == max then\n            r[k] = v\n        end\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    for letter in test:gmatch('%a') do\n        if letters[letter]\
    \ then\n            letters[letter] = letters[letter] + 1\n        else\n    \
    \        letters[letter] = 1\n        end\n    end\n    local max = 0\n    for\
    \ _, count in pairs(letters) do\n        if count > max then\n            max\
    \ = count\n        end\n    end\n    local result = {}\n    for letter, count\
    \ in pairs(letters) do\n        if count == max then\n            result[letter]\
    \ = count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local final = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            final[k] = v\n        end\n    end\n    return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for word in string.gmatch(test, \"%a+\") do\n\
    \        if hist[word] == nil then\n            hist[word] = 1\n        else\n\
    \            hist[word] = hist[word] + 1\n        end\n        if hist[word] >\
    \ max then\n            max = hist[word]\n        end\n    end\n    local result\
    \ = {}\n    for word, count in pairs(hist) do\n        if count == max then\n\
    \            result[word] = count\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  local result = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    if letters[letter] == nil then\n      letters[letter] = 1\n  \
    \  else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, count\
    \ in pairs(letters) do\n    if count == max then\n      result[letter] = count\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t\
    \ = {}\n  local max = 0\n  for w in string.gmatch(test, \"%S+\") do\n    t[w]\
    \ = (t[w] or 0) + 1\n    if t[w] > max then\n      max = t[w]\n    end\n  end\n\
    \  local r = {}\n  for k, v in pairs(t) do\n    if v == max then\n      r[k] =\
    \ v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local final = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            final[k] = v\n        end\n    end\n    return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    if not hist[c]\
    \ then\n      hist[c] = 1\n    else\n      hist[c] = hist[c] + 1\n    end\n  end\n\
    \  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38v381vi.lua:31:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmp38v381vi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return {[max_letters]\
    \ = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsz36qxn.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpqsz36qxn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for i in string.gmatch(test, \"%S+\") do\n        if result[i]\
    \ then\n            result[i] = result[i] + 1\n        else\n            result[i]\
    \ = 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujph3vkb.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpujph3vkb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    result[word]\
    \ = (result[word] or 0) + 1\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if\
    \ v == max then\n      result2[k] = v\n    end\n  end\n  return result2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histogram\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    histogram[letter] = (histogram[letter] or 0) + 1\n    if histogram[letter]\
    \ > max then\n      max = histogram[letter]\n      max_letters = {letter}\n  \
    \  elseif histogram[letter] == max then\n      table.insert(max_letters, letter)\n\
    \    end\n  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74fvlnwx.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp74fvlnwx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for i in string.gmatch(test, \"%S+\") do\n        if result[i]\
    \ then\n            result[i] = result[i] + 1\n        else\n            result[i]\
    \ = 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujph3vkb.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpujph3vkb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local final = {}\n  for word, count in pairs(result) do\n \
    \   if count == max then\n      final[word] = count\n    end\n  end\n  return\
    \ final\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    for i = 1, #test do\n        local letter = test:sub(i, i)\n\
    \        if letters[letter] then\n            letters[letter] = letters[letter]\
    \ + 1\n        else\n            letters[letter] = 1\n        end\n    end\n \
    \   local max = 0\n    for _, v in pairs(letters) do\n        if v > max then\n\
    \            max = v\n        end\n    end\n    local result = {}\n    for k,\
    \ v in pairs(letters) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_iquq46.lua:43:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3}\nstack traceback:\n\t/tmp/tmpl_iquq46.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local letter = test:sub(i, i)\n    if hist[letter]\
    \ then\n      hist[letter] = hist[letter] + 1\n    else\n      hist[letter] =\
    \ 1\n    end\n  end\n  local max = 0\n  for _, v in pairs(hist) do\n    if v >\
    \ max then\n      max = v\n    end\n  end\n  local result = {}\n  for k, v in\
    \ pairs(hist) do\n    if v == max then\n      result[k] = v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s2snqsh.lua:43:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3}\nstack traceback:\n\t/tmp/tmp0s2snqsh.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for letter in test:gmatch(\"%a\") do\n    hist[letter]\
    \ = (hist[letter] or 0) + 1\n    max = math.max(max, hist[letter])\n  end\n  local\
    \ result = {}\n  for letter, count in pairs(hist) do\n    if count == max then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histogram\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%a+\") do\n    if\
    \ not histogram[word] then\n      histogram[word] = 1\n    else\n      histogram[word]\
    \ = histogram[word] + 1\n    end\n    if histogram[word] > max then\n      max\
    \ = histogram[word]\n    end\n  end\n  local result = {}\n  for k, v in pairs(histogram)\
    \ do\n    if v == max then\n      result[k] = v\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    local max_letters = {}\n    for letter\
    \ in test:gmatch('%a') do\n        if letters[letter] == nil then\n          \
    \  letters[letter] = 1\n        else\n            letters[letter] = letters[letter]\
    \ + 1\n        end\n        if letters[letter] > max then\n            max = letters[letter]\n\
    \            max_letters = {letter}\n        elseif letters[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxbpn1_3.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpqxbpn1_3.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local final = {}\n  for key, value in pairs(result) do\n  \
    \  if value == max then\n      final[key] = value\n    end\n  end\n  return final\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if letters[letter] == nil then\n      letters[letter] = 1\n\
    \    else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, count\
    \ in pairs(letters) do\n    if count == max then\n      result[letter] = count\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local dict\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if dict[letter] == nil then\n      dict[letter] = 1\n    else\n\
    \      dict[letter] = dict[letter] + 1\n    end\n    if dict[letter] > max then\n\
    \      max = dict[letter]\n      max_letters = {letter}\n    elseif dict[letter]\
    \ == max then\n      table.insert(max_letters, letter)\n    end\n  end\n  return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperp1b7ww.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmperp1b7ww.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n  \
    \      letters[letter] = (letters[letter] or 0) + 1\n        max = math.max(max,\
    \ letters[letter])\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n        if count == max then\n            result[letter] = count\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   if c ~= ' ' then\n            hist[c] = (hist[c] or 0) + 1\n        end\n\
    \    end\n    return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rj3rsih.lua:30:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp1rj3rsih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%a+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local result2 = {}\n  for key, value in pairs(result) do\n\
    \    if value == max then\n      result2[key] = value\n    end\n  end\n  return\
    \ result2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if hist[letter] == nil then\n      \
    \      hist[letter] = 1\n        else\n            hist[letter] = hist[letter]\
    \ + 1\n        end\n        if hist[letter] > max then\n            max = hist[letter]\n\
    \            max_letters = {letter}\n        elseif hist[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8405qo1b.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp8405qo1b.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histogram = {}\n    local max = 0\n    local max_letters = {}\n    for letter\
    \ in string.gmatch(test, '%a') do\n        histogram[letter] = (histogram[letter]\
    \ or 0) + 1\n        if histogram[letter] > max then\n            max = histogram[letter]\n\
    \            max_letters = {letter}\n        elseif histogram[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02juqi5s.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp02juqi5s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n  \
    \      if letters[letter] == nil then\n            letters[letter] = 1\n     \
    \   else\n            letters[letter] = letters[letter] + 1\n        end\n   \
    \     if letters[letter] > max then\n            max = letters[letter]\n     \
    \   end\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n        if count == max then\n            result[letter] = count\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    if c ~= ' ' then\n\
    \      hist[c] = (hist[c] or 0) + 1\n    end\n  end\n  return hist\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegbckmjs.lua:30:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpegbckmjs.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local final = {}\n  for k, v in pairs(result) do\n    if v == max then\n  \
    \    final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histogram = {}\n    local max = 0\n    local max_letters = {}\n    for letter\
    \ in string.gmatch(test, '%a') do\n        if not histogram[letter] then\n   \
    \         histogram[letter] = 1\n        else\n            histogram[letter] =\
    \ histogram[letter] + 1\n        end\n        if histogram[letter] > max then\n\
    \            max = histogram[letter]\n            max_letters = {letter}\n   \
    \     elseif histogram[letter] == max then\n            table.insert(max_letters,\
    \ letter)\n        end\n    end\n    return {[max_letters[1]] = max}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb61lsixb.lua:38:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpb61lsixb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local res = {}\n    for k, v in\
    \ pairs(hist) do\n        if v == max then\n            res[k] = v\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for letter in test:gmatch('%a') do\n    result[letter] = (result[letter]\
    \ or 0) + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ztstvio.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp1ztstvio.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    result[word]\
    \ = (result[word] or 0) + 1\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local max_words = {}\n  for word, count in pairs(result) do\n\
    \    if count == max then\n      max_words[word] = count\n    end\n  end\n  return\
    \ max_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local max_result = {}\n    for k, v in pairs(result) do\n        if v ==\
    \ max then\n            max_result[k] = v\n        end\n    end\n    return max_result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        hist[c] = (hist[c] or 0) + 1\n        max = math.max(max, hist[c])\n\
    \    end\n    local result = {}\n    for k, v in pairs(hist) do\n        if v\
    \ == max then\n            result[k] = v\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptru_5xw7.lua:35:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3}\nstack traceback:\n\t/tmp/tmptru_5xw7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    for i = 1, #test do\n        local letter\
    \ = test:sub(i, i)\n        if letters[letter] == nil then\n            letters[letter]\
    \ = 1\n        else\n            letters[letter] = letters[letter] + 1\n     \
    \   end\n        if letters[letter] > max then\n            max = letters[letter]\n\
    \        end\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n        if count == max then\n            result[letter] = count\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypsq_ykf.lua:41:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3}\nstack traceback:\n\t/tmp/tmpypsq_ykf.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if hist[c] == nil then\n            hist[c] = 1\n        else\n\
    \            hist[c] = hist[c] + 1\n        end\n        if hist[c] > max then\n\
    \            max = hist[c]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx09bz5gx.lua:41:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3}\nstack traceback:\n\t/tmp/tmpx09bz5gx.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histogram\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    histogram[letter]\
    \ = (histogram[letter] or 0) + 1\n    max = math.max(max, histogram[letter])\n\
    \  end\n  local result = {}\n  for letter, count in pairs(histogram) do\n    if\
    \ count == max then\n      result[letter] = count\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyfr2g.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpfhpyfr2g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for letter in test:gmatch('%a') do\n        hist[letter] = (hist[letter]\
    \ or 0) + 1\n    end\n    return hist\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4a7phbc.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpj4a7phbc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if hist[i]\
    \ == nil then\n      hist[i] = 1\n    else\n      hist[i] = hist[i] + 1\n    end\n\
    \    if hist[i] > max then\n      max = hist[i]\n    end\n  end\n  local result\
    \ = {}\n  for k, v in pairs(hist) do\n    if v == max then\n      result[k] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if result[letter] == nil then\n      result[letter] = 1\n  \
    \  else\n      result[letter] = result[letter] + 1\n    end\n    if result[letter]\
    \ > max then\n      max = result[letter]\n      max_letters = {letter}\n    elseif\
    \ result[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  for _, letter in ipairs(max_letters) do\n    result[letter] = max\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3ol4gqw.lua:42:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpn3ol4gqw.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ t = {}\n    for i in string.gmatch(test, \"%S+\") do\n        if t[i] then\n\
    \            t[i] = t[i] + 1\n        else\n            t[i] = 1\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s73yksk.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp1s73yksk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return {[max_letters]\
    \ = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsz36qxn.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpqsz36qxn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histogram = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\"\
    ) do\n        if histogram[i] == nil then\n            histogram[i] = 1\n    \
    \    else\n            histogram[i] = histogram[i] + 1\n        end\n        if\
    \ histogram[i] > max then\n            max = histogram[i]\n        end\n    end\n\
    \    local result = {}\n    for k, v in pairs(histogram) do\n        if v == max\
    \ then\n            result[k] = v\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyfr2g.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpfhpyfr2g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    for letter in test:gmatch('%a') do\n        if letters[letter]\
    \ then\n            letters[letter] = letters[letter] + 1\n        else\n    \
    \        letters[letter] = 1\n        end\n    end\n    local max = 0\n    for\
    \ _, count in pairs(letters) do\n        if count > max then\n            max\
    \ = count\n        end\n    end\n    local result = {}\n    for letter, count\
    \ in pairs(letters) do\n        if count == max then\n            result[letter]\
    \ = count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for letter in string.gmatch(test, \"%a\"\
    ) do\n        if result[letter] == nil then\n            result[letter] = 1\n\
    \        else\n            result[letter] = result[letter] + 1\n        end\n\
    \        if result[letter] > max then\n            max = result[letter]\n    \
    \    end\n    end\n    local max_letters = {}\n    for letter, count in pairs(result)\
    \ do\n        if count == max then\n            max_letters[letter] = count\n\
    \        end\n    end\n    return max_letters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if letters[letter] == nil then\n      letters[letter] = 1\n\
    \    else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, count\
    \ in pairs(letters) do\n    if count == max then\n      result[letter] = count\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  local result = {}\n  for _, letter in ipairs(max_letters) do\n    result[letter]\
    \ = max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if t[i]\
    \ == nil then\n      t[i] = 1\n    else\n      t[i] = t[i] + 1\n    end\n    if\
    \ t[i] > max then\n      max = t[i]\n    end\n  end\n  local result = {}\n  for\
    \ k, v in pairs(t) do\n    if v == max then\n      result[k] = v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifuwszt.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpgifuwszt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local final = {}\n  for k, v in pairs(result) do\n    if v\
    \ == max then\n      final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%S+\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_fo983r.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpo_fo983r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if result[i] == nil then\n            result[i] = 1\n        else\n \
    \           result[i] = result[i] + 1\n        end\n        if result[i] > max\
    \ then\n            max = result[i]\n        end\n    end\n    local result2 =\
    \ {}\n    for k, v in pairs(result) do\n        if v == max then\n           \
    \ result2[k] = v\n        end\n    end\n    return result2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkdtscda.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpvkdtscda.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return max_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8c2dewq.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpl8c2dewq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    result[i]\
    \ = (result[i] or 0) + 1\n    if result[i] > max then\n      max = result[i]\n\
    \    end\n  end\n  local final = {}\n  for k, v in pairs(result) do\n    if v\
    \ == max then\n      final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifuwszt.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpgifuwszt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ dict = {}\n    local max = 0\n    local max_keys = {}\n    for i in string.gmatch(test,\
    \ \"%S+\") do\n        if dict[i] == nil then\n            dict[i] = 1\n     \
    \   else\n            dict[i] = dict[i] + 1\n        end\n        if dict[i] >\
    \ max then\n            max = dict[i]\n            max_keys = {i}\n        elseif\
    \ dict[i] == max then\n            table.insert(max_keys, i)\n        end\n  \
    \  end\n    local result = {}\n    for _, key in ipairs(max_keys) do\n       \
    \ result[key] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t\
    \ = {}\n  local max = 0\n  local max_letter = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if t[letter] == nil then\n      t[letter] = 1\n    else\n  \
    \    t[letter] = t[letter] + 1\n    end\n    if t[letter] > max then\n      max\
    \ = t[letter]\n      max_letter = {letter}\n    elseif t[letter] == max then\n\
    \      table.insert(max_letter, letter)\n    end\n  end\n  return max_letter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfo1j24e.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpmfo1j24e.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local final = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            final[k] = v\n        end\n    end\n    return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local final = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            final[k] = v\n        end\n    end\n    return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    result[i]\
    \ = (result[i] or 0) + 1\n    if result[i] > max then\n      max = result[i]\n\
    \    end\n  end\n  local res = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      res[k] = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifuwszt.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpgifuwszt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    if result[word] then\n\
    \      result[word] = result[word] + 1\n    else\n      result[word] = 1\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5uh92fi.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpv5uh92fi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyfr2g.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpfhpyfr2g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histogram\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%S+\") do\n    histogram[letter] = (histogram[letter] or 0) + 1\n    if histogram[letter]\
    \ > max then\n      max = histogram[letter]\n      max_letters = {letter}\n  \
    \  elseif histogram[letter] == max then\n      table.insert(max_letters, letter)\n\
    \    end\n  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1j7ba76.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpx1j7ba76.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i] == nil then\n\
    \      result[i] = 1\n    else\n      result[i] = result[i] + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcppaoaeq.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcppaoaeq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for i in string.gmatch(test, \"%S+\") do\n        result[i]\
    \ = (result[i] or 0) + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmyr9iq4.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpxmyr9iq4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    if c ~= ' ' then\n      hist[c] = (hist[c] or 0) + 1\n      if hist[c] >\
    \ max then\n        max = hist[c]\n      end\n    end\n  end\n  local result =\
    \ {}\n  for k, v in pairs(hist) do\n    if v == max then\n      result[k] = v\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local result2 = {}\n  for key, value in pairs(result) do\n\
    \    if value == max then\n      result2[key] = value\n    end\n  end\n  return\
    \ result2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  local result = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    if letters[letter] == nil then\n      letters[letter] = 1\n  \
    \  else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, count\
    \ in pairs(letters) do\n    if count == max then\n      result[letter] = count\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        hist[letter] = (hist[letter] or 0) +\
    \ 1\n        if hist[letter] > max then\n            max = hist[letter]\n    \
    \        max_letters = {letter}\n        elseif hist[letter] == max then\n   \
    \         table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj1mkiu7.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpnj1mkiu7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for i = 1, #test do\n        local letter = test:sub(i, i)\n\
    \        if hist[letter] == nil then\n            hist[letter] = 1\n        else\n\
    \            hist[letter] = hist[letter] + 1\n        end\n    end\n    return\
    \ hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnh5wp67.lua:31:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmpsnh5wp67.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local max_result = {}\n  for key, value in pairs(result) do\n\
    \    if value == max then\n      max_result[key] = value\n    end\n  end\n  return\
    \ max_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i = 1, #test do\n    local c = test:sub(i, i)\n\
    \    if c ~= ' ' then\n      hist[c] = (hist[c] or 0) + 1\n      if hist[c] >\
    \ max then\n        max = hist[c]\n      end\n    end\n  end\n  local res = {}\n\
    \  for k, v in pairs(hist) do\n    if v == max then\n      res[k] = v\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyfr2g.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpfhpyfr2g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local letter = test:sub(i, i)\n    if hist[letter]\
    \ then\n      hist[letter] = hist[letter] + 1\n    else\n      hist[letter] =\
    \ 1\n    end\n  end\n  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyhs8qcf.lua:31:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmpzyhs8qcf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histo = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n    \
    \    histo[letter] = (histo[letter] or 0) + 1\n        max = math.max(max, histo[letter])\n\
    \    end\n    local result = {}\n    for letter, count in pairs(histo) do\n  \
    \      if count == max then\n            result[letter] = count\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if result[i] then\n            result[i] = result[i] + 1\n        else\n\
    \            result[i] = 1\n        end\n        if result[i] > max then\n   \
    \         max = result[i]\n        end\n    end\n    local result2 = {}\n    for\
    \ k, v in pairs(result) do\n        if v == max then\n            result2[k] =\
    \ v\n        end\n    end\n    return result2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, '%S+') do\n\
    \        if result[word] == nil then\n            result[word] = 1\n        else\n\
    \            result[word] = result[word] + 1\n        end\n        if result[word]\
    \ > max then\n            max = result[word]\n        end\n    end\n    local\
    \ result2 = {}\n    for k, v in pairs(result) do\n        if v == max then\n \
    \           result2[k] = v\n        end\n    end\n    return result2\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if hist[i]\
    \ == nil then\n      hist[i] = 1\n    else\n      hist[i] = hist[i] + 1\n    end\n\
    \    if hist[i] > max then\n      max = hist[i]\n    end\n  end\n  local result\
    \ = {}\n  for k, v in pairs(hist) do\n    if v == max then\n      result[k] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, '%S+') do\n    if result[word]\
    \ == nil then\n      result[word] = 1\n    else\n      result[word] = result[word]\
    \ + 1\n    end\n    if result[word] > max then\n      max = result[word]\n   \
    \ end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      result2[k] = v\n    end\n  end\n  return result2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if result[letter] == nil then\n    \
    \        result[letter] = 1\n        else\n            result[letter] = result[letter]\
    \ + 1\n        end\n        if result[letter] > max then\n            max = result[letter]\n\
    \            max_letters = {letter}\n        elseif result[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    for\
    \ _, letter in ipairs(max_letters) do\n        result[letter] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3flcnsdc.lua:42:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp3flcnsdc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%S+\") do\n        if hist[letter] then\n            hist[letter]\
    \ = hist[letter] + 1\n        else\n            hist[letter] = 1\n        end\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return max_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4cpdxvc.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpn4cpdxvc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    if letters[letter]\
    \ == nil then\n      letters[letter] = 1\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n    end\n    if letters[letter] > max then\n      max = letters[letter]\n\
    \    end\n  end\n  local result = {}\n  for letter, count in pairs(letters) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for i in string.gmatch(test, \"%S+\") do\n        if result[i]\
    \ == nil then\n            result[i] = 1\n        else\n            result[i]\
    \ = result[i] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5liurl_n.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp5liurl_n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histogram = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n\
    \        histogram[letter] = (histogram[letter] or 0) + 1\n        max = math.max(max,\
    \ histogram[letter])\n    end\n    local result = {}\n    for letter, count in\
    \ pairs(histogram) do\n        if count == max then\n            result[letter]\
    \ = count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for c in test:gmatch('%a') do\n        hist[c]\
    \ = (hist[c] or 0) + 1\n        max = math.max(max, hist[c])\n    end\n    local\
    \ result = {}\n    for k, v in pairs(hist) do\n        if v == max then\n    \
    \        result[k] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    hist[letter]\
    \ = (hist[letter] or 0) + 1\n    max = math.max(max, hist[letter])\n  end\n  local\
    \ result = {}\n  for letter, count in pairs(hist) do\n    if count == max then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local final = {}\n  for k, v in pairs(result) do\n    if v\
    \ == max then\n      final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhpyfr2g.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpfhpyfr2g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local final = {}\n  for k, v in pairs(result) do\n    if v == max then\n  \
    \    final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for letter in string.gmatch(test, \"%S+\") do\n   \
    \ if result[letter] == nil then\n      result[letter] = 1\n    else\n      result[letter]\
    \ = result[letter] + 1\n    end\n    if result[letter] > max then\n      max =\
    \ result[letter]\n    end\n  end\n  local final = {}\n  for letter, count in pairs(result)\
    \ do\n    if count == max then\n      final[letter] = count\n    end\n  end\n\
    \  return final\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i = 1, #test do\n        local c = test:sub(i,\
    \ i)\n        if c ~= ' ' then\n            hist[c] = (hist[c] or 0) + 1\n   \
    \         if hist[c] > max then\n                max = hist[c]\n            end\n\
    \        end\n    end\n    local result = {}\n    for k, v in pairs(hist) do\n\
    \        if v == max then\n            result[k] = v\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for char in test:gmatch('%a') do\n    result[char]\
    \ = (result[char] or 0) + 1\n    max = math.max(max, result[char])\n  end\n  local\
    \ hist = {}\n  for k, v in pairs(result) do\n    if v == max then\n      hist[k]\
    \ = v\n    end\n  end\n  return hist\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if hist[i] == nil then\n            hist[i] = 1\n        else\n     \
    \       hist[i] = hist[i] + 1\n        end\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if hist[i] == nil then\n            hist[i] = 1\n        else\n     \
    \       hist[i] = hist[i] + 1\n        end\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local final = {}\n  for k, v in pairs(result) do\n    if v == max then\n  \
    \    final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histo = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if histo[letter] == nil then\n     \
    \       histo[letter] = 1\n        else\n            histo[letter] = histo[letter]\
    \ + 1\n        end\n        if histo[letter] > max then\n            max = histo[letter]\n\
    \            max_letters = {letter}\n        elseif histo[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    local\
    \ result = {}\n    for _, letter in ipairs(max_letters) do\n        result[letter]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    if hist[i] then\n    \
    \  hist[i] = hist[i] + 1\n    else\n      hist[i] = 1\n    end\n  end\n  return\
    \ hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie8xirrq.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpie8xirrq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for letter in test:gmatch(\"%S+\") do\n    if hist[letter]\
    \ == nil then\n      hist[letter] = 1\n    else\n      hist[letter] = hist[letter]\
    \ + 1\n    end\n    if hist[letter] > max then\n      max = hist[letter]\n   \
    \ end\n  end\n  local result = {}\n  for letter, count in pairs(hist) do\n   \
    \ if count == max then\n      result[letter] = count\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ hist[word] == nil then\n      hist[word] = 1\n    else\n      hist[word] = hist[word]\
    \ + 1\n    end\n    if hist[word] > max then\n      max = hist[word]\n    end\n\
    \  end\n  local result = {}\n  for word, count in pairs(hist) do\n    if count\
    \ == max then\n      result[word] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histogram\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    histogram[letter] = (histogram[letter] or 0) + 1\n    if histogram[letter]\
    \ > max then\n      max = histogram[letter]\n      max_letters = {letter}\n  \
    \  elseif histogram[letter] == max then\n      table.insert(max_letters, letter)\n\
    \    end\n  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zqyua5u.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp8zqyua5u.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ dict = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if dict[letter] == nil then\n      \
    \      dict[letter] = 1\n        else\n            dict[letter] = dict[letter]\
    \ + 1\n        end\n        if dict[letter] > max then\n            max = dict[letter]\n\
    \            max_letters = {letter}\n        elseif dict[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw1bo5vy.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpqw1bo5vy.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if hist[i] == nil then\n            hist[i] = 1\n        else\n     \
    \       hist[i] = hist[i] + 1\n        end\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter]\
    \ > max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      max_letters[#max_letters + 1] = letter\n   \
    \ end\n  end\n  return {[max_letters[1]] = max}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekojwvzz.lua:34:\
    \ expected: {a=2, b=2}\nactual: {b=2}\nstack traceback:\n\t/tmp/tmpekojwvzz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local final = {}\n  for k, v in pairs(result) do\n    if v == max then\n  \
    \    final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n     \
    \   hist[letter] = (hist[letter] or 0) + 1\n        max = math.max(max, hist[letter])\n\
    \    end\n    local result = {}\n    for letter, count in pairs(hist) do\n   \
    \     if count == max then\n            result[letter] = count\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if result[i] == nil then\n            result[i] = 1\n        else\n \
    \           result[i] = result[i] + 1\n        end\n        if result[i] > max\
    \ then\n            max = result[i]\n        end\n    end\n    local final = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            final[k]\
    \ = v\n        end\n    end\n    return final\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local dic\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    dic[i] = (dic[i] or 0)\
    \ + 1\n  end\n  return dic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3_1ho2y.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpq3_1ho2y.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if not hist[letter] then\n      hist[letter] = 1\n    else\n\
    \      hist[letter] = hist[letter] + 1\n    end\n    if hist[letter] > max then\n\
    \      max = hist[letter]\n      max_letters = {letter}\n    elseif hist[letter]\
    \ == max then\n      table.insert(max_letters, letter)\n    end\n  end\n  return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5me8c4v6.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmp5me8c4v6.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkdtscda.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpvkdtscda.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  for letter in test:gmatch('%a') do\n    letters[letter] = (letters[letter]\
    \ or 0) + 1\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28b11fg8.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp28b11fg8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] then\n      result[word] = result[word] + 1\n    else\n      result[word]\
    \ = 1\n    end\n    if result[word] > max then\n      max = result[word]\n   \
    \ end\n  end\n  local max_result = {}\n  for k, v in pairs(result) do\n    if\
    \ v == max then\n      max_result[k] = v\n    end\n  end\n  return max_result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for letter in test:gmatch('%w') do\n        hist[letter] = (hist[letter]\
    \ or 0) + 1\n    end\n    return hist\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm76xzfhe.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpm76xzfhe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkdtscda.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpvkdtscda.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for _, v in ipairs(test:split(' ')) do\n    hist[v]\
    \ = (hist[v] or 0) + 1\n    max = math.max(max, hist[v])\n  end\n  local result\
    \ = {}\n  for k, v in pairs(hist) do\n    if v == max then\n      result[k] =\
    \ v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqgezjfm.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpvqgezjfm.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpvqgezjfm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, '%S+') do\n    if hist[word]\
    \ == nil then\n      hist[word] = 1\n    else\n      hist[word] = hist[word] +\
    \ 1\n    end\n    if hist[word] > max then\n      max = hist[word]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ result[word] == nil then\n      result[word] = 1\n    else\n      result[word]\
    \ = result[word] + 1\n    end\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local final = {}\n  for k, v in pairs(result) do\n    if v\
    \ == max then\n      final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for i in string.gmatch(test, \"%S+\") do\n        if result[i]\
    \ == nil then\n            result[i] = 1\n        else\n            result[i]\
    \ = result[i] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5liurl_n.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp5liurl_n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgifuwszt.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpgifuwszt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for i = 1, #test do\n        local c = test:sub(i, i)\n     \
    \   if c ~= ' ' then\n            hist[c] = (hist[c] or 0) + 1\n        end\n\
    \    end\n    return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rj3rsih.lua:30:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp1rj3rsih.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, '%S+') do\n    if not\
    \ result[word] then\n      result[word] = 1\n    else\n      result[word] = result[word]\
    \ + 1\n    end\n    if result[word] > max then\n      max = result[word]\n   \
    \ end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      result2[k] = v\n    end\n  end\n  return result2\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local result2 = {}\n  for k, v in pairs(result) do\n    if v == max then\n\
    \      result2[k] = v\n    end\n  end\n  return result2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i] == nil then\n\
    \      result[i] = 1\n    else\n      result[i] = result[i] + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcppaoaeq.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcppaoaeq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if hist[letter] == nil then\n      \
    \      hist[letter] = 1\n        else\n            hist[letter] = hist[letter]\
    \ + 1\n        end\n        if hist[letter] > max then\n            max = hist[letter]\n\
    \            max_letters = {letter}\n        elseif hist[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    for\
    \ _, letter in ipairs(max_letters) do\n        hist[letter] = max\n    end\n \
    \   return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobnrhqmd.lua:42:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpobnrhqmd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    if result[word] ==\
    \ nil then\n      result[word] = 1\n    else\n      result[word] = result[word]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4a8j84d.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpp4a8j84d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local dict\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if dict[letter] == nil then\n      dict[letter] = 1\n    else\n\
    \      dict[letter] = dict[letter] + 1\n    end\n    if dict[letter] > max then\n\
    \      max = dict[letter]\n      max_letters = {letter}\n    elseif dict[letter]\
    \ == max then\n      table.insert(max_letters, letter)\n    end\n  end\n  local\
    \ result = {}\n  for _, letter in ipairs(max_letters) do\n    result[letter] =\
    \ max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local count = {}\n  local max = 0\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if letters[letter] == nil then\n      letters[letter] = 1\n\
    \    else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, value\
    \ in pairs(letters) do\n    if value == max then\n      count[letter] = value\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    if result[i]\
    \ == nil then\n      result[i] = 1\n    else\n      result[i] = result[i] + 1\n\
    \    end\n    if result[i] > max then\n      max = result[i]\n    end\n  end\n\
    \  local final = {}\n  for k, v in pairs(result) do\n    if v == max then\n  \
    \    final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local max_result = {}\n    for k, v in pairs(result) do\n        if v ==\
    \ max then\n            max_result[k] = v\n        end\n    end\n    return max_result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ histogram = {}\n    for word in string.gmatch(test, \"%S+\") do\n        if\
    \ histogram[word] then\n            histogram[word] = histogram[word] + 1\n  \
    \      else\n            histogram[word] = 1\n        end\n    end\n    return\
    \ histogram\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxj1roa_.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpkxj1roa_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histo\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    if histo[word] then\n\
    \      histo[word] = histo[word] + 1\n    else\n      histo[word] = 1\n    end\n\
    \  end\n  return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mm_8816.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp_mm_8816.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for word in string.gmatch(test, \"%a+\"\
    ) do\n        if result[word] == nil then\n            result[word] = 1\n    \
    \    else\n            result[word] = result[word] + 1\n        end\n        if\
    \ result[word] > max then\n            max = result[word]\n        end\n    end\n\
    \    local final = {}\n    for key, value in pairs(result) do\n        if value\
    \ == max then\n            final[key] = value\n        end\n    end\n    return\
    \ final\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    if result[word] ==\
    \ nil then\n      result[word] = 1\n    else\n      result[word] = result[word]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4a8j84d.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpp4a8j84d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return {[max_letters]\
    \ = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsz36qxn.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpqsz36qxn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if hist[i] == nil then\n            hist[i] = 1\n        else\n     \
    \       hist[i] = hist[i] + 1\n        end\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        if result[letter] == nil then\n    \
    \        result[letter] = 1\n        else\n            result[letter] = result[letter]\
    \ + 1\n        end\n        if result[letter] > max then\n            max = result[letter]\n\
    \            max_letters = {letter}\n        elseif result[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    for\
    \ _, letter in ipairs(max_letters) do\n        result[letter] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3flcnsdc.lua:42:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp3flcnsdc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    if hist[i] then\n    \
    \  hist[i] = hist[i] + 1\n    else\n      hist[i] = 1\n    end\n  end\n  return\
    \ hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie8xirrq.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpie8xirrq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    result[letter] = (result[letter] or 0) + 1\n    if result[letter]\
    \ > max then\n      max = result[letter]\n      max_letters = {letter}\n    elseif\
    \ result[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2e4um2l.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpf2e4um2l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n       \
    \     max = hist[i]\n        end\n    end\n    local result = {}\n    for k, v\
    \ in pairs(hist) do\n        if v == max then\n            result[k] = v\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if hist[i] == nil then\n            hist[i] = 1\n        else\n     \
    \       hist[i] = hist[i] + 1\n        end\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for char in test:gmatch('%w') do\n    hist[char] =\
    \ (hist[char] or 0) + 1\n    max = math.max(max, hist[char])\n  end\n  local result\
    \ = {}\n  for char, count in pairs(hist) do\n    if count == max then\n      result[char]\
    \ = count\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local dict\
    \ = {}\n  for word in string.gmatch(test, \"%a+\") do\n    if dict[word] == nil\
    \ then\n      dict[word] = 1\n    else\n      dict[word] = dict[word] + 1\n  \
    \  end\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqmukyem.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcqmukyem.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local dict\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if dict[letter] then\n      dict[letter] = dict[letter] + 1\n\
    \    else\n      dict[letter] = 1\n    end\n    if dict[letter] > max then\n \
    \     max = dict[letter]\n      max_letters = {letter}\n    elseif dict[letter]\
    \ == max then\n      table.insert(max_letters, letter)\n    end\n  end\n  return\
    \ max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwu3c9fx8.lua:38:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpwu3c9fx8.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return max_letters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8c2dewq.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpl8c2dewq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\") do\n\
    \        if result[i] == nil then\n            result[i] = 1\n        else\n \
    \           result[i] = result[i] + 1\n        end\n        if result[i] > max\
    \ then\n            max = result[i]\n        end\n    end\n    local res = {}\n\
    \    for k, v in pairs(result) do\n        if v == max then\n            res[k]\
    \ = v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        hist[letter] = (hist[letter] or 0) +\
    \ 1\n        if hist[letter] > max then\n            max = hist[letter]\n    \
    \        max_letters = {letter}\n        elseif hist[letter] == max then\n   \
    \         table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj1mkiu7.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpnj1mkiu7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i = 1, #test do\n    local c = test:sub(i, i)\n    if c ~= ' ' then\n\
    \      hist[c] = (hist[c] or 0) + 1\n    end\n  end\n  return hist\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegbckmjs.lua:30:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpegbckmjs.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local histo\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    histo[word] = (histo[word]\
    \ or 0) + 1\n  end\n  return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0geczk2i.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp0geczk2i.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    letters[letter]\
    \ = (letters[letter] or 0) + 1\n    max = math.max(max, letters[letter])\n  end\n\
    \  local result = {}\n  for letter, count in pairs(letters) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ letters = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n  \
    \      if letters[letter] == nil then\n            letters[letter] = 1\n     \
    \   else\n            letters[letter] = letters[letter] + 1\n        end\n   \
    \     if letters[letter] > max then\n            max = letters[letter]\n     \
    \   end\n    end\n    local result = {}\n    for letter, count in pairs(letters)\
    \ do\n        if count == max then\n            result[letter] = count\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local letters\
    \ = {}\n  local max = 0\n  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    if letters[letter] == nil then\n      letters[letter] = 1\n\
    \    else\n      letters[letter] = letters[letter] + 1\n    end\n    if letters[letter]\
    \ > max then\n      max = letters[letter]\n    end\n  end\n  for letter, count\
    \ in pairs(letters) do\n    if count == max then\n      result[letter] = count\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    for word in string.gmatch(test, \"%S+\") do\n\
    \        if hist[word] then\n            hist[word] = hist[word] + 1\n       \
    \ else\n            hist[word] = 1\n        end\n        if hist[word] > max then\n\
    \            max = hist[word]\n        end\n    end\n    local result = {}\n \
    \   for key, value in pairs(hist) do\n        if value == max then\n         \
    \   result[key] = value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  local max_letters = {}\n  for letter in string.gmatch(test,\
    \ '%a') do\n    hist[letter] = (hist[letter] or 0) + 1\n    if hist[letter] >\
    \ max then\n      max = hist[letter]\n      max_letters = {letter}\n    elseif\
    \ hist[letter] == max then\n      table.insert(max_letters, letter)\n    end\n\
    \  end\n  return max_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkdtscda.lua:34:\
    \ expected: {a=2, b=2}\nactual: {\"b\", \"a\"}\nstack traceback:\n\t/tmp/tmpvkdtscda.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i] = (hist[i] or\
    \ 0) + 1\n  end\n  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06c7447a.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp06c7447a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, '%a+') do\n    if result[word]\
    \ == nil then\n      result[word] = 1\n    else\n      result[word] = result[word]\
    \ + 1\n    end\n    if result[word] > max then\n      max = result[word]\n   \
    \ end\n  end\n  local final = {}\n  for k, v in pairs(result) do\n    if v ==\
    \ max then\n      final[k] = v\n    end\n  end\n  return final\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ result = {}\n    for word in string.gmatch(test, '%S+') do\n        if result[word]\
    \ then\n            result[word] = result[word] + 1\n        else\n          \
    \  result[word] = 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jhg7meb.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp_jhg7meb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for word in string.gmatch(test, \"%S+\") do\n    result[word] = (result[word]\
    \ or 0) + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd43frjo.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpmd43frjo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    for word in string.gmatch(test, \"%S+\") do\n        if hist[word]\
    \ then\n            hist[word] = hist[word] + 1\n        else\n            hist[word]\
    \ = 1\n        end\n    end\n    return hist\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd1xho3r.lua:31:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpxd1xho3r.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        hist[letter] = (hist[letter] or 0) + 1\n\
    \        if hist[letter] > max then\n            max = hist[letter]\n        \
    \    max_letters = {letter}\n        elseif hist[letter] == max then\n       \
    \     table.insert(max_letters, letter)\n        end\n    end\n    return {[max_letters]\
    \ = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsz36qxn.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpqsz36qxn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, \"%a\") do\n        hist[letter] = (hist[letter] or 0) +\
    \ 1\n        if hist[letter] > max then\n            max = hist[letter]\n    \
    \        max_letters = {letter}\n        elseif hist[letter] == max then\n   \
    \         table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj1mkiu7.lua:34:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmpnj1mkiu7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local\
    \ hist = {}\n    local max = 0\n    local max_letters = {}\n    for letter in\
    \ string.gmatch(test, '%a') do\n        if hist[letter] == nil then\n        \
    \    hist[letter] = 1\n        else\n            hist[letter] = hist[letter] +\
    \ 1\n        end\n        if hist[letter] > max then\n            max = hist[letter]\n\
    \            max_letters = {letter}\n        elseif hist[letter] == max then\n\
    \            table.insert(max_letters, letter)\n        end\n    end\n    return\
    \ {[max_letters] = max}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4na9ene2.lua:38:\
    \ expected: {a=2, b=2}\nactual: {{\"b\", \"a\"}=2}\nstack traceback:\n\t/tmp/tmp4na9ene2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    if\
    \ hist[word] == nil then\n      hist[word] = 1\n    else\n      hist[word] = hist[word]\
    \ + 1\n    end\n    if hist[word] > max then\n      max = hist[word]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799305
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local hist\
    \ = {}\n  local max = 0\n  for i in string.gmatch(test, \"%S+\") do\n    hist[i]\
    \ = (hist[i] or 0) + 1\n    if hist[i] > max then\n      max = hist[i]\n    end\n\
    \  end\n  local result = {}\n  for k, v in pairs(hist) do\n    if v == max then\n\
    \      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n\
    -- >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b\
    \ c a b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b']\
    \ = 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result\
    \ = {}\n  for word in string.gmatch(test, '%S+') do\n    result[word] = (result[word]\
    \ or 0) + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5obcjqjr.lua:27:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp5obcjqjr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799305
