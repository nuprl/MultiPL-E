name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a list of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n-- Return None if there is\
  \ no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
  \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
  \ 1})\n-- None\nlocal function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "  local min = math.min(unpack(lst))\n  local min2 = math.max(unpack(lst))\n\
    \  for _, v in ipairs(lst) do\n    if v > min and v < min2 then\n      min2 =\
    \ v\n    end\n  end\n  if min2 == math.max(unpack(lst)) then\n    return nil\n\
    \  else\n    return min2\n  end\nend", "    local min = math.min(unpack(lst))\n\
    \    local min_index = 0\n    local min_count = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n            min_count\
    \ = min_count + 1\n        end\n    end\n    if min_count > 1 then\n        return\
    \ nil\n    end\n    table.remove(lst, min_index)\n    return math.min(unpack(lst))\n\
    end", "    local min = math.min(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min)\n    table.remove(lst, min_idx)\n    local next_min = math.min(unpack(lst))\n\
    \    if next_min == min then\n        return nil\n    else\n        return next_min\n\
    \    end\nend", "    local min = math.min(unpack(lst))\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v > min and v < min2 then\n      \
    \      min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend", "    if #lst <\
    \ 2 then\n        return nil\n    end\n    local min_1, min_2 = lst[1], lst[2]\n\
    \    if min_1 > min_2 then\n        min_1, min_2 = min_2, min_1\n    end\n   \
    \ for i = 3, #lst do\n        if lst[i] < min_1 then\n            min_2 = min_1\n\
    \            min_1 = lst[i]\n        elseif lst[i] < min_2 then\n            min_2\
    \ = lst[i]\n        end\n    end\n    return min_2\nend", "  local min, sec_min\
    \ = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      sec_min = min\n      min = v\n    elseif v < sec_min then\n      sec_min\
    \ = v\n    end\n  end\n  return sec_min == math.huge and nil or sec_min\nend",
  "    local min = math.min(unpack(lst))\n    local min2 = min\n    for _, v in ipairs(lst)\
    \ do\n        if v ~= min and v < min2 then\n            min2 = v\n        end\n\
    \    end\n    if min2 == min then\n        return nil\n    else\n        return\
    \ min2\n    end\nend", "    local min, min2 = math.huge, math.huge\n    for _,\
    \ v in ipairs(lst) do\n        if v < min then\n            min2 = min\n     \
    \       min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 ~= math.huge\
    \ and min2 or nil\nend", "    local min, min2 = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n  \
    \          min = v\n        elseif v < min2 then\n            min2 = v\n     \
    \   end\n    end\n    return min2 == math.huge and nil or min2\nend", "    local\
    \ min1, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v < min1 then\n            min2 = min1\n            min1 = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "    local smallest = math.huge\n    local\
    \ second_smallest = math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ smallest then\n            second_smallest = smallest\n            smallest\
    \ = v\n        elseif v < second_smallest then\n            second_smallest =\
    \ v\n        end\n    end\n    if second_smallest == math.huge then\n        return\
    \ nil\n    else\n        return second_smallest\n    end\nend", "  local min =\
    \ math.huge\n  local second_min = math.huge\n  for _, v in ipairs(lst) do\n  \
    \  if v < min then\n      second_min = min\n      min = v\n    elseif v < second_min\
    \ then\n      second_min = v\n    end\n  end\n  if second_min == math.huge then\n\
    \    return nil\n  else\n    return second_min\n  end\nend", "    local min, min2\
    \ = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "    local min, min2 = math.huge, math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min then\n            min2 = min\n          \
    \  min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 ~= math.huge\
    \ and min2 or nil\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
