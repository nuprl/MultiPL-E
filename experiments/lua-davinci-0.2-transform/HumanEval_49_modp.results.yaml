language: lua
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40a9a1dp.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp40a9a1dp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yfwy9bz.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5yfwy9bz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- TODO: use a\
    \ better algorithm\n  local result = 1\n  for i = 1, n do\n    result = (result\
    \ * 2) % p\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    for i = 1, n do\n        res = (res * 2) % p\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        return (modp(n / 2, p) ^ 2 - 1) % p\n    else\n        return\
    \ (2 * modp((n - 1) / 2, p) ^ 2) % p\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphirfdmsn.lua:28:\
    \ expected: 2, actual: 18\nstack traceback:\n\t/tmp/tmphirfdmsn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40a9a1dp.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp40a9a1dp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n   \
    \         res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n  \
    \      x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pmac377.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6pmac377.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yfwy9bz.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5yfwy9bz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqkspruc.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpgqkspruc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yfwy9bz.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp5yfwy9bz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqkspruc.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpgqkspruc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpympsjnw5.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpympsjnw5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpympsjnw5.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpympsjnw5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5wo8cbj.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpg5wo8cbj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqkspruc.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpgqkspruc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5wo8cbj.lua:26:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpg5wo8cbj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
