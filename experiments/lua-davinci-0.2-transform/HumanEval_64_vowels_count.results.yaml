language: lua
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and i == #s)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nv1ttc1.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7nv1ttc1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e'\
    \ or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i,\
    \ i) == 'y' then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6ys1ed9.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpo6ys1ed9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr6bj6r.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgyr6bj6r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0vwh9l7.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv0vwh9l7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         \
    \   (c == 'y' and i == #s) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyi4s92x.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmphyi4s92x.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr6bj6r.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgyr6bj6r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         \
    \  (c == 'y' and i == #s) then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3f4h8cr.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpa3f4h8cr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0vwh9l7.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv0vwh9l7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa46pjodf.lua:17:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpa46pjodf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and i == #s)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nv1ttc1.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7nv1ttc1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         \
    \  (c == 'y' and i == #s) then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3f4h8cr.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpa3f4h8cr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr6bj6r.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgyr6bj6r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         \
    \  (c == 'y' and i == #s) then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3f4h8cr.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpa3f4h8cr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e'\
    \ or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or s:sub(i,\
    \ i) == 'y' then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6ys1ed9.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpo6ys1ed9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n         \
    \  (c == 'y' and i == #s) then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3f4h8cr.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpa3f4h8cr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and i == #s)\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nv1ttc1.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7nv1ttc1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr6bj6r.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgyr6bj6r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0vwh9l7.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv0vwh9l7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyr6bj6r.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgyr6bj6r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or (s:sub(i, i) == 'y' and i == #s) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0vwh9l7.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv0vwh9l7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750217
