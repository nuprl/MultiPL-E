language: lua
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = \"\"\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk8pw62q.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqk8pw62q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- your code\
    \ here\n  local binary = {}\n  local i = 1\n  while N > 0 do\n    binary[i] =\
    \ N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  local sum = 0\n  for\
    \ i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b92dij7.lua:33:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp2b92dij7.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = \"\"\n    while N > 0 do\n        local r = N % 2\n        binary = r .. binary\n\
    \        N = (N - r) / 2\n    end\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4xr5ovr.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpk4xr5ovr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx87weh8.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpwx87weh8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r)\
    \ / 2\n    sum = sum + r\n    bin = r .. bin\n  end\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjmns4ja.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpkjmns4ja.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    N = (N - rest) / 2\n    binary = tostring(rest) .. binary\n\
    \  end\n  return binary, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55pcuyu9.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp55pcuyu9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  while N > 0 do\n    local rest = math.fmod(N,2)\n    table.insert(bin,1,rest)\n\
    \    N = (N-rest)/2\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmiaqa7f.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmptmiaqa7f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local r = N % 2\n  \
    \      sum = sum + r\n        N = math.floor(N / 2)\n        binary = r .. binary\n\
    \    end\n    return binary, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjqv3khj.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmphjqv3khj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = ''\n    while N > 0 do\n        res = tostring(N % 2) .. res\n        N =\
    \ math.floor(N / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwy2fkml.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpjwy2fkml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local r = N % 2\n    result = r .. result\n  \
    \  N = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9yd05fe.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpp9yd05fe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28yetu0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpu28yetu0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = \"\"\n  while N > 0 do\n    local remainder = N % 2\n\
    \    sum = sum + remainder\n    N = math.floor(N / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvw162fr.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmptvw162fr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlqbw8ip.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqlqbw8ip.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab_avg6n.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpab_avg6n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = remainder ..\
    \ binary\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8l9iyun.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpo8l9iyun.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = \"\"\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum =\
    \ sum + rest\n    bin = rest .. bin\n    N = (N - rest) / 2\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7hhyxlo.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpo7hhyxlo.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tqxyawg.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp4tqxyawg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return tostring(N):match('%d+')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0y15_tx.lua:21:\
    \ expected: \"1\"\nactual: \"1000\"\nstack traceback:\n\t/tmp/tmpv0y15_tx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 1\n  while N > 0 do\n    t[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsv4zd30.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpfsv4zd30.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = remainder ..\
    \ binary\n  end\n  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg5irmkt.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpgg5irmkt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0j94m3v.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpf0j94m3v.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    binary = tostring(remainder) .. binary\n    N =\
    \ math.floor(N / 2)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0i162w3.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpm0i162w3.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, 1, rest)\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfsk58fj.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpjfsk58fj.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 0\n  while N > 0 do\n    t[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(t, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl58w8nhy.lua:28:\
    \ expected: \"1\"\nactual: \"001011111\"\nstack traceback:\n\t/tmp/tmpl58w8nhy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    while N > 0 do\n        local rest = math.fmod(N,2)\n        table.insert(bin,1,rest)\n\
    \        N = (N-rest)/2\n    end\n    return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx0wemtg.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpbx0wemtg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    local rest = math.fmod(N,2)\n   \
    \ bin[i] = rest\n    N = (N-rest)/2\n    i = i+1\n  end\n  return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmtq1e84.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmptmtq1e84.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = ''\n    while N > 0 do\n        bin = bin .. tostring(N % 2)\n        N =\
    \ math.floor(N / 2)\n    end\n    return bin\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdh0x41q.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpzdh0x41q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    sum = sum\
    \ + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zoq0z31.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmp0zoq0z31.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tqxyawg.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp4tqxyawg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    if n == 0 then return \"\" end\n    local rem = n % 2\n  \
    \  return to_binary(math.floor(n / 2)) .. rem\n  end\n  local function sum_digits(s)\n\
    \    local sum = 0\n    for i = 1, #s do\n      sum = sum + tonumber(s:sub(i,\
    \ i))\n    end\n    return sum\n  end\n  return sum_digits(to_binary(N))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qxjrl2g.lua:33:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp0qxjrl2g.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ dec2bin(n)\n        local bin = \"\"\n        while n > 0 do\n            local\
    \ rest = math.fmod(n, 2)\n            bin = rest .. bin\n            n = (n -\
    \ rest) / 2\n        end\n        return bin\n    end\n    local function sum(s)\n\
    \        local sum = 0\n        for i = 1, #s do\n            sum = sum + tonumber(s:sub(i,\
    \ i))\n        end\n        return sum\n    end\n    return tostring(sum(dec2bin(N)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn41f_ss.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpwn41f_ss.lua:27:\
    \ in local 'sum'\n\t/tmp/tmpwn41f_ss.lua:31: in local 'candidate'\n\t/tmp/tmpwn41f_ss.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = \"\"\n  while N > 0 do\n    local r = N % 2\n    sum =\
    \ sum + r\n    binary = r .. binary\n    N = math.floor(N / 2)\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcagzyls3.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpcagzyls3.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:tobinary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rhoftfy.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp3rhoftfy.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp3rhoftfy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6q2sgxn.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpp6q2sgxn.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ to_binary(n)\n        local t = {}\n        while n > 0 do\n            local\
    \ r = n % 2\n            table.insert(t, r)\n            n = (n - r) / 2\n   \
    \     end\n        return table.concat(t):reverse()\n    end\n    local function\
    \ sum_digits(s)\n        local sum = 0\n        for i = 1, #s do\n           \
    \ sum = sum + tonumber(s:sub(i, i))\n        end\n        return sum\n    end\n\
    \    return sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps71o697x.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmps71o697x.lua:27:\
    \ in function </tmp/tmps71o697x.lua:24>\n\t(...tail calls...)\n\t/tmp/tmps71o697x.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r) /\
    \ 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qzpp_ja.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp5qzpp_ja.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:tobinary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rhoftfy.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp3rhoftfy.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp3rhoftfy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = {}\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        N = (N - remainder) / 2\n        sum = sum + remainder\n      \
    \  table.insert(binary, remainder)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7kpdop1.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpj7kpdop1.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1addjd9y.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp1addjd9y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = \"\"\n    while N > 0 do\n        result = tostring(N % 2) .. result\n   \
    \     N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74pjx23f.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp74pjx23f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- your code\
    \ here\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjimj1vvl.lua:29:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpjimj1vvl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local b =\
    \ {}\n  local i = 0\n  while N > 0 do\n    b[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3z665_k7.lua:28:\
    \ expected: \"1\"\nactual: \"001011111\"\nstack traceback:\n\t/tmp/tmp3z665_k7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = ''\n  while N > 0 do\n    local rem = N % 2\n    sum = sum\
    \ + rem\n    bin = tostring(rem) .. bin\n    N = (N - rem) / 2\n  end\n  return\
    \ bin, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbos5mrc_.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpbos5mrc_.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ N:to_binary()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8psxsrj9.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp8psxsrj9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp8psxsrj9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu0gj2f.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpfpu0gj2f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local r = N % 2\n  \
    \      sum = sum + r\n        binary = r .. binary\n        N = math.floor(N /\
    \ 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7peb572p.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp7peb572p.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local bin = \"\"\n    while N > 0 do\n        local rem = N % 2\n \
    \       sum = sum + rem\n        bin = rem .. bin\n        N = math.floor(N /\
    \ 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k8yjb6y.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp6k8yjb6y.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local function\
    \ to_binary(n)\n        local r = ''\n        while n > 0 do\n            r =\
    \ tostring(n % 2) .. r\n            n = math.floor(n / 2)\n        end\n     \
    \   return r\n    end\n    local function sum_digits(s)\n        local sum = 0\n\
    \        for i = 1, #s do\n            sum = sum + tonumber(s:sub(i, i))\n   \
    \     end\n        return sum\n    end\n    return tostring(sum_digits(to_binary(N)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w6ga1gr.lua:36:\
    \ expected: \"1\"\nactual: \"6\"\nstack traceback:\n\t/tmp/tmp5w6ga1gr.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = string.format(\"%b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum =\
    \ sum + tonumber(bin:sub(i, i))\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe50h8zx.lua:15:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpxe50h8zx.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxe50h8zx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  local remainder = 0\n  while N > 0 do\n    remainder\
    \ = N % 2\n    sum = sum + remainder\n    N = math.floor(N / 2)\n    binary =\
    \ remainder .. binary\n  end\n  return binary, sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2pg8ggv.lua:30:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpf2pg8ggv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    N = math.floor(N /\
    \ 2)\n    result = remainder .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j0uz86r.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp2j0uz86r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local b\
    \ = ''\n    while N > 0 do\n        b = tostring(N % 2) .. b\n        N = math.floor(N\
    \ / 2)\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v2u7_go.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp0v2u7_go.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local binary\
    \ = {}\n    local i = 1\n    while N > 0 do\n        binary[i] = N % 2\n     \
    \   N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob2augns.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpob2augns.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu0gj2f.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpfpu0gj2f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab_avg6n.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpab_avg6n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlqbw8ip.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqlqbw8ip.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlqbw8ip.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqlqbw8ip.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = ''\n    while N > 0 do\n        bin = tostring(N % 2) .. bin\n        N =\
    \ math.floor(N / 2)\n    end\n    return bin\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0xcdi0m.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpg0xcdi0m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqjbnr3j.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpgqjbnr3j.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab_avg6n.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpab_avg6n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = ''\n    while N > 0 do\n        res = tostring(N % 2) .. res\n        N =\
    \ math.floor(N / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwy2fkml.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpjwy2fkml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    local i = 0\n    while N > 0 do\n        local remainder = N % 2\n\
    \        N = math.floor(N / 2)\n        result = remainder .. result\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xsc7gk6.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp9xsc7gk6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = \"\"\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = rest .. binary\n    N = (N - rest) / 2\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsib53t6m.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpsib53t6m.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1addjd9y.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp1addjd9y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        result = r .. result\n\
    \        N = (N - r) / 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ugfmn_8.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp_ugfmn_8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local bit = N % 2\n    N = math.floor(N / 2)\n \
    \   result = bit .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu6slp47.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpcu6slp47.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28yetu0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpu28yetu0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum\
    \ + rest\n    N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return\
    \ table.concat(bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6q2sgxn.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpp6q2sgxn.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r = n % 2\n\
    \      n = math.floor(n / 2)\n      table.insert(t, r)\n    end\n    return table.concat(t)\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaumbv53.lua:37:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpdaumbv53.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r = n % 2\n\
    \      table.insert(t, r)\n      n = math.floor(n / 2)\n    end\n    return table.concat(t)\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3hxfvd6.lua:37:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpo3hxfvd6.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    local n = N\n    while n > 0 do\n        local r = n % 2\n       \
    \ result = tostring(r) .. result\n        n = math.floor(n / 2)\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3m8ciya.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpm3m8ciya.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = \"\"\n    while N > 0 do\n        bin = tostring(N % 2) .. bin\n        N\
    \ = math.floor(N / 2)\n    end\n    return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8x8ktp5.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpj8x8ktp5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tqxyawg.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp4tqxyawg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = string.format(\"%b\", N)\n    local sum = 0\n    for i = 1, #bin do\n    \
    \    sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyljsie0.lua:15:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpwyljsie0.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpwyljsie0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    local sum = 0\n    for\
    \ i = 1, #bin do\n        sum = sum + bin[i]\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tcb6c3s.lua:32:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp6tcb6c3s.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local t =\
    \ {}\n  local i = 1\n  while N > 0 do\n    t[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsv4zd30.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpfsv4zd30.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = ''\n    while N > 0 do\n        bin = tostring(N % 2) .. bin\n        N =\
    \ math.floor(N / 2)\n    end\n    return bin\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0xcdi0m.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpg0xcdi0m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r) /\
    \ 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qzpp_ja.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp5qzpp_ja.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    while N > 0 do\n        table.insert(bin, N % 2)\n        N = math.floor(N\
    \ / 2)\n    end\n    return table.concat(bin)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptb429tjm.lua:26:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmptb429tjm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        N = math.floor(N / 2)\n        sum = sum + remainder\n        binary\
    \ = remainder .. binary\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58n7_mzv.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp58n7_mzv.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local r = N % 2\n    N = (N - r) / 2\n    result\
    \ = r .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdw77r6v.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmptdw77r6v.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28yetu0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpu28yetu0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayrpb8ib.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpayrpb8ib.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    for i = 1, N do\n        local bin = string.format(\"%b\", i)\n   \
    \     for j = 1, #bin do\n            sum = sum + tonumber(bin:sub(j, j))\n  \
    \      end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc424af6u.lua:17:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpc424af6u.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpc424af6u.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    local s = ''\n    for i\
    \ = #bin, 1, -1 do\n        s = s .. bin[i]\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl9y2uaf.lua:32:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpjl9y2uaf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = \"\"\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = rest .. binary\n    N = (N - rest) / 2\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsib53t6m.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpsib53t6m.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    return\
    \ string.format(\"%b\", N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_oj3m5d.lua:15:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmpa_oj3m5d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpa_oj3m5d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlqbw8ip.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpqlqbw8ip.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    local rest = N %\
    \ 2\n    bin[i] = rest\n    N = (N - rest) / 2\n    i = i + 1\n  end\n  for i\
    \ = 1, #bin do\n    sum = sum + bin[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnojmexq1.lua:33:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpnojmexq1.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = \"\"\n    while N > 0 do\n        res = tostring(N % 2) .. res\n        N\
    \ = math.floor(N / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso1n3ck1.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpso1n3ck1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    local n = N\n    while n > 0 do\n        local r = n % 2\n       \
    \ s = s .. r\n        n = (n - r) / 2\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposxmzooi.lua:28:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmposxmzooi.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        sum = sum + remainder\n        binary = remainder .. binary\n \
    \       N = math.floor(N / 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj4tes2w.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpmj4tes2w.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r = n % 2\n\
    \      table.insert(t, r)\n      n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6hct0v7.lua:27:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpa6hct0v7.lua:27:\
    \ in function </tmp/tmpa6hct0v7.lua:24>\n\t(...tail calls...)\n\t/tmp/tmpa6hct0v7.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local bin = \"\"\n    while N > 0 do\n        local r = N % 2\n   \
    \     N = (N - r) / 2\n        bin = bin .. r\n        sum = sum + r\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzds40q7y.lua:29:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmpzds40q7y.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab_avg6n.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpab_avg6n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local res\
    \ = ''\n    while N > 0 do\n        res = tostring(N % 2) .. res\n        N =\
    \ math.floor(N / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwy2fkml.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpjwy2fkml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28yetu0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpu28yetu0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    local rem = N %\
    \ 2\n    bin[i] = rem\n    N = (N - rem) / 2\n    i = i + 1\n  end\n  for i =\
    \ 1, #bin do\n    sum = sum + bin[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kvegtvr.lua:33:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmp2kvegtvr.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        N = math.floor(N / 2)\n        binary = remainder .. binary\n \
    \       sum = sum + remainder\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cjnb8cu.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp9cjnb8cu.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = \"\"\n  while N > 0 do\n    local remainder = N % 2\n    result = tostring(remainder)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2znqsllh.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmp2znqsllh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = ''\n  while N > 0 do\n    bin = tostring(N % 2) .. bin\n    N = math.floor(N\
    \ / 2)\n  end\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmffahap1.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpmffahap1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  for i = 1, N do\n    sum = sum + string.len(string.gsub(string.format(\"\
    %b\", i), \"%D\", \"\"))\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ld5wgfs.lua:17:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp4ld5wgfs.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4ld5wgfs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    N = math.floor(N / 2)\n    binary = remainder ..\
    \ binary\n  end\n  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu7l2afe.lua:29:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpxu7l2afe.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  while N > 0 do\n    local rem = N % 2\n    N = math.floor(N\
    \ / 2)\n    table.insert(binary, rem)\n  end\n  for i = 1, #binary do\n    sum\
    \ = sum + binary[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb79m0tl.lua:31:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmphb79m0tl.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local bin = \"\"\n    while N > 0 do\n        local rem = N % 2\n \
    \       sum = sum + rem\n        bin = rem .. bin\n        N = math.floor(N /\
    \ 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k8yjb6y.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp6k8yjb6y.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ualanvr.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp5ualanvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    local remainder = N % 2\n    binary[i]\
    \ = remainder\n    N = (N - remainder) / 2\n    i = i + 1\n  end\n  return table.concat(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv56bxket.lua:29:\
    \ expected: \"1\"\nactual: \"00.00.01.00.01.01.01.01.01.0\"\nstack traceback:\n\
    \t/tmp/tmpv56bxket.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  for i = 1, #N do\n    sum = sum + tonumber(N:sub(i, i))\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppope4hdj.lua:16:\
    \ attempt to get length of a number value (local 'N')\nstack traceback:\n\t/tmp/tmppope4hdj.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmppope4hdj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      table.insert(t, n\
    \ % 2)\n      n = math.floor(n / 2)\n    end\n    return table.concat(t)\n  end\n\
    \  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n   \
    \   sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jued7s3.lua:36:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp7jued7s3.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local rest = N % 2\n\
    \        sum = sum + rest\n        binary = tostring(rest) .. binary\n       \
    \ N = (N - rest) / 2\n    end\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstw1844f.lua:29:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpstw1844f.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = {}\n  local i = 1\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    N = (N - remainder) / 2\n    binary[i] = remainder\n    i = i +\
    \ 1\n  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_c3br31w.lua:33:\
    \ expected: \"1\"\nactual: 6.0\nstack traceback:\n\t/tmp/tmp_c3br31w.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  return N:to_binary()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hzmp9wg.lua:15:\
    \ attempt to index a number value (local 'N')\nstack traceback:\n\t/tmp/tmp7hzmp9wg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7hzmp9wg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = r .. result\n    N\
    \ = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc_3jryc.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpdc_3jryc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb5_inp_.lua:27:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpxb5_inp_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local bin = \"\"\n    local bin_rev = \"\"\n    local i = 0\n    while\
    \ N > 0 do\n        bin = bin .. N % 2\n        N = math.floor(N / 2)\n    end\n\
    \    for i = 1, #bin do\n        bin_rev = bin_rev .. bin:sub(#bin - i + 1, #bin\
    \ - i + 1)\n    end\n    return bin_rev\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0yo6v7j.lua:32:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmps0yo6v7j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqjbnr3j.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpgqjbnr3j.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        result = result ..\
    \ tostring(r)\n        N = math.floor(N / 2)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfty5r9g.lua:27:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpyfty5r9g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0j94m3v.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpf0j94m3v.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = r .. result\n    N\
    \ = (N - r) / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc_3jryc.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpdc_3jryc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox97lo_.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpqox97lo_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local t\
    \ = {}\n    local i = 1\n    while N > 0 do\n        t[i] = N % 2\n        N =\
    \ math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuoe4rjd.lua:28:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmpeuoe4rjd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    local rem = N % 2\n    res = rem .. res\n    N =\
    \ (N - rem) / 2\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01p44p5m.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmp01p44p5m.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local result\
    \ = ''\n    local n = N\n    while n > 0 do\n        local r = n % 2\n       \
    \ result = tostring(r) .. result\n        n = math.floor(n / 2)\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3m8ciya.lua:28:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpm3m8ciya.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = result .. tostring(r)\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73k3oywu.lua:27:\
    \ expected: \"1\"\nactual: \"0001011111\"\nstack traceback:\n\t/tmp/tmp73k3oywu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = remainder ..\
    \ binary\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8l9iyun.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpo8l9iyun.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xz4w_8.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpo_xz4w_8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ \"\"\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N = (N - r)\
    \ / 2\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5mjja1k.lua:27:\
    \ expected: \"1\"\nactual: \"1.01.01.01.01.00.01.00.00.00\"\nstack traceback:\n\
    \t/tmp/tmpg5mjja1k.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local res\
    \ = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu28yetu0.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpu28yetu0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    local sum = 0\n    for\
    \ i = 1, #bin do\n        sum = sum + bin[i]\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tcb6c3s.lua:32:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmp6tcb6c3s.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local rem = N % 2\n    sum =\
    \ sum + rem\n    binary = rem .. binary\n    N = math.floor(N / 2)\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqop1wd8.lua:29:\
    \ expected: \"1\"\nactual: 6\nstack traceback:\n\t/tmp/tmpnqop1wd8.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659804254
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ \"\"\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N /\
    \ 2)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsen6hg7.lua:26:\
    \ expected: \"1\"\nactual: \"1111101000\"\nstack traceback:\n\t/tmp/tmpvsen6hg7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804254
