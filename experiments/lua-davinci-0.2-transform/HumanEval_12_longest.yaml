name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest_string = nil\n    local longest_length = 0\n    for\
    \ _, s in ipairs(strings) do\n        if #s > longest_length then\n          \
    \  longest_string = s\n            longest_length = #s\n        end\n    end\n\
    \    return longest_string\nend", "    local max_len = 0\n    local max_str =\
    \ nil\n    for _, s in ipairs(strings) do\n        if #s > max_len then\n    \
    \        max_len = #s\n            max_str = s\n        end\n    end\n    return\
    \ max_str\nend", "    if #strings == 0 then\n        return nil\n    end\n   \
    \ local max_len = 0\n    local max_str = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max_len then\n            max_len = #str\n           \
    \ max_str = str\n        end\n    end\n    return max_str\nend", "    local max_len\
    \ = 0\n    local max_str = nil\n    for _, s in ipairs(strings) do\n        if\
    \ #s > max_len then\n            max_len = #s\n            max_str = s\n     \
    \   end\n    end\n    return max_str\nend", "    local longest_string = nil\n\
    \    local longest_length = 0\n    for _, str in ipairs(strings) do\n        if\
    \ str:len() > longest_length then\n            longest_string = str\n        \
    \    longest_length = str:len()\n        end\n    end\n    return longest_string\n\
    end", "  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings)\
    \ do\n    if #str > max_len then\n      max_len = #str\n      max_str = str\n\
    \    end\n  end\n  return max_str\nend", "  local max_len = 0\n  local max_str\
    \ = nil\n  for _, s in ipairs(strings) do\n    if #s > max_len then\n      max_len\
    \ = #s\n      max_str = s\n    end\n  end\n  return max_str\nend", "    local\
    \ longest_string = nil\n    local longest_length = 0\n    for _, string in ipairs(strings)\
    \ do\n        local length = string:len()\n        if length > longest_length\
    \ then\n            longest_string = string\n            longest_length = length\n\
    \        end\n    end\n    return longest_string\nend", "    local longest_string\
    \ = nil\n    local longest_length = 0\n    for _, string in ipairs(strings) do\n\
    \        local length = string.len(string)\n        if length > longest_length\
    \ then\n            longest_string = string\n            longest_length = length\n\
    \        end\n    end\n    return longest_string\nend", "  local max_len = 0\n\
    \  local max_str = nil\n  for _, str in ipairs(strings) do\n    if #str > max_len\
    \ then\n      max_len = #str\n      max_str = str\n    end\n  end\n  return max_str\n\
    end", "  local longest_string = nil\n  local longest_length = 0\n  for _, s in\
    \ ipairs(strings) do\n    if #s > longest_length then\n      longest_string =\
    \ s\n      longest_length = #s\n    end\n  end\n  return longest_string\nend",
  "    local max = 0\n    local max_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max then\n            max = #s\n            max_string =\
    \ s\n        end\n    end\n    return max_string\nend", "  local max_length =\
    \ 0\n  local max_string = nil\n  for _, s in ipairs(strings) do\n    if #s > max_length\
    \ then\n      max_length = #s\n      max_string = s\n    end\n  end\n  return\
    \ max_string\nend", "  local longest_string = nil\n  local longest_length = 0\n\
    \  for _, s in ipairs(strings) do\n    if #s > longest_length then\n      longest_string\
    \ = s\n      longest_length = #s\n    end\n  end\n  return longest_string\nend",
  "  local longest_string = nil\n  local longest_length = 0\n  for _, string in ipairs(strings)\
    \ do\n    local length = string.len(string)\n    if length > longest_length then\n\
    \      longest_string = string\n      longest_length = length\n    end\n  end\n\
    \  return longest_string\nend", "    local longest_string = nil\n    local longest_length\
    \ = 0\n    for _, s in ipairs(strings) do\n        if #s > longest_length then\n\
    \            longest_string = s\n            longest_length = #s\n        end\n\
    \    end\n    return longest_string\nend", "  local max_len = 0\n  local max_str\
    \ = nil\n  for _, str in ipairs(strings) do\n    if #str > max_len then\n    \
    \  max_len = #str\n      max_str = str\n    end\n  end\n  return max_str\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend", "  local longest_string\
    \ = nil\n  local longest_length = 0\n  for _, s in ipairs(strings) do\n    if\
    \ #s > longest_length then\n      longest_string = s\n      longest_length = #s\n\
    \    end\n  end\n  return longest_string\nend", "    local longest_string = nil\n\
    \    local longest_length = 0\n    for _, s in ipairs(strings) do\n        if\
    \ #s > longest_length then\n            longest_string = s\n            longest_length\
    \ = #s\n        end\n    end\n    return longest_string\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
