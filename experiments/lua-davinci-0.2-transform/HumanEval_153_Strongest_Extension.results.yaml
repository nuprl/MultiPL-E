language: lua
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hlycytr.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmp1hlycytr.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qs3oda8.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp0qs3oda8.lua:22: in function 'candidate'\n\t/tmp/tmp0qs3oda8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrjgl1_r.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.\"\nstack traceback:\n\
    \t/tmp/tmpgrjgl1_r.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest = 0\n  local strongest_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n\
    \    for i = 1, #extension do\n      if extension:sub(i, i):match(\"%u\") then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match(\"%l\"\
    ) then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest then\n      strongest = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_njc30d.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.\"\nstack traceback:\n\
    \t/tmp/tmpf_njc30d.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox4unoay.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmpox4unoay.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local max_strength = 0\n  local strongest_extension\
    \ = ''\n  for i,extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      if extension:sub(j,j):match('%u') then\n \
    \       strength = strength + 1\n      elseif extension:sub(j,j):match('%l') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8n_y6aj.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.\"\nstack traceback:\n\
    \t/tmp/tmpc8n_y6aj.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for j = 1, #extension do\n            if extension:sub(j, j):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(j, j):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdb7e1y5l.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmpdb7e1y5l.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r6eph5t.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmp9r6eph5t.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strength = 0\n  local strongest =\
    \ ''\n  for i = 1, #extensions do\n    local cap = 0\n    local sm = 0\n    for\
    \ j = 1, #extensions[i] do\n      if string.match(extensions[i]:sub(j, j), '[A-Z]')\
    \ then\n        cap = cap + 1\n      elseif string.match(extensions[i]:sub(j,\
    \ j), '[a-z]') then\n        sm = sm + 1\n      end\n    end\n    if cap - sm\
    \ > strength then\n      strength = cap - sm\n      strongest = extensions[i]\n\
    \    end\n  end\n  return class_name .. '.' .. strongest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52wtbp7k.lua:44:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.\"\nstack traceback:\n\
    \t/tmp/tmp52wtbp7k.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for j = 1, #extension do\n            if extension:sub(j, j):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(j, j):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdb7e1y5l.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmpdb7e1y5l.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1frljz75.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmp1frljz75.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local max_strength = 0\n  local max_strength_extension\
    \ = ''\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n\
    \    for j = 1, #extension do\n      if string.match(extension, '[A-Z]') then\n\
    \        strength = strength + 1\n      elseif string.match(extension, '[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_strength_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. max_strength_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdy09at1.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.123NoooneB321\"\nstack\
    \ traceback:\n\t/tmp/tmpkdy09at1.lua:43: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:find('%u')\
    \ then\n                strength = strength + 1\n            elseif char:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6zmlwc_.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpo6zmlwc_.lua:22: in function 'candidate'\n\t/tmp/tmpo6zmlwc_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest_extension = extensions[1]\n\
    \  local strongest_extension_strength = 0\n  for i, extension in ipairs(extensions)\
    \ do\n    local strength = 0\n    for j = 1, #extension do\n      if extension:sub(j,\
    \ j):match(\"%u\") then\n        strength = strength + 1\n      elseif extension:sub(j,\
    \ j):match(\"%l\") then\n        strength = strength - 1\n      end\n    end\n\
    \    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. \".\" .. strongest_extension\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mmq62m7.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmp4mmq62m7.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_ynjuzr.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmps_ynjuzr.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpct5mhr1r.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpct5mhr1r.lua:22: in function 'candidate'\n\t/tmp/tmpct5mhr1r.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuketsuw3.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmpuketsuw3.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local max_strength = 0\n  local max_strength_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n\
    \    for i = 1, #extension do\n      if extension:sub(i, i):match(\"%u\") then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match(\"%l\"\
    ) then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_strength_extension\
    \ = extension\n    end\n  end\n  return class_name .. \".\" .. max_strength_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhs4j_f2.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.\"\nstack traceback:\n\
    \t/tmp/tmpzhs4j_f2.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekzhtmka.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmpekzhtmka.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
    \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i7gg332.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\nactual: \"__YESIMHERE.t\"\nstack traceback:\n\
    \t/tmp/tmp7i7gg332.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
