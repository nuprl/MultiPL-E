language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporjfk2z8.lua:16:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmporjfk2z8.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmporjfk2z8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:sub(j, j) == word:sub(1,\
    \ 1) then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw6phwe5.lua:40:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpqw6phwe5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   if is_prime(#word) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n <= 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu88m8o8x.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpu88m8o8x.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpu88m8o8x.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1_kx0dq.lua:18:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpf1_kx0dq.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpf1_kx0dq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for i, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd1hktu5.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpbd1hktu5.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpbd1hktu5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   if is_prime(#word) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%S+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6g860n4l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6g860n4l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6g860n4l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    for i = 1, #primes do\n        table.insert(result, primes[i])\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptea_dbuf.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptea_dbuf.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmptea_dbuf.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    for _, v in ipairs(primes) do\n        table.insert(result,\
    \ words[v])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwpq4dg8.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpvwpq4dg8.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.floor(math.sqrt(n)) do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.floor(math.sqrt(n)) do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n <= 1 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local len = #word\n        local is_prime = true\n        for j = 2,\
    \ len - 1 do\n            if len % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yrzl2dr.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp0yrzl2dr.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsfe9jm7.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnsfe9jm7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnsfe9jm7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsfe9jm7.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnsfe9jm7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnsfe9jm7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, words[i])\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn48how6p.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpn48how6p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjnvybpas.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpjnvybpas.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpjnvybpas.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n <= 1 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsfe9jm7.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnsfe9jm7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnsfe9jm7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for i = 1, #words do\n        if\
    \ is_prime(#words[i]) then\n            table.insert(primes, words[i])\n     \
    \   end\n    end\n    for i = 1, #primes do\n        table.insert(result, primes[i])\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptea_dbuf.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptea_dbuf.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmptea_dbuf.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rlb7q3y.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6rlb7q3y.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6rlb7q3y.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n <= 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu88m8o8x.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpu88m8o8x.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpu88m8o8x.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n == 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            primes[#primes + 1] = words[i]\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x6cevct.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2x6cevct.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        for i = 2, n - 1 do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpciwsn6lg.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpciwsn6lg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        words[#words + 1] =\
    \ word\n    end\n    for i = 1, #words do\n        local word = words[i]\n   \
    \     local length = #word\n        local is_prime = true\n        for j = 2,\
    \ length - 1 do\n            if length % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            result[#result + 1] = word\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsbueiv_.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzsbueiv_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1_kx0dq.lua:18:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpf1_kx0dq.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpf1_kx0dq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            primes[#primes + 1] = i\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        result[#result\
    \ + 1] = words[i]\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm5au_1p.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpbm5au_1p.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            primes[#primes + 1] = word\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsw777jhk.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpsw777jhk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpsw777jhk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local function is_prime(n)\n        if n <\
    \ 2 then\n            return false\n        end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 1, #sentence do\n\
    \        if sentence:sub(i, i) == ' ' then\n            table.insert(words, sentence:sub(1,\
    \ i - 1))\n            sentence = sentence:sub(i + 1)\n            i = 0\n   \
    \     end\n    end\n    table.insert(words, sentence)\n    for i = 1, #words do\n\
    \        if is_prime(#words[i]) then\n            table.insert(primes, words[i])\n\
    \        end\n    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpft1qigd1.lua:49:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpft1qigd1.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.floor(math.sqrt(n)) do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    table.insert(words, word)\n\
    \  end\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:len() % j == 0 then\n   \
    \     is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(primes, word)\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp240ogs_t.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp240ogs_t.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    for _, prime in ipairs(primes) do\n      if #word == prime then\n       \
    \ table.insert(result, word)\n        break\n      end\n    end\n  end\n  return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        for i = 2, n - 1 do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpciwsn6lg.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpciwsn6lg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbcn0bd6i.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpbcn0bd6i.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpbcn0bd6i.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%S+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6g860n4l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6g860n4l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6g860n4l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5_dks7ni.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5_dks7ni.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5_dks7ni.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rlb7q3y.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6rlb7q3y.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6rlb7q3y.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local prime_words\
    \ = {}\n    local prime_sentence = {}\n    local is_prime = true\n    local word\
    \ = ''\n    for i = 1, #sentence do\n        if sentence:sub(i, i) ~= ' ' then\n\
    \            word = word .. sentence:sub(i, i)\n        else\n            table.insert(words,\
    \ word)\n            word = ''\n        end\n    end\n    table.insert(words,\
    \ word)\n    for i = 1, #words do\n        for j = 2, #words[i] - 1 do\n     \
    \       if #words[i] % j == 0 then\n                is_prime = false\n       \
    \         break\n            end\n        end\n        if is_prime then\n    \
    \        table.insert(prime_words, words[i])\n        end\n        is_prime =\
    \ true\n    end\n    for i = 1, #prime_words do\n        if i == #prime_words\
    \ then\n            table.insert(prime_sentence, prime_words[i])\n        else\n\
    \            table.insert(prime_sentence, prime_words[i] .. ' ')\n        end\n\
    \    end\n    return table.concat(prime_sentence)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7i2470.lua:55:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp9c7i2470.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqcl13pc.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpuqcl13pc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n <= 1 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n == 1 then return false end\n    for i = 2, math.floor(math.sqrt(n)) do\n\
    \      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch('%S+') do\n    if is_prime(#word)\
    \ then table.insert(words, word) end\n  end\n  return table.concat(words, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdwk584j.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpgdwk584j.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdwk584j.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpgdwk584j.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzaw3q7nk.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpzaw3q7nk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpzaw3q7nk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rlb7q3y.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6rlb7q3y.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6rlb7q3y.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghaaf2dz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpghaaf2dz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            primes[#primes + 1] = i\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        result[#result\
    \ + 1] = words[i]\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm5au_1p.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpbm5au_1p.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ffn2074.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7ffn2074.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7ffn2074.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pcz3qyx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp5pcz3qyx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5pcz3qyx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if table.contains(primes, #word) then\n       \
    \     table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9m8oj4mc.lua:23:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp9m8oj4mc.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp9m8oj4mc.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsfe9jm7.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnsfe9jm7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnsfe9jm7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsfe9jm7.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnsfe9jm7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpnsfe9jm7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu88m8o8x.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpu88m8o8x.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpu88m8o8x.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local is_prime = function(n)\n        if n\
    \ <= 1 then\n            return false\n        end\n        for i = 2, n - 1 do\n\
    \            if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    for word in sentence:gmatch('%w+')\
    \ do\n        table.insert(words, word)\n    end\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(primes, word)\n\
    \        end\n    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:len() % j == 0 then\n   \
    \     is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pa90b0p.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7pa90b0p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        local length = word:len()\n\
    \        if not primes[length] then\n            local is_prime = true\n     \
    \       for i = 2, length - 1 do\n                if length % i == 0 then\n  \
    \                  is_prime = false\n                    break\n             \
    \   end\n            end\n            if is_prime then\n                primes[length]\
    \ = true\n                table.insert(words, word)\n            end\n       \
    \ end\n    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d9f16y_.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_d9f16y_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, words[i])\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn48how6p.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpn48how6p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            primes[#primes + 1] = words[i]\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x6cevct.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2x6cevct.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf75m4rx9.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpf75m4rx9.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpf75m4rx9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            primes[#primes + 1] = words[i]\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4rn1w0zj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4rn1w0zj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp4rn1w0zj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793768
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n <= 1 then\n            return false\n\
    \        end\n        local i = 2\n        while i * i <= n do\n            if\
    \ n % i == 0 then\n                return false\n            end\n           \
    \ i = i + 1\n        end\n        return true\n    end\n    local result = {}\n\
    \    for _, word in ipairs(words) do\n        if is_prime(#word) then\n      \
    \      table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793768
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
