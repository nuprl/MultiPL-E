language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporjfk2z8.lua:16:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmporjfk2z8.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmporjfk2z8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:sub(j, j) == word:sub(1,\
    \ 1) then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw6phwe5.lua:40:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpqw6phwe5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   if is_prime(#word) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n <= 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskg_l4p2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpskg_l4p2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu88m8o8x.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpu88m8o8x.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpu88m8o8x.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zaus0as.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp_zaus0as.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp_zaus0as.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1_kx0dq.lua:18:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpf1_kx0dq.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpf1_kx0dq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for i, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd1hktu5.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpbd1hktu5.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpbd1hktu5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu_1e5nz.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpzu_1e5nz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   if is_prime(#word) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ivtq7b6.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp9ivtq7b6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp9ivtq7b6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ts7jrke.lua:22:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp7ts7jrke.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp7ts7jrke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
