name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    shift = shift % n\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, n - shift +\
    \ 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = tostring(x)\n \
    \   local len = #digits\n    if shift >= len then\n        return digits:reverse()\n\
    \    end\n    return digits:sub(len - shift + 1) .. digits:sub(1, len - shift)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n + 1]\
    \ = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift > n then\n\
    \    shift = n\n  end\n  for i = 1, shift do\n    local digit = digits[n]\n  \
    \  for j = n, 2, -1 do\n      digits[j] = digits[j - 1]\n    end\n    digits[1]\
    \ = digit\n  end\n  local s = ''\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "    local s = tostring(x)\n    local n = #s\n    if\
    \ shift >= n then\n        return s:reverse()\n    end\n    return s:sub(n - shift\
    \ + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n\
    \        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ shift = n\n    end\n    for i = 1, shift do\n        local digit = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = digit\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift > len then\n\
    \        return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, len)\n    return b ..\
    \ a\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    local r = s:sub(n - shift\
    \ + 1) .. s:sub(1, n - shift)\n    return r\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "  local digits = {}\n  local n = 0\n  while\
    \ x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n\
    \  end\n  if shift > n then\n    return table.concat(digits, '')\n  end\n  local\
    \ result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n  end\n  return table.concat(result, '')\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n\
    \ = #s\n    if shift >= n then\n        return s:reverse()\n    end\n    local\
    \ a = s:sub(1, n - shift)\n    local b = s:sub(n - shift + 1, n)\n    return b\
    \ .. a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n  \
    \      n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[1]\n        for j = 1, n - 1 do\n            digits[j]\
    \ = digits[j + 1]\n        end\n        digits[n] = d\n    end\n    local s =\
    \ ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n   \
    \ return s\nend", "    local digits = tostring(x)\n    local len = #digits\n \
    \   if shift > len then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local n = #tostring(x)\n    if shift > n then\n        return string.reverse(tostring(x))\n\
    \    end\n    local s = tostring(x)\n    local a = string.sub(s, 1, shift)\n \
    \   local b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        for i = 1, n do\n            x = x * 10 + digits[i]\n      \
    \  end\n        return tostring(x)\n    end\n    for i = 1, shift do\n       \
    \ table.insert(digits, 1, table.remove(digits))\n    end\n    local s = ''\n \
    \   for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return\
    \ s\nend", "    local digits = tostring(x)\n    local len = #digits\n    if shift\
    \ > len then\n        return digits:reverse()\n    end\n    return digits:sub(len\
    \ - shift + 1) .. digits:sub(1, len - shift)\nend", "    local digits = string.format(\"\
    %d\", x)\n    local len = string.len(digits)\n    local shift = shift % len\n\
    \    return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    local a = s:sub(1, n - shift)\n    local\
    \ b = s:sub(n - shift + 1, n)\n    return b .. a\nend", "    local digits = tostring(x)\n\
    \    local n = #digits\n    if shift >= n then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, shift + 1, n) .. string.sub(digits, 1,\
    \ shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n\
    \ then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "  local digits = tostring(x)\n  local len = #digits\n  local\
    \ shift = shift % len\n  if shift == 0 then\n    return digits\n  elseif shift\
    \ > len then\n    return string.reverse(digits)\n  else\n    return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\n  end\nend", "    local digits =\
    \ tostring(x)\n    local n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    local a = string.sub(digits, 1, shift)\n    local b = string.sub(digits,\
    \ shift + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n\
    \ = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 0, shift - 1 do\n        local d = digits[n - 1]\n     \
    \   for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[0] = d\n    end\n    local s = ''\n    for i = 0, n - 1 do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    local r = s:sub(n - shift + 1, n) ..\
    \ s:sub(1, n - shift)\n    return r\nend", "    local digits = tostring(x)\n \
    \   local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ shift = shift % n\n    end\n    if shift > 0 then\n        local tmp = {}\n\
    \        for i = 1, n do\n            tmp[i] = digits[(i + shift - 1) % n + 1]\n\
    \        end\n        digits = tmp\n    end\n    local s = {}\n    for i = 1,\
    \ n do\n        s[i] = tostring(digits[i])\n    end\n    return table.concat(s)\n\
    end", "    local s = tostring(x)\n    local len = #s\n    if shift >= len then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, len - shift\
    \ + 1) .. string.sub(s, 1, len - shift)\nend", "    local s = tostring(x)\n  \
    \  local len = #s\n    if shift > len then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, len - shift + 1) .. string.sub(s, 1, len -\
    \ shift)\nend", "    local x_str = tostring(x)\n    local x_len = #x_str\n   \
    \ local shift = shift % x_len\n    local x_str_rev = string.reverse(x_str)\n \
    \   local x_str_rev_shifted = string.sub(x_str_rev, 1, shift)\n    local x_str_rev_unshifted\
    \ = string.sub(x_str_rev, shift + 1)\n    local x_str_shifted = string.reverse(x_str_rev_shifted)\
    \ ..\n                          string.reverse(x_str_rev_unshifted)\n    return\
    \ x_str_shifted\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local digit = digits[1]\n        for j = 1, n - 1 do\n\
    \            digits[j] = digits[j + 1]\n        end\n        digits[n] = digit\n\
    \    end\n    local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = tostring(x)\n    local len =\
    \ #digits\n    if shift > len then\n        return string.reverse(digits)\n  \
    \  end\n    return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, '')\n   \
    \ end\n    for i = 1, shift do\n        local d = digits[n]\n        for j = n,\
    \ 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    return table.concat(digits, '')\nend", "    local digits =\
    \ {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       return table.concat(digits, '')\n    end\n    local shifted = {}\n   \
    \ for i = 1, n do\n        shifted[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(shifted, '')\nend", "    local s = tostring(x)\n    local\
    \ len = #s\n    if shift >= len then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ digits = tostring(x)\n    local n = #digits\n    if shift > n then\n       \
    \ return string.reverse(digits)\n    end\n    return string.sub(digits, shift\
    \ + 1, n) .. string.sub(digits, 1, shift)\nend", "    local x_str = tostring(x)\n\
    \    local x_len = #x_str\n    if shift > x_len then\n        return string.reverse(x_str)\n\
    \    end\n    return string.sub(x_str, shift + 1) .. string.sub(x_str, 1, shift)\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return digits:reverse()\n    end\n    return digits:sub(len\
    \ - shift + 1) .. digits:sub(1, len - shift)\nend", "    local digits = tostring(x)\n\
    \    local n = #digits\n    if shift >= n then\n        return digits:reverse()\n\
    \    end\n    return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    local r = ''\n    if shift > n\
    \ then\n        for i = n, 1, -1 do\n            r = r .. s:sub(i, i)\n      \
    \  end\n    else\n        for i = 1, n do\n            r = r .. s:sub((i + shift\
    \ - 1) % n + 1, (i + shift - 1) % n + 1)\n        end\n    end\n    return r\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return digits:reverse()\n    end\n    return digits:sub(len\
    \ - shift + 1) .. digits:sub(1, len - shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    local shift = shift % n\n    return s:sub(n - shift + 1)\
    \ .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits)\n\
    \    end\n    local i = 1\n    while i <= shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n        i = i + 1\n    end\n    return table.concat(digits)\n\
    end", "    local s = tostring(x)\n    local len = #s\n    if shift > len then\n\
    \        return s:reverse()\n    end\n    return s:sub(len - shift + 1) .. s:sub(1,\
    \ len - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    local a = s:sub(1, n - shift)\n\
    \    local b = s:sub(n - shift + 1, n)\n    return b .. a\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "  local s\
    \ = tostring(x)\n  local n = #s\n  if shift >= n then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\nend", "    local digits = {}\n \
    \   local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = ''\n    for i = 1, n do\n     \
    \   s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ digits = tostring(x)\n    local n = #digits\n    if shift > n then\n       \
    \ return string.reverse(digits)\n    end\n    local a = string.sub(digits, 1,\
    \ shift)\n    local b = string.sub(digits, shift + 1, n)\n    return b .. a\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        table.insert(digits, 1, table.remove(digits))\n    end\n    local s =\
    \ ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n   \
    \ return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift >= n then\n        return table.concat(digits)\n    end\n\
    \    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result)\nend", "    local digits\
    \ = tostring(x)\n    local len = #digits\n    if shift >= len then\n        return\
    \ string.reverse(digits)\n    end\n    return string.sub(digits, shift + 1) ..\
    \ string.sub(digits, 1, shift)\nend", "  local digits = {}\n  local n = 0\n  while\
    \ x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n\
    \  end\n  if shift > n then\n    shift = n\n  end\n  for i = 1, shift do\n   \
    \ local d = digits[1]\n    for j = 1, n - 1 do\n      digits[j] = digits[j + 1]\n\
    \    end\n    digits[n] = d\n  end\n  local s = ''\n  for i = 1, n do\n    s =\
    \ s .. tostring(digits[i])\n  end\n  return s\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   return table.concat(digits, '')\n    end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n  \
    \  return table.concat(result, '')\nend", "    local n = #tostring(x)\n    if\
    \ shift > n then\n        return string.reverse(tostring(x))\n    end\n    local\
    \ s = tostring(x)\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s,\
    \ shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   for i = 1, n do\n            x = x * 10 + digits[i]\n        end\n       \
    \ return tostring(x)\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    local i = shift % n\n    return s:sub(i\
    \ + 1) .. s:sub(1, i)\nend", "    local s = tostring(x)\n    local n = #s\n  \
    \  if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ len = #s\n    if shift > len then\n        return s:reverse()\n    end\n   \
    \ local left = s:sub(1, len - shift)\n    local right = s:sub(len - shift + 1,\
    \ len)\n    return right .. left\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    local result = {}\n    for i = 1,\
    \ n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result)\nend", "    local digits = {}\n    local s = tostring(x)\n\
    \    for i = 1, #s do\n        digits[i] = s:sub(i, i)\n    end\n    for i = 1,\
    \ shift do\n        local d = digits[#digits]\n        table.remove(digits, #digits)\n\
    \        table.insert(digits, 1, d)\n    end\n    return table.concat(digits)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    local result = 0\n    for i = 1, n do\n        result = result * 10 + digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return tostring(result)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        shift = n\n    end\n    for i = 1, shift do\n        local d\
    \ = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j -\
    \ 1]\n        end\n        digits[1] = d\n    end\n    local s = ''\n    for i\
    \ = 1, n do\n        s = s .. digits[i]\n    end\n    return s\nend", "  local\
    \ digits = tostring(x)\n  local len = #digits\n  if shift > len then\n    return\
    \ string.reverse(digits)\n  end\n  return string.sub(digits, shift + 1) .. string.sub(digits,\
    \ 1, shift)\nend", "    local digits = tostring(x)\n    local len = #digits\n\
    \    if shift >= len then\n        return string.reverse(digits)\n    end\n  \
    \  return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "\tlocal digits =\
    \ {}\n\tlocal n = 0\n\twhile x > 0 do\n\t\tdigits[n+1] = x % 10\n\t\tx = math.floor(x\
    \ / 10)\n\t\tn = n + 1\n\tend\n\tlocal i = 1\n\twhile shift > 0 do\n\t\tlocal\
    \ d = digits[i]\n\t\tfor j = i, n-1 do\n\t\t\tdigits[j] = digits[j+1]\n\t\tend\n\
    \t\tdigits[n] = d\n\t\ti = i + 1\n\t\tshift = shift - 1\n\tend\n\tlocal s = ''\n\
    \tfor i = 1, n do\n\t\ts = s .. tostring(digits[i])\n\tend\n\treturn s\nend",
  "    local digits = tostring(x)\n    local n = #digits\n    if shift > n then\n\
    \        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ n - shift + 1) .. string.sub(digits, 1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    local a = s:sub(1, shift)\n    local b = s:sub(shift + 1)\n    return\
    \ b .. a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift >= n then\n        return table.concat(digits, '')\n  \
    \  end\n    local result = {}\n    for i = 0, n - 1 do\n        result[i] = digits[(i\
    \ + shift) % n]\n    end\n    return table.concat(result, '')\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        local digit = x %\
    \ 10\n        x = (x - digit) / 10\n        n = n + 1\n        digits[n] = digit\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        local j = i + shift\n        if j > n then\n\
    \            j = j - n\n        end\n        result[i] = digits[j]\n    end\n\
    \    return table.concat(result)\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n     \
    \   x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "  local s = tostring(x)\n  if shift >= #s then\n\
    \    return string.reverse(s)\n  end\n  return string.sub(s, shift + 1) .. string.sub(s,\
    \ 1, shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ >= n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local n = 0\n \
    \   while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x =\
    \ math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1\
    \ do\n            digits[j] = digits[j - 1]\n        end\n        digits[1] =\
    \ d\n    end\n    local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return string.reverse(s)\n    end\n    local a\
    \ = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return\
    \ b .. a\nend", "    local digits = tostring(x)\n    local num_digits = #digits\n\
    \    if shift > num_digits then\n        return string.reverse(digits)\n    end\n\
    \    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1)\n    return right .. left\nend", "    local digits = tostring(x)\n\
    \    local n = #digits\n    if shift >= n then\n        return digits:reverse()\n\
    \    end\n    return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift > len then\n\
    \        return string.reverse(digits)\n    end\n    local right = string.sub(digits,\
    \ 1, shift)\n    local left = string.sub(digits, shift + 1, len)\n    return left\
    \ .. right\nend", "  local s = tostring(x)\n  local n = #s\n  if shift > n then\n\
    \    return string.reverse(s)\n  end\n  local a = string.sub(s, 1, shift)\n  local\
    \ b = string.sub(s, shift + 1, n)\n  return b .. a\nend", "    local digits =\
    \ tostring(x)\n    local n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, n - shift + 1) .. string.sub(digits, 1,\
    \ n - shift)\nend", "    local digits = tostring(x)\n    local len = #digits\n\
    \    local shift = shift % len\n    if shift == 0 then\n        return digits\n\
    \    elseif shift < len then\n        return digits:sub(shift + 1) .. digits:sub(1,\
    \ shift)\n    else\n        return digits:reverse()\n    end\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        shift = n\n    end\n    for i = 1, shift do\n        local d\
    \ = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j -\
    \ 1]\n        end\n        digits[1] = d\n    end\n    local s = ''\n    for i\
    \ = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    local\
    \ result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1)\
    \ % n + 1]\n    end\n    return table.concat(result)\nend", "    local digits\
    \ = tostring(x)\n    local len = #digits\n    if shift > len then\n        return\
    \ digits:reverse()\n    end\n    return digits:sub(len - shift + 1) .. digits:sub(1,\
    \ len - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ >= n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    local shift = shift % n\n    if shift == 0 then\n        return s\n    elseif\
    \ shift > n then\n        return s:reverse()\n    else\n        return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\n    end\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = n\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = tostring(x)\n    local n = #digits\n \
    \   if shift > n then\n        return string.reverse(digits)\n    end\n    local\
    \ left = string.sub(digits, 1, shift)\n    local right = string.sub(digits, shift\
    \ + 1, n)\n    return right .. left\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ s = tostring(x)\n    local l = #s\n    if shift > l then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local digits = tostring(x)\n    local n = #digits\n\
    \    if shift > n then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)\nend", "  \
    \  local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ digits = {}\n    while x > 0 do\n        table.insert(digits, x % 10)\n    \
    \    x = math.floor(x / 10)\n    end\n    local n = #digits\n    if shift >= n\
    \ then\n        return table.concat(digits, '')\n    end\n    local result = {}\n\
    \    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n  \
    \  end\n    return table.concat(result, '')\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    local shift = shift % len\n    return string.sub(digits,\
    \ shift + 1, len) .. string.sub(digits, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       return table.concat(digits)\n    end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n  \
    \  return table.concat(result)\nend", "    local s = tostring(x)\n    local n\
    \ = #s\n    if shift >= n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift >= len then\n        return s:reverse()\n  \
    \  end\n    return s:sub(len - shift + 1) .. s:sub(1, len - shift)\nend", "  \
    \  local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    local\
    \ i = 1\n    while shift > 0 do\n        local d = digits[i]\n        table.remove(digits,\
    \ i)\n        table.insert(digits, d)\n        shift = shift - 1\n    end\n  \
    \  local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n \
    \   end\n    return s\nend", "    local digits = tostring(x)\n    local n = #digits\n\
    \    if shift > n then\n        return string.reverse(digits)\n    end\n    local\
    \ a = string.sub(digits, 1, shift)\n    local b = string.sub(digits, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift >= n then\n        for i = 1, n / 2 do\n      \
    \      digits[i], digits[n - i + 1] = digits[n - i + 1], digits[i]\n        end\n\
    \    else\n        local tmp = {}\n        for i = 1, n do\n            tmp[i]\
    \ = digits[i]\n        end\n        for i = 1, n do\n            digits[i] = tmp[(i\
    \ + shift - 1) % n + 1]\n        end\n    end\n    local s = ''\n    for i = 1,\
    \ n do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend", " \
    \   local digits = tostring(x)\n    local len = #digits\n    if shift > len then\n\
    \        return digits:reverse()\n    end\n    return digits:sub(len - shift +\
    \ 1) .. digits:sub(1, len - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    shift = shift % n\n    return s:sub(n - shift + 1) .. s:sub(1, n\
    \ - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >=\
    \ n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n  \
    \  local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    local i = n - shift\n\
    \    while i < 1 do\n        i = i + n\n    end\n    local result = ''\n    for\
    \ j = 1, n do\n        result = result .. digits[i]\n        i = i + 1\n     \
    \   if i > n then\n            i = 1\n        end\n    end\n    return result\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = tostring(x)\n    local n = #digits\n    if shift >= n then\n        return\
    \ string.reverse(digits)\n    end\n    return string.sub(digits, shift + 1) ..\
    \ string.sub(digits, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = shift\
    \ % n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n       \
    \ for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n  \
    \      digits[1] = d\n    end\n    local s = ''\n    for i = 1, n do\n       \
    \ s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n    \
    \    x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n then\n\
    \        shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n\
    \ - 1]\n        for j = n - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n\
    \        end\n        digits[0] = d\n    end\n    local s = ''\n    for i = 0,\
    \ n - 1 do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    local a = string.sub(s, 1, shift)\n    local\
    \ b = string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = shift % n\n    end\n    for i = 1, shift do\n        local d =\
    \ digits[1]\n        for j = 1, n - 1 do\n            digits[j] = digits[j + 1]\n\
    \        end\n        digits[n] = d\n    end\n    local s = \"\"\n    for i =\
    \ 1, n do\n        s = s .. digits[i]\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, n - shift\
    \ + 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = tostring(x)\n\
    \    local n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    local a = string.sub(digits, 1, shift)\n    local b = string.sub(digits,\
    \ shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = tostring(x)\n    local len\
    \ = #digits\n    if shift > len then\n        return digits:reverse()\n    end\n\
    \    return digits:sub(len - shift + 1) .. digits:sub(1, len - shift)\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n-shift+1) .. s:sub(1, n-shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = shift % n\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result)\nend", "    local digits = tostring(x)\n    if\
    \ shift > #digits then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend", "  local\
    \ str = tostring(x)\n  local len = #str\n  if shift >= len then\n    return str:reverse()\n\
    \  end\n  return str:sub(len - shift + 1) .. str:sub(1, len - shift)\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n      \
    \  digits[n] = digits[i - 1]\n        n = n + 1\n    end\n    local s = ''\n \
    \   for i = n - 1, n - shift - 1, -1 do\n        s = s .. digits[i]\n    end\n\
    \    return s\nend", "    local digits = tostring(x)\n    local len = #digits\n\
    \    if shift > len then\n        return string.reverse(digits)\n    end\n   \
    \ return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    local shift = shift % n\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = n\n    end\n    local result = {}\n    for i = 1, n do\n     \
    \   result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n \
    \   digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n\
    \    shift = n\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n  end\n  return table.concat(result)\nend",
  "    local s = tostring(x)\n    local n = #s\n    local shift = shift % n\n    if\
    \ shift == 0 then\n        return s\n    elseif shift < 0 then\n        shift\
    \ = n + shift\n    end\n    return s:sub(shift + 1) .. s:sub(1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "  local digits = tostring(x)\n  local n =\
    \ #digits\n  if shift >= n then\n    return string.reverse(digits)\n  end\n  return\
    \ string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)\nend", "  \
    \  local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n   \
    \ return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local tmp = digits[n - 1]\n        for j = n - 1, 1, -1 do\n   \
    \         digits[j] = digits[j - 1]\n        end\n        digits[0] = tmp\n  \
    \  end\n    local s = ''\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "  local digits = {}\n  local n = 0\n  while x >\
    \ 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n\
    \  shift = shift % n\n  for i = 1, shift do\n    digits[n + i] = digits[i]\n \
    \ end\n  local s = {}\n  for i = 1, n + shift do\n    s[i] = digits[i]\n  end\n\
    \  return table.concat(s)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n-shift+1) .. s:sub(1, n-shift)\nend", "    local digits\
    \ = tostring(x)\n    local len = #digits\n    if shift > len then\n        return\
    \ string.reverse(digits)\n    end\n    return string.sub(digits, shift + 1) ..\
    \ string.sub(digits, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = ''\n    for i = 1, n do\n        s = s .. digits[i]\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = shift % n\n    end\n\
    \    if shift > 0 then\n        local tmp = {}\n        for i = 1, n do\n    \
    \        tmp[i] = digits[(i + shift - 1) % n + 1]\n        end\n        digits\
    \ = tmp\n    end\n    local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = tostring(x)\n    local n = #digits\n\
    \    if shift >= n then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\nend", "  local\
    \ s = tostring(x)\n  local n = #s\n  if shift > n then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, n - shift +\
    \ 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = tostring(x)\n \
    \   local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        return table.concat(digits)\n\
    \    end\n    for i = 1, shift do\n        local digit = digits[n]\n        for\
    \ j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n      \
    \  digits[1] = digit\n    end\n    return table.concat(digits)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "  local\
    \ digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] =\
    \ x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n    return table.concat(digits,\
    \ '')\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n  end\n  return table.concat(result, '')\nend", "   \
    \ local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    local result = {}\n    for i = 1,\
    \ n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, '')\n\
    \    end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, '')\nend", " \
    \   local s = tostring(x)\n    local n = #s\n    local shift = shift % n\n   \
    \ return s:sub(n-shift+1, n) .. s:sub(1, n-shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    local result = {}\n    for i = 1,\
    \ n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result)\nend", "  local digits = {}\n  local n = 0\n  while x >\
    \ 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n\
    \  if shift > n then\n    shift = n\n  end\n  for i = 1, shift do\n    local d\
    \ = digits[n]\n    for j = n, 2, -1 do\n      digits[j] = digits[j - 1]\n    end\n\
    \    digits[1] = d\n  end\n  local s = ''\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n       \
    \ n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for\
    \ i = 0, shift - 1 do\n        local tmp = digits[n - 1]\n        for j = n -\
    \ 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = tmp\n    end\n    local s = ''\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local digits = {}\n \
    \   local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = n\n    end\n    for i = 1, shift do\n        local digit = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = digit\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ digits = tostring(x)\n    local len = #digits\n    if shift > len then\n   \
    \     return digits:reverse()\n    end\n    return digits:sub(len - shift + 1)\
    \ .. digits:sub(1, len - shift)\nend", "    local digits = tostring(x)\n    local\
    \ n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, n)\n    return right .. left\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    local a = string.sub(digits, 1, shift)\n    local b = string.sub(digits,\
    \ shift + 1, len)\n    return b .. a\nend", "  local s = tostring(x)\n  local\
    \ n = #s\n  if shift > n then\n    return s:reverse()\n  end\n  return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift\
    \ = n\n    end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = ''\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local n = #tostring(x)\n    if shift > n then\n\
    \        return string.reverse(tostring(x))\n    end\n    local s = tostring(x)\n\
    \    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local digits\
    \ = tostring(x)\n    local len = #digits\n    if shift > len then\n        return\
    \ string.reverse(digits)\n    end\n    local left = string.sub(digits, 1, shift)\n\
    \    local right = string.sub(digits, shift + 1, len)\n    return right .. left\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n  \
    \      local d = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[0] = d\n    end\n    local s =\
    \ ''\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n\
    \    return s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\n\
    end", "    local x_str = tostring(x)\n    local x_len = #x_str\n    if shift >\
    \ x_len then\n        return string.reverse(x_str)\n    end\n    local x_shift\
    \ = string.sub(x_str, x_len - shift + 1, x_len)\n    local x_rest = string.sub(x_str,\
    \ 1, x_len - shift)\n    return x_shift .. x_rest\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift > n then\n    return s:reverse()\n  end\n  return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n -\
    \ shift)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
