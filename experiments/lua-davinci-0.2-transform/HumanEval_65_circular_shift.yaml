name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    shift = shift % n\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, n - shift +\
    \ 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = tostring(x)\n \
    \   local len = #digits\n    if shift >= len then\n        return digits:reverse()\n\
    \    end\n    return digits:sub(len - shift + 1) .. digits:sub(1, len - shift)\n\
    end", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n + 1]\
    \ = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift > n then\n\
    \    shift = n\n  end\n  for i = 1, shift do\n    local digit = digits[n]\n  \
    \  for j = n, 2, -1 do\n      digits[j] = digits[j - 1]\n    end\n    digits[1]\
    \ = digit\n  end\n  local s = ''\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "    local s = tostring(x)\n    local n = #s\n    if\
    \ shift >= n then\n        return s:reverse()\n    end\n    return s:sub(n - shift\
    \ + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n\
    \        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ shift = n\n    end\n    for i = 1, shift do\n        local digit = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = digit\n    end\n    local s = ''\n    for i = 1, n do\n \
    \       s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local digits = tostring(x)\n    local len = #digits\n    if shift > len then\n\
    \        return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, len)\n    return b ..\
    \ a\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    local r = s:sub(n - shift\
    \ + 1) .. s:sub(1, n - shift)\n    return r\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "  local digits = {}\n  local n = 0\n  while\
    \ x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n\
    \  end\n  if shift > n then\n    return table.concat(digits, '')\n  end\n  local\
    \ result = {}\n  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n  end\n  return table.concat(result, '')\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n\
    \ = #s\n    if shift >= n then\n        return s:reverse()\n    end\n    local\
    \ a = s:sub(1, n - shift)\n    local b = s:sub(n - shift + 1, n)\n    return b\
    \ .. a\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
