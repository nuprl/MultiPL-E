name: HumanEval_132_is_nested
language: lua
prompt: "-- Create a function that takes a string as input which contains only square\
  \ brackets.\n-- The function should return True if and only if there is a valid\
  \ subsequence of brackets \n-- where at least one bracket in the subsequence is\
  \ nested.\n-- >>> is_nested('[[]]')\n-- true\n-- >>> is_nested('[]]]]]]][[[[[]')\n\
  -- false\n-- >>> is_nested('[][]')\n-- false\n-- >>> is_nested('[]')\n-- false\n\
  -- >>> is_nested('[[][]]')\n-- true\n-- >>> is_nested('[[]][[')\n-- true\nlocal\
  \ function is_nested(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
  \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
  \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
  \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
  \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
  \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
  \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
  \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local stack = {}\n    for i = 1, #string do\n        local c =\
    \ string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "  local\
    \ stack = {}\n  local top = 0\n  for i = 1, #string do\n    if string[i] == '['\
    \ then\n      top = top + 1\n      stack[top] = string[i]\n    elseif string[i]\
    \ == ']' then\n      if top == 0 then\n        return false\n      else\n    \
    \    top = top - 1\n      end\n    end\n  end\n  if top == 0 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    -- TODO: implement this function\n\
    end", "  local stack = {}\n  for i = 1, #string do\n    if string[i] == '[' then\n\
    \      table.insert(stack, 1, string[i])\n    elseif string[i] == ']' then\n \
    \     if #stack == 0 then\n        return false\n      else\n        table.remove(stack,\
    \ 1)\n      end\n    end\n  end\n  return #stack == 0\nend", "  local stack =\
    \ {}\n  local top = 0\n  for i = 1, #string do\n    if string[i] == '[' then\n\
    \      top = top + 1\n      stack[top] = string[i]\n    elseif string[i] == ']'\
    \ then\n      if top > 0 then\n        top = top - 1\n      else\n        return\
    \ false\n      end\n    end\n  end\n  return top == 0\nend", "  local stack =\
    \ {}\n  for i = 1, #string do\n    if string[i] == '[' then\n      stack[#stack\
    \ + 1] = '['\n    elseif string[i] == ']' then\n      if #stack > 0 then\n   \
    \     stack[#stack] = nil\n      else\n        return false\n      end\n    end\n\
    \  end\n  return #stack == 0\nend", "    local stack = {}\n    for i = 1, #string\
    \ do\n        local c = string:sub(i, i)\n        if c == '[' then\n         \
    \   table.insert(stack, c)\n        elseif c == ']' then\n            if #stack\
    \ == 0 then\n                return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    local\
    \ stack = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n\
    \        if char == '[' then\n            table.insert(stack, char)\n        elseif\
    \ char == ']' then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack > 0\nend", "    local stack = {}\n    for\
    \ i = 1, #string do\n        local char = string:sub(i, i)\n        if char ==\
    \ '[' then\n            table.insert(stack, char)\n        elseif char == ']'\
    \ then\n            if #stack == 0 then\n                return false\n      \
    \      else\n                table.remove(stack)\n            end\n        end\n\
    \    end\n    return #stack > 0\nend", "  local stack = Stack:new()\n  for i =\
    \ 1, #string do\n    if string:sub(i, i) == '[' then\n      stack:push('[')\n\
    \    elseif string:sub(i, i) == ']' then\n      if stack:is_empty() then\n   \
    \     return false\n      else\n        stack:pop()\n      end\n    end\n  end\n\
    \  return not stack:is_empty()\nend", "  local stack = Stack:new()\n  for i =\
    \ 1, #string do\n    if string:sub(i, i) == '[' then\n      stack:push(string:sub(i,\
    \ i))\n    elseif string:sub(i, i) == ']' then\n      if stack:is_empty() then\n\
    \        return false\n      else\n        stack:pop()\n      end\n    end\n \
    \ end\n  return stack:is_empty()\nend", "  local stack = {}\n  for i = 1, #string\
    \ do\n    if string[i] == '[' then\n      table.insert(stack, ']')\n    elseif\
    \ #stack > 0 then\n      table.remove(stack)\n    else\n      return false\n \
    \   end\n  end\n  return #stack == 0\nend", "    local stack = Stack()\n    for\
    \ i = 1, #string do\n        if string[i] == '[' then\n            stack:push(string[i])\n\
    \        elseif string[i] == ']' then\n            if stack:is_empty() then\n\
    \                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend", " \
    \   local stack = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if char == '[' then\n            table.insert(stack, char)\n   \
    \     elseif char == ']' then\n            if #stack == 0 then\n             \
    \   return false\n            else\n                table.remove(stack)\n    \
    \        end\n        end\n    end\n    return #stack > 0\nend", "    local stack\
    \ = {}\n    for i = 1, #string do\n        if string[i] == '[' then\n        \
    \    table.insert(stack, 1, string[i])\n        elseif string[i] == ']' then\n\
    \            if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack, 1)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend", "    local stack = Stack:new()\n    local is_nested\
    \ = false\n    for i = 1, #string do\n        local char = string:sub(i, i)\n\
    \        if char == '[' then\n            stack:push(char)\n        elseif char\
    \ == ']' then\n            if stack:is_empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return not stack:is_empty()\nend", "    local stack = {}\n    for\
    \ i = 1, #string do\n        local c = string:sub(i, i)\n        if c == '[' then\n\
    \            table.insert(stack, c)\n        elseif c == ']' then\n          \
    \  if #stack == 0 then\n                return false\n            else\n     \
    \           table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend", "    local stack = Stack:new()\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    stack:push(char)\n        elseif char == ']' then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return not stack:is_empty()\nend",
  "    local stack = Stack:new()\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char == '[' then\n            stack:push(char)\n\
    \        elseif char == ']' then\n            if stack:is_empty() then\n     \
    \           return false\n            else\n                stack:pop()\n    \
    \        end\n        end\n    end\n    return not stack:is_empty()\nend", " \
    \   local stack = Stack:new()\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char == '[' then\n            stack:push(char)\n\
    \        elseif char == ']' then\n            if stack:is_empty() then\n     \
    \           return false\n            else\n                stack:pop()\n    \
    \        end\n        end\n    end\n    return not stack:is_empty()\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
