name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>>\
  \ maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4,\
  \ 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n\
  -- {2}\n-- Note:\n-- 1. The length of the array will be in the range of [1, 1000].\n\
  -- 2. The elements in the array will be in the range of [-1000, 1000].\n-- 3. 0\
  \ <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n\
    \        heap_size = heap_size + 1\n        heap[heap_size] = x\n        local\
    \ i = heap_size\n        while i > 1 do\n            local j = math.floor(i /\
    \ 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function heap_pop()\n\
    \        local ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap_size\
    \ = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n\
    \            local j = i * 2\n            if j + 1 <= heap_size and heap[j + 1]\
    \ > heap[j] then\n                j = j + 1\n            end\n            if heap[i]\
    \ < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n      \
    \          i = j\n            else\n                break\n            end\n \
    \       end\n        return ret\n    end\n    for i = 1, #arr do\n        if heap_size\
    \ < k then\n            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n\
    \            heap_pop()\n            heap_push(arr[i])\n        end\n    end\n\
    \    local ret = {}\n    for i = 1, k do\n        ret[i] = heap_pop()\n    end\n\
    \    return ret\nend", "    local n = #arr\n    local t = {}\n    for i = 1, n\
    \ do\n        local v = arr[i]\n        local j = #t\n        while j > 0 and\
    \ t[j] < v do\n            j = j - 1\n        end\n        if j < k then\n   \
    \         table.insert(t, j + 1, v)\n            if #t > k then\n            \
    \    table.remove(t)\n            end\n        end\n    end\n    return t\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot\
    \ then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quick_select(arr,\
    \ l, pivot - 1, k)\n        else\n            return quick_select(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quick_sort(arr, l, r)\n \
    \       if l < r then\n            local pivot = partition(arr, l, r)\n      \
    \      quick_sort(arr, l, pivot - 1)\n            quick_sort(arr, pivot + 1, r)\n\
    \        end\n    end\n    local n = #arr\n    local k = math.min(k, n)\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    quick_sort(arr, n - k + 1, n)\n    return arr\nend", " \
    \   local len = #arr\n    if k > len then\n        k = len\n    end\n    local\
    \ max = {}\n    for i = 1, k do\n        max[i] = arr[i]\n    end\n    for i =\
    \ k + 1, len do\n        local j = 1\n        while j <= k and max[j] > arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for l = k, j + 1, -1 do\n                max[l] = max[l - 1]\n            end\n\
    \            max[j] = arr[i]\n        end\n    end\n    return max\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n        for j\
    \ = lo, hi - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return i\n    end\n\
    \    local function quickselect(arr, lo, hi, k)\n        if lo == hi then\n  \
    \          return arr[lo]\n        end\n        local p = partition(arr, lo, hi)\n\
    \        if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quickselect(arr, p + 1, hi, k)\n        else\n           \
    \ return quickselect(arr, lo, p - 1, k)\n        end\n    end\n    local function\
    \ sort(arr, lo, hi)\n        if lo >= hi then\n            return\n        end\n\
    \        local p = partition(arr, lo, hi)\n        sort(arr, lo, p - 1)\n    \
    \    sort(arr, p + 1, hi)\n    end\n    local function find_kth_largest(arr, k)\n\
    \        local n = #arr\n        local lo, hi = 1, n\n        local kth = quickselect(arr,\
    \ lo, hi, k)\n        local res = {}\n        for i = 1, n do\n            if\
    \ arr[i] >= kth then\n                res[#res + 1] = arr[i]\n            end\n\
    \        end\n        sort(res, 1, #res)\n        return res\n    end\n    return\
    \ find_kth_largest(arr, k)\nend", "    local function partition(arr, l, r)\n \
    \       local pivot = arr[r]\n        local i = l - 1\n        for j = l, r -\
    \ 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n  \
    \      arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quickSelect(arr, p + 1, r, k)\n        else\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local p = partition(arr, l, r)\n \
    \           quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local tmp = {}\n    for i = 1, k\
    \ do\n        tmp[i] = arr[i]\n    end\n    quickSort(tmp, 1, k)\n    for i =\
    \ k + 1, n do\n        if arr[i] > tmp[1] then\n            tmp[1] = arr[i]\n\
    \            quickSort(tmp, 1, k)\n        end\n    end\n    return tmp\nend",
  "    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n \
    \   for i = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n            heap[i],\
    \ heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n    for i = k +\
    \ 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            for j = 1, k // 2 do\n                if heap[j] > heap[j * 2] or\
    \ heap[j] > heap[j * 2 + 1] then\n                    if heap[j * 2] < heap[j\
    \ * 2 + 1] then\n                        heap[j], heap[j * 2] = heap[j * 2], heap[j]\n\
    \                    else\n                        heap[j], heap[j * 2 + 1] =\
    \ heap[j * 2 + 1], heap[j]\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return heap\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local len = #arr\n    if len == 0 then\n        return {}\n\
    \    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len then\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, len)\n    local ret\
    \ = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n    return ret\n\
    end", "    local heap = {}\n    local function heap_push(heap, val)\n        local\
    \ i = #heap + 1\n        heap[i] = val\n        while i > 1 do\n            local\
    \ parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n   \
    \             heap[parent], heap[i] = heap[i], heap[parent]\n                i\
    \ = parent\n            else\n                break\n            end\n       \
    \ end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n\
    \        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n\
    \        while i < #heap do\n            local left = i * 2\n            local\
    \ right = i * 2 + 1\n            if left > #heap then\n                break\n\
    \            elseif right > #heap then\n                if heap[i] < heap[left]\
    \ then\n                    heap[i], heap[left] = heap[left], heap[i]\n      \
    \          end\n                break\n            else\n                if heap[left]\
    \ > heap[right] then\n                    if heap[i] < heap[left] then\n     \
    \                   heap[i], heap[left] = heap[left], heap[i]\n              \
    \          i = left\n                    else\n                        break\n\
    \                    end\n                else\n                    if heap[i]\
    \ < heap[right] then\n                        heap[i], heap[right] = heap[right],\
    \ heap[i]\n                        i = right\n                    else\n     \
    \                   break\n                    end\n                end\n    \
    \        end\n        end\n        return ret\n    end\n    for i = 1, #arr do\n\
    \        if #heap < k then\n            heap_push(heap, arr[i])\n        else\n\
    \            if arr[i] > heap[1] then\n                heap_pop(heap)\n      \
    \          heap_push(heap, arr[i])\n            end\n        end\n    end\n  \
    \  local ret = {}\n    for i = 1, #heap do\n        ret[i] = heap_pop(heap)\n\
    \    end\n    return ret\nend", "    local heap = {}\n    for i = 1, k do\n  \
    \      heap[i] = arr[i]\n    end\n    heapify(heap, k)\n    for i = k + 1, #arr\
    \ do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n       \
    \     heapify(heap, k)\n        end\n    end\n    return heap\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, lo, hi)\n        local pivot\
    \ = arr[hi]\n        local i = lo - 1\n        for j = lo, hi - 1 do\n       \
    \     if arr[j] > pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[hi]\
    \ = arr[hi], arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr,\
    \ lo, hi, k)\n        if lo >= hi then\n            return\n        end\n    \
    \    local pivot = partition(arr, lo, hi)\n        if pivot == k then\n      \
    \      return\n        elseif pivot > k then\n            quick_select(arr, lo,\
    \ pivot - 1, k)\n        else\n            quick_select(arr, pivot + 1, hi, k)\n\
    \        end\n    end\n    quick_select(arr, 1, #arr, k)\n    return arr\nend",
  "    local function partition(arr, lo, hi)\n        local pivot = arr[hi]\n    \
    \    local i = lo\n        for j = lo, hi - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n\
    \        return i\n    end\n    local function quickselect(arr, lo, hi, k)\n \
    \       if lo >= hi then\n            return\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] < pivot do\n                j =\
    \ j - 1\n            end\n            if i < j then\n                arr[i] =\
    \ arr[j]\n                i = i + 1\n            end\n            while i < j\
    \ and arr[i] > pivot do\n                i = i + 1\n            end\n        \
    \    if i < j then\n                arr[j] = arr[i]\n                j = j - 1\n\
    \            end\n        end\n        arr[i] = pivot\n        return i\n    end\n\
    \    local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local heap = {}\n\
    \    local function push(x)\n        local i = #heap + 1\n        heap[i] = x\n\
    \        while i > 1 do\n            local p = math.floor(i / 2)\n           \
    \ if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n\
    \                i = p\n            else\n                break\n            end\n\
    \        end\n    end\n    local function pop()\n        local ret = heap[1]\n\
    \        local x = heap[#heap]\n        heap[1] = x\n        heap[#heap] = nil\n\
    \        local i = 1\n        while i * 2 <= #heap do\n            local a, b\
    \ = i * 2, i * 2 + 1\n            if b <= #heap and heap[b] > heap[a] then\n \
    \               a = b\n            end\n            if heap[i] < heap[a] then\n\
    \                heap[i], heap[a] = heap[a], heap[i]\n                i = a\n\
    \            else\n                break\n            end\n        end\n     \
    \   return ret\n    end\n    for i = 1, #arr do\n        if #heap < k then\n \
    \           push(arr[i])\n        elseif arr[i] > heap[1] then\n            pop()\n\
    \            push(arr[i])\n        end\n    end\n    local ret = {}\n    for i\
    \ = 1, k do\n        ret[i] = pop()\n    end\n    return ret\nend", "    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local max_idx = 0\n        for j = 1, len do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                max_idx = j\n      \
    \      end\n        end\n        res[i] = max\n        arr[max_idx] = -math.huge\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickselect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickselect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function sort(arr, l, r)\n       \
    \ if l >= r then\n            return\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        sort(arr, l, pivot - 1)\n        sort(arr, pivot + 1, r)\n  \
    \  end\n    local n = #arr\n    local k = math.min(k, n)\n    quickselect(arr,\
    \ 1, n, k)\n    sort(arr, 1, k)\n    return arr\nend", "    local len = #arr\n\
    \    if k == len then\n        return arr\n    end\n    local heap = {}\n    for\
    \ i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k // 2, 1, -1 do\n\
    \        heapify(heap, i, k)\n    end\n    for i = k + 1, len do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickSelect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local pivot\
    \ = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n         \
    \   quickSort(arr, pivot + 1, r)\n        end\n    end\n    local n = #arr\n \
    \   quickSort(arr, 1, n)\n    return arr\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left + 1\n\
    \        local j = right\n        while true do\n            while i <= right\
    \ and arr[i] >= pivot do\n                i = i + 1\n            end\n       \
    \     while j >= left and arr[j] < pivot do\n                j = j - 1\n     \
    \       end\n            if i >= j then\n                break\n            end\n\
    \            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[left],\
    \ arr[j] = arr[j], arr[left]\n        return j\n    end\n    local function select(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return select(arr, left, pivot - 1, k)\n        else\n            return\
    \ select(arr, pivot + 1, right, k)\n        end\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local heap = {}\n    local function heapify(i)\n        local\
    \ l = 2 * i\n        local r = 2 * i + 1\n        local largest = i\n        if\
    \ l <= #heap and heap[l] > heap[largest] then\n            largest = l\n     \
    \   end\n        if r <= #heap and heap[r] > heap[largest] then\n            largest\
    \ = r\n        end\n        if largest ~= i then\n            heap[i], heap[largest]\
    \ = heap[largest], heap[i]\n            heapify(largest)\n        end\n    end\n\
    \    local function build_heap()\n        for i = #heap // 2, 1, -1 do\n     \
    \       heapify(i)\n        end\n    end\n    local function insert(x)\n     \
    \   heap[#heap + 1] = x\n        local i = #heap\n        while i > 1 and heap[i\
    \ // 2] < heap[i] do\n            heap[i // 2], heap[i] = heap[i], heap[i // 2]\n\
    \            i = i // 2\n        end\n    end\n    local function extract_max()\n\
    \        local max = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap]\
    \ = nil\n        heapify(1)\n        return max\n    end\n    for i = 1, #arr\
    \ do\n        if #heap < k then\n            insert(arr[i])\n        elseif arr[i]\
    \ > heap[1] then\n            extract_max()\n            insert(arr[i])\n    \
    \    end\n    end\n    build_heap()\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = extract_max()\n    end\n    return res\nend", "    local heap\
    \ = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k,\
    \ 2, -1 do\n        local j = i\n        while j > 1 do\n            local p =\
    \ math.floor(j / 2)\n            if heap[p] < heap[j] then\n                heap[p],\
    \ heap[j] = heap[j], heap[p]\n                j = p\n            else\n      \
    \          break\n            end\n        end\n    end\n    for i = k + 1, #arr\
    \ do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n       \
    \     local j = 1\n            while j < k do\n                local l = j * 2\n\
    \                local r = l + 1\n                if r <= k then\n           \
    \         if heap[l] > heap[r] then\n                        if heap[l] > heap[j]\
    \ then\n                            heap[l], heap[j] = heap[j], heap[l]\n    \
    \                        j = l\n                        else\n               \
    \             break\n                        end\n                    else\n \
    \                       if heap[r] > heap[j] then\n                          \
    \  heap[r], heap[j] = heap[j], heap[r]\n                            j = r\n  \
    \                      else\n                            break\n             \
    \           end\n                    end\n                else\n             \
    \       if heap[l] > heap[j] then\n                        heap[l], heap[j] =\
    \ heap[j], heap[l]\n                        j = l\n                    else\n\
    \                        break\n                    end\n                end\n\
    \            end\n        end\n    end\n    for i = k, 2, -1 do\n        heap[i],\
    \ heap[1] = heap[1], heap[i]\n        local j = 1\n        while j < i - 1 do\n\
    \            local l = j * 2\n            local r = l + 1\n            if r <\
    \ i then\n                if heap[l] > heap[r] then\n                    if heap[l]\
    \ > heap[j] then\n                        heap[l], heap[j] = heap[j], heap[l]\n\
    \                        j = l\n                    else\n                   \
    \     break\n                    end\n                else\n                 \
    \   if heap[r] > heap[j]", "    local n = #arr\n    if k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend", "    local n = #arr\n    local function\
    \ partition(l, r)\n        local pivot = arr[l]\n        local i = l\n       \
    \ local j = r\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i] = arr[j]\n                i = i + 1\n            end\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(l, r)\n        if l\
    \ < r then\n            local m = partition(l, r)\n            quick_sort(l, m\
    \ - 1)\n            quick_sort(m + 1, r)\n        end\n    end\n    quick_sort(1,\
    \ n)\n    local ret = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n\
    \    return ret\nend", "    local heap = {}\n    local function heapify(i)\n \
    \       local l, r = 2 * i, 2 * i + 1\n        local smallest = i\n        if\
    \ l <= #heap and heap[l] < heap[smallest] then\n            smallest = l\n   \
    \     end\n        if r <= #heap and heap[r] < heap[smallest] then\n         \
    \   smallest = r\n        end\n        if smallest ~= i then\n            heap[i],\
    \ heap[smallest] = heap[smallest], heap[i]\n            heapify(smallest)\n  \
    \      end\n    end\n    local function insert(x)\n        heap[#heap + 1] = x\n\
    \        local i = #heap\n        while i > 1 and heap[i] < heap[i // 2] do\n\
    \            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i\
    \ // 2\n        end\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  heap[1] = arr[i]\n            heapify(1)\n        end\n    end\n    for i =\
    \ #heap, 2, -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        heapify(1)\n\
    \    end\n    return heap\nend", "    local function partition(arr, lo, hi)\n\
    \        local pivot = arr[hi]\n        local i = lo - 1\n        for j = lo,\
    \ hi - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[hi] = arr[hi], arr[i + 1]\n        return i + 1\n   \
    \ end\n    local function quick_select(arr, lo, hi, k)\n        if lo < hi then\n\
    \            local p = partition(arr, lo, hi)\n            if p == k then\n  \
    \              return\n            elseif p < k then\n                quick_select(arr,\
    \ p + 1, hi, k)\n            else\n                quick_select(arr, lo, p - 1,\
    \ k)\n            end\n        end\n    end\n    quick_select(arr, 1, #arr, #arr\
    \ - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if k\
    \ == 0 then\n        return {}\n    elseif k >= n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickselect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickselect(arr, left, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickselect(arr, 1, n, n - k\
    \ + 1)\n    table.sort(arr, n - k + 1, n)\n    return arr\nend", "    local heap\
    \ = {}\n    local function heapify(i)\n        local l = 2 * i\n        local\
    \ r = 2 * i + 1\n        local largest = i\n        if l <= #heap and heap[l]\
    \ > heap[largest] then\n            largest = l\n        end\n        if r <=\
    \ #heap and heap[r] > heap[largest] then\n            largest = r\n        end\n\
    \        if largest ~= i then\n            heap[i], heap[largest] = heap[largest],\
    \ heap[i]\n            heapify(largest)\n        end\n    end\n    local function\
    \ build_heap()\n        for i = #heap // 2, 1, -1 do\n            heapify(i)\n\
    \        end\n    end\n    local function insert(x)\n        heap[#heap + 1] =\
    \ x\n        local i = #heap\n        while i > 1 and heap[i // 2] < heap[i] do\n\
    \            heap[i // 2], heap[i] = heap[i], heap[i // 2]\n            i = i\
    \ // 2\n        end\n    end\n    local function extract_max()\n        local\
    \ max = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n  \
    \      heapify(1)\n        return max\n    end\n    for i = 1, #arr do\n     \
    \   if #heap < k then\n            insert(arr[i])\n        elseif arr[i] > heap[1]\
    \ then\n            extract_max()\n            insert(arr[i])\n        end\n \
    \   end\n    build_heap()\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = extract_max()\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if len == 0 then\n        return {}\n\
    \    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        local j = 1\n        while j <= k do\n     \
    \       if arr[i] > res[j] then\n                for t = k, j + 1, -1 do\n   \
    \                 res[t] = res[t - 1]\n                end\n                res[j]\
    \ = arr[i]\n                break\n            end\n            j = j + 1\n  \
    \      end\n    end\n    return res\nend", "    local heap = {}\n    local function\
    \ push(heap, v)\n        local i = #heap + 1\n        heap[i] = v\n        while\
    \ i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] <\
    \ heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n        \
    \        i = j\n            else\n                break\n            end\n   \
    \     end\n    end\n    local function pop(heap)\n        local v = heap[1]\n\
    \        local n = #heap\n        heap[1] = heap[n]\n        heap[n] = nil\n \
    \       local i = 1\n        while i * 2 <= n do\n            local j = i * 2\n\
    \            if j + 1 <= n and heap[j + 1] > heap[j] then\n                j =\
    \ j + 1\n            end\n            if heap[i] < heap[j] then\n            \
    \    heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n\
    \                break\n            end\n        end\n        return v\n    end\n\
    \    for i = 1, #arr do\n        if #heap < k then\n            push(heap, arr[i])\n\
    \        elseif arr[i] > heap[1] then\n            pop(heap)\n            push(heap,\
    \ arr[i])\n        end\n    end\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = pop(heap)\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == 0 then\n        return {}\n    elseif k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    for i = k, len do\n        table.sort(heap)\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n        end\n\
    \    end\n    table.sort(heap)\n    return heap\nend", "    local n = #arr\n \
    \   if k == 0 then\n        return {}\n    elseif k == n then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_select(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local i = partition(arr, left, right)\n        if i == k then\n       \
    \     return arr[i]\n        elseif i > k then\n            return quick_select(arr,\
    \ left, i - 1, k)\n        else\n            return quick_select(arr, i + 1, right,\
    \ k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = quick_select(arr, 1, n, i)\n    end\n    return res\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left + 1\n        local j = right\n        while true do\n            while\
    \ i <= j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            while i <= j and arr[j] <= pivot do\n                j = j - 1\n\
    \            end\n            if i >= j then\n                break\n        \
    \    end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[left],\
    \ arr[j] = arr[j], arr[left]\n        return j\n    end\n    local function quick_select(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quick_select(arr, left, pivot - 1, k)\n        else\n      \
    \      return quick_select(arr, pivot + 1, right, k)\n        end\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    local function find_kth_largest(arr, k)\n        quick_sort(arr,\
    \ 1, #arr)\n        return arr[k]\n    end\n    local function find_kth_largest2(arr,\
    \ k)\n        return quick_select(arr, 1, #arr, #arr - k + 1)\n    end\n    local\
    \ function find_kth_largest3(arr, k)\n        local function heapify(arr, i, n)\n\
    \            local left = 2 * i\n            local right = 2 * i + 1\n       \
    \     local largest = i\n            if left <= n and arr[left] > arr[largest]\
    \ then\n                largest = left\n            end\n            if right\
    \ <= n and arr[right] > arr[largest] then\n                largest = right\n \
    \           end\n           ", "    local len = #arr\n    if len == 0 then\n \
    \       return {}\n    end\n    if k == 0 then\n        return {}\n    end\n \
    \   if k >= len then\n        table.sort(arr)\n        return arr\n    end\n \
    \   local result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n\
    \    table.sort(result)\n    for i = k + 1, len do\n        if arr[i] > result[1]\
    \ then\n            result[1] = arr[i]\n            table.sort(result)\n     \
    \   end\n    end\n    return result\nend", "    local heap = {}\n    local function\
    \ heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n\
    \        while i > 1 do\n            local j = math.floor(i / 2)\n           \
    \ if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop(heap)\n        local ret =\
    \ heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n       \
    \ local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n\
    \            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n              \
    \  j = j + 1\n            end\n            if heap[i] < heap[j] then\n       \
    \         heap[i], heap[j] = heap[j], heap[i]\n                i = j\n       \
    \     else\n                break\n            end\n        end\n        return\
    \ ret\n    end\n    for i = 1, #arr do\n        if i <= k then\n            heap_push(heap,\
    \ arr[i])\n        else\n            if arr[i] > heap[1] then\n              \
    \  heap_pop(heap)\n                heap_push(heap, arr[i])\n            end\n\
    \        end\n    end\n    local ret = {}\n    for i = 1, k do\n        table.insert(ret,\
    \ heap_pop(heap))\n    end\n    return ret\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    local function partition(arr, l, r)\n  \
    \      local i, j = l, r\n        local pivot = arr[l]\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickselect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickselect(arr, l, i - 1, k)\n        else\n            return\
    \ quickselect(arr, i + 1, r, k)\n        end\n    end\n    local function quickselect_k(arr,\
    \ l, r, k)\n        if l == r then\n            return {arr[l]}\n        end\n\
    \        local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr\n        elseif i > k then\n            return quickselect_k(arr, l, i -\
    \ 1, k)\n        else\n            return quickselect_k(arr, i + 1, r, k)\n  \
    \      end\n    end\n    return quickselect_k(arr, 1, n, k)\nend", "    local\
    \ n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n  \
    \      return arr\n    end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n     \
    \       if arr[j] >= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r]\
    \ = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quickSelect2(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect2(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect2(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quickSelect3(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect3(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect3(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quickSelect4(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n       ", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    local function find_max(arr, k)\n        local result = {}\n        for i\
    \ = 1, k do\n            result[i] = arr[i]\n        end\n        quick_sort(result,\
    \ 1, k)\n        for i = k + 1, #arr do\n            if arr[i] > result[1] then\n\
    \                result[1] = arr[i]\n                quick_sort(result, 1, k)\n\
    \            end\n        end\n        return result\n    end\n    return find_max(arr,\
    \ k)\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n   \
    \     local max_idx = 0\n        for j = 1, len do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                max_idx = j\n          \
    \  end\n        end\n        res[i] = max\n        arr[max_idx] = -math.huge\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1\
    \ do\n            if arr[j] <= pivot then\n                i = i + 1\n       \
    \         arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n    \
    \    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local pivot = partition(arr, l, r)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quick_select(arr, l, pivot - 1, k)\n        else\n\
    \            return quick_select(arr, pivot + 1, r, k)\n        end\n    end\n\
    \    local function quick_sort(arr, l, r)\n        if l < r then\n           \
    \ local pivot = partition(arr, l, r)\n            quick_sort(arr, l, pivot - 1)\n\
    \            quick_sort(arr, pivot + 1, r)\n        end\n    end\n    local function\
    \ merge(arr1, arr2)\n        local arr = {}\n        local i, j = 1, 1\n     \
    \   while i <= #arr1 and j <= #arr2 do\n            if arr1[i] < arr2[j] then\n\
    \                arr[#arr + 1] = arr1[i]\n                i = i + 1\n        \
    \    else\n                arr[#arr + 1] = arr2[j]\n                j = j + 1\n\
    \            end\n        end\n        while i <= #arr1 do\n            arr[#arr\
    \ + 1] = arr1[i]\n            i = i + 1\n        end\n        while j <= #arr2\
    \ do\n            arr[#arr + 1] = arr2[j]\n            j = j + 1\n        end\n\
    \        return arr\n    end\n    local function merge_sort(arr)\n        if #arr\
    \ == 1 then\n            return arr\n        end\n        local mid = math.",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot\
    \ then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quick_select(arr, l, p - 1, k)\n\
    \        else\n            return quick_select(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function merge(arr1, arr2)\n        local i, j, k = 1, 1,\
    \ 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2 do\n    \
    \        if arr1[i] >= arr2[j] then\n                arr[k] = arr1[i]\n      \
    \          i = i + 1\n            else\n                arr[k] = arr2[j]\n   \
    \             j = j + 1\n            end\n            k = k + 1\n        end\n\
    \        while i <= #arr1 do\n            arr[k] = arr1[i]\n            i = i\
    \ + 1\n            k = k + 1\n        end\n        while j <= #arr2 do\n     \
    \       arr[k] = arr2[j]\n            j = j + 1\n            k = k + 1\n     \
    \   end\n        return arr\n    end\n    local function merge_sort(arr, l, r)\n\
    \        if l == r then\n            return {arr[l]}\n        end\n        local\
    \ mid = math.floor((l + r) / 2)\n        local arr1 = merge_sort(arr, l, mid)\n\
    \        local arr2 = merge_sort(arr, mid + 1, r)\n        return merge(arr",
  "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then\n        return {}\n    end\n    if k >= len then\n    \
    \    return arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap, i, k)\n  \
    \  end\n    for i = k + 1, len do\n        if arr[i] > heap[1] then\n        \
    \    heap[1] = arr[i]\n            heapify(heap, 1, k)\n        end\n    end\n\
    \    return heap\nend", "    local n = #arr\n    if k == 0 then\n        return\
    \ {}\n    elseif k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_select(arr, left, right, k)\n        if left == right then\n         \
    \   return arr[left]\n        end\n        local pivot = partition(arr, left,\
    \ right)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quick_select(arr, left, pivot - 1, k)\n \
    \       else\n            return quick_select(arr, pivot + 1, right, k)\n    \
    \    end\n    end\n    local function quick_sort(arr, left, right)\n        if\
    \ left < right then\n            local pivot = partition(arr, left, right)\n \
    \           quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_select(arr, 1, n, k)\n    quick_sort(arr,\
    \ 1, k)\n    return arr\nend", "    local len = #arr\n    if k > len then\n  \
    \      k = len\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap, i, k)\n  \
    \  end\n    for i = k + 1, len do\n        if arr[i] > heap[1] then\n        \
    \    heap[1] = arr[i]\n            heapify(heap, 1, k)\n        end\n    end\n\
    \    return heap\nend", "    local function partition(arr, left, right)\n    \
    \    local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k\
    \ == n then\n        return arr\n    end\n    local function partition(arr, l,\
    \ r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n  \
    \              arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quickSelect(arr, p + 1, r, k)\n        else\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        end\n    end\n    local function findKthLargest(arr,\
    \ k)\n        return quickSelect(arr, 1, #arr, #arr - k + 1)\n    end\n    local\
    \ function findKthLargest2(arr, k)\n        local function partition(arr, l, r)\n\
    \            local pivot = arr[r]\n            local i = l - 1\n            for\
    \ j = l, r - 1 do\n                if arr[j] > pivot then\n                  \
    \  i = i + 1\n                    arr[i], arr[j] = arr[j], arr[i]\n          \
    \      end\n            end\n            arr[i + 1], arr[r] = arr[r], arr[i +\
    \ 1]\n            return i + 1\n        end\n        local function quickSelect(arr,\
    \ l, r, k)\n            if l == r then\n                return arr[l]\n      \
    \      end\n            local p = partition(arr, l, r)\n            if p == k\
    \ then\n                return arr[p]\n            elseif p < k then\n       \
    \         return quickSelect(arr, p + 1, r, k)\n            else\n           \
    \     return", "    local n = #arr\n    if k == n then\n        return arr\n \
    \   end\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return arr[pivot]\n\
    \        elseif pivot > k then\n            return quickselect(arr, l, pivot -\
    \ 1, k)\n        else\n            return quickselect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend", " \
    \   local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n\
    \        return arr\n    end\n    local function partition(arr, lo, hi)\n    \
    \    local pivot = arr[hi]\n        local i = lo\n        for j = lo, hi - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[hi] = arr[hi], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ lo, hi, k)\n        if lo == hi then\n            return arr[lo]\n        end\n\
    \        local p = partition(arr, lo, hi)\n        if p == k then\n          \
    \  return arr[p]\n        elseif p < k then\n            return quickselect(arr,\
    \ p + 1, hi, k)\n        else\n            return quickselect(arr, lo, p - 1,\
    \ k)\n        end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend",
  "    local function partition(arr, start, stop)\n        local pivot = arr[stop]\n\
    \        local i = start - 1\n        for j = start, stop - 1 do\n           \
    \ if arr[j] <= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[stop]\
    \ = arr[stop], arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr,\
    \ start, stop, k)\n        if start == stop then\n            return arr[start]\n\
    \        end\n        local pivot = partition(arr, start, stop)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quick_select(arr, start, pivot - 1, k)\n        else\n     \
    \       return quick_select(arr, pivot + 1, stop, k)\n        end\n    end\n \
    \   local function sort(arr, start, stop)\n        if start < stop then\n    \
    \        local pivot = partition(arr, start, stop)\n            sort(arr, start,\
    \ pivot - 1)\n            sort(arr, pivot + 1, stop)\n        end\n    end\n \
    \   local function merge(arr1, arr2)\n        local arr = {}\n        local i,\
    \ j = 1, 1\n        while i <= #arr1 and j <= #arr2 do\n            if arr1[i]\
    \ > arr2[j] then\n                arr[#arr + 1] = arr1[i]\n                i =\
    \ i + 1\n            else\n                arr[#arr + 1] = arr2[j]\n         \
    \       j = j + 1\n            end\n        end\n        while i <= #arr1 do\n\
    \            arr[#arr + 1] = arr1[i]\n            i = i + 1\n        end\n   \
    \     while j <= #arr2 do\n            arr[#arr + 1] = arr2[j]\n            j\
    \ = j + 1\n        end\n        return arr\n    end\n    local function merge_sort(arr,\
    \ start, stop)\n        if start < stop then\n            local mid = math.floor((start\
    \ + stop) / 2)\n", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_sort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local heap = {}\n    local function push(x)\n        local i = #heap\
    \ + 1\n        heap[i] = x\n        while i > 1 do\n            local j = math.floor(i\
    \ / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local x = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] =\
    \ nil\n        local i = 1\n        while i * 2 <= #heap do\n            local\
    \ j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n  \
    \              j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if #heap < k then\n   \
    \         push(arr[i])\n        elseif arr[i] > heap[1] then\n            pop()\n\
    \            push(arr[i])\n        end\n    end\n    local ret = {}\n    for i\
    \ = 1, k do\n        ret[i] = pop()\n    end\n    return ret\nend", "    local\
    \ heap = {}\n    local function heap_push(heap, v)\n        local n = #heap +\
    \ 1\n        heap[n] = v\n        while n > 1 do\n            local p = math.floor(n\
    \ / 2)\n            if heap[p] < heap[n] then\n                heap[p], heap[n]\
    \ = heap[n], heap[p]\n                n = p\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function heap_pop(heap)\n\
    \        local n = #heap\n        local v = heap[1]\n        heap[1] = heap[n]\n\
    \        heap[n] = nil\n        n = n - 1\n        local i = 1\n        while\
    \ i * 2 <= n do\n            local j = i * 2\n            if j + 1 <= n and heap[j\
    \ + 1] > heap[j] then\n                j = j + 1\n            end\n          \
    \  if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n        return v\n    end\n    for i = 1, k do\n        heap_push(heap,\
    \ arr[i])\n    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n\
    \            heap_pop(heap)\n            heap_push(heap, arr[i])\n        end\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = heap_pop(heap)\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quickSelect2(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n         \
    \   if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        if i == k then\n            return arr[i]\n      \
    \  elseif i > k then\n            return quickSelect2(arr, l, i - 1, k)\n    \
    \    else\n            return quickSelect2(arr, i + 1, r, k)\n        end\n  \
    \  end\n    local function quickSelect3(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local pivot = arr[r]\n      \
    \  local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] =", "    local len = #arr\n\
    \    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n      \
    \  return {}\n    end\n    if k >= len then\n        return arr\n    end\n   \
    \ local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, len)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local p = partition(arr, l, r)\n \
    \       if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quick_select(arr, l, p - 1, k)\n        else\n           \
    \ return quick_select(arr, p + 1, r, k)\n        end\n    end\n    local function\
    \ sort(arr, l, r)\n        if l >= r then\n            return\n        end\n \
    \       local p = partition(arr, l, r)\n        sort(arr, l, p - 1)\n        sort(arr,\
    \ p + 1, r)\n    end\n    local function find_max(arr, k)\n        local max =\
    \ quick_select(arr, 1, #arr, k)\n        local res = {}\n        for i = 1, #arr\
    \ do\n            if arr[i] >= max then\n                res[#res + 1] = arr[i]\n\
    \            end\n        end\n        sort(res, 1, #res)\n        return res\n\
    \    end\n    return find_max(arr, k)\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, mid - 1)\n            quick_sort(arr, mid + 1, right)\n        end\n \
    \   end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] >= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r]\
    \ = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then\n            return\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return\n     \
    \   elseif p < k then\n            quick_select(arr, p + 1, r, k)\n        else\n\
    \            quick_select(arr, l, p - 1, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, #arr, k)\n    return arr\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i] = arr[j]\n                i = i + 1\n            end\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(arr, left, right)\n\
    \        if left < right then\n            local pivot = partition(arr, left,\
    \ right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function heapify(arr, i, n)\n        local l, r, largest\
    \ = 2 * i, 2 * i + 1, i\n        if l <= n and arr[l] > arr[largest] then\n  \
    \          largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr,\
    \ largest, n)\n        end\n    end\n    local function build_heap(arr, n)\n \
    \       for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i, n)\n\
    \        end\n    end\n    local function heap_sort(arr, n)\n        build_heap(arr,\
    \ n)\n        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            heapify(arr, 1, i - 1)\n        end\n    end\n    heap_sort(arr,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend", "    local function partition(arr, lo, hi)\n   \
    \     local pivot = arr[hi]\n        local i = lo\n        for j = lo, hi - 1\
    \ do\n            if arr[j] >= pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[hi] = arr[hi], arr[i]\n        return i\n    end\n    local function quick_select(arr,\
    \ lo, hi, k)\n        if lo >= hi then\n            return\n        end\n    \
    \    local p = partition(arr, lo, hi)\n        if p == k then\n            return\n\
    \        elseif p > k then\n            quick_select(arr, lo, p - 1, k)\n    \
    \    else\n            quick_select(arr, p + 1, hi, k)\n        end\n    end\n\
    \    quick_select(arr, 1, #arr, k)\n    return arr\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] >= pivot then\n          \
    \      i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n          \
    \  end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n       \
    \ return i + 1\n    end\n    local function quickselect(arr, l, r, k)\n      \
    \  if l == r then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p <\
    \ k then\n            return quickselect(arr, p + 1, r, k)\n        else\n   \
    \         return quickselect(arr, l, p - 1, k)\n        end\n    end\n    quickselect(arr,\
    \ 1, #arr, k)\n    return arr\nend", "    local function partition(arr, lo, hi)\n\
    \        local pivot = arr[hi]\n        local i = lo\n        for j = lo, hi -\
    \ 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[hi] = arr[hi], arr[i]\n        return i\n    end\n    local function quick_select(arr,\
    \ lo, hi, k)\n        if lo < hi then\n            local p = partition(arr, lo,\
    \ hi)\n            if p == k then\n                return\n            elseif\
    \ p < k then\n                quick_select(arr, p + 1, hi, k)\n            else\n\
    \                quick_select(arr, lo, p - 1, k)\n            end\n        end\n\
    \    end\n    quick_select(arr, 1, #arr, #arr - k + 1)\n    return arr\nend",
  "    local function partition(arr, lo, hi)\n        local pivot = arr[hi]\n    \
    \    local i = lo - 1\n        for j = lo, hi - 1 do\n            if arr[j] <=\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[hi] = arr[hi],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function quickselect(arr,\
    \ lo, hi, k)\n        if lo == hi then\n            return arr[lo]\n        end\n\
    \        local pivot = partition(arr, lo, hi)\n        if pivot == k then\n  \
    \          return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickselect(arr, lo, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, hi, k)\n        end\n    end\n    quickselect(arr, 1, #arr, #arr\
    \ - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local p = partition(arr, l, r)\n \
    \       if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quick_select(arr, l, p - 1, k)\n        else\n           \
    \ return quick_select(arr, p + 1, r, k)\n        end\n    end\n    local function\
    \ merge(arr1, arr2)\n        local arr = {}\n        local i, j = 1, 1\n     \
    \   while i <= #arr1 and j <= #arr2 do\n            if arr1[i] > arr2[j] then\n\
    \                arr[#arr + 1] = arr1[i]\n                i = i + 1\n        \
    \    else\n                arr[#arr + 1] = arr2[j]\n                j = j + 1\n\
    \            end\n        end\n        while i <= #arr1 do\n            arr[#arr\
    \ + 1] = arr1[i]\n            i = i + 1\n        end\n        while j <= #arr2\
    \ do\n            arr[#arr + 1] = arr2[j]\n            j = j + 1\n        end\n\
    \        return arr\n    end\n    local function merge_sort(arr, l, r)\n     \
    \   if l == r then\n            return {arr[l]}\n        end\n        local mid\
    \ = math.floor((l + r) / 2)\n        local arr1 = merge_sort(arr, l, mid)\n  \
    \      local arr2 = merge_sort(arr, mid + 1, r)\n        return merge(arr1, arr2)\n\
    \    end\n    local function heap", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local function partition(arr, lo, hi)\n        local pivot = arr[hi]\n\
    \        local i = lo - 1\n        for j = lo, hi - 1 do\n            if arr[j]\
    \ <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[hi] = arr[hi],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr,\
    \ lo, hi, k)\n        if lo < hi then\n            local p = partition(arr, lo,\
    \ hi)\n            if p == k then\n                return\n            elseif\
    \ p < k then\n                quick_select(arr, p + 1, hi, k)\n            else\n\
    \                quick_select(arr, lo, p - 1, k)\n            end\n        end\n\
    \    end\n    quick_select(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n \
    \   for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n \
    \   return res\nend", "    local function partition(arr, left, right)\n      \
    \  local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n      \
    \  return {}\n    end\n    if k == len then\n        return arr\n    end\n   \
    \ local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, len)\n    local ret = {}\n    for i = 1, k do\n\
    \        ret[i] = arr[i]\n    end\n    return ret\nend", "    local function partition(arr,\
    \ lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n        for j\
    \ = lo, hi - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return i\n    end\n\
    \    local function quickselect(arr, lo, hi, k)\n        if lo >= hi then\n  \
    \          return\n        end\n        local p = partition(arr, lo, hi)\n   \
    \     if p == k then\n            return\n        elseif p < k then\n        \
    \    quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quick_select(arr, l, pivot - 1, k)\n        else\n       \
    \     return quick_select(arr, pivot + 1, r, k)\n        end\n    end\n    local\
    \ function quick_select_k(arr, k)\n        local res = {}\n        for i = 1,\
    \ k do\n            res[i] = quick_select(arr, 1, #arr, i)\n        end\n    \
    \    return res\n    end\n    return quick_select_k(arr, k)\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickselect(arr, l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(arr, p + 1, r, k)\n        else\n            quickselect(arr,\
    \ l, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] <= pivot then\n                i = i +\
    \ 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n      \
    \  end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n\
    \    end\n    local function quick_select(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quick_select(arr, p + 1, r, k)\n        else\n           \
    \ return quick_select(arr, l, p - 1, k)\n        end\n    end\n    local function\
    \ sort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            sort(arr, l, p - 1)\n            sort(arr, p + 1, r)\n  \
    \      end\n    end\n    local n = #arr\n    local k = math.min(k, n)\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    sort(arr, n - k + 1, n)\n    return arr\nend", "    local\
    \ heap = {}\n    local function push(x)\n        local i = #heap + 1\n       \
    \ heap[i] = x\n        while i > 1 do\n            local p = math.floor(i / 2)\n\
    \            if heap[p] > heap[i] then\n                heap[p], heap[i] = heap[i],\
    \ heap[p]\n                i = p\n            else\n                break\n  \
    \          end\n        end\n    end\n    local function pop()\n        local\
    \ x = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n    \
    \    local i = 1\n        while i < #heap do\n            local l = i * 2\n  \
    \          local r = l + 1\n            if r <= #heap then\n                if\
    \ heap[l] < heap[r] then\n                    if heap[i] > heap[l] then\n    \
    \                    heap[i], heap[l] = heap[l], heap[i]\n                   \
    \     i = l\n                    else\n                        break\n       \
    \             end\n                else\n                    if heap[i] > heap[r]\
    \ then\n                        heap[i], heap[r] = heap[r], heap[i]\n        \
    \                i = r\n                    else\n                        break\n\
    \                    end\n                end\n            elseif l <= #heap then\n\
    \                if heap[i] > heap[l] then\n                    heap[i], heap[l]\
    \ = heap[l], heap[i]\n                    i = l\n                else\n      \
    \              break\n                end\n            else\n                break\n\
    \            end\n        end\n        return x\n    end\n    for i = 1, k do\n\
    \        push(arr[i])\n    end\n    for i = k + 1, #arr do\n        if arr[i]\
    \ > heap[1] then\n            pop()\n            push(arr[i])\n        end\n \
    \   end\n    local res = {}\n    for i = 1, k do\n        res[i] = pop()\n   \
    \ end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickSelect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local pivot\
    \ = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n         \
    \   quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1,\
    \ #arr)\n    return quickSelect(arr, 1, #arr, k)\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local p = partition(arr, l, r)\n \
    \       if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quick_select(arr, l, p - 1, k)\n        else\n           \
    \ return quick_select(arr, p + 1, r, k)\n        end\n    end\n    local function\
    \ quick_select_k(arr, k)\n        local n = #arr\n        if k > n then\n    \
    \        return arr\n        end\n        local ret = {}\n        for i = 1, k\
    \ do\n            ret[i] = quick_select(arr, 1, n, i)\n        end\n        return\
    \ ret\n    end\n    return quick_select_k(arr, k)\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local pivot = partition(arr, l, r)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, l, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n\
    \    local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n   \
    \         quickSort(arr, pivot + 1, r)\n        end\n    end\n    local n = #arr\n\
    \    if k == n then\n        quickSort(arr, 1, n)\n    else\n        quickSelect(arr,\
    \ 1, n, n - k + 1)\n        quickSort(arr, n - k + 1, n)\n    end\n    return\
    \ arr\nend", "    local len = #arr\n    if len == 0 then\n        return {}\n\
    \    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len then\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_select(arr, l, r, k)\n  \
    \      if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quick_select(arr, l, i - 1, k)\n\
    \        else\n            return quick_select(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function quick_select_k(arr, k)\n        local res = {}\n\
    \        for i = 1, k do\n            res[i] = quick_select(arr, 1, n, i)\n  \
    \      end\n        return res\n    end\n    return quick_select_k(arr, k)\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quickSelect(arr, l, r, k)\n        if\
    \ l == r then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    if k == n then\n        quickSort(arr, 1, n)\n    else\n     \
    \   quickSelect(arr, 1, n, n - k + 1)\n        quickSort(arr, n - k + 1, n)\n\
    \    end\n    return arr\nend", "    local function partition(arr, start, finish)\n\
    \        local pivot = arr[finish]\n        local i = start - 1\n        for j\
    \ = start, finish - 1 do\n            if arr[j] < pivot then\n               \
    \ i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n\
    \        end\n        arr[i + 1], arr[finish] = arr[finish], arr[i + 1]\n    \
    \    return i + 1\n    end\n    local function quick_select(arr, start, finish,\
    \ k)\n        if start == finish then\n            return\n        end\n     \
    \   local pivot = partition(arr, start, finish)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quick_select(arr,\
    \ start, pivot - 1, k)\n        else\n            quick_select(arr, pivot + 1,\
    \ finish, k)\n        end\n    end\n    quick_select(arr, 1, #arr, #arr - k +\
    \ 1)\n    return arr\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n  \
    \              arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(l, r, k)\n        if l == r then\n          \
    \  return\n        end\n        local p = partition(l, r)\n        if p == k then\n\
    \            return\n        elseif p < k then\n            quick_select(p + 1,\
    \ r, k)\n        else\n            quick_select(l, p - 1, k)\n        end\n  \
    \  end\n    quick_select(1, n, k)\n    return arr\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local mid = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, mid - 1)\n            quick_sort(arr,\
    \ mid + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    local res = {}\n    for i = 1, k do\n  \
    \      local max = -math.huge\n        local max_idx = 0\n        for j = 1, n\
    \ do\n            if arr[j] > max then\n                max = arr[j]\n       \
    \         max_idx = j\n            end\n        end\n        table.insert(res,\
    \ max)\n        arr[max_idx] = -math.huge\n    end\n    return res\nend", "  \
    \  local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, n do\n        local\
    \ j = 1\n        while j <= k and res[j] > arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then return\
    \ arr end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickselect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local p = partition(arr, l, r)\n        if p == k then return arr[p] end\n\
    \        if p > k then\n            return quickselect(arr, l, p - 1, k)\n   \
    \     else\n            return quickselect(arr, p + 1, r, k)\n        end\n  \
    \  end\n    local pivot = quickselect(arr, 1, n, k)\n    local res = {}\n    for\
    \ i = 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if k ==\
    \ n then\n        table.sort(arr)\n        return arr\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        local max = -math.huge\n        local idx\
    \ = 0\n        for j = 1, n do\n            if arr[j] > max then\n           \
    \     max = arr[j]\n                idx = j\n            end\n        end\n  \
    \      res[i] = max\n        arr[idx] = -math.huge\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local i = partition(l,\
    \ r)\n        if i == k then\n            return\n        elseif i > k then\n\
    \            quickselect(l, i - 1, k)\n        else\n            quickselect(i\
    \ + 1, r, k)\n        end\n    end\n    quickselect(1, n, k)\n    return arr\n\
    end", "    local heap = {}\n    local function push(x)\n        local i = #heap\
    \ + 1\n        heap[i] = x\n        while i > 1 do\n            local p = math.floor(i\
    \ / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i]\
    \ = heap[i], heap[p]\n                i = p\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local x = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] =\
    \ nil\n        local i = 1\n        while i * 2 <= #heap do\n            local\
    \ l = i * 2\n            local r = i * 2 + 1\n            local j = l\n      \
    \      if r <= #heap and heap[r] > heap[l] then\n                j = r\n     \
    \       end\n            if heap[i] < heap[j] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n        return x\n    end\n    for i =\
    \ 1, #arr do\n        if #heap < k then\n            push(arr[i])\n        elseif\
    \ arr[i] > heap[1] then\n            pop()\n            push(arr[i])\n       \
    \ end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = pop()\n\
    \    end\n    return res\nend", "    local heap = {}\n    for i = 1, k do\n  \
    \      heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n        if heap[i]\
    \ < heap[i // 2] then\n            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n\
    \        end\n    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            for j = 1, k, 2 do\n       \
    \         if heap[j] > heap[j + 1] then\n                    heap[j], heap[j +\
    \ 1] = heap[j + 1], heap[j]\n                end\n            end\n        end\n\
    \    end\n    return heap\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function qsort(arr, left, right)\n      \
    \  if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            qsort(arr, left, pivot - 1)\n            qsort(arr, pivot + 1, right)\n\
    \        end\n    end\n    qsort(arr, 1, #arr)\n    local res = {}\n    for i\
    \ = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        local p =\
    \ partition(arr, l, r)\n        if p == k then\n            return\n        elseif\
    \ p > k then\n            quickSelect(arr, l, p - 1, k)\n        else\n      \
    \      quickSelect(arr, p + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, k)\n    return arr\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(arr, left, right)\n\
    \        if left < right then\n            local pivot = partition(arr, left,\
    \ right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickselect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local i = partition(arr, l, r)\n        if i ==\
    \ k then\n            return arr[i]\n        elseif i > k then\n            return\
    \ quickselect(arr, l, i - 1, k)\n        else\n            return quickselect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    local function sort(arr, k)\n      \
    \  local n = #arr\n        for i = 1, k do\n            for j = i + 1, n do\n\
    \                if arr[i] < arr[j] then\n                    arr[i], arr[j] =\
    \ arr[j], arr[i]\n                end\n            end\n        end\n        return\
    \ arr\n    end\n    local n = #arr\n    if k == n then\n        return sort(arr,\
    \ k)\n    else\n        local pivot = quickselect(arr, 1, n, k)\n        local\
    \ res = {}\n        for i = 1, n do\n            if arr[i] >= pivot then\n   \
    \             res[#res + 1] = arr[i]\n            end\n        end\n        return\
    \ res\n    end\nend", "    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, #arr do\n        local min = heap[1]\n   \
    \     if arr[i] > min then\n            heap[1] = arr[i]\n            local j\
    \ = 1\n            while j * 2 <= k do\n                local l = j * 2\n    \
    \            local r = j * 2 + 1\n                if r <= k then\n           \
    \         if heap[l] < heap[r] then\n                        if heap[j] > heap[r]\
    \ then\n                            heap[j], heap[r] = heap[r], heap[j]\n    \
    \                        j = r\n                        else\n               \
    \             break\n                        end\n                    else\n \
    \                       if heap[j] > heap[l] then\n                          \
    \  heap[j], heap[l] = heap[l], heap[j]\n                            j = l\n  \
    \                      else\n                            break\n             \
    \           end\n                    end\n                else\n             \
    \       if heap[j] > heap[l] then\n                        heap[j], heap[l] =\
    \ heap[l], heap[j]\n                        j = l\n                    else\n\
    \                        break\n                    end\n                end\n\
    \            end\n        end\n    end\n    return heap\nend", "    local len\
    \ = #arr\n    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n\
    \        return {}\n    end\n    if k == len then\n        return arr\n    end\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, len)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local pivot = partition(arr, l, r)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quick_select(arr, l, pivot - 1, k)\n        else\n\
    \            return quick_select(arr, pivot + 1, r, k)\n        end\n    end\n\
    \    local function sort(arr, k)\n        local n = #arr\n        local l = 1\n\
    \        local r = n\n        local pivot = quick_select(arr, l, r, k)\n     \
    \   local i = 1\n        local j = 1\n        while j <= n do\n            if\
    \ arr[j] >= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n    \
    \            i = i + 1\n            end\n            j = j + 1\n        end\n\
    \        return arr\n    end\n    return sort(arr, k)\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] >= pivot then\n          \
    \      i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n          \
    \  end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n       \
    \ return i + 1\n    end\n    local function quickSelect(arr, l, r, k)\n      \
    \  if l == r then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickSelect(arr, l, p - 1, k)\n        else\n   \
    \         return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local p =\
    \ partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr,\
    \ p + 1, r)\n        end\n    end\n    local n = #arr\n    if k == n then\n  \
    \      quickSort(arr, 1, n)\n    else\n        quickSelect(arr, 1, n, n - k +\
    \ 1)\n        quickSort(arr, n - k + 1, n)\n    end\n    return arr\nend", " \
    \   local function partition(arr, l, r)\n        local pivot = arr[r]\n      \
    \  local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot\
    \ then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quick_select(arr, l, p - 1, k)\n\
    \        else\n            return quick_select(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function merge(arr1, arr2)\n        local i, j, k = 1, 1,\
    \ 1\n        local n, m = #arr1, #arr2\n        local arr = {}\n        while\
    \ i <= n and j <= m do\n            if arr1[i] >= arr2[j] then\n             \
    \   arr[k] = arr1[i]\n                i = i + 1\n            else\n          \
    \      arr[k] = arr2[j]\n                j = j + 1\n            end\n        \
    \    k = k + 1\n        end\n        while i <= n do\n            arr[k] = arr1[i]\n\
    \            i = i + 1\n            k = k + 1\n        end\n        while j <=\
    \ m do\n            arr[k] = arr2[j]\n            j = j + 1\n            k = k\
    \ + 1\n        end\n        return arr\n    end\n    local function merge_sort(arr,\
    \ l, r)\n        if l == r then\n            return {arr[l]}\n        end\n  \
    \      local mid = math.floor((l + r) / 2)\n        local arr1 = merge_sort(arr,\
    \ l, mid)\n        local arr2 = merge_sort(arr, mid + 1, r)", "    local len =\
    \ #arr\n    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n\
    \        return {}\n    end\n    if k >= len then\n        return arr\n    end\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, len do\n        local min = heap[1]\n        local min_idx = 1\n\
    \        for j = 2, k do\n            if heap[j] < min then\n                min\
    \ = heap[j]\n                min_idx = j\n            end\n        end\n     \
    \   if arr[i] > min then\n            heap[min_idx] = arr[i]\n        end\n  \
    \  end\n    return heap\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n\
    \            if arr[j] >= pivot then\n                i = i + 1\n            \
    \    arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i\
    \ + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local p = partition(arr, l, r)\n        if p ==\
    \ k then\n            return arr[p]\n        elseif p > k then\n            return\
    \ quick_select(arr, l, p - 1, k)\n        else\n            return quick_select(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local function sort(arr, l, r)\n   \
    \     if l >= r then\n            return\n        end\n        local p = partition(arr,\
    \ l, r)\n        sort(arr, l, p - 1)\n        sort(arr, p + 1, r)\n    end\n \
    \   local n = #arr\n    local pivot = quick_select(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    sort(res, 1, #res)\n    return res\n\
    end", "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif\
    \ k == len then\n        return arr\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quickSelect(arr, l, i - 1, k)\n\
    \        else\n            return quickSelect(arr, i + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, len, k)\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local len\
    \ = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local max_index = -1\n        for j = 1, len do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_index = j\n  \
    \          end\n        end\n        res[i] = max\n        arr[max_index] = -math.huge\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        local max = arr[i]\n        local max_idx = i\n  \
    \      for j = i + 1, len do\n            if arr[j] > max then\n             \
    \   max = arr[j]\n                max_idx = j\n            end\n        end\n\
    \        res[i] = max\n        arr[max_idx] = arr[i]\n    end\n    return res\n\
    end", "    local heap = {}\n    local function heapify(i)\n        local l = 2\
    \ * i\n        local r = 2 * i + 1\n        local smallest = i\n        if l <=\
    \ #heap and heap[l] < heap[smallest] then\n            smallest = l\n        end\n\
    \        if r <= #heap and heap[r] < heap[smallest] then\n            smallest\
    \ = r\n        end\n        if smallest ~= i then\n            heap[i], heap[smallest]\
    \ = heap[smallest], heap[i]\n            heapify(smallest)\n        end\n    end\n\
    \    local function extract_min()\n        local min = heap[1]\n        heap[1]\
    \ = heap[#heap]\n        heap[#heap] = nil\n        heapify(1)\n        return\
    \ min\n    end\n    local function insert(x)\n        heap[#heap + 1] = x\n  \
    \      local i = #heap\n        while i > 1 and heap[i] < heap[i // 2] do\n  \
    \          heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i //\
    \ 2\n        end\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  extract_min()\n            insert(arr[i])\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = extract_min()\n    end\n   \
    \ return res\nend", "    local function partition(arr, lo, hi)\n        local\
    \ pivot = arr[hi]\n        local i = lo\n        for j = lo, hi - 1 do\n     \
    \       if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[hi]\
    \ = arr[hi], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ lo, hi, k)\n        if lo == hi then\n            return arr[lo]\n        end\n\
    \        local pivot = partition(arr, lo, hi)\n        if pivot == k then\n  \
    \          return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickselect(arr, lo, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, hi, k)\n        end\n    end\n    local function sort(arr, k)\n \
    \       local n = #arr\n        for i = 1, k do\n            local min = i\n \
    \           for j = i + 1, n do\n                if arr[j] < arr[min] then\n \
    \                   min = j\n                end\n            end\n          \
    \  arr[i], arr[min] = arr[min], arr[i]\n        end\n    end\n    local n = #arr\n\
    \    if k == n then\n        sort(arr, k)\n    else\n        quickselect(arr,\
    \ 1, n, n - k + 1)\n        sort(arr, k)\n    end\n    return arr\nend", "   \
    \ local function partition(arr, l, r)\n        local pivot = arr[r]\n        local\
    \ i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n   \
    \             arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n   \
    \         end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local mid = partition(arr, left, right)\n\
    \            quick_sort(arr, left, mid - 1)\n            quick_sort(arr, mid +\
    \ 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k > len then\n        return arr\n    end\n\
    \    local heap = {}\n    local function heapify(arr, i)\n        local l = 2\
    \ * i\n        local r = 2 * i + 1\n        local largest = i\n        if l <=\
    \ len and arr[l] > arr[largest] then\n            largest = l\n        end\n \
    \       if r <= len and arr[r] > arr[largest] then\n            largest = r\n\
    \        end\n        if largest ~= i then\n            arr[i], arr[largest] =\
    \ arr[largest], arr[i]\n            heapify(arr, largest)\n        end\n    end\n\
    \    local function build_heap(arr)\n        for i = math.floor(len / 2), 1, -1\
    \ do\n            heapify(arr, i)\n        end\n    end\n    local function heap_sort(arr)\n\
    \        build_heap(arr)\n        for i = len, 1, -1 do\n            arr[1], arr[i]\
    \ = arr[i], arr[1]\n            len = len - 1\n            heapify(arr, 1)\n \
    \       end\n    end\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    build_heap(heap)\n    for i = k + 1, #arr do\n        if arr[i] > heap[1]\
    \ then\n            heap[1] = arr[i]\n            heapify(heap, 1)\n        end\n\
    \    end\n    heap_sort(heap)\n    return heap\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] < pivot do\n            \
    \    j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] > pivot do\n                i = i + 1\n            end\n      \
    \      if i < j then\n                arr[j] = arr[i]\n                j = j -\
    \ 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local p = partition(arr, l, r)\n        if p ==\
    \ k then\n            return arr[p]\n        elseif p > k then\n            return\
    \ quick_select(arr, l, p - 1, k)\n        else\n            return quick_select(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local function sort(arr, l, r)\n   \
    \     if l >= r then\n            return\n        end\n        local p = partition(arr,\
    \ l, r)\n        sort(arr, l, p - 1)\n        sort(arr, p + 1, r)\n    end\n \
    \   local function find_kth_largest(arr, k)\n        return quick_select(arr,\
    \ 1, #arr, #arr - k + 1)\n    end\n    local function find_k_largest(arr, k)\n\
    \        local result = {}\n        for i = 1, k do\n            result[i] = find_kth_largest(arr,\
    \ i)\n        end\n        sort(result, 1, #result)\n        return result\n \
    \   end\n    return find_k_largest(arr, k)\nend", "    local function partition(arr,\
    \ lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n        for j\
    \ = lo, hi - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return i\n    end\n\
    \    local function quickselect(arr, lo, hi, k)\n        if lo >= hi then\n  \
    \          return\n        end\n        local p = partition(arr, lo, hi)\n   \
    \     if p == k then\n            return\n        elseif p < k then\n        \
    \    quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local ret = {}\n    for i = 1, k do\n\
    \        ret[i] = arr[i]\n    end\n    return ret\nend", "    local res = {}\n\
    \    local len = #arr\n    for i = 1, len do\n        local j = i\n        while\
    \ j > 1 and res[j - 1] < arr[i] do\n            res[j] = res[j - 1]\n        \
    \    j = j - 1\n        end\n        res[j] = arr[i]\n        if #res > k then\n\
    \            table.remove(res, #res)\n        end\n    end\n    return res\nend",
  "    local heap = {}\n    local function push(x)\n        local i = #heap + 1\n\
    \        heap[i] = x\n        while i > 1 do\n            local p = i // 2\n \
    \           if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i],\
    \ heap[p]\n                i = p\n            else\n                break\n  \
    \          end\n        end\n    end\n    local function pop()\n        local\
    \ x = heap[1]\n        local i = 1\n        heap[1] = heap[#heap]\n        heap[#heap]\
    \ = nil\n        while i * 2 <= #heap do\n            local a = i * 2\n      \
    \      local b = i * 2 + 1\n            if b <= #heap and heap[b] > heap[a] then\n\
    \                a = b\n            end\n            if heap[i] < heap[a] then\n\
    \                heap[i], heap[a] = heap[a], heap[i]\n                i = a\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if #heap < k then\n   \
    \         push(arr[i])\n        elseif arr[i] > heap[1] then\n            pop()\n\
    \            push(arr[i])\n        end\n    end\n    for i = #heap, 1, -1 do\n\
    \        heap[i], heap[1] = heap[1], heap[i]\n        pop()\n    end\n    return\
    \ heap\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n\
    \    if k == 0 then\n        return {}\n    elseif k == n then\n        return\
    \ arr\n    end\n    local function partition(arr, l, r)\n        local pivot =\
    \ arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ >= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n           \
    \     i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quick_select(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local i = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quick_select(arr, l, i - 1, k)\n\
    \        else\n            return quick_select(arr, i + 1, r, k)\n        end\n\
    \    end\n    quick_select(arr, 1, n, k)\n    return arr\nend", "    local function\
    \ max(arr, k)\n        local n = #arr\n        if k == 1 then\n            local\
    \ m = arr[1]\n            for i = 2, n do\n                if arr[i] > m then\n\
    \                    m = arr[i]\n                end\n            end\n      \
    \      return m\n        end\n        local m = max(arr, k - 1)\n        for i\
    \ = k, n do\n            if arr[i] > m then\n                m = arr[i]\n    \
    \        end\n        end\n        return m\n    end\n    local function remove(arr,\
    \ x)\n        local n = #arr\n        for i = 1, n do\n            if arr[i] ==\
    \ x then\n                table.remove(arr, i)\n                break\n      \
    \      end\n        end\n    end\n    local res = {}\n    for i = 1, k do\n  \
    \      local m = max(arr, #arr)\n        table.insert(res, m)\n        remove(arr,\
    \ m)\n    end\n    return res\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r -\
    \ 1 do\n            if arr[j] >= pivot then\n                i = i + 1\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n  \
    \      arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quickSelect(arr, l, p - 1, k)\n        else\n            return\
    \ quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local function merge(arr1,\
    \ arr2)\n        local arr = {}\n        local i, j = 1, 1\n        while i <=\
    \ #arr1 and j <= #arr2 do\n            if arr1[i] > arr2[j] then\n           \
    \     arr[#arr + 1] = arr1[i]\n                i = i + 1\n            else\n \
    \               arr[#arr + 1] = arr2[j]\n                j = j + 1\n         \
    \   end\n        end\n        while i <= #arr1 do\n            arr[#arr + 1] =\
    \ arr1[i]\n            i = i + 1\n        end\n        while j <= #arr2 do\n \
    \           arr[#arr + 1] = arr2[j]\n            j = j + 1\n        end\n    \
    \    return arr\n    end\n    local function mergeSort(arr, l, r)\n        if\
    \ l == r then\n            return {arr[l]}\n        end\n        local mid = math.floor((l\
    \ + r) / 2)\n        local arr1 = mergeSort(arr, l, mid)\n        local arr2 =\
    \ mergeSort(arr, mid + 1, r)\n        return merge(arr1, arr2)\n    end\n    local\
    \ function sort(arr, k)\n", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return arr[pivot]\n\
    \        elseif pivot > k then\n            return quickSelect(arr, l, pivot -\
    \ 1, k)\n        else\n            return quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local pivot = partition(arr, l, r)\n            quickSort(arr,\
    \ l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    local n = #arr\n    local k = math.min(k, n)\n    quickSelect(arr, 1, n,\
    \ k)\n    quickSort(arr, 1, k)\n    return arr\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local p = partition(arr, l, r)\n        if p ==\
    \ k then\n            return arr[p]\n        elseif p > k then\n            return\
    \ quick_select(arr, l, p - 1, k)\n        else\n            return quick_select(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local function get_max(arr, k)\n   \
    \     local max = {}\n        for i = 1, k do\n            max[i] = quick_select(arr,\
    \ 1, #arr, i)\n        end\n        return max\n    end\n    return get_max(arr,\
    \ k)\nend", "    local n = #arr\n    if k > n then\n        return arr\n    end\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n           \
    \ heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n    for\
    \ i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            for j = 1, k, 2 do\n                if heap[j] > heap[j + 1] then\n\
    \                    heap[j], heap[j + 1] = heap[j + 1], heap[j]\n           \
    \     end\n            end\n        end\n    end\n    return heap\nend", "   \
    \ local heap = {}\n    local function heapify(i)\n        local left = 2 * i\n\
    \        local right = 2 * i + 1\n        local largest = i\n        if left <=\
    \ #heap and heap[left] > heap[largest] then\n            largest = left\n    \
    \    end\n        if right <= #heap and heap[right] > heap[largest] then\n   \
    \         largest = right\n        end\n        if largest ~= i then\n       \
    \     heap[i], heap[largest] = heap[largest], heap[i]\n            heapify(largest)\n\
    \        end\n    end\n    local function build_heap()\n        for i = #heap\
    \ // 2, 1, -1 do\n            heapify(i)\n        end\n    end\n    local function\
    \ insert(x)\n        heap[#heap + 1] = x\n        local i = #heap\n        while\
    \ i > 1 and heap[i // 2] < heap[i] do\n            heap[i // 2], heap[i] = heap[i],\
    \ heap[i // 2]\n            i = i // 2\n        end\n    end\n    local function\
    \ extract_max()\n        local max = heap[1]\n        heap[1] = heap[#heap]\n\
    \        heap[#heap] = nil\n        heapify(1)\n        return max\n    end\n\
    \    for i = 1, #arr do\n        if #heap < k then\n            insert(arr[i])\n\
    \        elseif arr[i] > heap[1] then\n            extract_max()\n           \
    \ insert(arr[i])\n        end\n    end\n    build_heap()\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = extract_max()\n    end\n    return res\n\
    end", "    local result = {}\n    for i = 1, k do\n        local max = arr[i]\n\
    \        local max_index = i\n        for j = i + 1, #arr do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_index = j\n  \
    \          end\n        end\n        result[i] = max\n        arr[max_index] =\
    \ arr[i]\n        arr[i] = max\n    end\n    return result\nend", "    local n\
    \ = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local i = partition(arr, l, r)\n        if i\
    \ == k then return arr[i] end\n        if i > k then\n            return quickselect(arr,\
    \ l, i - 1, k)\n        else\n            return quickselect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local pivot = quickselect(arr, 1, n, k)\n    local\
    \ res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n           \
    \ res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n == 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then\
    \ return arr end\n    local heap = {}\n    for i = 1, k do\n        heap[i] =\
    \ arr[i]\n    end\n    for i = k, n do\n        local j = 1\n        while j <=\
    \ k and heap[j] < arr[i] do\n            j = j + 1\n        end\n        if j\
    \ <= k then\n            for l = k, j + 1, -1 do\n                heap[l] = heap[l\
    \ - 1]\n            end\n            heap[j] = arr[i]\n        end\n    end\n\
    \    return heap\nend", "    local len = #arr\n    if k > len then\n        return\
    \ arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k / 2, 1, -1 do\n        local j = i * 2\n        while\
    \ j <= k do\n            if j + 1 <= k and heap[j + 1] < heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] <= heap[j] then\n\
    \                break\n            end\n            heap[i], heap[j] = heap[j],\
    \ heap[i]\n            j = j * 2\n        end\n    end\n    for i = k + 1, len\
    \ do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n       \
    \     local j = 1\n            while j * 2 <= k do\n                local t =\
    \ j * 2\n                if t + 1 <= k and heap[t + 1] < heap[t] then\n      \
    \              t = t + 1\n                end\n                if heap[j] <= heap[t]\
    \ then\n                    break\n                end\n                heap[j],\
    \ heap[t] = heap[t], heap[j]\n                j = t\n            end\n       \
    \ end\n    end\n    for i = 1, k / 2 do\n        heap[i], heap[k - i + 1] = heap[k\
    \ - i + 1], heap[i]\n    end\n    return heap\nend", "    local len = #arr\n \
    \   if len == 0 then\n        return {}\n    end\n    if k == 0 then\n       \
    \ return {}\n    end\n    if k >= len then\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, len do\n        local j = 1\n        while j <= k and heap[j] > arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ for l = k, j + 1, -1 do\n                heap[l] = heap[l - 1]\n           \
    \ end\n            heap[j] = arr[i]\n        end\n    end\n    return heap\nend",
  "    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k == n then\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i\
    \ // 2] then\n            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n    \
    \    end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local m = j * 2\n                if m + 1 <= k and\
    \ heap[m + 1] < heap[m] then\n                    m = m + 1\n                end\n\
    \                if heap[j] <= heap[m] then\n                    break\n     \
    \           end\n                heap[j], heap[m] = heap[m], heap[j]\n       \
    \         j = m\n            end\n        end\n    end\n    return heap\nend",
  "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, len, len - k + 1)\n    local res = {}\n    for\
    \ i = len - k + 1, len do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local heap = {}\n    local function push(x)\n        local i\
    \ = #heap + 1\n        heap[i] = x\n        while i > 1 do\n            local\
    \ p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n             \
    \   heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n\
    \                break\n            end\n        end\n    end\n    local function\
    \ pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap]\
    \ = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local\
    \ l = i * 2\n            local r = i * 2 + 1\n            local j = l\n      \
    \      if r <= #heap and heap[r] > heap[l] then\n                j = r\n     \
    \       end\n            if heap[i] < heap[j] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n        return x\n    end\n    for i =\
    \ 1, #arr do\n        if #heap < k then\n            push(arr[i])\n        elseif\
    \ arr[i] > heap[1] then\n            pop()\n            push(arr[i])\n       \
    \ end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = pop()\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local ret\
    \ = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n    return ret\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quick_select(arr, l, r, k)\n  \
    \      if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quick_select(arr, l, i - 1, k)\n\
    \        else\n            return quick_select(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, k)\n        local n = #arr\n        for\
    \ i = 1, k do\n            local j = i\n            while j > 1 and arr[j] < arr[j\
    \ - 1] do\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n         \
    \       j = j - 1\n            end\n        end\n        for i = k + 1, n do\n\
    \            if arr[i] > arr[k] then\n                arr[k] = arr[i]\n      \
    \          local j = k\n                while j > 1 and arr[j] < arr[j - 1] do\n\
    \                    arr[j], arr[j - 1] = arr[j - 1], arr[j]\n               \
    \     j = j - 1\n                end\n            end\n        end\n    end\n\
    \    local n = #arr\n    if k == n then\n        return arr\n    end\n    local\
    \ res = {}\n    local pivot = quick_select(arr, 1, n, k)\n    local j = 0\n  \
    \  for i = 1, n do\n        if arr[i] >= pivot then\n            j = j + 1\n \
    \           res[j] = arr[i]\n        end\n    end\n    sort(res, k)\n    return\
    \ res\n", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0\
    \ then return {} end\n    if k == n then return arr end\n    local res = {}\n\
    \    local i = 1\n    while i <= k do\n        local max = -math.huge\n      \
    \  local max_i = 0\n        for j = 1, n do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                max_i = j\n            end\n  \
    \      end\n        res[i] = max\n        i = i + 1\n        arr[max_i] = -math.huge\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1\
    \ do\n            if arr[j] >= pivot then\n                i = i + 1\n       \
    \         arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n    \
    \    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quickSelect(arr, l, p - 1, k)\n        else\n            return\
    \ quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local function sort(arr,\
    \ k)\n        local n = #arr\n        for i = 1, k do\n            quickSelect(arr,\
    \ i, n, i)\n        end\n    end\n    sort(arr, k)\n    return arr\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = #arr, #arr - k\
    \ + 1, -1 do\n        table.insert(res, arr[i])\n    end\n    return res\nend",
  "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ < pivot do\n                j = j - 1\n            end\n            if i < j\
    \ then\n                arr[i] = arr[j]\n                i = i + 1\n         \
    \   end\n            while i < j and arr[i] > pivot do\n                i = i\
    \ + 1\n            end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(arr, left, right)\n\
    \        if left < right then\n            local mid = partition(arr, left, right)\n\
    \            quick_sort(arr, left, mid - 1)\n            quick_sort(arr, mid +\
    \ 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_select(arr,\
    \ left, right, k)\n        if left == right then return end\n        local pivot\
    \ = partition(arr, left, right)\n        if pivot == k then return end\n     \
    \   if pivot > k then\n            quick_select(arr, left, pivot - 1, k)\n   \
    \     else\n            quick_select(arr, pivot + 1, right, k)\n        end\n\
    \    end\n    quick_select(arr, 1, n, n - k + 1)\n    local res = {}\n    for\
    \ i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end", "    local heap = {}\n    local size = 0\n    local function heap_push(v)\n\
    \        size = size + 1\n        heap[size] = v\n        local i = size\n   \
    \     while i > 1 do\n            local p = math.floor(i / 2)\n            if\
    \ heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n\
    \                i = p\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        if size == 0 then\n\
    \            return nil\n        end\n        local v = heap[1]\n        heap[1]\
    \ = heap[size]\n        heap[size] = nil\n        size = size - 1\n        local\
    \ i = 1\n        while i * 2 <= size do\n            local l = i * 2\n       \
    \     local r = i * 2 + 1\n            local m = l\n            if r <= size and\
    \ heap[r] > heap[l] then\n                m = r\n            end\n           \
    \ if heap[i] < heap[m] then\n                heap[i], heap[m] = heap[m], heap[i]\n\
    \                i = m\n            else\n                break\n            end\n\
    \        end\n        return v\n    end\n    for i = 1, #arr do\n        heap_push(arr[i])\n\
    \        if size > k then\n            heap_pop()\n        end\n    end\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = heap_pop()\n    end\n\
    \    return result\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_select(l, r, k)\n        if\
    \ l == r then\n            return\n        end\n        local pivot = partition(l,\
    \ r)\n        if pivot == k then\n            return\n        elseif pivot < k\
    \ then\n            quick_select(pivot + 1, r, k)\n        else\n            quick_select(l,\
    \ pivot - 1, k)\n        end\n    end\n    quick_select(1, n, n - k + 1)\n   \
    \ local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local heap = {}\n    local function heapify(i)\n        local l = 2\
    \ * i\n        local r = 2 * i + 1\n        local smallest = i\n        if l <=\
    \ #heap and heap[l] < heap[smallest] then\n            smallest = l\n        end\n\
    \        if r <= #heap and heap[r] < heap[smallest] then\n            smallest\
    \ = r\n        end\n        if smallest ~= i then\n            heap[i], heap[smallest]\
    \ = heap[smallest], heap[i]\n            heapify(smallest)\n        end\n    end\n\
    \    local function extract_min()\n        local min = heap[1]\n        heap[1]\
    \ = heap[#heap]\n        heap[#heap] = nil\n        heapify(1)\n        return\
    \ min\n    end\n    local function insert(x)\n        heap[#heap + 1] = x\n  \
    \      local i = #heap\n        while i > 1 and heap[i] < heap[i // 2] do\n  \
    \          heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i //\
    \ 2\n        end\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  extract_min()\n            insert(arr[i])\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = extract_min()\n    end\n   \
    \ return res\nend", "    local n = #arr\n    if k == 0 then\n        return {}\n\
    \    elseif k == n then\n        return arr\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickselect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickselect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickselect(arr, pivot + 1, r, k)\n        end\n    end\n    quickselect(arr,\
    \ 1, n, k)\n    return arr\nend", "    local heap = {}\n    local heap_size =\
    \ 0\n    local function heap_push(v)\n        heap_size = heap_size + 1\n    \
    \    heap[heap_size] = v\n        local i = heap_size\n        while i > 1 do\n\
    \            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n\
    \                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    local function heap_pop()\n        local v = heap[1]\n        heap[1] = heap[heap_size]\n\
    \        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <=\
    \ heap_size do\n            local l = i * 2\n            local r = i * 2 + 1\n\
    \            local j = l\n            if r <= heap_size and heap[r] > heap[l]\
    \ then\n                j = r\n            end\n            if heap[i] < heap[j]\
    \ then\n                heap[i], heap[j] = heap[j], heap[i]\n                i\
    \ = j\n            else\n                break\n            end\n        end\n\
    \        return v\n    end\n    for i = 1, #arr do\n        if heap_size < k then\n\
    \            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n       \
    \     heap_pop()\n            heap_push(arr[i])\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = heap_pop()\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, mid - 1)\n            quick_sort(arr, mid + 1, right)\n        end\n \
    \   end\n    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k\
    \ do\n        result[i] = arr[i]\n    end\n    return result\nend", "    local\
    \ n = #arr\n    if k == 0 then\n        return {}\n    elseif k >= n then\n  \
    \      table.sort(arr)\n        return arr\n    end\n    local result = {}\n \
    \   local i = 1\n    while i <= k do\n        result[i] = arr[i]\n        i =\
    \ i + 1\n    end\n    table.sort(result)\n    while i <= n do\n        local j\
    \ = 1\n        while j <= k do\n            if arr[i] > result[j] then\n     \
    \           table.remove(result, j)\n                table.insert(result, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local heap = {}\n \
    \   for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n\
    \        if heap[i] < heap[i // 2] then\n            heap[i], heap[i // 2] = heap[i\
    \ // 2], heap[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > heap[1] then\n            heap[1] = arr[i]\n            for j = 1,\
    \ k, 2 do\n                if heap[j] > heap[j + 1] then\n                   \
    \ heap[j], heap[j + 1] = heap[j + 1], heap[j]\n                end\n         \
    \   end\n        end\n    end\n    return heap\nend", "    local len = #arr\n\
    \    if len == 0 then\n        return {}\n    end\n    if k > len then\n     \
    \   k = len\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, 2, -1 do\n        local j = i\n        while\
    \ j > 1 do\n            local p = math.floor(j / 2)\n            if heap[p] <\
    \ heap[j] then\n                heap[p], heap[j] = heap[j], heap[p]\n        \
    \        j = p\n            else\n                break\n            end\n   \
    \     end\n    end\n    for i = k + 1, len do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[l] < heap[r] then\n                    l =\
    \ r\n                end\n                if heap[j] < heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    for i = k, 2, -1 do\n        heap[i], heap[1]\
    \ = heap[1], heap[i]\n        local j = 1\n        while j * 2 <= i - 1 do\n \
    \           local l = j * 2\n            local r = l + 1\n            if r <=\
    \ i - 1 and heap[l] < heap[r] then\n                l = r\n            end\n \
    \           if heap[j] < heap[l] then\n                heap[j], heap[l] = heap[l],\
    \ heap[j]\n                j = l\n            else\n                break\n  \
    \          end\n        end\n    end\n    return heap\nend", "    local len =\
    \ #arr\n    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n\
    \        return {}\n    end\n    if k == len then\n        return arr\n    end\n\
    \    local t = {}\n    for i = 1, len do\n        t[i] = arr[i]\n    end\n   \
    \ local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(t, 1, len)\n    local result = {}\n    for i = 1, k do\n     \
    \   result[i] = t[i]\n    end\n    return result\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] >= pivot then\n                i = i +\
    \ 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n      \
    \  end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n\
    \    end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return\n        end\n        local p = partition(arr, l, r)\n   \
    \     if p == k then\n            return\n        elseif p < k then\n        \
    \    quickSelect(arr, p + 1, r, k)\n        else\n            quickSelect(arr,\
    \ l, p - 1, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >=\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quick_select(arr, l,\
    \ r, k)\n        if l == r then\n            return arr[l]\n        end\n    \
    \    local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quick_select(arr, l, p\
    \ - 1, k)\n        else\n            return quick_select(arr, p + 1, r, k)\n \
    \       end\n    end\n    local function merge(arr1, arr2)\n        local i, j,\
    \ k = 1, 1, 1\n        local arr = {}\n        while i <= #arr1 and j <= #arr2\
    \ do\n            if arr1[i] > arr2[j] then\n                arr[k] = arr1[i]\n\
    \                i = i + 1\n            else\n                arr[k] = arr2[j]\n\
    \                j = j + 1\n            end\n            k = k + 1\n        end\n\
    \        while i <= #arr1 do\n            arr[k] = arr1[i]\n            i = i\
    \ + 1\n            k = k + 1\n        end\n        while j <= #arr2 do\n     \
    \       arr[k] = arr2[j]\n            j = j + 1\n            k = k + 1\n     \
    \   end\n        return arr\n    end\n    local function merge_sort(arr, l, r)\n\
    \        if l == r then\n            return {arr[l]}\n        end\n        local\
    \ m = math.floor((l + r) / 2)\n        local arr1 = merge_sort(arr, l, m)\n  \
    \      local arr2 = merge_sort(arr, m + 1, r)\n        return merge(arr", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1,\
    \ k do\n        result[i] = arr[i]\n    end\n    return result\nend", "    local\
    \ heap = {}\n    local function push(x)\n        table.insert(heap, x)\n     \
    \   local i = #heap\n        while i > 1 do\n            local j = math.floor(i\
    \ / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n\
    \        local i = 1\n        while i * 2 <= #heap do\n            local j = i\
    \ * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        \
    \        j = j + 1\n            end\n            if heap[i] < heap[j] then\n \
    \               heap[i], heap[j] = heap[j], heap[i]\n                i = j\n \
    \           else\n                break\n            end\n        end\n      \
    \  return x\n    end\n    for i = 1, #arr do\n        if i <= k then\n       \
    \     push(arr[i])\n        else\n            if arr[i] > heap[1] then\n     \
    \           pop()\n                push(arr[i])\n            end\n        end\n\
    \    end\n    local result = {}\n    for i = 1, k do\n        table.insert(result,\
    \ 1, pop())\n    end\n    return result\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then return\
    \ arr end\n    local function partition(arr, l, r)\n        local v = arr[l]\n\
    \        local i = l\n        local j = r + 1\n        while true do\n       \
    \     while true do\n                i = i + 1\n                if arr[i] < v\
    \ then break end\n                if i == r then break end\n            end\n\
    \            while true do\n                j = j - 1\n                if v <\
    \ arr[j] then break end\n                if j == l then break end\n          \
    \  end\n            if i >= j then break end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quickselect(arr, l, r, k)\n        if l >= r\
    \ then return end\n        local j = partition(arr, l, r)\n        if j == k then\
    \ return end\n        if j > k then\n            quickselect(arr, l, j - 1, k)\n\
    \        else\n            quickselect(arr, j + 1, r, k)\n        end\n    end\n\
    \    quickselect(arr, 1, n, n - k + 1)\n    return {table.unpack(arr, n - k +\
    \ 1, n)}\nend", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_sort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k >= n then return arr end\n    local heap = {}\n    for\
    \ i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n  \
    \      heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend", "    local heap = {}\n    for i\
    \ = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n    \
    \    heapify(heap, i)\n    end\n    for i = k + 1, #arr do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1)\n\
    \        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] >= pivot then\n                i = i +\
    \ 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n      \
    \  end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n\
    \    end\n    local function quick_select(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quick_select(arr, l, p - 1, k)\n        else\n           \
    \ return quick_select(arr, p + 1, r, k)\n        end\n    end\n    local function\
    \ sort(arr, k)\n        for i = 1, k do\n            for j = i + 1, #arr do\n\
    \                if arr[i] < arr[j] then\n                    arr[i], arr[j] =\
    \ arr[j], arr[i]\n                end\n            end\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = quick_select(arr, 1,\
    \ #arr, i)\n    end\n    sort(res, k)\n    return res\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] >= pivot then\n          \
    \      i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n          \
    \  end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n       \
    \ return i + 1\n    end\n    local function quickselect(arr, l, r, k)\n      \
    \  if l == r then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p <\
    \ k then\n            return quickselect(arr, p + 1, r, k)\n        else\n   \
    \         return quickselect(arr, l, p - 1, k)\n        end\n    end\n    local\
    \ function sort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            sort(arr, l, p - 1)\n            sort(arr, p + 1, r)\n  \
    \      end\n    end\n    quickselect(arr, 1, #arr, k)\n    sort(arr, 1, k)\n \
    \   return arr\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n     \
    \       if arr[j] >= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r]\
    \ = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p < k then\n            return quickselect(arr, p + 1,\
    \ r, k)\n        else\n            return quickselect(arr, l, p - 1, k)\n    \
    \    end\n    end\n    local function sort(arr, k)\n        local n = #arr\n \
    \       for i = 1, k do\n            quickselect(arr, i, n, i)\n        end\n\
    \    end\n    sort(arr, k)\n    return arr\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j\
    \ = l, r - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l < r then\n      \
    \      local p = partition(arr, l, r)\n            if p == k then\n          \
    \      return\n            elseif p < k then\n                quick_select(arr,\
    \ p + 1, r, k)\n            else\n                quick_select(arr, l, p - 1,\
    \ k)\n            end\n        end\n    end\n    quick_select(arr, 1, #arr, k)\n\
    \    return arr\nend", "    local function partition(arr, left, right)\n     \
    \   local pivot = arr[left]\n        local i = left + 1\n        local j = right\n\
    \        while i <= j do\n            while i <= j and arr[i] >= pivot do\n  \
    \              i = i + 1\n            end\n            while i <= j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n \
    \       end\n        arr[left], arr[j] = arr[j], arr[left]\n        return j\n\
    \    end\n    local function quick_select(arr, left, right, k)\n        if left\
    \ >= right then\n            return\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return\n        elseif\
    \ pivot > k then\n            quick_select(arr, left, pivot - 1, k)\n        else\n\
    \            quick_select(arr, pivot + 1, right, k)\n        end\n    end\n  \
    \  quick_select(arr, 1, #arr, #arr - k + 1)\n    return arr\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quick_select(arr, l, p - 1, k)\n\
    \        else\n            return quick_select(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n  \
    \          local p = partition(arr, l, r)\n            quick_sort(arr, l, p -\
    \ 1)\n            quick_sort(arr, p + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    return quick_select(arr, 1, #arr, k)\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] >= pivot then\n          \
    \      i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n          \
    \  end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n       \
    \ return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n     \
    \   if l == r then\n            return arr[l]\n        end\n        local p =\
    \ partition(arr, l, r)\n        if p == k then\n            return arr[p]\n  \
    \      elseif p > k then\n            return quick_select(arr, l, p - 1, k)\n\
    \        else\n            return quick_select(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, l, r)\n        if l >= r then\n       \
    \     return\n        end\n        local p = partition(arr, l, r)\n        sort(arr,\
    \ l, p - 1)\n        sort(arr, p + 1, r)\n    end\n    local function find_kth_largest(arr,\
    \ k)\n        return quick_select(arr, 1, #arr, k)\n    end\n    local function\
    \ find_k_largest(arr, k)\n        local kth = find_kth_largest(arr, k)\n     \
    \   local res = {}\n        for i = 1, #arr do\n            if arr[i] >= kth then\n\
    \                res[#res + 1] = arr[i]\n            end\n        end\n      \
    \  sort(res, 1, #res)\n        return res\n    end\n    return find_k_largest(arr,\
    \ k)\nend", "    local n = #arr\n    local function partition(l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickselect(l, r, k)\n        if l == r then\n     \
    \       return\n        end\n        local i = partition(l, r)\n        if i ==\
    \ k then\n            return\n        elseif i < k then\n            quickselect(i\
    \ + 1, r, k)\n        else\n            quickselect(l, i - 1, k)\n        end\n\
    \    end\n    quickselect(1, n, n - k + 1)\n    local res = {}\n    for i = n\
    \ - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend",
  "    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n \
    \   for i = k, 2, -1 do\n        if heap[i] < heap[i / 2] then\n            heap[i],\
    \ heap[i / 2] = heap[i / 2], heap[i]\n        end\n    end\n    for i = k + 1,\
    \ #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n  \
    \          for j = 1, k / 2 do\n                if heap[j] > heap[j * 2] or heap[j]\
    \ > heap[j * 2 + 1] then\n                    if heap[j * 2] < heap[j * 2 + 1]\
    \ then\n                        heap[j], heap[j * 2] = heap[j * 2], heap[j]\n\
    \                    else\n                        heap[j], heap[j * 2 + 1] =\
    \ heap[j * 2 + 1], heap[j]\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return heap\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] > pivot then\n           \
    \     i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n           \
    \ end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return\
    \ i + 1\n    end\n    local function quick_select(arr, l, r, k)\n        if l\
    \ == r then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quick_select(arr, l, p - 1, k)\n        else\n  \
    \          return quick_select(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function sort(arr, l, r)\n        if l >= r then\n            return\n     \
    \   end\n        local p = partition(arr, l, r)\n        sort(arr, l, p - 1)\n\
    \        sort(arr, p + 1, r)\n    end\n    local n = #arr\n    local k = math.min(k,\
    \ n)\n    local pivot = quick_select(arr, 1, n, k)\n    local i = 1\n    while\
    \ i <= n and arr[i] >= pivot do\n        i = i + 1\n    end\n    sort(arr, 1,\
    \ i - 1)\n    sort(arr, i, n)\n    return arr\nend", "    local len = #arr\n \
    \   if k > len then\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    for i = k + 1, len do\n \
    \       local j = 1\n        while j <= k and res[j] < arr[i] do\n           \
    \ j = j + 1\n        end\n        if j <= k then\n            for m = k, j, -1\
    \ do\n                res[m] = res[m - 1]\n            end\n            res[j]\
    \ = arr[i]\n        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ < pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return\n   \
    \     elseif pivot < k then\n            quickSelect(arr, pivot + 1, r, k)\n \
    \       else\n            quickSelect(arr, l, pivot - 1, k)\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend", "  \
    \  local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n      \
    \  heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            heapify(heap, 1, k)\n\
    \        end\n    end\n    return heap\nend", "    local heap = {}\n    local\
    \ function push(x)\n        local i = #heap + 1\n        heap[i] = x\n       \
    \ while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p]\
    \ > heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n      \
    \          i = p\n            else\n                break\n            end\n \
    \       end\n    end\n    local function pop()\n        local ret = heap[1]\n\
    \        local x = heap[#heap]\n        heap[1] = x\n        heap[#heap] = nil\n\
    \        local i = 1\n        while i * 2 <= #heap do\n            local a, b\
    \ = i * 2, i * 2 + 1\n            if b <= #heap and heap[b] < heap[a] then\n \
    \               a = b\n            end\n            if heap[i] > heap[a] then\n\
    \                heap[i], heap[a] = heap[a], heap[i]\n                i = a\n\
    \            else\n                break\n            end\n        end\n     \
    \   return ret\n    end\n    for i = 1, #arr do\n        if #heap < k then\n \
    \           push(arr[i])\n        elseif arr[i] > heap[1] then\n            pop()\n\
    \            push(arr[i])\n        end\n    end\n    local ret = {}\n    for i\
    \ = 1, k do\n        ret[i] = pop()\n    end\n    return ret\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] >= pivot then\n\
    \                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n\
    \        if l <= r then\n            local p = partition(arr, l, r)\n        \
    \    if p == k then\n                return\n            elseif p < k then\n \
    \               quick_select(arr, p + 1, r, k)\n            else\n           \
    \     quick_select(arr, l, p - 1, k)\n            end\n        end\n    end\n\
    \    quick_select(arr, 1, #arr, k)\n    return arr\nend", "    local heap = {}\n\
    \    local function heapify(i)\n        local l = i * 2\n        local r = i *\
    \ 2 + 1\n        local largest = i\n        if l <= #heap and heap[l] > heap[largest]\
    \ then\n            largest = l\n        end\n        if r <= #heap and heap[r]\
    \ > heap[largest] then\n            largest = r\n        end\n        if largest\
    \ ~= i then\n            heap[i], heap[largest] = heap[largest], heap[i]\n   \
    \         heapify(largest)\n        end\n    end\n    local function build_heap()\n\
    \        for i = #heap // 2, 1, -1 do\n            heapify(i)\n        end\n \
    \   end\n    local function insert(x)\n        heap[#heap + 1] = x\n        local\
    \ i = #heap\n        while i > 1 and heap[i // 2] < heap[i] do\n            heap[i\
    \ // 2], heap[i] = heap[i], heap[i // 2]\n            i = i // 2\n        end\n\
    \    end\n    local function extract_max()\n        local max = heap[1]\n    \
    \    heap[1] = heap[#heap]\n        heap[#heap] = nil\n        heapify(1)\n  \
    \      return max\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  extract_max()\n            insert(arr[i])\n        end\n    end\n    build_heap()\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = extract_max()\n   \
    \ end\n    return res\nend", "    local function partition(arr, l, r)\n      \
    \  local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n  \
    \          if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickselect(arr, l, p\
    \ - 1, k)\n        else\n            return quickselect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function quickselect_k(arr, k)\n        local n\
    \ = #arr\n        local result = {}\n        for i = 1, k do\n            result[i]\
    \ = quickselect(arr, 1, n, i)\n        end\n        return result\n    end\n \
    \   return quickselect_k(arr, k)\nend", "    local n = #arr\n    local function\
    \ partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local i = lo\
    \ - 1\n        for j = lo, hi - 1 do\n            if arr[j] > pivot then\n   \
    \             i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n   \
    \         end\n        end\n        arr[i + 1], arr[hi] = arr[hi], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function sort(arr, lo, hi)\n       \
    \ if lo < hi then\n            local p = partition(arr, lo, hi)\n            sort(arr,\
    \ lo, p - 1)\n            sort(arr, p + 1, hi)\n        end\n    end\n    sort(arr,\
    \ 1, n)\n    return arr\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickselect(arr, l, p\
    \ - 1, k)\n        else\n            return quickselect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function quickselect_k(arr, k)\n        local res\
    \ = {}\n        for i = 1, k do\n            res[i] = quickselect(arr, 1, #arr,\
    \ i)\n        end\n        return res\n    end\n    return quickselect_k(arr,\
    \ k)\nend", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >=\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quickSelect(arr, l,\
    \ r, k)\n        if l == r then\n            return arr[l]\n        end\n    \
    \    local pivot = partition(arr, l, r)\n        if pivot == k then\n        \
    \    return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local function quickSort(arr, l, r)\n  \
    \      if l < r then\n            local pivot = partition(arr, l, r)\n       \
    \     quickSort(arr, l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n\
    \        end\n    end\n    local n = #arr\n    quickSelect(arr, 1, n, k)\n   \
    \ quickSort(arr, 1, k)\n    return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
