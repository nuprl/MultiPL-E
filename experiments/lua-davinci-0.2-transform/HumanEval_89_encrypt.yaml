name: HumanEval_89_encrypt
language: lua
prompt: "-- Create a function encrypt that takes a string as an argument and\n-- returns\
  \ a string encrypted with the alphabet being rotated. \n-- The alphabet should be\
  \ rotated in a manner such that the letters \n-- shift down by two multiplied to\
  \ two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
  -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\nlocal\
  \ function encrypt(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
  \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
  \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
  \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'),\
  \ 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
  \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
  \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local encrypted\
    \ = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        local j =\
    \ alphabet:find(c)\n        if j then\n            local k = (j + 2 * 2) % #alphabet\n\
    \            encrypted = encrypted .. alphabet:sub(k, k)\n        else\n     \
    \       encrypted = encrypted .. c\n        end\n    end\n    return encrypted\n\
    end", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n\
    \  for i = 1, #s do\n    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n\
    \    if index then\n      local newIndex = index + 2 * 2\n      if newIndex >\
    \ #alphabet then\n        newIndex = newIndex - #alphabet\n      end\n      encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n    else\n      encrypted =\
    \ encrypted .. c\n    end\n  end\n  return encrypted\nend", "    local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local new_alphabet = string.sub(alphabet,\
    \ 3) .. string.sub(alphabet, 1, 2)\n    local result = ''\n    for i = 1, #s do\n\
    \        local index = string.find(alphabet, string.sub(s, i, i))\n        result\
    \ = result .. string.sub(new_alphabet, index, index)\n    end\n    return result\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local encrypted\
    \ = ''\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        local\
    \ index = alphabet:find(char)\n        if index then\n            local newIndex\
    \ = index + (2 * 2)\n            if newIndex > #alphabet then\n              \
    \  newIndex = newIndex - #alphabet\n            end\n            encrypted = encrypted\
    \ .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted = encrypted\
    \ .. char\n        end\n    end\n    return encrypted\nend", "  local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n    if index then\n\
    \      local new_index = index + 2 * 2\n      if new_index > #alphabet then\n\
    \        new_index = new_index - #alphabet\n      end\n      encrypted = encrypted\
    \ .. alphabet:sub(new_index, new_index)\n    else\n      encrypted = encrypted\
    \ .. c\n    end\n  end\n  return encrypted\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       encrypted = encrypted .. alphabet:sub((index + 4) % 26 + 1, (index + 4)\
    \ % 26 + 1)\n        else\n            encrypted = encrypted .. char\n       \
    \ end\n    end\n    return encrypted\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local new_index = index + (2 * 2)\n            if new_index > #alphabet\
    \ then\n                new_index = new_index - #alphabet\n            end\n \
    \           encrypted = encrypted .. alphabet:sub(new_index, new_index)\n    \
    \    else\n            encrypted = encrypted .. char\n        end\n    end\n \
    \   return encrypted\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            result\
    \ = result .. alphabet:sub(index + 2, index + 2)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend", "  local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n    if index then\n\
    \      encrypted = encrypted .. alphabet:sub((index + 2) % 26 + 1, (index + 2)\
    \ % 26 + 1)\n    else\n      encrypted = encrypted .. c\n    end\n  end\n  return\
    \ encrypted\nend", "    local s = s:lower()\n    local result = ''\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        local n = string.byte(c)\n\
    \        if n >= 97 and n <= 122 then\n            n = n + 4\n            if n\
    \ > 122 then\n                n = n - 26\n            end\n        end\n     \
    \   result = result .. string.char(n)\n    end\n    return result\nend", "  local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n  for i = 1,\
    \ #s do\n    local index = string.find(alphabet, s:sub(i, i))\n    encrypted =\
    \ encrypted .. alphabet:sub(index + 2 * 2, index + 2 * 2)\n  end\n  return encrypted\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local encrypted\
    \ = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        local index\
    \ = alphabet:find(c)\n        if index then\n            local new_index = index\
    \ + 2 * 2\n            if new_index > #alphabet then\n                new_index\
    \ = new_index - #alphabet\n            end\n            encrypted = encrypted\
    \ .. alphabet:sub(new_index, new_index)\n        else\n            encrypted =\
    \ encrypted .. c\n        end\n    end\n    return encrypted\nend", "  local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n  for i = 1, #s do\n\
    \    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n    if index then\n\
    \      local new_index = index + 2 * 2\n      if new_index > #alphabet then\n\
    \        new_index = new_index - #alphabet\n      end\n      encrypted = encrypted\
    \ .. alphabet:sub(new_index, new_index)\n    else\n      encrypted = encrypted\
    \ .. c\n    end\n  end\n  return encrypted\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            result\
    \ = result .. alphabet:sub(index + 2 * 2, index + 2 * 2)\n        else\n     \
    \       result = result .. c\n        end\n    end\n    return result\nend", " \
    \   local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local encrypted = ''\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        local index = alphabet:find(c)\n\
    \        if index then\n            local new_index = (index + 2 * 2) % #alphabet\n\
    \            encrypted = encrypted .. alphabet:sub(new_index, new_index)\n   \
    \     else\n            encrypted = encrypted .. c\n        end\n    end\n   \
    \ return encrypted\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = (index + (2 * 2)) % #alphabet\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. char\n        end\n    end\n    return encrypted\nend", "  local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local encrypted = ''\n  for i = 1,\
    \ #s do\n    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n    if\
    \ index then\n      local newIndex = (index + (2 * 2)) % #alphabet\n      encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n    else\n      encrypted =\
    \ encrypted .. c\n    end\n  end\n  return encrypted\nend", "    local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local encrypted = ''\n    for i = 1, #s\
    \ do\n        local letter = s:sub(i, i)\n        local index = alphabet:find(letter)\n\
    \        if index then\n            local new_index = index + 2 * 2\n        \
    \    if new_index > #alphabet then\n                new_index = new_index - #alphabet\n\
    \            end\n            encrypted = encrypted .. alphabet:sub(new_index,\
    \ new_index)\n        else\n            encrypted = encrypted .. letter\n    \
    \    end\n    end\n    return encrypted\nend", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local index = string.find(alphabet,\
    \ s:sub(i, i))\n    local newIndex = index + (2 * 2)\n    if newIndex > #alphabet\
    \ then\n      newIndex = newIndex - #alphabet\n    end\n    encrypted = encrypted\
    \ .. alphabet:sub(newIndex, newIndex)\n  end\n  return encrypted\nend", "    local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local result = ''\n    for i =\
    \ 1, #s do\n        local c = s:sub(i, i)\n        local index = alphabet:find(c)\n\
    \        if index then\n            local new_index = (index + 2 * 2) % #alphabet\n\
    \            if new_index == 0 then\n                new_index = #alphabet\n \
    \           end\n            result = result .. alphabet:sub(new_index, new_index)\n\
    \        else\n            result = result .. c\n        end\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
