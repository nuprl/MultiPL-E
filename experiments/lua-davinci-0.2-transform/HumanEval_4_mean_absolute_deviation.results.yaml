language: lua
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_deviations = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_deviations = sum_of_deviations + math.abs(number - mean)\n\
    \    end\n    return sum_of_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatv0j8z4.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpatv0j8z4.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpatv0j8z4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_deviations = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_deviations = sum_of_deviations + math.abs(number - mean)\n\
    \    end\n    return sum_of_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81cgph4h.lua:10:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp81cgph4h.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp81cgph4h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local abs_deviations = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(abs_deviations, math.abs(number\
    \ - mean))\n    end\n    return mean(abs_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb647hk5r.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpb647hk5r.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpb647hk5r.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatv0j8z4.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpatv0j8z4.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpatv0j8z4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_absolute_differences = 0\n    for _, number\
    \ in ipairs(numbers) do\n        sum_of_absolute_differences = sum_of_absolute_differences\
    \ + math.abs(number - mean)\n    end\n    return sum_of_absolute_differences /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4kk9dx1.lua:10:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmps4kk9dx1.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmps4kk9dx1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9v6afzx.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpw9v6afzx.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpw9v6afzx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxhcnxrd.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmprxhcnxrd.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmprxhcnxrd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_abs_deviations = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_abs_deviations = sum_of_abs_deviations + math.abs(number\
    \ - mean)\n    end\n    return sum_of_abs_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local abs_diffs = {}\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(abs_diffs, math.abs(n - mean))\n  end\n  return mean(abs_diffs)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0iz31hn.lua:9:\
    \ attempt to call global 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpl0iz31hn.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpl0iz31hn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
