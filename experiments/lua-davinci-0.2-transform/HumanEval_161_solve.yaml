name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string\
  \ contains no letters, reverse the string.\n-- The function should return the resulted\
  \ string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n--\
  \ 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
  \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
  \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
  \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
  \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c:match('%a') then\n            t[#t + 1] = c:lower() == c and\
    \ c:upper() or c:lower()\n        else\n            t[#t + 1] = c\n        end\n\
    \    end\n    return #t > 0 and table.concat(t) or s:reverse()\nend", "    local\
    \ t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                t[#t + 1] = c:upper()\n\
    \            else\n                t[#t + 1] = c:lower()\n            end\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return table.concat(t)\n\
    end", "    local t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('%a') then\n            t[#t + 1] = c:lower() == c and c:upper()\
    \ or c:lower()\n        else\n            t[#t + 1] = c\n        end\n    end\n\
    \    return #t > 0 and table.concat(t) or s:reverse()\nend", "    local t = {}\n\
    \    for i = 1, #s do\n        if s[i]:match('%a') then\n            t[i] = s[i]:lower()\
    \ == s[i] and s[i]:upper() or s[i]:lower()\n        else\n            t[i] = s[i]\n\
    \        end\n    end\n    return #t > 0 and table.concat(t) or s:reverse()\n\
    end", "    local t = {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n\
    \            t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n  \
    \      else\n            t[i] = s[i]\n        end\n    end\n    return #t > 0\
    \ and table.concat(t) or s:reverse()\nend", "    local t = {}\n    for i = 1,\
    \ #s do\n        local c = s:sub(i, i)\n        if c:match('%a') then\n      \
    \      if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n        end\n        t[#t + 1]\
    \ = c\n    end\n    return table.concat(t)\nend", "    local t = {}\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a') then\n \
    \           t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n        else\n\
    \            t[#t + 1] = c\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend", "    local t = {}\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c:match('%a') then\n            t[#t + 1] = c:lower()\
    \ == c and c:upper() or c:lower()\n        else\n            t[#t + 1] = c\n \
    \       end\n    end\n    return #t > 0 and table.concat(t) or s:reverse()\nend",
  "    local t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n       \
    \ if c:match('%a') then\n            if c:match('%l') then\n                c\
    \ = c:upper()\n            else\n                c = c:lower()\n            end\n\
    \        end\n        t[#t + 1] = c\n    end\n    return table.concat(t)\nend",
  "    local res = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if c:match('%a') then\n            if c:match('%l') then\n               \
    \ c = c:upper()\n            else\n                c = c:lower()\n           \
    \ end\n        end\n        res[#res + 1] = c\n    end\n    return table.concat(res)\n\
    end", "    local res = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      res = res .. c:upper()\n            else\n                res = res ..\
    \ c:lower()\n            end\n        else\n            res = res .. c\n     \
    \   end\n    end\n    return #res > 0 and res or s:reverse()\nend", "  local res\
    \ = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match('%a') then\n\
    \      res = res .. c:lower() == c and c:upper() or c:lower()\n    else\n    \
    \  res = res .. c\n    end\n  end\n  return res\nend", "    local res = ''\n \
    \   for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%u') then\n                res = res .. c:lower()\n\
    \            else\n                res = res .. c:upper()\n            end\n \
    \       else\n            res = res .. c\n        end\n    end\n    return #res\
    \ == 0 and s:reverse() or res\nend", "    local letters = {}\n    local other\
    \ = {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n            table.insert(letters,\
    \ s[i])\n        else\n            table.insert(other, s[i])\n        end\n  \
    \  end\n    if #letters == 0 then\n        return s:reverse()\n    end\n    local\
    \ result = {}\n    for i = 1, #letters do\n        if letters[i]:match('%l') then\n\
    \            table.insert(result, letters[i]:upper())\n        else\n        \
    \    table.insert(result, letters[i]:lower())\n        end\n    end\n    for i\
    \ = 1, #other do\n        table.insert(result, other[i])\n    end\n    return\
    \ table.concat(result)\nend", "    local t = {}\n    for i = 1, #s do\n      \
    \  local c = s:sub(i, i)\n        if c:match('%a') then\n            if c:match('%l')\
    \ then\n                c = c:upper()\n            else\n                c = c:lower()\n\
    \            end\n        end\n        t[#t + 1] = c\n    end\n    return table.concat(t)\n\
    end", "    local res = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      res[#res + 1] = c:upper()\n            else\n                res[#res +\
    \ 1] = c:lower()\n            end\n        else\n            res[#res + 1] = c\n\
    \        end\n    end\n    if #res == 0 then\n        return s:reverse()\n   \
    \ end\n    return table.concat(res)\nend", "    local t = {}\n    for i = 1, #s\
    \ do\n        local c = s:sub(i, i)\n        if c:match('%a') then\n         \
    \   if c:match('%l') then\n                c = c:upper()\n            else\n \
    \               c = c:lower()\n            end\n        end\n        t[#t + 1]\
    \ = c\n    end\n    return table.concat(t)\nend", "    local t = {}\n    for i\
    \ = 1, #s do\n        if s[i]:match('%a') then\n            t[i] = s[i]:lower()\
    \ == s[i] and s[i]:upper() or s[i]:lower()\n        else\n            t[i] = s[i]\n\
    \        end\n    end\n    return #t > 0 and table.concat(t) or s:reverse()\n\
    end", "    local res = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      c = c:upper()\n            else\n                c = c:lower()\n      \
    \      end\n        end\n        res[#res + 1] = c\n    end\n    return table.concat(res)\n\
    end", "    local res = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        if c:match('%a') then\n            if c:match('%l') then\n          \
    \      c = c:upper()\n            else\n                c = c:lower()\n      \
    \      end\n        end\n        res[#res + 1] = c\n    end\n    return table.concat(res)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
