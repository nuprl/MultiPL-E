language: lua
name: HumanEval_148_bf
results:
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht3fxxau.lua:19:\
    \ attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpht3fxxau.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpht3fxxau.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\t\
    if p1 == 0 or p2 == 0 then return {} end\n\tif p1 > p2 then\n\t\tlocal temp =\
    \ p1\n\t\tp1 = p2\n\t\tp2 = temp\n\tend\n\tlocal result = {}\n\tfor i = p1 + 1,\
    \ p2 - 1 do\n\t\ttable.insert(result, planets[i])\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht3fxxau.lua:19:\
    \ attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpht3fxxau.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpht3fxxau.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = table.indexof(planets, planet1)\n    local\
    \ p2 = table.indexof(planets, planet2)\n    if p1 and p2 then\n        local min\
    \ = math.min(p1, p2)\n        local max = math.max(p1, p2)\n        local res\
    \ = {}\n        for i = min + 1, max - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n        return res\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3fxiilex.lua:19:\
    \ attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmp3fxiilex.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp3fxiilex.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, planet in ipairs(planets) do\n        if planet == planet1 then\n\
    \            p1 = i\n        end\n        if planet == planet2 then\n        \
    \    p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9i597uo.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpz9i597uo.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets,\
    \ planet2)\n    if p1 == -1 or p2 == -1 then return {} end\n    local result =\
    \ {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcomz6c1u.lua:19:\
    \ attempt to call field 'indexOf' (a nil value)\nstack traceback:\n\t/tmp/tmpcomz6c1u.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpcomz6c1u.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    for\
    \ i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_p49b1x.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpo_p49b1x.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if p1 and p2 then\n        local result = {}\n        if p1 >\
    \ p2 then\n            for i = p2, p1 - 1 do\n                table.insert(result,\
    \ planets[i])\n            end\n        else\n            for i = p1, p2 - 1 do\n\
    \                table.insert(result, planets[i])\n            end\n        end\n\
    \        return result\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocxmwt0q.lua:19:\
    \ attempt to call field 'find' (a nil value)\nstack traceback:\n\t/tmp/tmpocxmwt0q.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpocxmwt0q.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, planet in ipairs(planets) do\n\
    \    if planet == planet1 then\n      p1 = i\n    end\n    if planet == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if not p1 or not p2 then\n    return {}\n\
    \  end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n \
    \     table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tfor i, v in ipairs(planets) do\n\
    \t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\
    \tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\
    \tlocal res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local res = {}\n  for\
    \ i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if v ==\
    \ planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n\
    \  if p1 > p2 then\n    for i = p2, p1 do\n      table.insert(res, planets[i])\n\
    \    end\n  else\n    for i = p1, p2 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhfzu3e3.lua:42:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpuhfzu3e3.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if p1 and p2 then\n        local result = {}\n        if p1 <\
    \ p2 then\n            for i = p1 + 1, p2 - 1 do\n                table.insert(result,\
    \ planets[i])\n            end\n        else\n            for i = p2 + 1, p1 -\
    \ 1 do\n                table.insert(result, planets[i])\n            end\n  \
    \      end\n        return result\n    else\n        return {}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuipee3x.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpkuipee3x.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpkuipee3x.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = table.indexof(planets, planet1)\n    local\
    \ p2 = table.indexof(planets, planet2)\n    if p1 == nil or p2 == nil then\n \
    \       return {}\n    end\n    if p1 > p2 then\n        p1, p2 = p2, p1\n   \
    \ end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzzf5tti.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpkzzf5tti.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpkzzf5tti.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_5n74xc.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpa_5n74xc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, planet in ipairs(planets) do\n\t\
    \tif planet == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planet == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\t\
    end\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tlocal res = {}\n\tfor i\
    \ = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  local result = {}\n  for i, v\
    \ in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n    end\n   \
    \ if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0\
    \ then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2 + 1, p1 - 1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1 + 1,\
    \ p2 - 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  local result = {}\n  for i, v\
    \ in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n    end\n   \
    \ if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0\
    \ then\n    return {}\n  end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n\
    \  for i = p1 + 1, p2 - 1 do\n    table.insert(result, planets[i])\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    for\
    \ i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_p49b1x.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpo_p49b1x.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local index1, index2\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            index1 = i\n        end\n    \
    \    if v == planet2 then\n            index2 = i\n        end\n    end\n    if\
    \ index1 == nil or index2 == nil then\n        return {}\n    end\n    local result\
    \ = {}\n    if index1 < index2 then\n        for i = index1 + 1, index2 - 1 do\n\
    \            table.insert(result, planets[i])\n        end\n    else\n       \
    \ for i = index2 + 1, index1 - 1 do\n            table.insert(result, planets[i])\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n\tif p1 and p2 then\n\t\tlocal t = {}\n\t\tfor i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n\t\t\ttable.insert(t, planets[i])\n\t\tend\n\t\
    \treturn t\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmw3you8i.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpmw3you8i.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmw3you8i.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71luiwg4.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp71luiwg4.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    if i1 > i2 then\n        i1,\
    \ i2 = i2, i1\n    end\n    local res = {}\n    for i = i1 + 1, i2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71luiwg4.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp71luiwg4.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\t\
    if p1 == 0 or p2 == 0 then return {} end\n\tif p1 > p2 then p1, p2 = p2, p1 end\n\
    \tlocal res = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    if p1 >\
    \ p2 then\n        local tmp = p1\n        p1 = p2\n        p2 = tmp\n    end\n\
    \    local res = {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(res,\
    \ planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1 = table.indexof(planets, planet1)\n\tlocal p2 = table.indexof(planets,\
    \ planet2)\n\tif p1 == nil or p2 == nil then\n\t\treturn {}\n\tend\n\tlocal result\
    \ = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk59x0aq4.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpk59x0aq4.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpk59x0aq4.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, 8 do\n       \
    \ if planets[i] == planet1 then\n            p1 = i\n        end\n        if planets[i]\
    \ == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0 or\
    \ p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc171du74.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpc171du74.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_index = 0\n    local planet2_index =\
    \ 0\n    local result = {}\n    for i, planet in ipairs(planets) do\n        if\
    \ planet == planet1 then\n            planet1_index = i\n        end\n       \
    \ if planet == planet2 then\n            planet2_index = i\n        end\n    end\n\
    \    if planet1_index == 0 or planet2_index == 0 then\n        return {}\n   \
    \ end\n    if planet1_index > planet2_index then\n        for i = planet2_index,\
    \ planet1_index do\n            table.insert(result, planets[i])\n        end\n\
    \    else\n        for i = planet1_index, planet2_index do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq4p4uv4.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmptq4p4uv4.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    if p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tlocal res = {}\n\tfor i = p1 +\
    \ 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i,v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    if p1 < p2 then\n        for i = p1+1, p2-1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2+1, p1-1 do\n        \
    \    table.insert(res, planets[i])\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then return {} end\n    if p1 > p2 then p1,\
    \ p2 = p2, p1 end\n    return table.slice(planets, p1+1, p2-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdauwcy0.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmprdauwcy0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmprdauwcy0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if planet1 == v then\n            p1 = i\n        end\n        if\
    \ planet2 == v then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == nil or\
    \ p2 == nil then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71luiwg4.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp71luiwg4.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = table.indexof(planets, planet1)\n  local\
    \ p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then return\
    \ {} end\n  if p1 > p2 then\n    local t = p1\n    p1 = p2\n    p2 = t\n  end\n\
    \  local result = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(result, planets[i])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvwdeobz.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmphvwdeobz.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmphvwdeobz.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    for\
    \ i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_p49b1x.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpo_p49b1x.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, p in ipairs(planets) do\n\t\tif\
    \ p == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif p == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb4eobvx.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpqb4eobvx.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n      table.insert(t, planets[i])\n    end\n \
    \   return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_93ofggq.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp_93ofggq.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp_93ofggq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 > p2 then\n\
    \    for i = p2, p1 do\n      table.insert(res, planets[i])\n    end\n  else\n\
    \    for i = p1, p2 do\n      table.insert(res, planets[i])\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_60vgw_y.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp_60vgw_y.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71luiwg4.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp71luiwg4.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  local result = {}\n  if p1 == 0 or p2 == 0 then\n\
    \    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  else\n    for i = p1, p2 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzdt0vsh.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpbzdt0vsh.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 1, 1\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == p2\
    \ then\n        return {}\n    end\n    local result = {}\n    if p1 < p2 then\n\
    \        for i = p1 + 1, p2 - 1 do\n            table.insert(result, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpartkbq69.lua:53:\
    \ expected: {}\nactual: {\"Venus\", \"Earth\", \"Mars\"}\nstack traceback:\n\t\
    /tmp/tmpartkbq69.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  if p1 > p2 then p1, p2\
    \ = p2, p1 end\n  return table.slice(planets, p1 + 1, p2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpszm2y4l8.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpszm2y4l8.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpszm2y4l8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n     \
    \ table.insert(result, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    local result = {}\n    for\
    \ i = i1 + 1, i2 - 1 do\n        table.insert(result, planets[i])\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9yofys9.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpb9yofys9.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then p1 = i end\n    if planet == planet2 then\
    \ p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local result\
    \ = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(result, planets[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4gkjxsm.lua:36:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpd4gkjxsm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    local tmp\
    \ = p1\n    p1 = p2\n    p2 = tmp\n  end\n  local res = {}\n  for i = p1 + 1,\
    \ p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\t\
    end\n\tif p1 > p2 then\n\t\tfor i = p2, p1 do\n\t\t\ttable.insert(result, planets[i])\n\
    \t\tend\n\telse\n\t\tfor i = p1, p2 do\n\t\t\ttable.insert(result, planets[i])\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp060378ri.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp060378ri.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        res[#res + 1] = planets[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local index1, index2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then\n      index1 = i\n    end\n    if planet\
    \ == planet2 then\n      index2 = i\n    end\n  end\n  if index1 == 0 or index2\
    \ == 0 then\n    return {}\n  end\n  local result = {}\n  if index1 < index2 then\n\
    \    for i = index1 + 1, index2 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  else\n    for i = index2 + 1, index1 - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2\n\tfor i, planet in ipairs(planets) do\n\t\tif planet\
    \ == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planet == planet2 then\n\t\t\t\
    p2 = i\n\t\tend\n\tend\n\tif p1 == nil or p2 == nil then\n\t\treturn {}\n\tend\n\
    \tlocal t = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(t,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(t,\
    \ planets[i])\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local result = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(result, planets[i])\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7lpeaai.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmph7lpeaai.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    local result\
    \ = {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn87p4ibf.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpn87p4ibf.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpn87p4ibf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal i1, i2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\ti1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\ti2\
    \ = i\n\t\tend\n\tend\n\tif i1 == 0 or i2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tfor i = math.min(i1, i2) + 1, math.max(i1, i2) - 1 do\n\t\t\
    table.insert(res, planets[i])\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, p in ipairs(planets)\
    \ do\n        if p == planet1 then\n            p1 = i\n        end\n        if\
    \ p == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1, p2 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn10vune8.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpn10vune8.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n\tif p1 and p2 then\n\t\tlocal t = {}\n\t\tif p1 < p2 then\n\t\t\t\
    for i = p1 + 1, p2 - 1 do\n\t\t\t\ttable.insert(t, planets[i])\n\t\t\tend\n\t\t\
    else\n\t\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\t\ttable.insert(t, planets[i])\n\t\
    \t\tend\n\t\tend\n\t\treturn t\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptutwtrcx.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmptutwtrcx.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmptutwtrcx.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfiv5yuy.lua:24:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpcfiv5yuy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local res = {}\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tfor i, v in ipairs(planets) do\n\
    \t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\
    \tp2 = i\n\t\tend\n\tend\n\tlocal result = {}\n\tif p1 > p2 then\n\t\tfor i =\
    \ p2, p1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\telse\n\t\tfor\
    \ i = p1, p2 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zs8ffko.lua:45:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp5zs8ffko.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    if p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tlocal res = {}\n\tfor i = p1 +\
    \ 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then p1 = i end\n        if planet == planet2\
    \ then p2 = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n   \
    \ if p1 > p2 then p1, p2 = p2, p1 end\n    local res = {}\n    for i = p1 + 1,\
    \ p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local res = {}\n  for\
    \ i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n    end\n\
    \    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 ==\
    \ 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n   \
    \   table.insert(res, planets[i])\n    end\n  else\n    for i = p1, p2 do\n  \
    \    table.insert(res, planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyddbe16.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpuyddbe16.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = -1, -1\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == -1 or p2 == -1 then\n        return {}\n    end\n    local result\
    \ = {}\n    for i = math.min(p1, p2), math.max(p1, p2) do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdt4vics.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmprdt4vics.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, planet in ipairs(planets) do\n\
    \    if planet == planet1 then\n      p1 = i\n    end\n    if planet == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return\
    \ {}\n  end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  local result = {}\n\
    \  for i = p1 + 1, p2 - 1 do\n    table.insert(result, planets[i])\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then p1 = i end\n        if planet == planet2\
    \ then p2 = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n   \
    \ if p1 > p2 then\n        p1, p2 = p2, p1\n    end\n    local res = {}\n    for\
    \ i = p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == nil or p2 == nil then\n        return {}\n    end\n    local result\
    \ = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\
    \tend\n\tif p1 == 0 or p2 == 0 then return {} end\n\tif p1 < p2 then\n\t\tfor\
    \ i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\telse\n\
    \t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local res = {}\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    if i1 > i2 then\n        i1,\
    \ i2 = i2, i1\n    end\n    local res = {}\n    for i = i1 + 1, i2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets,\
    \ planet2)\n    if p1 == -1 or p2 == -1 then return {} end\n    local min, max\
    \ = math.min(p1, p2), math.max(p1, p2)\n    local res = {}\n    for i = min +\
    \ 1, max - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb_psyph.lua:19:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmpyb_psyph.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpyb_psyph.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb4eobvx.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpqb4eobvx.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local i1, i2 = 0, 0\n  for i, p in ipairs(planets) do\n\
    \    if p == planet1 then i1 = i end\n    if p == planet2 then i2 = i end\n  end\n\
    \  if i1 == 0 or i2 == 0 then return {} end\n  if i1 > i2 then\n    i1, i2 = i2,\
    \ i1\n  end\n  local res = {}\n  for i = i1 + 1, i2 - 1 do\n    res[#res + 1]\
    \ = planets[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb4eobvx.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpqb4eobvx.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then\n      p1 = i\n    end\n    if planet == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return\
    \ {}\n  end\n  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  else\n    for i = p2\
    \ + 1, p1 - 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if planet1 == v then\n            p1 = i\n        end\n        if\
    \ planet2 == v then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        res[#res + 1] = planets[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1\
    \ end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        res[#res + 1] = planets[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n\tif p1 and p2 then\n\t\tif p1 > p2 then\n\t\t\tp1, p2 = p2, p1\n\t\
    \tend\n\t\treturn table.slice(planets, p1 + 1, p2)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqhdsxnp.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpmqhdsxnp.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmqhdsxnp.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {\n        'Mercury',\n        'Venus',\n        'Earth',\n\
    \        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n \
    \       'Neptune'\n    }\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik2e9fu8.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpik2e9fu8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr18aoadn.lua:23:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpr18aoadn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    local res = {}\n    if i1 <\
    \ i2 then\n        for i = i1 + 1, i2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = i2 + 1, i1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i,v in ipairs(planets) do\n        if v == planet1 then\n      \
    \      p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, planet in ipairs(planets) do\n\
    \    if planet == planet1 then p1 = i end\n    if planet == planet2 then p2 =\
    \ i end\n  end\n  if not p1 or not p2 then return {} end\n  if p1 > p2 then\n\
    \    local tmp = p1\n    p1 = p2\n    p2 = tmp\n  end\n  local res = {}\n  for\
    \ i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2 + 1, p1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1 + 1, p2 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        local temp = p1\n        p1 = p2\n       \
    \ p2 = temp\n    end\n    for i = p1 + 1, p2 - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetowbz57.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpetowbz57.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        local temp = p1\n        p1 = p2\n        p2 = temp\n    end\n    local\
    \ result = {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    if p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tlocal res = {}\n\tfor i = p1 +\
    \ 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    if p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tlocal res = {}\n\tfor i = p1 +\
    \ 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, p in ipairs(planets) do\n\
    \        if p == planet1 then\n            p1 = i\n        end\n        if p ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 and p2 then\n\
    \        local res = {}\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n        return res\n    else\n        return {}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhf4auhx.lua:43:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfhf4auhx.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == nil or\
    \ p2 == nil then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht3fxxau.lua:19:\
    \ attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpht3fxxau.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpht3fxxau.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local p = {}\n    if p1 < p2\
    \ then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(p, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(p,\
    \ planets[i])\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ i1 + 1, i2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk5doz1_.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwk5doz1_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_5n74xc.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpa_5n74xc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        local\
    \ temp = p1\n        p1 = p2\n        p2 = temp\n    end\n    local result = {}\n\
    \    for i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        p1, p2 = p2, p1\n    end\n    for i = p1 +\
    \ 1, p2 - 1 do\n        table.insert(result, planets[i])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    local res =\
    \ {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res,\
    \ planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmparhqcuv5.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmparhqcuv5.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmparhqcuv5.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local result = {}\n    for i = p1 + 1, p2 - 1 do\n\
    \        table.insert(result, planets[i])\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 > p2 then\n\t\tfor i = p2, p1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p1, p2 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01oc1m4t.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp01oc1m4t.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(result, planets[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik2e9fu8.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpik2e9fu8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  for i = p1, p2 do\n    if i ~= p1 and i ~= p2 then\n    \
    \  table.insert(res, planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9tzzh7w.lua:44:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk9tzzh7w.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = -1, -1\n    for i, p in ipairs(planets)\
    \ do\n        if p == planet1 then\n            p1 = i\n        end\n        if\
    \ p == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == -1\
    \ or p2 == -1 then\n        return {}\n    end\n    local result = {}\n    if\
    \ p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local r = {}\n    for i = p1 + 1, p2 - 1 do\n    \
    \    table.insert(r, planets[i])\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht3fxxau.lua:19:\
    \ attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpht3fxxau.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpht3fxxau.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then p1 = i end\n    if planet == planet2 then\
    \ p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2\
    \ then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n  \
    \  table.insert(res, planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 >\
    \ p2 then\n        for i = p2, p1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhfp69kk.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpzhfp69kk.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        res[#res + 1] = planets[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    local res = {}\n    if i1 <\
    \ i2 then\n        for i = i1 + 1, i2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = i2 + 1, i1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8505qm8l.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8505qm8l.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then\n        return {}\n    end\n \
    \   local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n \
    \           table.insert(res, planets[i])\n        end\n    else\n        for\
    \ i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy995p9y3.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpy995p9y3.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpy995p9y3.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local result = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if p1 and p2 then\n        local t = {}\n        for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n        return t\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbf1l74x7.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpbf1l74x7.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbf1l74x7.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2\
    \ - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
- exit_code: 1
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then\n        return {}\n    end\n    if p1\
    \ > p2 then\n        p1, p2 = p2, p1\n    end\n    return table.slice(planets,\
    \ p1 + 1, p2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnznlzr_.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmprnznlzr_.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmprnznlzr_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659797974
- exit_code: 0
  program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a tuple containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty tuple if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750341
