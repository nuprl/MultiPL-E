language: lua
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5 + 1]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotcxity2.lua:21:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpotcxity2.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpotcxity2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n \
    \     c = c:lower()\n    else\n      c = c:upper()\n    end\n    for j = 1, #vowels\
    \ do\n      if c == vowels[j] then\n        c = vowels[(j + 2) % #vowels + 1]\n\
    \        break\n      end\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41j9ubfn.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmp41j9ubfn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g7o27qm.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp_g7o27qm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ next_vowel = vowels[(j % #vowels) + 1]\n      encoded = encoded .. next_vowel\n\
    \    else\n      encoded = encoded .. char:lower()\n    end\n  end\n  return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pxmsy2g.lua:36:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp3pxmsy2g.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahd4p02a.lua:21:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpahd4p02a.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpahd4p02a.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9741r0j.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpw9741r0j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        if letter\
    \ == letter:upper() then\n            letter = letter:lower()\n        else\n\
    \            letter = letter:upper()\n        end\n        if table.contains(vowels,\
    \ letter) then\n            local index = table.indexof(vowels, letter)\n    \
    \        if index == #vowels then\n                index = 1\n            else\n\
    \                index = index + 1\n            end\n            letter = vowels[index]\n\
    \        end\n        encoded = encoded .. letter\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps68_z3v5.lua:21:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmps68_z3v5.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmps68_z3v5.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local lower\
    \ = char:lower()\n        if lower == char then\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, lower) then\n            local\
    \ index = table.indexof(vowels, lower)\n            char = vowels[(index + 2)\
    \ % #vowels + 1]\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1bbo11wb.lua:20:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp1bbo11wb.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp1bbo11wb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqbn3h2p.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpyqbn3h2p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local result = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if char ==\
    \ 'a' then\n            char = 'c'\n        elseif char == 'e' then\n        \
    \    char = 'g'\n        elseif char == 'i' then\n            char = 'k'\n   \
    \     elseif char == 'o' then\n            char = 'q'\n        elseif char ==\
    \ 'u' then\n            char = 'y'\n        end\n        result = result .. char\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu8oyuq8.lua:40:\
    \ expected: \"mWDCSKR\"\nactual: \"mUDASIR\"\nstack traceback:\n\t/tmp/tmpzu8oyuq8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j + 2]\n    \
    \            break\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxvj9u0.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpktxvj9u0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local result = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            result = result .. char:lower()\n\
    \        else\n            result = result .. char:upper()\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_qqzrnk.lua:27:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpj_qqzrnk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n            for\
    \ j = 1, #vowels do\n                if c == vowels[j] then\n                \
    \    c = vowels[(j + 2) % #vowels + 1]\n                    break\n          \
    \      end\n            end\n        end\n        encoded = encoded .. c\n   \
    \ end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_n_nyug.lua:37:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpx_n_nyug.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal index\
    \ = (string.find(vowels, char) + 2) % #vowels\n\t\t\tif index == 0 then\n\t\t\t\
    \tindex = #vowels\n\t\t\tend\n\t\t\tchar = vowels[index]\n\t\tend\n\t\tif char\
    \ == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\
    \t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vnzp5yu.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp5vnzp5yu.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    local is_vowel = vowels:find(lower)\n\
    \    if is_vowel then\n      local index = alphabet:find(lower)\n      local new_index\
    \ = index + 2\n      if new_index > #alphabet then\n        new_index = new_index\
    \ - #alphabet\n      end\n      char = alphabet:sub(new_index, new_index)\n  \
    \  end\n    if char == char:lower() then\n      char = char:upper()\n    else\n\
    \      char = char:lower()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcqorv4d.lua:40:\
    \ expected: \"tgst\"\nactual: \"tGst\"\nstack traceback:\n\t/tmp/tmpzcqorv4d.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 26 + 1\n            char = string.char(index + 96)\n        end\n  \
    \      if char == char:upper() then\n            char = char:lower()\n       \
    \ else\n            char = char:upper()\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ugb1d01.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp7ugb1d01.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        local isVowel = false\n     \
    \   for j = 1, #vowels do\n            if char == vowels[j] then\n           \
    \     isVowel = true\n                break\n            end\n        end\n  \
    \      if isVowel then\n            local nextVowel = vowels[j + 2]\n        \
    \    if not nextVowel then\n                nextVowel = vowels[1]\n          \
    \  end\n            char = nextVowel\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1utinvf.lua:29:\
    \ attempt to perform arithmetic on global 'j' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpe1utinvf.lua:29: in function 'candidate'\n\t/tmp/tmpe1utinvf.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            local\
    \ next_index = index + 2\n            if next_index > #vowels then\n         \
    \       next_index = next_index - #vowels\n            end\n            char =\
    \ vowels[next_index]\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24x9_vd4.lua:21:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp24x9_vd4.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp24x9_vd4.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            char = vowels[(table.indexof(vowels, char) + 2) % #vowels]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdxnst75.lua:21:\
    \ attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpfdxnst75.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpfdxnst75.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexOf(vowels, char)\n            char\
    \ = vowels[(index + 2) % #vowels + 1]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuob9x0hf.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpuob9x0hf.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpuob9x0hf.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdivn47i3.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpdivn47i3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        if table.indexOf(vowels, c) then\n            local index\
    \ = table.indexOf(vowels, c)\n            if index == #vowels then\n         \
    \       c = vowels[1]\n            else\n                c = vowels[index + 1]\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6pb8yqz.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmpx6pb8yqz.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpx6pb8yqz.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local lower = char:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_char = alphabet:sub(index,\
    \ index)\n            if char == char:upper() then\n                new_char =\
    \ new_char:upper()\n            end\n            encoded = encoded .. new_char\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebtq31p5.lua:42:\
    \ expected: \"tgst\"\nactual: \"TGST\"\nstack traceback:\n\t/tmp/tmpebtq31p5.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded[#encoded + 1] = char\n\
    \    end\n    return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx52rem4.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmplx52rem4.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j + 2]\n    \
    \            break\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxvj9u0.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpktxvj9u0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char:upper()\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2oqyiwc.lua:35:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpz2oqyiwc.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded_message = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local is_vowel =\
    \ false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ next_char = message:sub(i + 1, i + 1)\n      local next_next_char = message:sub(i\
    \ + 2, i + 2)\n      if next_char == nil then\n        next_char = ''\n      end\n\
    \      if next_next_char == nil then\n        next_next_char = ''\n      end\n\
    \      encoded_message = encoded_message .. next_next_char .. next_char\n    else\n\
    \      encoded_message = encoded_message .. char\n    end\n  end\n  return encoded_message\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa54h9swi.lua:43:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpa54h9swi.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if char ==\
    \ 'a' then\n            char = 'c'\n        elseif char == 'e' then\n        \
    \    char = 'g'\n        elseif char == 'i' then\n            char = 'k'\n   \
    \     elseif char == 'o' then\n            char = 'q'\n        elseif char ==\
    \ 'u' then\n            char = 'y'\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbehwe0ns.lua:40:\
    \ expected: \"mWDCSKR\"\nactual: \"mUDASIR\"\nstack traceback:\n\t/tmp/tmpbehwe0ns.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j +\
    \ 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmft94y31.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpmft94y31.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqbn3h2p.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpyqbn3h2p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsnuus38.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmplsnuus38.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded = ''\n    for i =\
    \ 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = 0\n           \
    \ for j = 1, #alphabet do\n                if char == alphabet[j] then\n     \
    \               index = j\n                    break\n                end\n  \
    \          end\n            local new_index = index + 2\n            if new_index\
    \ > #alphabet then\n                new_index = new_index - #alphabet\n      \
    \      end\n            char = alphabet[new_index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw_tey7q.lua:51:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpqw_tey7q.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            index\
    \ = index + 2\n            if index > #vowels then\n                index = index\
    \ - #vowels\n            end\n            char = vowels[index]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9hzcgcl.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpf9hzcgcl.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpf9hzcgcl.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[a-z]') then\n            encoded = encoded .. char:upper()\n\
    \        elseif char:match('[A-Z]') then\n            encoded = encoded .. char:lower()\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2se2pdse.lua:29:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp2se2pdse.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local upper\
    \ = char:upper() == char\n        char = char:lower()\n        if upper then\n\
    \            char = char:upper()\n        end\n        if char == 'z' then\n \
    \           char = 'b'\n        elseif char == 'Z' then\n            char = 'B'\n\
    \        elseif char == ' ' then\n            char = ' '\n        elseif char\
    \ == '.' then\n            char = '.'\n        elseif char == ',' then\n     \
    \       char = ','\n        elseif char == '!' then\n            char = '!'\n\
    \        elseif char == '?' then\n            char = '?'\n        elseif char\
    \ == '\\'' then\n            char = '\\''\n        elseif char == '\"' then\n\
    \            char = '\"'\n        elseif char == '-' then\n            char =\
    \ '-'\n        elseif char == ':' then\n            char = ':'\n        elseif\
    \ char == ';' then\n            char = ';'\n        elseif char == '(' then\n\
    \            char = '('\n        elseif char == ')' then\n            char = ')'\n\
    \        elseif char == '[' then\n            char = '['\n        elseif char\
    \ == ']' then\n            char = ']'\n        elseif char == '{' then\n     \
    \       char = '{'\n        elseif char == '}' then\n            char = '}'\n\
    \        elseif char == '<' then\n            char = '<'\n        elseif char\
    \ == '>' then\n            char = '>'\n        elseif char == '=' then\n     \
    \       char = '='\n        elseif char == '+' then\n            char = '+'\n\
    \        elseif char == '-' then\n            char = '-'\n        elseif char\
    \ == '*' then\n            char = '*'\n        elseif char == '/' then\n     \
    \       char = '/'\n        elseif char == '\\\\' then\n            char = '\\\
    \\'\n        elseif char == '|' then\n            char =\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjulghcir.lua:75: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j % #vowels)\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz54o16uy.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpz54o16uy.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local char_lower\
    \ = char:lower()\n        if char_lower == char then\n            char = char:upper()\n\
    \        end\n        if table.index_of(vowels, char_lower) then\n           \
    \ char = vowels[(table.index_of(vowels, char_lower) + 2) % 5 + 1]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6aiykzq2.lua:20:\
    \ attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmp6aiykzq2.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp6aiykzq2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexOf(vowels, char)\
    \ then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ob1e7h0.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp5ob1e7h0.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5ob1e7h0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if string.byte(char) >= 97 and string.byte(char) <= 122 then\n  \
    \              encoded = encoded .. string.char(string.byte(char) - 32)\n    \
    \        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n   \
    \             encoded = encoded .. string.char(string.byte(char) + 32)\n     \
    \       else\n                encoded = encoded .. char\n            end\n   \
    \     end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0bvfj2c.lua:42:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpk0bvfj2c.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            local\
    \ next_index = (index + 2) % #vowels\n            char = vowels[next_index]\n\
    \        end\n        table.insert(encoded, char)\n    end\n    return table.concat(encoded)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oukg2nq.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp3oukg2nq.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp3oukg2nq.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        if table.indexOf(vowels, c) then\n            local index\
    \ = table.indexOf(vowels, c)\n            if index == #vowels then\n         \
    \       index = 1\n            else\n                index = index + 2\n     \
    \       end\n            c = vowels[index]\n        end\n        table.insert(encoded,\
    \ c)\n    end\n    return table.concat(encoded)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8osh2_wk.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp8osh2_wk.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp8osh2_wk.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhve3q3_.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxhve3q3_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9741r0j.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpw9741r0j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for _, vowel in ipairs(vowels) do\n            if char == vowel\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = string.find(vowels,\
    \ char)\n            if index == #vowels then\n                index = 1\n   \
    \         else\n                index = index + 1\n            end\n         \
    \   char = vowels[index]\n        end\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx8pjouj.lua:45:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmphx8pjouj.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ayzi9j0.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_ayzi9j0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            result = result .. vowels[index]\n        else\n\
    \            result = result .. char\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dqe_sy5.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp3dqe_sy5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if char == 'a' then\n      char = 'c'\n\
    \    elseif char == 'e' then\n      char = 'g'\n    elseif char == 'i' then\n\
    \      char = 'k'\n    elseif char == 'o' then\n      char = 'q'\n    elseif char\
    \ == 'u' then\n      char = 'y'\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg6u0tb6.lua:40:\
    \ expected: \"mWDCSKR\"\nactual: \"mUDASIR\"\nstack traceback:\n\t/tmp/tmplg6u0tb6.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal index\
    \ = (string.find(vowels, char) + 2) % 5\n\t\t\tif index == 0 then index = 5 end\n\
    \t\t\tencoded = encoded .. vowels[index]\n\t\telse\n\t\t\tencoded = encoded ..\
    \ char:upper()\n\t\tend\n\tend\n\treturn encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpard48rnk.lua:37:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpard48rnk.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        local found = false\n       \
    \ for j = 1, #vowels do\n            if char == vowels[j] then\n             \
    \   found = true\n                char = vowels[(j + 2) % #vowels]\n         \
    \   end\n        end\n        if not found then\n            char = char\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf_x9eqk.lua:39:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpcf_x9eqk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajzi9lus.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpajzi9lus.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexOf(vowels, char)\
    \ then\n            local index = table.indexOf(vowels, char)\n            if\
    \ index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5v68da_d.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp5v68da_d.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5v68da_d.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = 0\n           \
    \ for j = 1, #alphabet do\n                if char == alphabet[j] then\n     \
    \               index = j\n                    break\n                end\n  \
    \          end\n            if index + 2 > #alphabet then\n                index\
    \ = index + 2 - #alphabet\n            else\n                index = index + 2\n\
    \            end\n            char = alphabet[index]\n        end\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0mq6cox.lua:52:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpa0mq6cox.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqbn3h2p.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpyqbn3h2p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local function encode_letter(letter)\n        if letter == ' ' then\n   \
    \         return ' '\n        end\n        local letter_index = string.find(alphabet,\
    \ letter)\n        if letter_index == nil then\n            return letter\n  \
    \      end\n        local encoded_letter_index = letter_index + 2\n        if\
    \ encoded_letter_index > #alphabet then\n            encoded_letter_index = encoded_letter_index\
    \ - #alphabet\n        end\n        return string.sub(alphabet, encoded_letter_index,\
    \ encoded_letter_index)\n    end\n    local encoded_message = ''\n    for i =\
    \ 1, #message do\n        local letter = string.sub(message, i, i)\n        encoded_message\
    \ = encoded_message .. encode_letter(letter)\n    end\n    return encoded_message\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5oqdm1f2.lua:16:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp5oqdm1f2.lua:16:\
    \ in local 'encode_letter'\n\t/tmp/tmp5oqdm1f2.lua:29: in local 'candidate'\n\t\
    /tmp/tmp5oqdm1f2.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9741r0j.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpw9741r0j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char:upper()\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wklbnbi.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp5wklbnbi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % 5 +\
    \ 1]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj39h9e4.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpxj39h9e4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            index\
    \ = index + 2\n            if index > #vowels then\n                index = index\
    \ - #vowels\n            end\n            char = vowels[index]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9hzcgcl.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpf9hzcgcl.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpf9hzcgcl.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local result = {}\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local lower\
    \ = char:lower()\n        local upper = char:upper()\n        if lower == upper\
    \ then\n            table.insert(result, char)\n        elseif lower == char then\n\
    \            if lower == 'z' then\n                table.insert(result, 'A')\n\
    \            elseif lower == 'y' then\n                table.insert(result, 'B')\n\
    \            else\n                local next = message:sub(i + 1, i + 1)\n  \
    \              local next_lower = next:lower()\n                local next_upper\
    \ = next:upper()\n                if next_lower == next_upper then\n         \
    \           table.insert(result, upper)\n                elseif next_lower ==\
    \ next then\n                    table.insert(result, next_upper)\n          \
    \      else\n                    table.insert(result, next_lower)\n          \
    \      end\n            end\n        else\n            if lower == 'a' then\n\
    \                table.insert(result, 'C')\n            elseif lower == 'b' then\n\
    \                table.insert(result, 'D')\n            else\n               \
    \ local next = message:sub(i + 1, i + 1)\n                local next_lower = next:lower()\n\
    \                local next_upper = next:upper()\n                if next_lower\
    \ == next_upper then\n                    table.insert(result, lower)\n      \
    \          elseif next_lower == next then\n                    table.insert(result,\
    \ next_upper)\n                else\n                    table.insert(result,\
    \ next_lower)\n                end\n            end\n        end\n    end\n  \
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30fl_f46.lua:62:\
    \ expected: \"tgst\"\nactual: \"estt\"\nstack traceback:\n\t/tmp/tmp30fl_f46.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % 5 +\
    \ 1]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj39h9e4.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpxj39h9e4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local is_vowel = false\n \
    \           for j = 1, #vowels do\n                if char == vowels:sub(j, j)\
    \ then\n                    is_vowel = true\n                    break\n     \
    \           end\n            end\n            if is_vowel then\n             \
    \   local index = alphabet:find(char)\n                local new_index = index\
    \ + 2\n                if new_index > #alphabet then\n                    new_index\
    \ = new_index - #alphabet\n                end\n                char = alphabet:sub(new_index,\
    \ new_index)\n            end\n            if char:match('%l') then\n        \
    \        char = char:upper()\n            else\n                char = char:lower()\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp800drpz8.lua:47:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp800drpz8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g7o27qm.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp_g7o27qm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for _, vowel in ipairs(vowels)\
    \ do\n            if char == vowel then\n                char = vowels[((vowels[vowel]\
    \ or 0) + 2) % 5 + 1]\n                break\n            end\n        end\n \
    \       encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteb1u2bn.lua:35:\
    \ expected: \"tgst\"\nactual: \"tist\"\nstack traceback:\n\t/tmp/tmpteb1u2bn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if letter == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(letter)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if letter == letter:upper() then\n                encoded = encoded\
    \ .. letter:lower()\n            else\n                encoded = encoded .. letter:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s33k05h.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp1s33k05h.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels[j] then\n          \
    \      is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (j + 2) % #vowels\n     \
    \       if index == 0 then\n                index = #vowels\n            end\n\
    \            char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3e90l_0z.lua:29:\
    \ attempt to perform arithmetic on a nil value (global 'j')\nstack traceback:\n\
    \t/tmp/tmp3e90l_0z.lua:29: in local 'candidate'\n\t/tmp/tmp3e90l_0z.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if letter == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[j\
    \ + 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. letter:upper()\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf68akrn_.lua:39:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpf68akrn_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9741r0j.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpw9741r0j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyevvhyq.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpvyevvhyq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujq5s6i6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpujq5s6i6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ encoded = encoded .. char:upper()\n  end\n  return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjuc2k05.lua:38:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpmjuc2k05.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsnuus38.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmplsnuus38.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j +\
    \ 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char:upper()\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9w_il0f.lua:39:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpz9w_il0f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j + 2]\n    \
    \            break\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxvj9u0.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpktxvj9u0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local encoded = ''\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45g4pv34.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmp45g4pv34.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j + 2]\n    \
    \            break\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxvj9u0.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpktxvj9u0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujq5s6i6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpujq5s6i6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexof(vowels, char)\
    \ then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5]\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptv04y1vz.lua:21:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmptv04y1vz.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmptv04y1vz.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1,\
    \ #message do\n\t\tlocal c = message:sub(i, i)\n\t\tif c == c:upper() then\n\t\
    \t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\t\tend\n\t\tfor j = 1, #vowels\
    \ do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc = vowels[(j + 2) % #vowels]\n\t\t\
    \tend\n\t\tend\n\t\tencoded = encoded .. c\n\tend\n\treturn encoded\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk93xzmi4.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpk93xzmi4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ next_vowel = vowels[(j % #vowels) + 1]\n      encoded = encoded .. next_vowel\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded:upper()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tt6q4a3.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp0tt6q4a3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        if letter\
    \ == letter:upper() then\n            letter = letter:lower()\n        else\n\
    \            letter = letter:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if letter == vowels[j] then\n                letter = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ letter\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyr1hxp9.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpdyr1hxp9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j %\
    \ #vowels + 1]\n            local next_vowel_index = message:find(next_vowel,\
    \ i)\n            if next_vowel_index then\n                local next_vowel_index_2\
    \ = message:find(next_vowel, next_vowel_index + 1)\n                if next_vowel_index_2\
    \ then\n                    char = message:sub(next_vowel_index_2, next_vowel_index_2)\n\
    \                end\n            end\n        end\n        encoded = encoded\
    \ .. char:upper()\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f88r977.lua:41:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp0f88r977.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i = 1, #message do\n      \
    \  local char = message:sub(i, i)\n        if char == char:upper() then\n    \
    \        char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = alphabet:find(char)\n            char = alphabet:sub(index + 2, index\
    \ + 2)\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zj60ke5.lua:22:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp2zj60ke5.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2zj60ke5.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n            for\
    \ j = 1, #vowels do\n                if c == vowels[j] then\n                \
    \    c = vowels[(j + 2) % #vowels + 1]\n                    break\n          \
    \      end\n            end\n        end\n        encoded = encoded .. c\n   \
    \ end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_n_nyug.lua:37:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpx_n_nyug.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_upyqs6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpf_upyqs6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = {}\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ encoded[i] = char:upper()\n  end\n  return table.concat(encoded)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxjdztfz.lua:38:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmprxjdztfz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local nextVowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. nextVowel\n        else\n           \
    \ encoded = encoded .. char\n        end\n    end\n    return encoded:upper()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp410oprj3.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp410oprj3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeipasqsj.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeipasqsj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    local is_vowel = false\n \
    \   for j = 1, #vowels do\n      if c == vowels[j] then\n        is_vowel = true\n\
    \        break\n      end\n    end\n    if is_vowel then\n      local index =\
    \ (string.find(vowels, c) + 2) % #vowels\n      if index == 0 then\n        index\
    \ = #vowels\n      end\n      encoded = encoded .. vowels[index]\n    else\n \
    \     encoded = encoded .. c\n    end\n  end\n  return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkhnosdm.lua:39:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpfkhnosdm.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdivn47i3.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpdivn47i3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local function encode_char(char)\n        local char_code = string.byte(char)\n\
    \        local is_upper = char_code >= 65 and char_code <= 90\n        local is_lower\
    \ = char_code >= 97 and char_code <= 122\n        local is_vowel = char == 'a'\
    \ or char == 'e' or char == 'i' or char == 'o' or char == 'u'\n        local is_vowel_upper\
    \ = char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U'\n\
    \        if is_upper then\n            if is_vowel_upper then\n              \
    \  return string.char(char_code + 2)\n            else\n                return\
    \ string.char(char_code + 32)\n            end\n        elseif is_lower then\n\
    \            if is_vowel then\n                return string.char(char_code -\
    \ 22)\n            else\n                return string.char(char_code - 32)\n\
    \            end\n        else\n            return char\n        end\n    end\n\
    \    local encoded_message = ''\n    for i = 1, #message do\n        encoded_message\
    \ = encoded_message .. encode_char(message:sub(i, i))\n    end\n    return encoded_message\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sf9irdi.lua:44:\
    \ expected: \"tgst\"\nactual: \"tGst\"\nstack traceback:\n\t/tmp/tmp6sf9irdi.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  local char\n\
    \  for i = 1, #message do\n    char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ % #vowels) + 1]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmbulflg.lua:35:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpwmbulflg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if vowels:find(char) then\n      local\
    \ index = vowels:find(char)\n      char = vowels:sub(index + 2, index + 2)\n \
    \   end\n    encoded = encoded .. char\n  end\n  return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwnnqghq.lua:34:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmprwnnqghq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c:find('%a')\
    \ then\n            if c:find('%l') then\n                c = c:upper()\n    \
    \        else\n                c = c:lower()\n            end\n            for\
    \ j = 1, #vowels do\n                if c == vowels[j] then\n                \
    \    c = vowels[(j + 2) % #vowels + 1]\n                    break\n          \
    \      end\n            end\n        end\n        encoded = encoded .. c\n   \
    \ end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d7zr9ya.lua:37:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmp9d7zr9ya.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt1464oh.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpyt1464oh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local nextVowel\
    \ = vowels[(j % #vowels) + 1]\n      encoded = encoded .. nextVowel\n    else\n\
    \      local ascii = string.byte(char)\n      if ascii >= 65 and ascii <= 90 then\n\
    \        encoded = encoded .. string.char(ascii + 32)\n      elseif ascii >= 97\
    \ and ascii <= 122 then\n        encoded = encoded .. string.char(ascii - 32)\n\
    \      else\n        encoded = encoded .. char\n      end\n    end\n  end\n  return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn0e_yzi.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpyn0e_yzi.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local new_char = string.char(string.byte(char)\
    \ + 2)\n            encoded = encoded .. new_char\n        else\n            if\
    \ char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzc4kbf7.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpyzc4kbf7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char:match('%a')\
    \ then\n            if char == char:upper() then\n                char = char:lower()\n\
    \            else\n                char = char:upper()\n            end\n    \
    \    end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k3bot9k.lua:42:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp2k3bot9k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j +\
    \ 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmft94y31.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpmft94y31.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local upper\
    \ = char:upper() == char\n        local lower = char:lower() == char\n       \
    \ if upper then\n            char = char:lower()\n        end\n        if lower\
    \ then\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ % #vowels) + 1]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxq2gg7d.lua:37:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpqxq2gg7d.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local upper = char:upper()\n        local lower = char:lower()\n\
    \        if upper == lower then\n            encoded = encoded .. char\n     \
    \   elseif upper == char then\n            encoded = encoded .. lower\n      \
    \  else\n            encoded = encoded .. upper\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0sq69fu.lua:31:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmph0sq69fu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsnuus38.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmplsnuus38.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n \
    \     result = result .. c:lower()\n    else\n      result = result .. c:upper()\n\
    \    end\n    for j = 1, #vowels do\n      if c == vowels[j] then\n        result\
    \ = result .. vowels[(j + 2) % 5 + 1]\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx1r7c0f.lua:33:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpnx1r7c0f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexOf(vowels, char)\
    \ then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ob1e7h0.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp5ob1e7h0.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5ob1e7h0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel =\
    \ true\n        break\n      end\n    end\n    if isVowel then\n      local index\
    \ = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n    \
    \    index = #vowels\n      end\n      encoded = encoded .. vowels[index]\n  \
    \  else\n      if char == char:upper() then\n        encoded = encoded .. char:lower()\n\
    \      else\n        encoded = encoded .. char:upper()\n      end\n    end\n \
    \ end\n  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3gg3iqf.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpx3gg3iqf.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match('[a-z]') then\n      char = char:upper()\n    elseif char:match('[A-Z]')\
    \ then\n      char = char:lower()\n    end\n    if char:match('[aeiou]') then\n\
    \      local index = string.find('aeiou', char)\n      char = 'aeiou':sub(index\
    \ + 2, index + 2)\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe6n16lom.lua:22: unexpected symbol near '':''

    '
  stdout: ''
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % 5 +\
    \ 1]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj39h9e4.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpxj39h9e4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j+2]\n      \
    \          break\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqykq8qvw.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpqykq8qvw.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[a-z]') then\n            if char == char:upper()\
    \ then\n                char = char:lower()\n            else\n              \
    \  char = char:upper()\n            end\n            if char == 'a' then\n   \
    \             char = 'c'\n            elseif char == 'e' then\n              \
    \  char = 'g'\n            elseif char == 'i' then\n                char = 'k'\n\
    \            elseif char == 'o' then\n                char = 'q'\n           \
    \ elseif char == 'u' then\n                char = 'y'\n            end\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8va0hax0.lua:41:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp8va0hax0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        if table.contains(vowels, c) then\n            local index\
    \ = table.indexof(vowels, c)\n            c = vowels[(index + 2) % #vowels + 1]\n\
    \        end\n        encoded = encoded .. c\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5t85x1cs.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp5t85x1cs.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5t85x1cs.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ + 2) - string.byte('a')\n            encoded = encoded .. string.char(string.byte('a')\
    \ + index % 26)\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaxisp_4.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpdaxisp_4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            char = next_vowel:upper()\n        else\n     \
    \       char = char:lower()\n        end\n        encoded[#encoded + 1] = char\n\
    \    end\n    return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_geke90.lua:37:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpv_geke90.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujq5s6i6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpujq5s6i6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eo2arbc.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp4eo2arbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ if char == char:upper() then\n      char = char:lower()\n    else\n      char\
    \ = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4znwwig.lua:43:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp_4znwwig.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ encoded = encoded .. char:upper()\n  end\n  return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjuc2k05.lua:38:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpmjuc2k05.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local letter = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if letter == vowels[j] then\n        isVowel\
    \ = true\n        break\n      end\n    end\n    if isVowel then\n      local\
    \ nextVowel = vowels[((j + 2) % #vowels) + 1]\n      encoded = encoded .. nextVowel\n\
    \    else\n      encoded = encoded .. letter:upper()\n    end\n  end\n  return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59lc8bzr.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp59lc8bzr.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvb0z5vz.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpbvb0z5vz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g7o27qm.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp_g7o27qm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajzi9lus.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpajzi9lus.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local is_vowel = false\n \
    \           for j = 1, #vowels do\n                if char == vowels:sub(j, j)\
    \ then\n                    is_vowel = true\n                    break\n     \
    \           end\n            end\n            if is_vowel then\n             \
    \   local index = alphabet:find(char)\n                local new_index = index\
    \ + 2\n                if new_index > #alphabet then\n                    new_index\
    \ = new_index - #alphabet\n                end\n                char = alphabet:sub(new_index,\
    \ new_index)\n            end\n            if char:match('%l') then\n        \
    \        char = char:upper()\n            else\n                char = char:lower()\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp800drpz8.lua:47:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp800drpz8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local letter = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if letter == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[j\
    \ + 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. letter:lower()\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwphtacq3.lua:39:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpwphtacq3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local is_upper = char:match('%u')\n\
    \            local is_vowel = vowels:find(char:lower())\n            local index\
    \ = alphabet:find(char:lower())\n            if is_vowel then\n              \
    \  index = index + 2\n                if index > #alphabet then\n            \
    \        index = index - #alphabet\n                end\n            end\n   \
    \         if is_upper then\n                encoded = encoded .. alphabet:sub(index,\
    \ index):upper()\n            else\n                encoded = encoded .. alphabet:sub(index,\
    \ index)\n            end\n        else\n            encoded = encoded .. char\n\
    \        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqfufu10.lua:42:\
    \ expected: \"tgst\"\nactual: \"TGST\"\nstack traceback:\n\t/tmp/tmpvqfufu10.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajzi9lus.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpajzi9lus.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = {}\n\tfor i = 1,\
    \ #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel = false\n\
    \t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\tisVowel =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\tlocal index\
    \ = (string.find('aeiou', char) + 2) % 5\n\t\t\tif index == 0 then index = 5 end\n\
    \t\t\tchar = vowels[index]\n\t\tend\n\t\tif char == char:upper() then\n\t\t\t\
    char = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\t\tend\n\t\ttable.insert(encoded,\
    \ char)\n\tend\n\treturn table.concat(encoded)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_1vlns2.lua:41:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpk_1vlns2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    if lower:find('[aeiou]') then\n    \
    \  local index = lower:byte() - 97\n      local next = (index + 2) % 26\n    \
    \  char = string.char(next + 97)\n    end\n    if char:find('[a-z]') then\n  \
    \    char = char:upper()\n    else\n      char = char:lower()\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3ptr2_9.lua:34:\
    \ expected: \"tgst\"\nactual: \"tGst\"\nstack traceback:\n\t/tmp/tmpk3ptr2_9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local letter = message:sub(i, i)\n    if letter == letter:upper()\
    \ then\n      letter = letter:lower()\n    else\n      letter = letter:upper()\n\
    \    end\n    local found = false\n    for j = 1, #vowels do\n      if letter\
    \ == vowels[j] then\n        letter = vowels[(j + 2) % 5 + 1]\n        found =\
    \ true\n        break\n      end\n    end\n    if not found then\n      letter\
    \ = letter\n    end\n    encoded = encoded .. letter\n  end\n  return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vovp123.lua:40:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmp7vovp123.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % 5 +\
    \ 1]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj39h9e4.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmpxj39h9e4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdivn47i3.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpdivn47i3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char:lower()\n        end\n    end\n    return\
    \ encoded:upper()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1h_b5y7.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpx1h_b5y7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_upyqs6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpf_upyqs6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        local char_index = alphabet:find(char_lower)\n        if char_index then\n\
    \            local new_char_index = char_index + 2\n            if new_char_index\
    \ > #alphabet then\n                new_char_index = new_char_index - #alphabet\n\
    \            end\n            local new_char = alphabet:sub(new_char_index, new_char_index)\n\
    \            if vowels:find(new_char) then\n                encoded = encoded\
    \ .. new_char:upper()\n            else\n                encoded = encoded ..\
    \ new_char:lower()\n            end\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdizofpbt.lua:41:\
    \ expected: \"tgst\"\nactual: \"vgUv\"\nstack traceback:\n\t/tmp/tmpdizofpbt.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvb0z5vz.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpbvb0z5vz.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ayzi9j0.lua:17:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_ayzi9j0.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[a-z]') then\n            encoded = encoded .. char:upper()\n\
    \        elseif char:match('[A-Z]') then\n            encoded = encoded .. char:lower()\n\
    \        elseif char:match('[aeiou]') then\n            local index = string.find('aeiou',\
    \ char)\n            encoded = encoded .. 'aeiou':sub(index + 2, index + 2)\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqv4tbsp.lua:21: unexpected symbol near '':''

    '
  stdout: ''
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujq5s6i6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpujq5s6i6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[a-z]') then\n            encoded = encoded .. char:upper()\n\
    \        elseif char:match('[A-Z]') then\n            encoded = encoded .. char:lower()\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2se2pdse.lua:29:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp2se2pdse.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for _, v in ipairs(vowels) do\n            if char == v then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[((i\
    \ % #vowels) + 1)]\n            encoded = encoded .. next_vowel:upper()\n    \
    \    else\n            encoded = encoded .. char:lower()\n        end\n    end\n\
    \    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxgmagla.lua:36:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpxxgmagla.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexof(vowels, char)\
    \ then\n            char = vowels[(table.indexof(vowels, char) + 2) % #vowels]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6v1x1ngb.lua:21:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp6v1x1ngb.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp6v1x1ngb.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local new_message = ''\n  \
    \  for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        new_message = new_message\
    \ .. char\n    end\n    return new_message\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56z8e0v4.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmp56z8e0v4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n \
    \     c = c:lower()\n    else\n      c = c:upper()\n    end\n    for _, v in ipairs(vowels)\
    \ do\n      if c == v then\n        c = vowels[((vowels[v] or 0) + 2) % #vowels\
    \ + 1]\n        break\n      end\n    end\n    encoded = encoded .. c\n  end\n\
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp134ffw58.lua:35:\
    \ expected: \"tgst\"\nactual: \"tist\"\nstack traceback:\n\t/tmp/tmp134ffw58.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.indexOf(vowels, char)\
    \ then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n   \
    \     end\n        encoded = encoded .. char\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ob1e7h0.lua:21:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmp5ob1e7h0.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp5ob1e7h0.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        if c:lower()\
    \ == c then\n            c = c:upper()\n        else\n            c = c:lower()\n\
    \        end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels + 1]\n                break\n  \
    \          end\n        end\n        result = result .. c\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7siyjbtu.lua:35:\
    \ expected: \"tgst\"\nactual: \"tust\"\nstack traceback:\n\t/tmp/tmp7siyjbtu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhve3q3_.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxhve3q3_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        if char_lower == char_upper then\n            encoded = encoded .. char\n\
    \        elseif char_lower == char then\n            encoded = encoded .. char_upper\n\
    \        else\n            encoded = encoded .. char_lower\n        end\n    \
    \    if vowels:find(char_lower) then\n            local index = vowels:find(char_lower)\n\
    \            if index == #vowels then\n                index = 1\n           \
    \ else\n                index = index + 2\n            end\n            encoded\
    \ = encoded .. alphabet:sub(index, index)\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtmgwgu5.lua:42:\
    \ expected: \"tgst\"\nactual: \"tedst\"\nstack traceback:\n\t/tmp/tmpgtmgwgu5.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- TODO: Implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22p9qbma.lua:18:\
    \ expected: \"tgst\"\nactual: nil\nstack traceback:\n\t/tmp/tmp22p9qbma.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if char == 'z' then\n       \
    \     char = 'b'\n        elseif char == 'y' then\n            char = 'a'\n  \
    \      elseif char == 'x' then\n            char = 'z'\n        else\n       \
    \     char = string.char(string.byte(char) + 2)\n        end\n        for _,vowel\
    \ in ipairs(vowels) do\n            if char == vowel then\n                char\
    \ = 'i'\n            end\n        end\n        encoded = encoded .. char\n   \
    \ end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcsw4oum.lua:43:\
    \ expected: \"tgst\"\nactual: \"vgiv\"\nstack traceback:\n\t/tmp/tmphcsw4oum.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j +\
    \ 2]\n            if not next_vowel then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char:upper()\n        end\n    end\n    return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvuw0a3c.lua:39:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpwvuw0a3c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[j + 2]\n    \
    \            break\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxvj9u0.lua:35:\
    \ expected: \"tgst\"\nactual: \"tost\"\nstack traceback:\n\t/tmp/tmpktxvj9u0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      char = vowels[index]\n\
    \    end\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolo73273.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpolo73273.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[((j\
    \ + 2) % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u3ftw9m.lua:36:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmp2u3ftw9m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfmtsjnh.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcfmtsjnh.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpcfmtsjnh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ encoded = encoded .. char:upper()\n  end\n  return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjuc2k05.lua:38:\
    \ expected: \"tgst\"\nactual: \"TEST\"\nstack traceback:\n\t/tmp/tmpmjuc2k05.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyevvhyq.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpvyevvhyq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n \
    \     c = c:lower()\n    else\n      c = c:upper()\n    end\n    for j = 1, #vowels\
    \ do\n      if c == vowels[j] then\n        c = vowels[(j + 2) % #vowels]\n  \
    \    end\n    end\n    encoded = encoded .. c\n  end\n  return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1zeb_eo.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmph1zeb_eo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g7o27qm.lua:40:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmp_g7o27qm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local c = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (c:byte() - 96)\
    \ % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n    \
    \        encoded = encoded .. c:lower()\n        end\n    end\n    return encoded\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesnotueq.lua:36:\
    \ expected: \"tgst\"\nactual: \"test\"\nstack traceback:\n\t/tmp/tmpesnotueq.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded[#encoded + 1] = char\n    end\n\
    \    return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_upyqs6.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpf_upyqs6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        local lower = c:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_c = alphabet:sub(index,\
    \ index)\n            if c == c:upper() then\n                new_c = new_c:upper()\n\
    \            end\n            encoded = encoded .. new_c\n        else\n     \
    \       encoded = encoded .. c\n        end\n    end\n    return encoded\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg0ix627.lua:42:\
    \ expected: \"tgst\"\nactual: \"TGST\"\nstack traceback:\n\t/tmp/tmpdg0ix627.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local lower = char:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_char = alphabet:sub(index,\
    \ index)\n            if char == char:upper() then\n                new_char =\
    \ new_char:upper()\n            end\n            encoded = encoded .. new_char\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebtq31p5.lua:42:\
    \ expected: \"tgst\"\nactual: \"TGST\"\nstack traceback:\n\t/tmp/tmpebtq31p5.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = {}\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded[#encoded + 1] = char\n  end\n\
    \  return table.concat(encoded)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp118ygtv4.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmp118ygtv4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793416
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5_hxf3.lua:34:\
    \ expected: \"tgst\"\nactual: \"tast\"\nstack traceback:\n\t/tmp/tmpum5_hxf3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
