name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
  -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for _, v in ipairs(x) do\n        local\
    \ has_even_digit = false\n        while v > 0 do\n            local digit = v\
    \ % 10\n            if digit % 2 == 0 then\n                has_even_digit = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", " \
    \   local result = {}\n    for _, v in ipairs(x) do\n        local has_even =\
    \ false\n        while v > 0 do\n            local d = v % 10\n            if\
    \ d % 2 == 0 then\n                has_even = true\n                break\n  \
    \          end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ has_even then\n            table.insert(result, v)\n        end\n    end\n \
    \   table.sort(result)\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #x do\n        if not has_even_digit(x[i]) then\n            result[#result\
    \ + 1] = x[i]\n        end\n    end\n    return result\nend", "    local res =\
    \ {}\n    for _, v in ipairs(x) do\n        local has_even = false\n        for\
    \ d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \     end\n        if not has_even then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend", "    local result\
    \ = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n       \
    \ while v > 0 do\n            local d = v % 10\n            if d % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         v = math.floor(v / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend", "    local result\
    \ = {}\n    for i = 1, #x do\n        local has_even = false\n        local n\
    \ = x[i]\n        while n > 0 do\n            if n % 2 == 0 then\n           \
    \     has_even = true\n                break\n            end\n            n =\
    \ math.floor(n / 10)\n        end\n        if not has_even then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "  local result = {}\n  for _, v in ipairs(x) do\n    local has_even = false\n \
    \   for d in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n    end\n    if not has_even\
    \ then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "    local res = {}\n    for _, v in ipairs(x) do\n  \
    \      local has_even = false\n        while v > 0 do\n            local d = v\
    \ % 10\n            if d % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n            v = math.floor(v / 10)\n    \
    \    end\n        if not has_even then\n            table.insert(res, v)\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend", "    local res\
    \ = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n       \
    \ while v > 0 do\n            local d = v % 10\n            if d % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         v = math.floor(v / 10)\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local res = {}\n    for _, v in ipairs(x) do\n   \
    \     local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "  local function is_unique(n)\n    while n > 0 do\n  \
    \    local d = n % 10\n      if d % 2 == 0 then\n        return false\n      end\n\
    \      n = (n - d) / 10\n    end\n    return true\n  end\n  local res = {}\n \
    \ for _, v in ipairs(x) do\n    if is_unique(v) then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  return res\nend", "  local result =\
    \ {}\n  for i = 1, #x do\n    local has_even = false\n    for digit in tostring(x[i]):gmatch('%d')\
    \ do\n      if tonumber(digit) % 2 == 0 then\n        has_even = true\n      \
    \  break\n      end\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend", "    local\
    \ res = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n   \
    \     for d in tostring(v):gmatch(\"%d\") do\n            if tonumber(d) % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend", "    local\
    \ res = {}\n    for _, v in ipairs(x) do\n        local is_unique = true\n   \
    \     for d in tostring(v):gmatch('%d') do\n            if tonumber(d) % 2 ==\
    \ 0 then\n                is_unique = false\n                break\n         \
    \   end\n        end\n        if is_unique then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend", "    local\
    \ unique_digits = {}\n    for _, v in ipairs(x) do\n        local has_even_digit\
    \ = false\n        for d in tostring(v):gmatch('%d') do\n            if tonumber(d)\
    \ % 2 == 0 then\n                has_even_digit = true\n                break\n\
    \            end\n        end\n        if not has_even_digit then\n          \
    \  table.insert(unique_digits, v)\n        end\n    end\n    table.sort(unique_digits)\n\
    \    return unique_digits\nend", "    local result = {}\n    for i,v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend", "  local t = {}\n  for\
    \ i,v in ipairs(x) do\n    local is_unique = true\n    for j = 1, #tostring(v)\
    \ do\n      if tonumber(tostring(v):sub(j,j)) % 2 == 0 then\n        is_unique\
    \ = false\n        break\n      end\n    end\n    if is_unique then\n      table.insert(t,\
    \ v)\n    end\n  end\n  table.sort(t)\n  return t\nend", "    local function is_unique(n)\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                return\
    \ false\n            end\n            n = math.floor(n / 10)\n        end\n  \
    \      return true\n    end\n    local res = {}\n    for _, v in ipairs(x) do\n\
    \        if is_unique(v) then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend", "    local result = {}\n\
    \    for _, v in ipairs(x) do\n        local has_even = false\n        while v\
    \ > 0 do\n            local digit = v % 10\n            if digit % 2 == 0 then\n\
    \                has_even = true\n                break\n            end\n   \
    \         v = math.floor(v / 10)\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
