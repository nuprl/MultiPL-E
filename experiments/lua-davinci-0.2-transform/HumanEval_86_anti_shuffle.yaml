name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n-- 'Hi'\n\
  -- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello World!!!')\n\
  -- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    for word in s:gmatch('%S+') do\n       \
    \ table.insert(result, word:gsub('.', function(c)\n            return string.char(c:byte()\
    \ + 1)\n        end))\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch('.') do\n         \
    \   table.insert(chars, char)\n        end\n        table.sort(chars)\n      \
    \  table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in s:gmatch('%S+') do\n    \
    \    table.insert(words, word)\n    end\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        local chars = {}\n        for char in word:gmatch('.')\
    \ do\n            table.insert(chars, char)\n        end\n        table.sort(chars)\n\
    \        table.insert(result, table.concat(chars))\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    -- TODO: implement this function\nend", "    local res = {}\n\
    \    for w in s:gmatch('%S+') do\n        local chars = {}\n        for c in w:gmatch('.')\
    \ do\n            table.insert(chars, c)\n        end\n        table.sort(chars)\n\
    \        table.insert(res, table.concat(chars))\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    -- TODO: implement this function\nend", "  local words = {}\n\
    \  for word in s:gmatch('%S+') do\n    table.insert(words, word)\n  end\n  local\
    \ result = {}\n  for _, word in ipairs(words) do\n    local chars = {}\n    for\
    \ char in word:gmatch('.') do\n      table.insert(chars, char)\n    end\n    table.sort(chars)\n\
    \    table.insert(result, table.concat(chars))\n  end\n  return table.concat(result,\
    \ ' ')\nend", "  local words = {}\n  local word = ''\n  for c in s:gmatch('.')\
    \ do\n    if c == ' ' then\n      table.insert(words, word)\n      word = ''\n\
    \    else\n      word = word .. c\n    end\n  end\n  table.insert(words, word)\n\
    \  local anti_shuffled = {}\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for c in word:gmatch('.') do\n      table.insert(chars, c)\n    end\n\
    \    table.sort(chars)\n    table.insert(anti_shuffled, table.concat(chars))\n\
    \  end\n  return table.concat(anti_shuffled, ' ')\nend", "    local words = {}\n\
    \    for word in s:gmatch('%S+') do\n        table.insert(words, word)\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        local chars\
    \ = {}\n        for char in word:gmatch('.') do\n            table.insert(chars,\
    \ char)\n        end\n        table.sort(chars)\n        table.insert(result,\
    \ table.concat(chars))\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local words = {}\n    for word in s:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    for i, word in ipairs(words) do\n        local chars = {}\n\
    \        for char in word:gmatch('.') do\n            table.insert(chars, char)\n\
    \        end\n        table.sort(chars)\n        words[i] = table.concat(chars)\n\
    \    end\n    return table.concat(words, ' ')\nend", "    local words = {}\n \
    \   for word in s:gmatch('%S+') do\n        table.insert(words, word)\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        local chars\
    \ = {}\n        for char in word:gmatch('.') do\n            table.insert(chars,\
    \ char)\n        end\n        table.sort(chars)\n        table.insert(result,\
    \ table.concat(chars))\n    end\n    return table.concat(result, ' ')\nend", " \
    \ local words = {}\n  for w in s:gmatch('%S+') do\n    table.insert(words, w)\n\
    \  end\n  local result = {}\n  for i, w in ipairs(words) do\n    local letters\
    \ = {}\n    for c in w:gmatch('.') do\n      table.insert(letters, c)\n    end\n\
    \    table.sort(letters)\n    result[i] = table.concat(letters)\n  end\n  return\
    \ table.concat(result, ' ')\nend", "    -- TODO: implement this function\nend",
  "    -- TODO: implement this function\nend", "    -- TODO: implement this function\n\
    end", "  -- TODO: Implement this function\nend", "    local words = {}\n    local\
    \ word = ''\n    for c in s:gmatch('.') do\n        if c == ' ' then\n       \
    \     table.insert(words, word)\n            word = ''\n        else\n       \
    \     word = word .. c\n        end\n    end\n    table.insert(words, word)\n\
    \    for i, word in ipairs(words) do\n        local chars = {}\n        for c\
    \ in word:gmatch('.') do\n            table.insert(chars, c)\n        end\n  \
    \      table.sort(chars)\n        words[i] = table.concat(chars)\n    end\n  \
    \  return table.concat(words, ' ')\nend", "  local words = {}\n  for w in s:gmatch('%S+')\
    \ do\n    table.insert(words, w)\n  end\n  for i, w in ipairs(words) do\n    local\
    \ chars = {}\n    for c in w:gmatch('.') do\n      table.insert(chars, c)\n  \
    \  end\n    table.sort(chars)\n    words[i] = table.concat(chars)\n  end\n  return\
    \ table.concat(words, ' ')\nend", "    local words = {}\n    for word in s:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    local new_words = {}\n \
    \   for i, word in ipairs(words) do\n        local chars = {}\n        for char\
    \ in word:gmatch('.') do\n            table.insert(chars, char)\n        end\n\
    \        table.sort(chars)\n        new_words[i] = table.concat(chars)\n    end\n\
    \    return table.concat(new_words, ' ')\nend", "    local words = {}\n    for\
    \ w in s:gmatch('%S+') do\n        table.insert(words, w)\n    end\n    local\
    \ result = {}\n    for i, w in ipairs(words) do\n        local chars = {}\n  \
    \      for c in w:gmatch('.') do\n            table.insert(chars, c)\n       \
    \ end\n        table.sort(chars)\n        table.insert(result, table.concat(chars))\n\
    \    end\n    return table.concat(result, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
