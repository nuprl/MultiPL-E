name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n--\
  \ >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a\
  \ b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n\
  -- >>> histogram('')\n-- {}\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local hist = {}\n    local max = 0\n    for letter in test:gmatch('%a')\
    \ do\n        hist[letter] = (hist[letter] or 0) + 1\n        max = math.max(max,\
    \ hist[letter])\n    end\n    local result = {}\n    for letter, count in pairs(hist)\
    \ do\n        if count == max then\n            result[letter] = count\n     \
    \   end\n    end\n    return result\nend", "  local hist = {}\n  local max = 0\n\
    \  for i in string.gmatch(test, \"%S+\") do\n    hist[i] = (hist[i] or 0) + 1\n\
    \    if hist[i] > max then\n      max = hist[i]\n    end\n  end\n  local result\
    \ = {}\n  for k, v in pairs(hist) do\n    if v == max then\n      result[k] =\
    \ v\n    end\n  end\n  return result\nend", "    local letters = {}\n    local\
    \ max = 0\n    local result = {}\n    for letter in string.gmatch(test, \"%a\"\
    ) do\n        if letters[letter] == nil then\n            letters[letter] = 1\n\
    \        else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \        if letters[letter] > max then\n            max = letters[letter]\n  \
    \      end\n    end\n    for letter, count in pairs(letters) do\n        if count\
    \ == max then\n            result[letter] = count\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    local max = 0\n    for i in string.gmatch(test,\
    \ \"%S+\") do\n        if result[i] == nil then\n            result[i] = 1\n \
    \       else\n            result[i] = result[i] + 1\n        end\n        if result[i]\
    \ > max then\n            max = result[i]\n        end\n    end\n    local result2\
    \ = {}\n    for k, v in pairs(result) do\n        if v == max then\n         \
    \   result2[k] = v\n        end\n    end\n    return result2\nend", "  local letters\
    \ = {}\n  local max = 0\n  for letter in test:gmatch('%a') do\n    if letters[letter]\
    \ == nil then\n      letters[letter] = 1\n    else\n      letters[letter] = letters[letter]\
    \ + 1\n    end\n    if letters[letter] > max then\n      max = letters[letter]\n\
    \    end\n  end\n  local result = {}\n  for letter, count in pairs(letters) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  return\
    \ result\nend", "  local hist = {}\n  local max = 0\n  for i in string.gmatch(test,\
    \ \"%S+\") do\n    hist[i] = (hist[i] or 0) + 1\n    if hist[i] > max then\n \
    \     max = hist[i]\n    end\n  end\n  local result = {}\n  for k, v in pairs(hist)\
    \ do\n    if v == max then\n      result[k] = v\n    end\n  end\n  return result\n\
    end", "    local letters = {}\n    local count = {}\n    local max = 0\n    local\
    \ result = {}\n    for letter in string.gmatch(test, \"%a\") do\n        if letters[letter]\
    \ == nil then\n            letters[letter] = 1\n        else\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n        if letters[letter] > max then\n\
    \            max = letters[letter]\n        end\n    end\n    for letter, value\
    \ in pairs(letters) do\n        if value == max then\n            result[letter]\
    \ = value\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  local max = 0\n  for word in string.gmatch(test, \"%S+\") do\n    result[word]\
    \ = (result[word] or 0) + 1\n    if result[word] > max then\n      max = result[word]\n\
    \    end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n    if\
    \ v == max then\n      result2[k] = v\n    end\n  end\n  return result2\nend",
  "    local result = {}\n    for word in string.gmatch(test, '%S+') do\n        if\
    \ result[word] == nil then\n            result[word] = 1\n        else\n     \
    \       result[word] = result[word] + 1\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  local max = 0\n  for i in string.gmatch(test, \"\
    %S+\") do\n    if result[i] == nil then\n      result[i] = 1\n    else\n     \
    \ result[i] = result[i] + 1\n    end\n    if result[i] > max then\n      max =\
    \ result[i]\n    end\n  end\n  for k, v in pairs(result) do\n    if v ~= max then\n\
    \      result[k] = nil\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    local max = 0\n    for word in string.gmatch(test, \"%a+\") do\n \
    \       if result[word] == nil then\n            result[word] = 1\n        else\n\
    \            result[word] = result[word] + 1\n        end\n        if result[word]\
    \ > max then\n            max = result[word]\n        end\n    end\n    local\
    \ max_list = {}\n    for k, v in pairs(result) do\n        if v == max then\n\
    \            max_list[k] = v\n        end\n    end\n    return max_list\nend",
  "    local hist = {}\n    local max = 0\n    for i in string.gmatch(test, \"%S+\"\
    ) do\n        hist[i] = (hist[i] or 0) + 1\n        if hist[i] > max then\n  \
    \          max = hist[i]\n        end\n    end\n    local result = {}\n    for\
    \ k, v in pairs(hist) do\n        if v == max then\n            result[k] = v\n\
    \        end\n    end\n    return result\nend", "  local t = {}\n  local max =\
    \ 0\n  for i in string.gmatch(test, \"%S+\") do\n    if t[i] == nil then\n   \
    \   t[i] = 1\n    else\n      t[i] = t[i] + 1\n    end\n    if t[i] > max then\n\
    \      max = t[i]\n    end\n  end\n  local result = {}\n  for k, v in pairs(t)\
    \ do\n    if v == max then\n      result[k] = v\n    end\n  end\n  return result\n\
    end", "  local hist = {}\n  for i = 1, #test do\n    local letter = test:sub(i,\
    \ i)\n    if letter ~= ' ' then\n      hist[letter] = (hist[letter] or 0) + 1\n\
    \    end\n  end\n  return hist\nend", "  local hist = {}\n  local max = 0\n  local\
    \ max_letters = {}\n  for letter in string.gmatch(test, '%a') do\n    hist[letter]\
    \ = (hist[letter] or 0) + 1\n    if hist[letter] > max then\n      max = hist[letter]\n\
    \      max_letters = {letter}\n    elseif hist[letter] == max then\n      table.insert(max_letters,\
    \ letter)\n    end\n  end\n  return {[max_letters] = max}\nend", "    local hist\
    \ = {}\n    local max = 0\n    for letter in test:gmatch('%a') do\n        hist[letter]\
    \ = (hist[letter] or 0) + 1\n        max = math.max(max, hist[letter])\n    end\n\
    \    local result = {}\n    for letter, count in pairs(hist) do\n        if count\
    \ == max then\n            result[letter] = count\n        end\n    end\n    return\
    \ result\nend", "    local t = {}\n    local max = 0\n    for i in string.gmatch(test,\
    \ \"%S+\") do\n        if t[i] == nil then\n            t[i] = 1\n        else\n\
    \            t[i] = t[i] + 1\n        end\n        if t[i] > max then\n      \
    \      max = t[i]\n        end\n    end\n    local r = {}\n    for k, v in pairs(t)\
    \ do\n        if v == max then\n            r[k] = v\n        end\n    end\n \
    \   return r\nend", "    local letters = {}\n    for letter in test:gmatch('%a')\
    \ do\n        if letters[letter] then\n            letters[letter] = letters[letter]\
    \ + 1\n        else\n            letters[letter] = 1\n        end\n    end\n \
    \   local max = 0\n    for _, count in pairs(letters) do\n        if count > max\
    \ then\n            max = count\n        end\n    end\n    local result = {}\n\
    \    for letter, count in pairs(letters) do\n        if count == max then\n  \
    \          result[letter] = count\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local max = 0\n    for word in string.gmatch(test, \"\
    %S+\") do\n        if result[word] == nil then\n            result[word] = 1\n\
    \        else\n            result[word] = result[word] + 1\n        end\n    \
    \    if result[word] > max then\n            max = result[word]\n        end\n\
    \    end\n    local final = {}\n    for k, v in pairs(result) do\n        if v\
    \ == max then\n            final[k] = v\n        end\n    end\n    return final\n\
    end", "    local hist = {}\n    local max = 0\n    for word in string.gmatch(test,\
    \ \"%a+\") do\n        if hist[word] == nil then\n            hist[word] = 1\n\
    \        else\n            hist[word] = hist[word] + 1\n        end\n        if\
    \ hist[word] > max then\n            max = hist[word]\n        end\n    end\n\
    \    local result = {}\n    for word, count in pairs(hist) do\n        if count\
    \ == max then\n            result[word] = count\n        end\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
