language: lua
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            paren_count = paren_count + 1\n        \
    \    current_group = current_group .. c\n        elseif c == ')' then\n      \
    \      paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            level = level + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            level = level - 1\n\
    \            group = group .. c\n            if level == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            groups[#groups +\
    \ 1] = current_group\n            current_group = ''\n        elseif char ~= '\
    \ ' then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2owfgcb.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpm2owfgcb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if c\
    \ == ' ' then\n            -- ignore spaces\n        elseif c == '(' then\n  \
    \          depth = depth + 1\n            current_group = current_group .. c\n\
    \        elseif c == ')' then\n            depth = depth - 1\n            current_group\
    \ = current_group .. c\n            if depth == 0 then\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  else\n            error('Unexpected character: ' .. c)\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_count = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            open_count = open_count + 1\n    \
    \    elseif c == ')' then\n            open_count = open_count - 1\n        end\n\
    \        if open_count == 0 then\n            if group ~= '' then\n          \
    \      table.insert(groups, group)\n                group = ''\n            end\n\
    \        else\n            group = group .. c\n        end\n    end\n    return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszaofcb9.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpszaofcb9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif char == ')' then\n         \
    \   paren_count = paren_count - 1\n        end\n        if paren_count == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(groups,\
    \ current_group)\n            end\n            current_group = ''\n        else\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9895uouj.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9895uouj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjgkyokh.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwjgkyokh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n        end\n        if level == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8s5gyzn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpp8s5gyzn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i=1,#paren_string do\n        local char = paren_string:sub(i,i)\n  \
    \      if char == '(' then\n            paren_count = paren_count + 1\n      \
    \  elseif char == ')' then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 then\n            if current_group ~= '' then\n\
    \                table.insert(paren_groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuu_bo6_0.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpuu_bo6_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local level = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            level = level + 1\n        elseif char == ')'\
    \ then\n            level = level - 1\n        end\n        if level == 0 then\n\
    \            if #current_group > 0 then\n                table.insert(result,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  else\n            current_group = current_group .. char\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85eiuebm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp85eiuebm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local group = ''\n  local open_count = 0\n  for char in paren_string:gmatch('.')\
    \ do\n    if char == '(' then\n      open_count = open_count + 1\n      group\
    \ = group .. char\n    elseif char == ')' then\n      open_count = open_count\
    \ - 1\n      group = group .. char\n      if open_count == 0 then\n        table.insert(groups,\
    \ group)\n        group = ''\n      end\n    end\n  end\n  return groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for char in paren_string:gmatch('.') do\n        if char == '(' then\n   \
    \         paren_count = paren_count + 1\n        elseif char == ')' then\n   \
    \         paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            if paren_group ~= '' then\n                table.insert(paren_groups,\
    \ paren_group)\n            end\n            paren_group = ''\n        else\n\
    \            paren_group = paren_group .. char\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr33pedx.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprr33pedx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_level = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \    elseif char == ')' then\n            paren_level = paren_level - 1\n    \
    \    end\n        if paren_level == 0 and char ~= ' ' then\n            paren_group\
    \ = paren_group .. char\n        elseif paren_level == 1 and char ~= ' ' then\n\
    \            paren_group = paren_group .. char\n            table.insert(paren_groups,\
    \ paren_group)\n            paren_group = ''\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtdg31fs.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(\",\
    \ \")\", \")\", \")(\", \")\", \")(\", \")(\", \")\", \")\", \")\"}\nstack traceback:\n\
    \t/tmp/tmpqtdg31fs.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_count = paren_count + 1\n  \
    \      elseif c == ')' then\n            paren_count = paren_count - 1\n     \
    \   end\n        if paren_count == 0 then\n            if group ~= '' then\n \
    \               table.insert(groups, group)\n                group = ''\n    \
    \        end\n        else\n            group = group .. c\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7qm9hfd.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpd7qm9hfd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = {}\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            table.insert(paren_groups,\
    \ table.concat(paren_group))\n            paren_group = {}\n        else\n   \
    \         table.insert(paren_group, char)\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfdb2w3q.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpyfdb2w3q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for i =\
    \ 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char ==\
    \ '(' then\n      paren_count = paren_count + 1\n    elseif char == ')' then\n\
    \      paren_count = paren_count - 1\n    end\n    if paren_count == 0 then\n\
    \      if current_group ~= '' then\n        table.insert(groups, current_group)\n\
    \        current_group = ''\n      end\n    else\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhodtxsm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbhodtxsm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
