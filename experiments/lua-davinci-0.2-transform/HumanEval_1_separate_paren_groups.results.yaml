language: lua
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            paren_count = paren_count + 1\n        \
    \    current_group = current_group .. c\n        elseif c == ')' then\n      \
    \      paren_count = paren_count - 1\n            current_group = current_group\
    \ .. c\n            if paren_count == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            level = level + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            level = level - 1\n\
    \            group = group .. c\n            if level == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            groups[#groups +\
    \ 1] = current_group\n            current_group = ''\n        elseif char ~= '\
    \ ' then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2owfgcb.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpm2owfgcb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if c\
    \ == ' ' then\n            -- ignore spaces\n        elseif c == '(' then\n  \
    \          depth = depth + 1\n            current_group = current_group .. c\n\
    \        elseif c == ')' then\n            depth = depth - 1\n            current_group\
    \ = current_group .. c\n            if depth == 0 then\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  else\n            error('Unexpected character: ' .. c)\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_count = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            open_count = open_count + 1\n    \
    \    elseif c == ')' then\n            open_count = open_count - 1\n        end\n\
    \        if open_count == 0 then\n            if group ~= '' then\n          \
    \      table.insert(groups, group)\n                group = ''\n            end\n\
    \        else\n            group = group .. c\n        end\n    end\n    return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszaofcb9.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpszaofcb9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif char == ')' then\n         \
    \   paren_count = paren_count - 1\n        end\n        if paren_count == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(groups,\
    \ current_group)\n            end\n            current_group = ''\n        else\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9895uouj.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9895uouj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjgkyokh.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwjgkyokh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n        end\n        if level == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8s5gyzn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpp8s5gyzn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i=1,#paren_string do\n        local char = paren_string:sub(i,i)\n  \
    \      if char == '(' then\n            paren_count = paren_count + 1\n      \
    \  elseif char == ')' then\n            paren_count = paren_count - 1\n      \
    \  end\n        if paren_count == 0 then\n            if current_group ~= '' then\n\
    \                table.insert(paren_groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuu_bo6_0.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpuu_bo6_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local level = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            level = level + 1\n        elseif char == ')'\
    \ then\n            level = level - 1\n        end\n        if level == 0 then\n\
    \            if #current_group > 0 then\n                table.insert(result,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  else\n            current_group = current_group .. char\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85eiuebm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp85eiuebm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local group = ''\n  local open_count = 0\n  for char in paren_string:gmatch('.')\
    \ do\n    if char == '(' then\n      open_count = open_count + 1\n      group\
    \ = group .. char\n    elseif char == ')' then\n      open_count = open_count\
    \ - 1\n      group = group .. char\n      if open_count == 0 then\n        table.insert(groups,\
    \ group)\n        group = ''\n      end\n    end\n  end\n  return groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for char in paren_string:gmatch('.') do\n        if char == '(' then\n   \
    \         paren_count = paren_count + 1\n        elseif char == ')' then\n   \
    \         paren_count = paren_count - 1\n        end\n        if paren_count ==\
    \ 0 then\n            if paren_group ~= '' then\n                table.insert(paren_groups,\
    \ paren_group)\n            end\n            paren_group = ''\n        else\n\
    \            paren_group = paren_group .. char\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr33pedx.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprr33pedx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_level = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \    elseif char == ')' then\n            paren_level = paren_level - 1\n    \
    \    end\n        if paren_level == 0 and char ~= ' ' then\n            paren_group\
    \ = paren_group .. char\n        elseif paren_level == 1 and char ~= ' ' then\n\
    \            paren_group = paren_group .. char\n            table.insert(paren_groups,\
    \ paren_group)\n            paren_group = ''\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtdg31fs.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(\",\
    \ \")\", \")\", \")(\", \")\", \")(\", \")(\", \")\", \")\", \")\"}\nstack traceback:\n\
    \t/tmp/tmpqtdg31fs.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_count = paren_count + 1\n  \
    \      elseif c == ')' then\n            paren_count = paren_count - 1\n     \
    \   end\n        if paren_count == 0 then\n            if group ~= '' then\n \
    \               table.insert(groups, group)\n                group = ''\n    \
    \        end\n        else\n            group = group .. c\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7qm9hfd.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpd7qm9hfd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = {}\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            table.insert(paren_groups,\
    \ table.concat(paren_group))\n            paren_group = {}\n        else\n   \
    \         table.insert(paren_group, char)\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfdb2w3q.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpyfdb2w3q.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for i =\
    \ 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char ==\
    \ '(' then\n      paren_count = paren_count + 1\n    elseif char == ')' then\n\
    \      paren_count = paren_count - 1\n    end\n    if paren_count == 0 then\n\
    \      if current_group ~= '' then\n        table.insert(groups, current_group)\n\
    \        current_group = ''\n      end\n    else\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhodtxsm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbhodtxsm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == ' ' then\n\
    \            -- ignore spaces\n        elseif char == '(' then\n            depth\
    \ = depth + 1\n            group = group .. char\n        elseif char == ')' then\n\
    \            depth = depth - 1\n            group = group .. char\n          \
    \  if depth == 0 then\n                table.insert(groups, group)\n         \
    \       group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnlzuv4s.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqnlzuv4s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            depth = depth + 1\n        elseif char == ')' then\n            depth\
    \ = depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. char\n   \
    \     end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo74uiw6.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppo74uiw6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqxtcezf.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgqxtcezf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_count = paren_count + 1\n        elseif c ==\
    \ ')' then\n            paren_count = paren_count - 1\n        end\n        if\
    \ paren_count == 0 then\n            if current_group ~= '' then\n           \
    \     table.insert(groups, current_group)\n                current_group = ''\n\
    \            end\n        else\n            current_group = current_group .. c\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps20s20jc.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmps20s20jc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for i =\
    \ 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n\
    \      paren_count = paren_count + 1\n    elseif c == ')' then\n      paren_count\
    \ = paren_count - 1\n    end\n    if paren_count == 0 then\n      if current_group\
    \ ~= '' then\n        table.insert(groups, current_group)\n        current_group\
    \ = ''\n      end\n    else\n      current_group = current_group .. c\n    end\n\
    \  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdclhf8wt.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpdclhf8wt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if paren_group ~= '' then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyd69wbb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcyd69wbb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_paren_count = open_paren_count\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == ')' then\n            open_paren_count = open_paren_count - 1\n         \
    \   current_group = current_group .. char\n            if open_paren_count ==\
    \ 0 then\n                table.insert(groups, current_group)\n              \
    \  current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n        elseif c ==\
    \ ')' then\n            open_parens = open_parens - 1\n        end\n        if\
    \ open_parens == 0 then\n            if current_group ~= '' then\n           \
    \     table.insert(groups, current_group)\n                current_group = ''\n\
    \            end\n        else\n            current_group = current_group .. c\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_dbz520.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp6_dbz520.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local current_level = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == '(' then\n            current_level = current_level + 1\n       \
    \     current_group = current_group .. c\n        elseif c == ')' then\n     \
    \       current_level = current_level - 1\n            current_group = current_group\
    \ .. c\n            if current_level == 0 then\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_parens = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_parens = open_parens + 1\n        elseif char\
    \ == ')' then\n            open_parens = open_parens - 1\n        end\n      \
    \  if open_parens == 0 and char ~= ' ' then\n            groups[#groups + 1] =\
    \ group\n            group = ''\n        elseif char ~= ' ' then\n           \
    \ group = group .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9b1pkb6.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpn9b1pkb6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(result, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local level = 0\n    for i =\
    \ 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if c\
    \ == '(' then\n            level = level + 1\n        elseif c == ')' then\n \
    \           level = level - 1\n        end\n        if level == 0 then\n     \
    \       if #current_group > 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = ''\n            end\n        else\n         \
    \   current_group = current_group .. c\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xu0ua0_.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp7xu0ua0_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                paren_groups[#paren_groups + 1] = current_group\n    \
    \            current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ougdzud.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp0ougdzud.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   open_parens = open_parens + 1\n            current_group = current_group ..\
    \ char\n        elseif char == ')' then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            paren_count = paren_count -\
    \ 1\n            current_group = current_group .. c\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            current_group\
    \ = current_group .. char\n            table.insert(paren_groups, current_group)\n\
    \            current_group = ''\n        elseif char ~= ' ' then\n           \
    \ current_group = current_group .. char\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ if current_group ~= '' then\n        table.insert(groups, current_group)\n \
    \   end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5xb36n7.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj5xb36n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            paren_count = paren_count -\
    \ 1\n            current_group = current_group .. c\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_count = open_count + 1\n        elseif\
    \ char == ')' then\n            open_count = open_count - 1\n        end\n   \
    \     if open_count == 0 then\n            if current_group ~= '' then\n     \
    \           table.insert(result, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rni6oty.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp6rni6oty.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if paren_group ~= '' then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyd69wbb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcyd69wbb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if char == ')' then\n\
    \                current_group = current_group .. char\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            else\n     \
    \           current_group = current_group .. char\n            end\n        elseif\
    \ char ~= ' ' then\n            current_group = current_group .. char\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if paren_group ~= '' then\n                table.insert(paren_groups, paren_group)\n\
    \                paren_group = ''\n            end\n        else\n           \
    \ paren_group = paren_group .. c\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmppapwhp.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmppapwhp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == ' ' then\n            -- ignore spaces\n        elseif char == '(' then\n\
    \            paren_count = paren_count + 1\n            group = group .. char\n\
    \        elseif char == ')' then\n            paren_count = paren_count - 1\n\
    \            group = group .. char\n            if paren_count == 0 then\n   \
    \             table.insert(groups, group)\n                group = ''\n      \
    \      end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            paren_count = paren_count + 1\n        elseif c ==\
    \ ')' then\n            paren_count = paren_count - 1\n        end\n        if\
    \ paren_count == 0 then\n            if current_group ~= '' then\n           \
    \     result[#result + 1] = current_group\n                current_group = ''\n\
    \            end\n        else\n            current_group = current_group .. c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvmve0yo.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpzvmve0yo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n        end\n        if level == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8s5gyzn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpp8s5gyzn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif char == ')' then\n         \
    \   paren_count = paren_count - 1\n        end\n        if paren_count == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(groups,\
    \ current_group)\n            end\n            current_group = ''\n        else\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9895uouj.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9895uouj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n            paren_group = paren_group .. c\n\
    \        elseif c == ')' then\n            paren_count = paren_count - 1\n   \
    \         paren_group = paren_group .. c\n            if paren_count == 0 then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            if current_group\
    \ ~= '' then\n                groups[#groups + 1] = current_group\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_92k64i.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpb_92k64i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for i =\
    \ 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char ==\
    \ '(' then\n      paren_count = paren_count + 1\n    elseif char == ')' then\n\
    \      paren_count = paren_count - 1\n    end\n    if paren_count == 0 then\n\
    \      if current_group ~= '' then\n        table.insert(groups, current_group)\n\
    \        current_group = ''\n      end\n    else\n      current_group = current_group\
    \ .. char\n    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhodtxsm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbhodtxsm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            open_paren_count = open_paren_count\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == ')' then\n            open_paren_count = open_paren_count - 1\n         \
    \   current_group = current_group .. char\n            if open_paren_count ==\
    \ 0 then\n                paren_groups[#paren_groups + 1] = current_group\n  \
    \              current_group = ''\n            end\n        end\n    end\n   \
    \ return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local ch = paren_string:sub(i, i)\n       \
    \ if ch == '(' then\n            paren_count = paren_count + 1\n            current_group\
    \ = current_group .. ch\n        elseif ch == ')' then\n            paren_count\
    \ = paren_count - 1\n            current_group = current_group .. ch\n       \
    \     if paren_count == 0 then\n                table.insert(result, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == ' ' then\n            -- ignore spaces\n        elseif char ==\
    \ '(' then\n            paren_count = paren_count + 1\n            current_group\
    \ = current_group .. char\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n            current_group = current_group .. char\n     \
    \       if paren_count == 0 then\n                table.insert(result, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if paren_group ~= '' then\n                table.insert(paren_groups, paren_group)\n\
    \                paren_group = ''\n            end\n        else\n           \
    \ paren_group = paren_group .. c\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmppapwhp.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmppapwhp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local current_level = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == '(' then\n            current_level = current_level + 1\n \
    \       elseif char == ')' then\n            current_level = current_level - 1\n\
    \        end\n        if current_level == 0 then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \  end\n            current_group = ''\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbynm_nmt.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbynm_nmt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(result, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmjrxlq9.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqmjrxlq9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(result, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cgomjqc.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp6cgomjqc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local current_depth = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == ' ' then\n            -- ignore spaces\n        elseif char\
    \ == '(' then\n            current_depth = current_depth + 1\n            current_group\
    \ = current_group .. char\n        elseif char == ')' then\n            current_depth\
    \ = current_depth - 1\n            current_group = current_group .. char\n   \
    \         if current_depth == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_stack = {}\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            table.insert(paren_stack, char)\n  \
    \      elseif char == ')' then\n            if #paren_stack == 0 then\n      \
    \          error('Mismatched parentheses')\n            end\n            table.remove(paren_stack)\n\
    \            if #paren_stack == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  elseif char ~= ' ' then\n            error('Invalid character: ' .. char)\n\
    \        end\n        if #paren_stack > 0 then\n            current_group = current_group\
    \ .. char\n        end\n    end\n    if #paren_stack > 0 then\n        error('Mismatched\
    \ parentheses')\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gihb01h.lua:40:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp3gihb01h.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            table.insert(paren_groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnedywy_o.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnedywy_o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if paren_group ~= '' then\n                table.insert(paren_groups, paren_group)\n\
    \                paren_group = ''\n            end\n        else\n           \
    \ paren_group = paren_group .. c\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmppapwhp.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmppapwhp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n         \
    \   current_group = current_group .. char\n        elseif char == ')' then\n \
    \           open_parens = open_parens - 1\n            current_group = current_group\
    \ .. char\n            if open_parens == 0 then\n                table.insert(result,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            open_parens = open_parens + 1\n        \
    \    current_group = current_group .. c\n        elseif c == ')' then\n      \
    \      open_parens = open_parens - 1\n            current_group = current_group\
    \ .. c\n            if open_parens == 0 then\n                table.insert(paren_groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   paren_groups[#paren_groups + 1] = paren_group\n            paren_group = ''\n\
    \        else\n            paren_group = paren_group .. c\n        end\n    end\n\
    \    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5ytrg4l.lua:30:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmps5ytrg4l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            groups[#groups +\
    \ 1] = current_group\n            current_group = ''\n        elseif char ~= '\
    \ ' then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2owfgcb.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpm2owfgcb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local current_depth = 0\n   \
    \ for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n \
    \       if char == '(' then\n            current_depth = current_depth + 1\n \
    \           current_group = current_group .. char\n        elseif char == ')'\
    \ then\n            current_depth = current_depth - 1\n            current_group\
    \ = current_group .. char\n            if current_depth == 0 then\n          \
    \      table.insert(groups, current_group)\n                current_group = ''\n\
    \            end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_count = paren_count + 1\n  \
    \      elseif c == ')' then\n            paren_count = paren_count - 1\n     \
    \   end\n        if paren_count == 0 then\n            if group ~= '' then\n \
    \               groups[#groups + 1] = group\n                group = ''\n    \
    \        end\n        else\n            group = group .. c\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ogb19r0.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp3ogb19r0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(result, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            current_group =\
    \ current_group .. char\n            groups[#groups + 1] = current_group\n   \
    \         current_group = ''\n        elseif char ~= ' ' then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   if paren_group ~= '' then\n                table.insert(paren_groups, paren_group)\n\
    \                paren_group = ''\n            end\n        else\n           \
    \ paren_group = paren_group .. c\n        end\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmppapwhp.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmppapwhp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == ' ' then\n            -- ignore spaces\n        elseif char\
    \ == '(' then\n            paren_count = paren_count + 1\n            paren_group\
    \ = paren_group .. char\n        elseif char == ')' then\n            paren_count\
    \ = paren_count - 1\n            paren_group = paren_group .. char\n         \
    \   if paren_count == 0 then\n                table.insert(paren_groups, paren_group)\n\
    \                paren_group = ''\n            end\n        end\n    end\n   \
    \ return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            depth = depth + 1\n        elseif char == ')'\
    \ then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if char ~= ' ' then\n                current_group = current_group\
    \ .. char\n            end\n            if current_group ~= '' then\n        \
    \        table.insert(groups, current_group)\n                current_group =\
    \ ''\n            end\n        else\n            if char ~= ' ' then\n       \
    \         current_group = current_group .. char\n            end\n        end\n\
    \    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnlzuv4s.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqnlzuv4s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \        current_group = current_group .. char\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n            current_group = current_group\
    \ .. char\n            if paren_level == 0 then\n                paren_groups[#paren_groups\
    \ + 1] = current_group\n                current_group = ''\n            end\n\
    \        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                paren_groups[#paren_groups + 1] = current_group\n    \
    \            current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ougdzud.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp0ougdzud.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(result, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpft81t6ee.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpft81t6ee.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. c\n        elseif c == ')' then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. c\n        \
    \    if open_parens == 0 then\n                table.insert(result, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \  end\n            current_group = ''\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgvohodi.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprgvohodi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqxtcezf.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgqxtcezf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            groups[#groups +\
    \ 1] = current_group\n            current_group = ''\n        elseif char ~= '\
    \ ' then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2owfgcb.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpm2owfgcb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ if current_group ~= '' then\n        table.insert(groups, current_group)\n \
    \   end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5xb36n7.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj5xb36n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_count = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_count = open_count + 1\n        elseif char ==\
    \ ')' then\n            open_count = open_count - 1\n        end\n        if open_count\
    \ == 0 then\n            if group ~= '' then\n                table.insert(groups,\
    \ group)\n                group = ''\n            end\n        else\n        \
    \    group = group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj4a3xii.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpkj4a3xii.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqxtcezf.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgqxtcezf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local paren_stack = {}\n    local current_group = ''\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            table.insert(paren_stack, '(')\n        elseif\
    \ char == ')' then\n            if #paren_stack == 0 then\n                error('Unbalanced\
    \ parentheses')\n            end\n            table.remove(paren_stack)\n    \
    \        if #paren_stack == 0 then\n                table.insert(result, current_group)\n\
    \                current_group = ''\n            end\n        elseif char ~= '\
    \ ' then\n            error('Invalid character in parentheses string')\n     \
    \   end\n        if #paren_stack > 0 then\n            current_group = current_group\
    \ .. char\n        end\n    end\n    if #paren_stack > 0 then\n        error('Unbalanced\
    \ parentheses')\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpd5wec0.lua:40:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmptpd5wec0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local group = ''\n  local level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      level\
    \ = level + 1\n    elseif c == ')' then\n      level = level - 1\n    end\n  \
    \  if level == 0 then\n      if #group > 0 then\n        table.insert(groups,\
    \ group)\n        group = ''\n      end\n    else\n      group = group .. c\n\
    \    end\n  end\n  return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn0bu8v8.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqn0bu8v8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_paren_count\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            open_paren_count = open_paren_count\
    \ + 1\n            current_group = current_group .. char\n        elseif char\
    \ == ')' then\n            open_paren_count = open_paren_count - 1\n         \
    \   current_group = current_group .. char\n            if open_paren_count ==\
    \ 0 then\n                table.insert(paren_groups, current_group)\n        \
    \        current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n            paren_group = paren_group .. c\n\
    \        elseif c == ')' then\n            paren_count = paren_count - 1\n   \
    \         paren_group = paren_group .. c\n            if paren_count == 0 then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local depth = 0\n    for i =\
    \ 1, #paren_string do\n        local char = paren_string:sub(i, i)\n        if\
    \ char == '(' then\n            depth = depth + 1\n        elseif char == ')'\
    \ then\n            depth = depth - 1\n        end\n        if depth == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            end\n      \
    \  else\n            current_group = current_group .. char\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvem5rwd8.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpvem5rwd8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local paren_count = 0\n    local group_start = 1\n    for i\
    \ = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n       \
    \ if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n            if\
    \ paren_count == 0 then\n                table.insert(groups, paren_string:sub(group_start,\
    \ i))\n                group_start = i + 1\n            end\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yykthwx.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmp8yykthwx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            paren_count = paren_count + 1\n        elseif\
    \ char == ')' then\n            paren_count = paren_count - 1\n        end\n \
    \       if paren_count == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqxtcezf.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgqxtcezf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local paren_count = 0\n  for i =\
    \ 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char ==\
    \ '(' then\n      paren_count = paren_count + 1\n    elseif char == ')' then\n\
    \      paren_count = paren_count - 1\n    end\n    if paren_count == 0 then\n\
    \      groups[#groups + 1] = current_group\n      current_group = ''\n    else\n\
    \      current_group = current_group .. char\n    end\n  end\n  return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g7pxpl6.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp7g7pxpl6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(result, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   open_parens = open_parens + 1\n            current_group = current_group ..\
    \ char\n        elseif char == ')' then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_paren_count = open_paren_count + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_paren_count = open_paren_count\
    \ - 1\n            current_group = current_group .. c\n            if open_paren_count\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_group_depth = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            current_group_depth = current_group_depth\
    \ + 1\n            table.insert(current_group, c)\n        elseif c == ')' then\n\
    \            current_group_depth = current_group_depth - 1\n            table.insert(current_group,\
    \ c)\n            if current_group_depth == 0 then\n                table.insert(result,\
    \ table.concat(current_group))\n                current_group = {}\n         \
    \   end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. c\n        elseif c == ')' then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. c\n        \
    \    if open_parens == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_stack = {}\n    local paren_group = ''\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_stack[#paren_stack + 1] = char\n\
    \            paren_group = paren_group .. char\n        elseif char == ')' then\n\
    \            paren_stack[#paren_stack] = nil\n            paren_group = paren_group\
    \ .. char\n            if #paren_stack == 0 then\n                paren_groups[#paren_groups\
    \ + 1] = paren_group\n                paren_group = ''\n            end\n    \
    \    end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ if current_group ~= '' then\n        table.insert(groups, current_group)\n \
    \   end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5xb36n7.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj5xb36n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if #current_group > 0 then\n   \
    \             table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk1mu7zm.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwk1mu7zm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if char == ')' then\n\
    \                current_group = current_group .. char\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            else\n     \
    \           current_group = current_group .. char\n            end\n        elseif\
    \ char ~= ' ' then\n            current_group = current_group .. char\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n        elseif c == ')' then\n           \
    \ paren_count = paren_count - 1\n        end\n        if paren_count == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(paren_groups,\
    \ current_group)\n            end\n            current_group = ''\n        else\n\
    \            current_group = current_group .. c\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbddwuqq.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppbddwuqq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if paren_group ~= '' then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyd69wbb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcyd69wbb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = {}\n    local paren_count = 0\n\
    \    for char in paren_string:gmatch('.') do\n        if char == '(' then\n  \
    \          paren_count = paren_count + 1\n        elseif char == ')' then\n  \
    \          paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            table.insert(paren_groups, table.concat(current_group))\n\
    \            current_group = {}\n        else\n            table.insert(current_group,\
    \ char)\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3we9wuns.lua:30:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp3we9wuns.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   open_parens = open_parens + 1\n            current_group = current_group ..\
    \ char\n        elseif char == ')' then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            current_group =\
    \ current_group .. char\n            groups[#groups + 1] = current_group\n   \
    \         current_group = ''\n        elseif char ~= ' ' then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ paren_groups = {}\n  local current_group = ''\n  local open_parens = 0\n  for\
    \ i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if char\
    \ == '(' then\n      open_parens = open_parens + 1\n    elseif char == ')' then\n\
    \      open_parens = open_parens - 1\n    end\n    if char ~= ' ' then\n     \
    \ current_group = current_group .. char\n    end\n    if open_parens == 0 then\n\
    \      table.insert(paren_groups, current_group)\n      current_group = ''\n \
    \   end\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbaxrjt6.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \"\", \"((()))\", \"\", \"()\", \"\", \"((())()())\"}\nstack traceback:\n\t\
    /tmp/tmptbaxrjt6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            table.insert(paren_groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnedywy_o.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnedywy_o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_parens = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_parens = open_parens + 1\n        elseif char\
    \ == ')' then\n            open_parens = open_parens - 1\n        end\n      \
    \  if char ~= ' ' then\n            group = group .. char\n        end\n     \
    \   if open_parens == 0 then\n            table.insert(groups, group)\n      \
    \      group = ''\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp512a6vng.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \"\", \"((()))\", \"\", \"()\", \"\", \"((())()())\"}\nstack traceback:\n\t\
    /tmp/tmp512a6vng.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if paren_group ~= '' then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyd69wbb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcyd69wbb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            groups[#groups +\
    \ 1] = current_group\n            current_group = ''\n        elseif char ~= '\
    \ ' then\n            current_group = current_group .. char\n        end\n   \
    \ end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2owfgcb.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpm2owfgcb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \  end\n            current_group = ''\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgvohodi.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprgvohodi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if #paren_group > 0 then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6htrv3aq.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp6htrv3aq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_level = 0\n \
    \   for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n  \
    \      if c == '(' then\n            paren_level = paren_level + 1\n        elseif\
    \ c == ')' then\n            paren_level = paren_level - 1\n        end\n    \
    \    if paren_level == 0 then\n            if paren_group ~= '' then\n       \
    \         table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ c\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t6_21za.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_t6_21za.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   paren_count = paren_count + 1\n        elseif c == ')' then\n            paren_count\
    \ = paren_count - 1\n        end\n        if paren_count == 0 then\n         \
    \   paren_groups[#paren_groups + 1] = paren_group\n            paren_group = ''\n\
    \        else\n            paren_group = paren_group .. c\n        end\n    end\n\
    \    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5ytrg4l.lua:30:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmps5ytrg4l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for char in paren_string:gmatch('%S') do\n        if char == '(' then\n \
    \           open_parens = open_parens + 1\n        elseif char == ')' then\n \
    \           open_parens = open_parens - 1\n        end\n        current_group\
    \ = current_group .. char\n        if open_parens == 0 then\n            table.insert(paren_groups,\
    \ current_group)\n            current_group = ''\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. c\n        elseif c == ')' then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. c\n        \
    \    if open_parens == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if char == ')' then\n\
    \                current_group = current_group .. char\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            else\n     \
    \           current_group = current_group .. char\n            end\n        elseif\
    \ char ~= ' ' then\n            current_group = current_group .. char\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            paren_count = paren_count -\
    \ 1\n            current_group = current_group .. c\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjgkyokh.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwjgkyokh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnlzuv4s.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqnlzuv4s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local start = 1\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         level = level + 1\n        elseif c == ')' then\n            level =\
    \ level - 1\n            if level == 0 then\n                table.insert(groups,\
    \ paren_string:sub(start, i))\n                start = i + 1\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbik0jst9.lua:29:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\"\
    , \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmpbik0jst9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            current_group =\
    \ current_group .. char\n            groups[#groups + 1] = current_group\n   \
    \         current_group = ''\n        elseif char ~= ' ' then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_depth = 0\n   \
    \ for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n    \
    \    if c == '(' then\n            current_depth = current_depth + 1\n       \
    \ elseif c == ')' then\n            current_depth = current_depth - 1\n      \
    \  end\n        if current_depth == 0 then\n            if #current_group > 0\
    \ then\n                table.insert(result, table.concat(current_group))\n  \
    \              current_group = {}\n            end\n        else\n           \
    \ table.insert(current_group, c)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zmfwaab.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp7zmfwaab.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local paren_group = ''\n    local paren_count = 0\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if paren_group ~= '' then\n\
    \                table.insert(paren_groups, paren_group)\n                paren_group\
    \ = ''\n            end\n        else\n            paren_group = paren_group ..\
    \ char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyd69wbb.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcyd69wbb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ char in paren_string:gmatch('.') do\n        if char == '(' then\n         \
    \   open_parens = open_parens + 1\n            current_group = current_group ..\
    \ char\n        elseif char == ')' then\n            open_parens = open_parens\
    \ - 1\n            current_group = current_group .. char\n            if open_parens\
    \ == 0 then\n                table.insert(groups, current_group)\n           \
    \     current_group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n        elseif c ==\
    \ ')' then\n            open_parens = open_parens - 1\n        end\n        if\
    \ open_parens == 0 then\n            if current_group ~= '' then\n           \
    \     table.insert(groups, current_group)\n                current_group = ''\n\
    \            end\n        else\n            current_group = current_group .. c\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_dbz520.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp6_dbz520.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrqnsdsz.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbrqnsdsz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            current_group =\
    \ current_group .. char\n            table.insert(groups, current_group)\n   \
    \         current_group = ''\n        elseif char ~= ' ' then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            depth = depth + 1\n        elseif char == ')' then\n            depth\
    \ = depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. char\n   \
    \     end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo74uiw6.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppo74uiw6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            paren_count = paren_count -\
    \ 1\n            current_group = current_group .. c\n            if paren_count\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ groups[#groups + 1] = current_group\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ if current_group ~= '' then\n        table.insert(groups, current_group)\n \
    \   end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5xb36n7.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj5xb36n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_count = open_count + 1\n      \
    \  elseif char == ')' then\n            open_count = open_count - 1\n        end\n\
    \        if open_count == 0 then\n            table.insert(paren_groups, current_group)\n\
    \            current_group = ''\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppapwnjy_.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppapwnjy_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local open_parens = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            open_parens = open_parens + 1\n        elseif char\
    \ == ')' then\n            open_parens = open_parens - 1\n        end\n      \
    \  if open_parens == 0 and char ~= ' ' then\n            group = group .. char\n\
    \            table.insert(groups, group)\n            group = ''\n        elseif\
    \ char ~= ' ' then\n            group = group .. char\n        end\n    end\n\
    \    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local start_index = 1\n    local end_index = 1\n    local open_count\
    \ = 0\n    local close_count = 0\n    local last_char = ''\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            open_count = open_count + 1\n            if open_count == 1 then\n\
    \                start_index = i\n            end\n        elseif char == ')'\
    \ then\n            close_count = close_count + 1\n            if open_count ==\
    \ close_count then\n                end_index = i\n                table.insert(groups,\
    \ paren_string:sub(start_index, end_index))\n                open_count = 0\n\
    \                close_count = 0\n            end\n        end\n        last_char\
    \ = char\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw09t7fuq.lua:41:\
    \ expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"((\
    \ )( ))\"}\nstack traceback:\n\t/tmp/tmpw09t7fuq.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnlzuv4s.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqnlzuv4s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_count = paren_count + 1\n        elseif c == ')' then\n           \
    \ paren_count = paren_count - 1\n        end\n        if paren_count == 0 then\n\
    \            if current_group ~= '' then\n                table.insert(paren_groups,\
    \ current_group)\n            end\n            current_group = ''\n        else\n\
    \            current_group = current_group .. c\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbddwuqq.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppbddwuqq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ paren_groups = {}\n  local current_group = ''\n  local open_parens = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      open_parens = open_parens + 1\n      current_group = current_group\
    \ .. c\n    elseif c == ')' then\n      open_parens = open_parens - 1\n      current_group\
    \ = current_group .. c\n      if open_parens == 0 then\n        table.insert(paren_groups,\
    \ current_group)\n        current_group = ''\n      end\n    end\n  end\n  return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local group = ''\n  local level = 0\n  for c in paren_string:gmatch('.')\
    \ do\n    if c == '(' then\n      level = level + 1\n      group = group .. c\n\
    \    elseif c == ')' then\n      level = level - 1\n      group = group .. c\n\
    \    elseif c == ' ' then\n      if level == 0 then\n        table.insert(groups,\
    \ group)\n        group = ''\n      end\n    end\n  end\n  if group ~= '' then\n\
    \    table.insert(groups, group)\n  end\n  return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            if current_group\
    \ ~= '' then\n                table.insert(result, current_group)\n          \
    \  end\n            current_group = ''\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33gf_syk.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp33gf_syk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and current_group ~= '' then\n            table.insert(groups,\
    \ current_group)\n            current_group = ''\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptufa4vm4.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmptufa4vm4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if group ~=\
    \ '' then\n                table.insert(groups, group)\n                group\
    \ = ''\n            end\n        else\n            group = group .. c\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2swo4sn.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpz2swo4sn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \      current_group = ''\n            end\n        elseif char ~= ' ' then\n\
    \            current_group = current_group .. char\n        end\n    end\n   \
    \ if current_group ~= '' then\n        table.insert(groups, current_group)\n \
    \   end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5xb36n7.lua:36:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj5xb36n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n  local\
    \ groups = {}\n  local current_group = ''\n  local current_level = 0\n  for char\
    \ in paren_string:gmatch('.') do\n    if char == '(' then\n      current_level\
    \ = current_level + 1\n      current_group = current_group .. char\n    elseif\
    \ char == ')' then\n      current_level = current_level - 1\n      current_group\
    \ = current_group .. char\n      if current_level == 0 then\n        table.insert(groups,\
    \ current_group)\n        current_group = ''\n      end\n    end\n  end\n  return\
    \ groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 then\n            if current_group ~= '' then\n  \
    \              table.insert(groups, current_group)\n                current_group\
    \ = ''\n            end\n        else\n            current_group = current_group\
    \ .. char\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrqnsdsz.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbrqnsdsz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local cur_group = ''\n    local depth = 0\n    for i=1, #paren_string\
    \ do\n        local c = paren_string:sub(i,i)\n        if c == '(' then\n    \
    \        depth = depth + 1\n        elseif c == ')' then\n            depth =\
    \ depth - 1\n        end\n        if depth == 0 then\n            if cur_group\
    \ ~= '' then\n                table.insert(groups, cur_group)\n              \
    \  cur_group = ''\n            end\n        else\n            cur_group = cur_group\
    \ .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2oe4be38.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp2oe4be38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('%S')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n        elseif\
    \ c == ')' then\n            depth = depth - 1\n        end\n        group = group\
    \ .. c\n        if depth == 0 then\n            table.insert(groups, group)\n\
    \            group = ''\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            open_parens = open_parens + 1\n    \
    \    elseif char == ')' then\n            open_parens = open_parens - 1\n    \
    \    end\n        if open_parens == 0 and char ~= ' ' then\n            paren_groups[#paren_groups\
    \ + 1] = current_group\n            current_group = ''\n        elseif char ~=\
    \ ' ' then\n            current_group = current_group .. char\n        end\n \
    \   end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ai7yzc.lua:31:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmph2ai7yzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            open_parens = open_parens + 1\n            current_group\
    \ = current_group .. c\n        elseif c == ')' then\n            open_parens\
    \ = open_parens - 1\n            current_group = current_group .. c\n        \
    \    if open_parens == 0 then\n                table.insert(groups, current_group)\n\
    \                current_group = ''\n            end\n        end\n    end\n \
    \   return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            current_group =\
    \ current_group .. char\n            table.insert(groups, current_group)\n   \
    \         current_group = ''\n        elseif char ~= ' ' then\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return groups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            open_parens = open_parens + 1\n        elseif\
    \ char == ')' then\n            open_parens = open_parens - 1\n        end\n \
    \       if open_parens == 0 and char ~= ' ' then\n            if char == ')' then\n\
    \                current_group = current_group .. char\n                table.insert(groups,\
    \ current_group)\n                current_group = ''\n            else\n     \
    \           current_group = current_group .. char\n            end\n        elseif\
    \ char ~= ' ' then\n            current_group = current_group .. char\n      \
    \  end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local open_parens = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            open_parens\
    \ = open_parens + 1\n            current_group = current_group .. c\n        elseif\
    \ c == ')' then\n            open_parens = open_parens - 1\n            current_group\
    \ = current_group .. c\n            if open_parens == 0 then\n               \
    \ table.insert(groups, current_group)\n                current_group = ''\n  \
    \          end\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local open_parens = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    open_parens = open_parens + 1\n            current_group = current_group\
    \ .. c\n        elseif c == ')' then\n            open_parens = open_parens -\
    \ 1\n            current_group = current_group .. c\n            if open_parens\
    \ == 0 then\n                table.insert(paren_groups, current_group)\n     \
    \           current_group = ''\n            end\n        end\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local paren_count = 0\n    for i = 1,\
    \ #paren_string do\n        local c = paren_string:sub(i, i)\n        if c ==\
    \ '(' then\n            paren_count = paren_count + 1\n        elseif c == ')'\
    \ then\n            paren_count = paren_count - 1\n        end\n        if paren_count\
    \ == 0 then\n            if group ~= '' then\n                table.insert(groups,\
    \ group)\n                group = ''\n            end\n        else\n        \
    \    group = group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnk6cuw1.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbnk6cuw1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ paren_groups = {}\n    local current_group = ''\n    local paren_count = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_count = paren_count + 1\n    \
    \    elseif char == ')' then\n            paren_count = paren_count - 1\n    \
    \    end\n        if paren_count == 0 then\n            if current_group ~= ''\
    \ then\n                table.insert(paren_groups, current_group)\n          \
    \      current_group = ''\n            end\n        else\n            current_group\
    \ = current_group .. char\n        end\n    end\n    return paren_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1f1i8b.lua:33:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjk1f1i8b.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == ' ' then\n\
    \            -- ignore spaces\n        elseif char == '(' then\n            level\
    \ = level + 1\n            group = group .. char\n        elseif char == ')' then\n\
    \            level = level - 1\n            group = group .. char\n          \
    \  if level == 0 then\n                groups[#groups + 1] = group\n         \
    \       group = ''\n            end\n        end\n    end\n    return groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',\
    \ '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),\
    \ {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ result = {}\n    local current_group = {}\n    local current_group_depth = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            current_group_depth = current_group_depth\
    \ + 1\n            table.insert(current_group, char)\n        elseif char == ')'\
    \ then\n            current_group_depth = current_group_depth - 1\n          \
    \  table.insert(current_group, char)\n            if current_group_depth == 0\
    \ then\n                table.insert(result, table.concat(current_group))\n  \
    \              current_group = {}\n            end\n        end\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795134
- exit_code: 0
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local group = ''\n    local depth = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            depth = depth + 1\n            group\
    \ = group .. c\n        elseif c == ')' then\n            depth = depth - 1\n\
    \            group = group .. c\n            if depth == 0 then\n            \
    \    table.insert(groups, group)\n                group = ''\n            end\n\
    \        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n-- separate those group into separate strings\
    \ and return the list of those.\n-- Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n-- Ignore any spaces in\
    \ the input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()',\
    \ '(())', '(()())'}\nlocal function separate_paren_groups(paren_string)\n    local\
    \ groups = {}\n    local current_group = ''\n    local paren_count = 0\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            paren_count\
    \ = paren_count + 1\n        elseif c == ')' then\n            paren_count = paren_count\
    \ - 1\n        end\n        if paren_count == 0 then\n            if current_group\
    \ ~= '' then\n                table.insert(groups, current_group)\n          \
    \  end\n            current_group = ''\n        else\n            current_group\
    \ = current_group .. c\n        end\n    end\n    return groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()\
    \ (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',\
    \ '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgvohodi.lua:32:\
    \ expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\"\
    , \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprgvohodi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795134
