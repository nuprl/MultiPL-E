language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return #t >\
    \ 0 and table.concat(t) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmugtxop.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfmugtxop.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                t[#t + 1] = c:upper()\n\
    \            else\n                t[#t + 1] = c:lower()\n            end\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return table.concat(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy0d1g72.lua:34:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpoy0d1g72.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return #t >\
    \ 0 and table.concat(t) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmugtxop.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfmugtxop.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n            t[i]\
    \ = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n        else\n    \
    \        t[i] = s[i]\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcrs3ym0.lua:16:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpkcrs3ym0.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpkcrs3ym0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n            t[i]\
    \ = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n        else\n    \
    \        t[i] = s[i]\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcrs3ym0.lua:16:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpkcrs3ym0.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpkcrs3ym0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        t[#t + 1] = c\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52dhdr2x.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp52dhdr2x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return #t >\
    \ 0 and table.concat(t) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmugtxop.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfmugtxop.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            t[#t + 1] = c:lower() == c and c:upper() or c:lower()\n  \
    \      else\n            t[#t + 1] = c\n        end\n    end\n    return #t >\
    \ 0 and table.concat(t) or s:reverse()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmugtxop.lua:30:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfmugtxop.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        t[#t + 1] = c\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52dhdr2x.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp52dhdr2x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        res[#res + 1] = c\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe98lt3oz.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpe98lt3oz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                res = res .. c:upper()\n\
    \            else\n                res = res .. c:lower()\n            end\n \
    \       else\n            res = res .. c\n        end\n    end\n    return #res\
    \ > 0 and res or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx0gltbo.lua:34:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpfx0gltbo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local res\
    \ = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c:match('%a') then\n\
    \      res = res .. c:lower() == c and c:upper() or c:lower()\n    else\n    \
    \  res = res .. c\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpfpkrgb.lua:29:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpbpfpkrgb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%u') then\n                res = res .. c:lower()\n\
    \            else\n                res = res .. c:upper()\n            end\n \
    \       else\n            res = res .. c\n        end\n    end\n    return #res\
    \ == 0 and s:reverse() or res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua6y13sc.lua:34:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpua6y13sc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local letters\
    \ = {}\n    local other = {}\n    for i = 1, #s do\n        if s[i]:match('%a')\
    \ then\n            table.insert(letters, s[i])\n        else\n            table.insert(other,\
    \ s[i])\n        end\n    end\n    if #letters == 0 then\n        return s:reverse()\n\
    \    end\n    local result = {}\n    for i = 1, #letters do\n        if letters[i]:match('%l')\
    \ then\n            table.insert(result, letters[i]:upper())\n        else\n \
    \           table.insert(result, letters[i]:lower())\n        end\n    end\n \
    \   for i = 1, #other do\n        table.insert(result, other[i])\n    end\n  \
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg2vqnve.lua:17:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmptg2vqnve.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmptg2vqnve.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        t[#t + 1] = c\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52dhdr2x.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp52dhdr2x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                res[#res + 1] = c:upper()\n\
    \            else\n                res[#res + 1] = c:lower()\n            end\n\
    \        else\n            res[#res + 1] = c\n        end\n    end\n    if #res\
    \ == 0 then\n        return s:reverse()\n    end\n    return table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91rpazja.lua:37:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp91rpazja.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        t[#t + 1] = c\n    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52dhdr2x.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp52dhdr2x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i = 1, #s do\n        if s[i]:match('%a') then\n            t[i]\
    \ = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()\n        else\n    \
    \        t[i] = s[i]\n        end\n    end\n    return #t > 0 and table.concat(t)\
    \ or s:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcrs3ym0.lua:16:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpkcrs3ym0.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpkcrs3ym0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        res[#res + 1] = c\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe98lt3oz.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpe98lt3oz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local res\
    \ = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n        end\n\
    \        res[#res + 1] = c\n    end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe98lt3oz.lua:33:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpe98lt3oz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750217
