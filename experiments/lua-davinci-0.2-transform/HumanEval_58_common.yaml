name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
  \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
  \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            t[#t + 1] = v\n        end\n    end\n    return sort(t)\n\
    end", "    local result = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local t = {}\n  for _, v in ipairs(l1) do\n    if\
    \ contains(l2, v) then\n      t[#t + 1] = v\n    end\n  end\n  return sort(t)\n\
    end", "    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            t[#t + 1] = v\n        end\n    end\n    return sort(t)\n\
    end", "    local res = {}\n    for _, v in ipairs(l1) do\n        if contains(l2,\
    \ v) then\n            table.insert(res, v)\n        end\n    end\n    return\
    \ sort(unique(res))\nend", "    local t = {}\n    for _, v in ipairs(l1) do\n\
    \        if contains(l2, v) then\n            t[#t + 1] = v\n        end\n   \
    \ end\n    return sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            t[#t + 1] = v\n        end\n\
    \    end\n    return sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            t[#t + 1] = v\n        end\n\
    \    end\n    return sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            t[#t + 1] = v\n        end\n\
    \    end\n    sort(t)\n    return t\nend", "    local t = {}\n    for _, v in\
    \ ipairs(l1) do\n        if contains(l2, v) then\n            table.insert(t,\
    \ v)\n        end\n    end\n    return unique(t)\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l1) do\n    if contains(l2, v) then\n      t[#t + 1] = v\n  \
    \  end\n  end\n  return sort(t)\nend", "    local t = {}\n    for _, v in ipairs(l1)\
    \ do\n        if contains(l2, v) then\n            table.insert(t, v)\n      \
    \  end\n    end\n    return sort(t)\nend", "  local t = {}\n  for _, v in ipairs(l1)\
    \ do\n    if contains(l2, v) then\n      t[#t + 1] = v\n    end\n  end\n  return\
    \ sort(t)\nend", "  local r = {}\n  for _, v in ipairs(l1) do\n    if index(l2,\
    \ v) then\n      r[#r + 1] = v\n    end\n  end\n  return sort(unique(r))\nend",
  "    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n\
    \            t[#t + 1] = v\n        end\n    end\n    return sort(t)\nend", " \
    \ local t = {}\n  for _, v in ipairs(l1) do\n    if contains(l2, v) then\n   \
    \   t[#t + 1] = v\n    end\n  end\n  return sort(t)\nend", "    local set = {}\n\
    \    for _, v in ipairs(l1) do\n        set[v] = true\n    end\n    local ret\
    \ = {}\n    for _, v in ipairs(l2) do\n        if set[v] then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    table.sort(ret)\n    return ret\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n   \
    \         table.insert(t, v)\n        end\n    end\n    return sort(t)\nend",
  "    local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n\
    \            t[#t + 1] = v\n        end\n    end\n    return sort(t)\nend", " \
    \   local t = {}\n    for _, v in ipairs(l1) do\n        if contains(l2, v) then\n\
    \            t[#t + 1] = v\n        end\n    end\n    return sort(t)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
