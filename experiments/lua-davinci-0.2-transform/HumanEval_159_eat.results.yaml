language: lua
name: HumanEval_159_eat
results:
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzamkna47.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzamkna47.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    if total <= remaining then\n        return {total, remaining - total}\n \
    \   else\n        return {remaining + number, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm1r33sh.lua:39:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmprm1r33sh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc1854j7.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpyc1854j7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj5mzlom.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzj5mzlom.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5btkwl8.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpz5btkwl8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if number + need > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {number + need, remaining - (number\
    \ + need)}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd2nf_ke.lua:38:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpdd2nf_ke.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsmixv96.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpbsmixv96.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    if total > remaining then\n        return {remaining, 0}\n    else\n    \
    \    return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix8dfd9k.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpix8dfd9k.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    if total > remaining then\n        return {remaining, 0}\n    else\n    \
    \    return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix8dfd9k.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpix8dfd9k.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local eaten = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn621o32b.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpn621o32b.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    return {total, 0}\n \
    \ else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamt9lwtr.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpamt9lwtr.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    if number\
    \ + need <= remaining then\n        return {number + need, remaining - (number\
    \ + need)}\n    else\n        return {remaining + number, 0}\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n \
    \   lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sirj4cz.lua:39:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp1sirj4cz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    if number + need <= remaining\
    \ then\n        return {number + need, remaining - (number + need)}\n    else\n\
    \        return {remaining + number, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf__unu6.lua:38:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpxf__unu6.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  if number\
    \ + need > remaining then\n    return {remaining, 0}\n  else\n    return {number\
    \ + need, remaining - (number + need)}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4gu9pup.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmps4gu9pup.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzamkna47.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzamkna47.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + need, remaining\
    \ - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m_2m3oc.lua:37:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp4m_2m3oc.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj5mzlom.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzj5mzlom.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsmixv96.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpbsmixv96.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if number + need <= remaining then\n\
    \    return {number + need, remaining - (number + need)}\n  else\n    return {remaining\
    \ + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyay8zyg.lua:38:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpuyay8zyg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzamkna47.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzamkna47.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local eaten = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn621o32b.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpn621o32b.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj5mzlom.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzj5mzlom.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj5mzlom.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpzj5mzlom.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total <= remaining then\n    return {total, remaining\
    \ - total}\n  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjg0klhd.lua:40:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpnjg0klhd.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzamkna47.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzamkna47.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left >= 0 then\n    return {total, left}\n\
    \  else\n    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwke40j83.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwke40j83.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + need, remaining\
    \ - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m_2m3oc.lua:37:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp4m_2m3oc.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total <= remaining then\n    return {total, remaining - total}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8fxs639.lua:39:\
    \ expected: {11, 4}\nactual: {11, 0}\nstack traceback:\n\t/tmp/tmpj8fxs639.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxv7d83g.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpmxv7d83g.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrukjhjv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpwrukjhjv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw968offg.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpw968offg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzamkna47.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzamkna47.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc1854j7.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpyc1854j7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659804132
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckv2v_f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ckv2v_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
