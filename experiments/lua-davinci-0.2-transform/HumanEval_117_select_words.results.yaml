language: lua
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'z'}\n    for word in s:gmatch('%w+') do\n        local count = 0\n   \
    \     for letter in word:gmatch('%a') do\n            for _, c in ipairs(consonants)\
    \ do\n                if letter == c then\n                    count = count +\
    \ 1\n                end\n            end\n        end\n        if count == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lae424z.lua:40:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp4lae424z.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for letter in word:gmatch(\"%a\")\
    \ do\n            if not is_vowel(letter) then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     table.insert(words, word)\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v97zcz4.lua:22:\
    \ attempt to call global 'is_vowel' (a nil value)\nstack traceback:\n\t/tmp/tmp1v97zcz4.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp1v97zcz4.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for c in word:gmatch(\"[^aeiouAEIOU]\"\
    ) do\n            consonants = consonants + 1\n        end\n        if consonants\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for letter in word:gmatch(\"%a\")\
    \ do\n            if letter:match(\"[^aeiou]\") then\n                consonants\
    \ = consonants + 1\n            end\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydutrxf1.lua:40:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpydutrxf1.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for letter in word:gmatch(\"%a\")\
    \ do\n            if not is_vowel(letter) then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     table.insert(words, word)\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v97zcz4.lua:22:\
    \ attempt to call global 'is_vowel' (a nil value)\nstack traceback:\n\t/tmp/tmp1v97zcz4.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp1v97zcz4.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 0
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local count = 0\n        for c in word:gmatch(\"[^aeiouAEIOU]\"\
    ) do\n            count = count + 1\n        end\n        if count == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local n_consonants = 0\n        for letter in word:gmatch(\"%a\"\
    ) do\n            if not is_vowel(letter) then\n                n_consonants =\
    \ n_consonants + 1\n            end\n        end\n        if n_consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe81nhwwa.lua:22:\
    \ attempt to call global 'is_vowel' (a nil value)\nstack traceback:\n\t/tmp/tmpe81nhwwa.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpe81nhwwa.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n\
    \    if count_consonants(word) == n then\n      table.insert(words, word)\n  \
    \  end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3sk6l77z.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp3sk6l77z.lua:20: in function 'candidate'\n\t/tmp/tmp3sk6l77z.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = \"\"\n    local consonants\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \"\
    \ \" then\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = \"\"\n            consonants = 0\n\
    \        else\n            word = word .. c\n            if not is_vowel(c) then\n\
    \                consonants = consonants + 1\n            end\n        end\n \
    \   end\n    if consonants == n then\n        table.insert(words, word)\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5yalr_a.lua:31:\
    \ attempt to call global 'is_vowel' (a nil value)\nstack traceback:\n\t/tmp/tmpd5yalr_a.lua:31:\
    \ in function 'candidate'\n\t/tmp/tmpd5yalr_a.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for char in word:gmatch(\"%a\") do\n\
    \            if not char:match(\"[aeiou]\") then\n                consonants =\
    \ consonants + 1\n            end\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zznbz6k.lua:40:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6zznbz6k.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in s:gmatch(\"%w+\") do\n  \
    \  if #w == n then\n      table.insert(words, w)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wp56tr7.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmp0wp56tr7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        local consonants = 0\n        for char in word:gmatch(\"%a\") do\n\
    \            if char:match(\"[^aeiou]\") then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     table.insert(words, word)\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5fhvwqg.lua:40:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5fhvwqg.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = ''\n    local consonants\
    \ = 0\n    local vowels = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            if consonants == n then\n        \
    \        words[#words + 1] = word\n            end\n            word = ''\n  \
    \          consonants = 0\n            vowels = 0\n        else\n            word\
    \ = word .. c\n            if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n                vowels = vowels + 1\n            else\n     \
    \           consonants = consonants + 1\n            end\n        end\n    end\n\
    \    if consonants == n then\n        words[#words + 1] = word\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w6lf06a.lua:53:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8w6lf06a.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750527
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbw3wclh.lua:20:\
    \ attempt to call global 'count_consonants' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpsbw3wclh.lua:20: in function 'candidate'\n\t/tmp/tmpsbw3wclh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750527
