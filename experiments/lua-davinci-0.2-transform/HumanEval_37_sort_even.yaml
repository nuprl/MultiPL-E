name: HumanEval_37_sort_even
language: lua
prompt: "-- This function takes a list l and returns a list l' such that\n-- l' is\
  \ identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
  \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal function\
  \ sort_even(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n\
  \    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
  \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
  \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l)\
    \ do\n        if i % 2 == 0 then\n            table.insert(l_even, v)\n      \
    \  else\n            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local ret = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    table.sort(ret)\n\
    \    local i = 1\n    for j, v in ipairs(l) do\n        if j % 2 == 0 then\n \
    \           l[j] = ret[i]\n            i = i + 1\n        end\n    end\n    return\
    \ l\nend", "    local l_prime = {}\n    for i = 1, #l do\n        if i % 2 ==\
    \ 0 then\n            local sub_list = {}\n            for j = 1, #l do\n    \
    \            if j % 2 == 0 then\n                    table.insert(sub_list, l[j])\n\
    \                end\n            end\n            table.sort(sub_list)\n    \
    \        for j = 1, #sub_list do\n                table.insert(l_prime, sub_list[j])\n\
    \            end\n        else\n            table.insert(l_prime, l[i])\n    \
    \    end\n    end\n    return l_prime\nend", "\tlocal l_even = {}\n\tlocal l_odd\
    \ = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even,\
    \ v)\n\t\telse\n\t\t\ttable.insert(l_odd, v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\
    \tlocal l_sorted = {}\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,\
    \ v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend", " \
    \   local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n  \
    \      if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_prime = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_prime,\
    \ v)\n        table.insert(l_prime, l_even[i])\n    end\n    return l_prime\n\
    end", "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l)\
    \ do\n        if i % 2 == 0 then\n            table.insert(l_even, v)\n      \
    \  else\n            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_prime = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_prime,\
    \ v)\n        table.insert(l_prime, l_even[i])\n    end\n    return l_prime\n\
    end", "\tlocal even_indicies = {}\n\tlocal odd_indicies = {}\n\tfor i, v in ipairs(l)\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(even_indicies, v)\n\t\telse\n\
    \t\t\ttable.insert(odd_indicies, v)\n\t\tend\n\tend\n\ttable.sort(even_indicies)\n\
    \tlocal l_prime = {}\n\tfor i, v in ipairs(odd_indicies) do\n\t\ttable.insert(l_prime,\
    \ v)\n\t\ttable.insert(l_prime, even_indicies[i])\n\tend\n\treturn l_prime\nend",
  "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_sorted = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_sorted,\
    \ v)\n        table.insert(l_sorted, l_even[i])\n    end\n    return l_sorted\n\
    end", "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l)\
    \ do\n        if i % 2 == 0 then\n            table.insert(l_even, v)\n      \
    \  else\n            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local l2 = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n \
    \           table.insert(l2, v)\n        end\n    end\n    table.sort(l2)\n  \
    \  local l3 = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n \
    \           table.insert(l3, l2[1])\n            table.remove(l2, 1)\n       \
    \ else\n            table.insert(l3, v)\n        end\n    end\n    return l3\n\
    end", "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l)\
    \ do\n        if i % 2 == 0 then\n            table.insert(l_even, v)\n      \
    \  else\n            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "    local l_even = {}\n    local l_odd = {}\n    for i, v in ipairs(l) do\n   \
    \     if i % 2 == 0 then\n            table.insert(l_even, v)\n        else\n\
    \            table.insert(l_odd, v)\n        end\n    end\n    table.sort(l_even)\n\
    \    local l_new = {}\n    for i, v in ipairs(l_odd) do\n        table.insert(l_new,\
    \ v)\n        table.insert(l_new, l_even[i])\n    end\n    return l_new\nend",
  "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %\
    \ 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_sorted = {}\n\tfor i, v\
    \ in ipairs(l_odd) do\n\t\ttable.insert(l_sorted, v)\n\t\ttable.insert(l_sorted,\
    \ l_even[i])\n\tend\n\treturn l_sorted\nend", "    local l_even = {}\n    local\
    \ l_odd = {}\n    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n     \
    \       table.insert(l_even, v)\n        else\n            table.insert(l_odd,\
    \ v)\n        end\n    end\n    table.sort(l_even)\n    local l_new = {}\n   \
    \ for i, v in ipairs(l_odd) do\n        table.insert(l_new, v)\n        table.insert(l_new,\
    \ l_even[i])\n    end\n    return l_new\nend", "  local l_even = {}\n  local l_odd\
    \ = {}\n  for i, v in ipairs(l) do\n    if i % 2 == 0 then\n      table.insert(l_even,\
    \ v)\n    else\n      table.insert(l_odd, v)\n    end\n  end\n  table.sort(l_even)\n\
    \  local l_new = {}\n  for i, v in ipairs(l_odd) do\n    table.insert(l_new, v)\n\
    \    table.insert(l_new, l_even[i])\n  end\n  return l_new\nend", "  local res\
    \ = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      local sub = {}\n   \
    \   for j = i, #l, 2 do\n        table.insert(sub, l[j])\n      end\n      table.sort(sub)\n\
    \      for j = i, #l, 2 do\n        res[j] = sub[(j - i) / 2 + 1]\n      end\n\
    \    else\n      res[i] = l[i]\n    end\n  end\n  return res\nend", "  local l_even\
    \ = {}\n  local l_odd = {}\n  for i, v in ipairs(l) do\n    if i % 2 == 0 then\n\
    \      table.insert(l_even, v)\n    else\n      table.insert(l_odd, v)\n    end\n\
    \  end\n  table.sort(l_even)\n  local l_sorted = {}\n  for i, v in ipairs(l_odd)\
    \ do\n    table.insert(l_sorted, v)\n    table.insert(l_sorted, l_even[i])\n \
    \ end\n  return l_sorted\nend", "    local l_even = {}\n    local l_odd = {}\n\
    \    for i, v in ipairs(l) do\n        if i % 2 == 0 then\n            table.insert(l_even,\
    \ v)\n        else\n            table.insert(l_odd, v)\n        end\n    end\n\
    \    table.sort(l_even)\n    local l_new = {}\n    for i, v in ipairs(l_odd) do\n\
    \        table.insert(l_new, v)\n        table.insert(l_new, l_even[i])\n    end\n\
    \    return l_new\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
