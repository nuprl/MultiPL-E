name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  -- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local paren_levels = {}\n  for group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch('%S')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            paren_level = paren_level + 1\n    \
    \    elseif char == ')' then\n            paren_level = paren_level - 1\n    \
    \    elseif char == ' ' then\n            paren_levels[#paren_levels + 1] = paren_level\n\
    \            paren_level = 0\n        end\n    end\n    return paren_levels\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for group in paren_string:gmatch('%S+') do\n        local max_nest =\
    \ 0\n        local nest = 0\n        for paren in group:gmatch('.') do\n     \
    \       if paren == '(' then\n                nest = nest + 1\n            elseif\
    \ paren == ')' then\n                nest = nest - 1\n            end\n      \
    \      if nest > max_nest then\n                max_nest = nest\n            end\n\
    \        end\n        table.insert(paren_groups, max_nest)\n    end\n    return\
    \ paren_groups\nend", "  local paren_levels = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local paren_level = 0\n    local max_paren_level = 0\n    for paren\
    \ in paren_group:gmatch('.') do\n      if paren == '(' then\n        paren_level\
    \ = paren_level + 1\n      elseif paren == ')' then\n        paren_level = paren_level\
    \ - 1\n      end\n      if paren_level > max_paren_level then\n        max_paren_level\
    \ = paren_level\n      end\n    end\n    table.insert(paren_levels, max_paren_level)\n\
    \  end\n  return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local paren_count = 0\n        local\
    \ max_paren_count = 0\n        for paren in paren_group:gmatch('.') do\n     \
    \       if paren == '(' then\n                paren_count = paren_count + 1\n\
    \            elseif paren == ')' then\n                paren_count = paren_count\
    \ - 1\n            end\n            if paren_count > max_paren_count then\n  \
    \              max_paren_count = paren_count\n            end\n        end\n \
    \       table.insert(paren_groups, max_paren_count)\n    end\n    return paren_groups\n\
    end", "  local paren_levels = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch('%S')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for paren in paren_group:gmatch('.') do\n            if paren == '(' then\n\
    \                current_nesting = current_nesting + 1\n            elseif paren\
    \ == ')' then\n                current_nesting = current_nesting - 1\n       \
    \     end\n            if current_nesting > max_nesting then\n               \
    \ max_nesting = current_nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local depth\
    \ = 0\n        local max_depth = 0\n        for paren in paren_group:gmatch('%S')\
    \ do\n            if paren == '(' then\n                depth = depth + 1\n  \
    \          elseif paren == ')' then\n                depth = depth - 1\n     \
    \       end\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "  local paren_groups = {}\n  for group\
    \ in paren_string:gmatch('%S+') do\n    local paren_stack = {}\n    local max_depth\
    \ = 0\n    for paren in group:gmatch('.') do\n      if paren == '(' then\n   \
    \     table.insert(paren_stack, paren)\n        max_depth = math.max(max_depth,\
    \ #paren_stack)\n      elseif paren == ')' then\n        table.remove(paren_stack)\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local paren_stack = {}\n        local max_depth = 0\n        for\
    \ paren in paren_group:gmatch('.') do\n            if paren == '(' then\n    \
    \            table.insert(paren_stack, paren)\n                max_depth = math.max(max_depth,\
    \ #paren_stack)\n            elseif paren == ')' then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local current_nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for group in paren_string:gmatch('%S+')\
    \ do\n    table.insert(paren_groups, group)\n  end\n  local max_nesting = {}\n\
    \  for _, group in ipairs(paren_groups) do\n    local nesting = 0\n    local max_nesting_in_group\
    \ = 0\n    for paren in group:gmatch('.') do\n      if paren == '(' then\n   \
    \     nesting = nesting + 1\n      elseif paren == ')' then\n        nesting =\
    \ nesting - 1\n      end\n      if nesting > max_nesting_in_group then\n     \
    \   max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        elseif char == ' ' then\n            table.insert(paren_levels,\
    \ paren_level)\n            paren_level = 0\n        end\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        depth = depth + 1\n      elseif paren\
    \ == ')' then\n        depth = depth - 1\n      end\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch('%S+') do\n        local level = 0\n\
    \        local max_level = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                level = level + 1\n       \
    \     elseif paren == ')' then\n                level = level - 1\n          \
    \  end\n            max_level = math.max(max_level, level)\n        end\n    \
    \    table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_levels, max_level)\n    end\n\
    \    return paren_levels\nend", "    local max_nesting = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
