language: lua
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \  local len = #text\n  for i = 1, len / 2 do\n    if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len do\n        if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \  if #text <= 1 then\n    return true\n  elseif text:sub(1, 1) == text:sub(-1,\
    \ -1) then\n    return is_palindrome(text:sub(2, -2))\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    if len < 2 then\n        return true\n    end\n  \
    \  local first = text:sub(1, 1)\n    local last = text:sub(len, len)\n    if first\
    \ ~= last then\n        return false\n    end\n    return is_palindrome(text:sub(2,\
    \ len - 1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len/2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \  local len = #text\n  for i = 1, len/2 do\n    if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
    \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
    \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
    \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
    \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local text_len = #text\n    local half_len = math.floor(text_len / 2)\n \
    \   for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len - i\
    \ + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = string.len(text)\n    for i = 1, len / 2 do\n        if text:sub(i,\
    \ i) ~= text:sub(len - i + 1, len - i + 1) then\n            return false\n  \
    \      end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_palindrome\n    lu.assertEquals(candidate(''),\
    \ true)\n    lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 1
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len // 2 do\n        if text:sub(i, i)\
    \ ~= text:sub(len - i + 1, len - i + 1) then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6pai3dm5.lua:12: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len/2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Checks if given string is a palindrome\n-- >>> is_palindrome('')\n\
    -- true\n-- >>> is_palindrome('aba')\n-- true\n-- >>> is_palindrome('aaaaa')\n\
    -- true\n-- >>> is_palindrome('zbcd')\n-- false\nlocal function is_palindrome(text)\n\
    \    local len = #text\n    for i = 1, len/2 do\n        if text:sub(i, i) ~=\
    \ text:sub(len - i + 1, len - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_palindrome\n    lu.assertEquals(candidate(''), true)\n  \
    \  lu.assertEquals(candidate('aba'), true)\n    lu.assertEquals(candidate('aaaaa'),\
    \ true)\n    lu.assertEquals(candidate('zbcd'), false)\n    lu.assertEquals(candidate('xywyx'),\
    \ true)\n    lu.assertEquals(candidate('xywyz'), false)\n    lu.assertEquals(candidate('xywzx'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
