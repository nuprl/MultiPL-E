name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a dictionary, return True if all keys are strings in lower \n--\
  \ case or all keys are strings in upper case, else return False.\n-- The function\
  \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if dict == nil or next(dict) == nil then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        lower = lower\
    \ and k == string.lower(k)\n        upper = upper and k == string.upper(k)\n \
    \   end\n    return lower or upper\nend", "    if not dict then\n        return\
    \ false\n    end\n    local lower_case = true\n    local upper_case = true\n \
    \   for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n        \
    \    return false\n        end\n        if lower_case and not k:match('^%l+$')\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ not k:match('^%u+$') then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    local lower = true\n  \
    \  local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if upper and k ~= k:upper()\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if dict == nil or\
    \ next(dict) == nil then\n        return false\n    end\n    local is_lower =\
    \ false\n    local is_upper = false\n    for k, v in pairs(dict) do\n        if\
    \ type(k) == 'string' then\n            if k:lower() == k then\n             \
    \   is_lower = true\n            elseif k:upper() == k then\n                is_upper\
    \ = true\n            else\n                return false\n            end\n  \
    \      else\n            return false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    if dict == nil or next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if lower and string.lower(k) ~= k then\n            lower\
    \ = false\n        end\n        if upper and string.upper(k) ~= k then\n     \
    \       upper = false\n        end\n    end\n    return lower or upper\nend",
  "    if not dict then\n        return false\n    end\n    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if is_lower\
    \ and k ~= k:lower() then\n            is_lower = false\n        end\n       \
    \ if is_upper and k ~= k:upper() then\n            is_upper = false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    if #dict == 0 then\n   \
    \     return false\n    end\n    local is_lower = false\n    local is_upper =\
    \ false\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if string.lower(k) == k then\n                is_lower = true\n \
    \           elseif string.upper(k) == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    -- your code here\n    if not dict then\n        return false\n   \
    \ end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k == string.lower(k)\
    \ then\n                is_lower = true\n            elseif k == string.upper(k)\
    \ then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if is_lower and is_upper then\n        return false\n    else\n\
    \        return true\n    end\nend", "    if not is_dict(dict) then\n        return\
    \ false\n    end\n    if is_empty(dict) then\n        return false\n    end\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if not is_string(k) then\n            return false\n        end\n\
    \        if lower_case then\n            lower_case = is_lower(k)\n        end\n\
    \        if upper_case then\n            upper_case = is_upper(k)\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    -- your code here\n\
    \    return false\nend", "    -- TODO: implement this function\nend", "    if\
    \ #dict == 0 then\n        return false\n    end\n    local lower = true\n   \
    \ local upper = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ string.lower(key) ~= key then\n            lower = false\n        end\n    \
    \    if upper and string.upper(key) ~= key then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower_case =\
    \ true\n    local upper_case = true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            return false\n        end\n        if\
    \ lower_case then\n            lower_case = lower_case and k == string.lower(k)\n\
    \        end\n        if upper_case then\n            upper_case = upper_case\
    \ and k == string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k:lower()\
    \ ~= k then\n            is_lower = false\n        end\n        if k:upper() ~=\
    \ k then\n            is_upper = false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if k:lower() ~= k then\n            lower = false\n\
    \        end\n        if k:upper() ~= k then\n            upper = false\n    \
    \    end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k:lower() ~=\
    \ k then\n            lower = false\n        end\n        if k:upper() ~= k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if next(dict) == nil then\n        return false\n    end\n    local\
    \ lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower_case then\n            if not k:match('^%l+$') then\n      \
    \          lower_case = false\n            end\n        end\n        if upper_case\
    \ then\n            if not k:match('^%u+$') then\n                upper_case =\
    \ false\n            end\n        end\n    end\n    return lower_case or upper_case\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
