name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a dictionary, return True if all keys are strings in lower \n--\
  \ case or all keys are strings in upper case, else return False.\n-- The function\
  \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if dict == nil or next(dict) == nil then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        lower = lower\
    \ and k == string.lower(k)\n        upper = upper and k == string.upper(k)\n \
    \   end\n    return lower or upper\nend", "    if not dict then\n        return\
    \ false\n    end\n    local lower_case = true\n    local upper_case = true\n \
    \   for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n        \
    \    return false\n        end\n        if lower_case and not k:match('^%l+$')\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ not k:match('^%u+$') then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    local lower = true\n  \
    \  local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if upper and k ~= k:upper()\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if dict == nil or\
    \ next(dict) == nil then\n        return false\n    end\n    local is_lower =\
    \ false\n    local is_upper = false\n    for k, v in pairs(dict) do\n        if\
    \ type(k) == 'string' then\n            if k:lower() == k then\n             \
    \   is_lower = true\n            elseif k:upper() == k then\n                is_upper\
    \ = true\n            else\n                return false\n            end\n  \
    \      else\n            return false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    if dict == nil or next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if lower and string.lower(k) ~= k then\n            lower\
    \ = false\n        end\n        if upper and string.upper(k) ~= k then\n     \
    \       upper = false\n        end\n    end\n    return lower or upper\nend",
  "    if not dict then\n        return false\n    end\n    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if is_lower\
    \ and k ~= k:lower() then\n            is_lower = false\n        end\n       \
    \ if is_upper and k ~= k:upper() then\n            is_upper = false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    if #dict == 0 then\n   \
    \     return false\n    end\n    local is_lower = false\n    local is_upper =\
    \ false\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if string.lower(k) == k then\n                is_lower = true\n \
    \           elseif string.upper(k) == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    -- your code here\n    if not dict then\n        return false\n   \
    \ end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k == string.lower(k)\
    \ then\n                is_lower = true\n            elseif k == string.upper(k)\
    \ then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if is_lower and is_upper then\n        return false\n    else\n\
    \        return true\n    end\nend", "    if not is_dict(dict) then\n        return\
    \ false\n    end\n    if is_empty(dict) then\n        return false\n    end\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if not is_string(k) then\n            return false\n        end\n\
    \        if lower_case then\n            lower_case = is_lower(k)\n        end\n\
    \        if upper_case then\n            upper_case = is_upper(k)\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    -- your code here\n\
    \    return false\nend", "    -- TODO: implement this function\nend", "    if\
    \ #dict == 0 then\n        return false\n    end\n    local lower = true\n   \
    \ local upper = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ string.lower(key) ~= key then\n            lower = false\n        end\n    \
    \    if upper and string.upper(key) ~= key then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower_case =\
    \ true\n    local upper_case = true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            return false\n        end\n        if\
    \ lower_case then\n            lower_case = lower_case and k == string.lower(k)\n\
    \        end\n        if upper_case then\n            upper_case = upper_case\
    \ and k == string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k:lower()\
    \ ~= k then\n            is_lower = false\n        end\n        if k:upper() ~=\
    \ k then\n            is_upper = false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if k:lower() ~= k then\n            lower = false\n\
    \        end\n        if k:upper() ~= k then\n            upper = false\n    \
    \    end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k:lower() ~=\
    \ k then\n            lower = false\n        end\n        if k:upper() ~= k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if next(dict) == nil then\n        return false\n    end\n    local\
    \ lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower_case then\n            if not k:match('^%l+$') then\n      \
    \          lower_case = false\n            end\n        end\n        if upper_case\
    \ then\n            if not k:match('^%u+$') then\n                upper_case =\
    \ false\n            end\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    local lower_case = true\n    local upper_case = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if lower_case and not k:match('^%l+$') then\n          \
    \  lower_case = false\n        end\n        if upper_case and not k:match('^%u+$')\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend", "    local lower_case = true\n    local upper_case = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if lower_case and k ~= string.lower(k)\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ k ~= string.upper(k) then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    -- TODO: Implement this\
    \ function\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= string.lower(k) then\n            lower = false\n        end\n\
    \        if k ~= string.upper(k) then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if upper and k ~= k:upper()\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and not k:lower() == k then\n            lower = false\n   \
    \     end\n        if upper and not k:upper() == k then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    if not dict then\n\
    \        return false\n    end\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower_case and not k:match('^%l+$')\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ not k:match('^%u+$') then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:match('%u') then\n                is_lower\
    \ = false\n            else\n                is_upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if lower and k ~= k:lower() then\n            lower\
    \ = false\n        end\n        if upper and k ~= k:upper() then\n           \
    \ upper = false\n        end\n    end\n    return lower or upper\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   lower = lower and k == string.lower(k)\n        upper = upper and k == string.upper(k)\n\
    \    end\n    return lower or upper\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and string.lower(k)\
    \ ~= k then\n            lower = false\n        end\n        if upper and string.upper(k)\
    \ ~= k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "    local lower = true\n    local upper = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if lower and k ~= k:lower() then\n            lower\
    \ = false\n        end\n        if upper and k ~= k:upper() then\n           \
    \ upper = false\n        end\n    end\n    return lower or upper\nend", "    local\
    \ lower = true\n    local upper = true\n    for k,v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if k ~= k:lower() then\n            lower = false\n        end\n        if\
    \ k ~= k:upper() then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend", "    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if k:lower() ~= k then\n            lower = false\n\
    \        end\n        if k:upper() ~= k then\n            upper = false\n    \
    \    end\n    end\n    return lower or upper\nend", "    local lower_case = true\n\
    \    local upper_case = true\n    for key, value in pairs(dict) do\n        if\
    \ type(key) ~= 'string' then\n            return false\n        end\n        if\
    \ key:lower() ~= key then\n            lower_case = false\n        end\n     \
    \   if key:upper() ~= key then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k:lower() ~=\
    \ k then\n            lower = false\n        end\n        if k:upper() ~= k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    -- TODO: Write your code here\n    if next(dict) == nil then\n    \
    \    return false\n    end\n    local lower = true\n    local upper = true\n \
    \   for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n        \
    \    return false\n        end\n        if lower and string.lower(k) ~= k then\n\
    \            lower = false\n        end\n        if upper and string.upper(k)\
    \ ~= k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "    if type(dict) ~= 'table' then\n        return false\n \
    \   end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == 'string' then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend", "    if dict == nil\
    \ or next(dict) == nil then\n        return false\n    end\n    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ string.lower(k) ~= k then\n            lower = false\n        end\n        if\
    \ upper and string.upper(k) ~= k then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    local is_lower = false\n    local\
    \ is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:lower() == k then\n                is_lower = true\n\
    \            elseif k:upper() == k then\n                is_upper = true\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    if dict == nil or #dict == 0 then\n        return false\n    end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() == k then\n\
    \                is_lower = true\n            elseif k:upper() == k then\n   \
    \             is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend", "    -- your code here\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) then\n               \
    \ lower = false\n            end\n            if k ~= string.upper(k) then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    if lower or upper then\n        return true\n\
    \    else\n        return false\n    end\nend", "    if dict == nil or next(dict)\
    \ == nil then\n        return false\n    end\n    local lower_case = true\n  \
    \  local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower_case\
    \ then\n            lower_case = k == string.lower(k)\n        end\n        if\
    \ upper_case then\n            upper_case = k == string.upper(k)\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    if not dict then return\
    \ false end\n    if not is_dict(dict) then return false end\n    if is_empty(dict)\
    \ then return false end\n    local all_lower = true\n    local all_upper = true\n\
    \    for k, v in pairs(dict) do\n        if not is_string(k) then return false\
    \ end\n        if not is_string(v) then return false end\n        if not is_lower(k)\
    \ then all_lower = false end\n        if not is_upper(k) then all_upper = false\
    \ end\n    end\n    return all_lower or all_upper\nend", "    if #dict == 0 then\n\
    \        return false\n    end\n    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if k ~= string.lower(k) then\n      \
    \      lower = false\n        end\n        if k ~= string.upper(k) then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    local is_lower = false\n    local is_upper = false\n    for key, _ in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if key:lower() == key\
    \ then\n                is_lower = true\n            elseif key:upper() == key\
    \ then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    local lower = true\n   \
    \ local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= k:lower() then\n\
    \            lower = false\n        end\n        if k ~= k:upper() then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    if dict\
    \ == nil or next(dict) == nil then\n        return false\n    end\n    local is_lower\
    \ = false\n    local is_upper = false\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == 'string' then\n            if k:lower() == k then\n         \
    \       is_lower = true\n            elseif k:upper() == k then\n            \
    \    is_upper = true\n            else\n                return false\n       \
    \     end\n        else\n            return false\n        end\n    end\n    return\
    \ is_lower or is_upper\nend", "    if dict == nil or next(dict) == nil then\n\
    \        return false\n    end\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k:lower() == k then\n                is_lower = true\n       \
    \     elseif k:upper() == k then\n                is_upper = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return is_lower or is_upper\nend",
  "    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= k:lower() then\n            lower_case = false\n        end\n\
    \        if k ~= k:upper() then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if lower and string.lower(k)\
    \ ~= k then\n            lower = false\n        end\n        if upper and string.upper(k)\
    \ ~= k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "    local lower_case = true\n    local upper_case = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if lower_case and k ~= string.lower(k)\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ k ~= string.upper(k) then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    local lower_case = true\n\
    \    local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if not string.match(k,\
    \ '^%l+$') then\n            lower_case = false\n        end\n        if not string.match(k,\
    \ '^%u+$') then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend", "    local is_lower = true\n    local is_upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       is_lower = false\n        end\n        if k ~= k:upper() then\n      \
    \      is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    local lower = true\n    local upper = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) ~= 'string' then\n            return false\n      \
    \  end\n        if lower and not key:lower() == key then\n            lower =\
    \ false\n        end\n        if upper and not key:upper() == key then\n     \
    \       upper = false\n        end\n    end\n    return lower or upper\nend",
  "    -- TODO: implement this function\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if not k:match('^%l+$')\
    \ then\n            lower = false\n        end\n        if not k:match('^%u+$')\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if #dict == 0 then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ not k:match('^%l+$') then\n            lower = false\n        end\n        if\
    \ upper and not k:match('^%u+$') then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    if dict == nil or next(dict) ==\
    \ nil then\n        return false\n    end\n    local lower_case = true\n    local\
    \ upper_case = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower_case then\n  \
    \          lower_case = lower_case and k == string.lower(k)\n        end\n   \
    \     if upper_case then\n            upper_case = upper_case and k == string.upper(k)\n\
    \        end\n    end\n    return lower_case or upper_case\nend", "    if dict\
    \ == nil or #dict == 0 then\n        return false\n    end\n    local is_lower\
    \ = false\n    local is_upper = false\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == 'string' then\n            if string.lower(k) == k then\n   \
    \             is_lower = true\n            elseif string.upper(k) == k then\n\
    \                is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend", "    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend", "  \
    \  local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if not k:match('^%l+$') then\n            lower = false\n        end\n\
    \        if not k:match('^%u+$') then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    if #dict == 0 then\n        return\
    \ false\n    end\n    local is_lower = false\n    local is_upper = false\n   \
    \ for k, v in pairs(dict) do\n        if type(k) == 'string' then\n          \
    \  if k:lower() == k then\n                is_lower = true\n            elseif\
    \ k:upper() == k then\n                is_upper = true\n            else\n   \
    \             return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if lower and k ~= k:lower() then\n            lower = false\n        end\n\
    \        if upper and k ~= k:upper() then\n            upper = false\n       \
    \ end\n    end\n    return lower or upper\nend", "    local lower = true\n   \
    \ local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if upper and k ~= k:upper()\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if dict == nil or\
    \ next(dict) == nil then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case and string.upper(k) == k then\n            lower_case = false\n\
    \        end\n        if upper_case and string.lower(k) == k then\n          \
    \  upper_case = false\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if not dict then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case and k ~= k:lower() then\n            lower_case = false\n   \
    \     end\n        if upper_case and k ~= k:upper() then\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case or upper_case\nend", " \
    \   if dict == nil or next(dict) == nil then\n        return false\n    end\n\
    \    local is_lower = true\n    local is_upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if is_lower and k ~= k:lower() then\n            is_lower = false\n \
    \       end\n        if is_upper and k ~= k:upper() then\n            is_upper\
    \ = false\n        end\n    end\n    return is_lower or is_upper\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if k:lower() ~= k then\n            lower = false\n        end\n        if\
    \ k:upper() ~= k then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend", "    -- TODO: Implement this function\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local count = 0\n    for key, value in pairs(dict) do\n        if type(key)\
    \ == 'string' then\n            if key == string.lower(key) then\n           \
    \     count = count + 1\n            elseif key == string.upper(key) then\n  \
    \              count = count - 1\n            end\n        end\n    end\n    if\
    \ count == 0 then\n        return false\n    elseif count > 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if lower and k:match('%l')\
    \ then\n            lower = false\n        end\n        if upper and k:match('%u')\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if #dict == 0 then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ k ~= string.lower(k) then\n            lower = false\n        end\n        if\
    \ upper and k ~= string.upper(k) then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= k:lower() then\n\
    \            lower = false\n        end\n        if k ~= k:upper() then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower_case and k ~= string.lower(k) then\n            lower_case =\
    \ false\n        end\n        if upper_case and k ~= string.upper(k) then\n  \
    \          upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend", "    if dict == nil or next(dict) == nil then\n        return\
    \ false\n    end\n    local is_lower = false\n    local is_upper = false\n   \
    \ for k, v in pairs(dict) do\n        if type(k) == 'string' then\n          \
    \  if k:lower() == k then\n                is_lower = true\n            elseif\
    \ k:upper() == k then\n                is_upper = true\n            else\n   \
    \             return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend", "    local\
    \ lower_case = true\n    local upper_case = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) ~= 'string' then\n            return false\n      \
    \  end\n        if lower_case then\n            lower_case = key == string.lower(key)\n\
    \        end\n        if upper_case then\n            upper_case = key == string.upper(key)\n\
    \        end\n    end\n    return lower_case or upper_case\nend", "    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and not k:lower() == k then\n            lower = false\n   \
    \     end\n        if upper and not k:upper() == k then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    -- TODO: Implement\
    \ this function\n    local lower = true\n    local upper = true\n    for key,\
    \ value in pairs(dict) do\n        if type(key) == 'string' then\n           \
    \ if key ~= string.lower(key) then\n                lower = false\n          \
    \  end\n            if key ~= string.upper(key) then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- your code here\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:lower() ~= k then\n                lower = false\n  \
    \          end\n            if k:upper() ~= k then\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if k ~= string.lower(k) then\n            lower = false\n\
    \        end\n        if k ~= string.upper(k) then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    if dict == nil or\
    \ next(dict) == nil then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case and string.upper(k) == k then\n            lower_case = false\n\
    \        end\n        if upper_case and string.lower(k) == k then\n          \
    \  upper_case = false\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if k ~= k:lower() then\n            is_lower = false\n \
    \       end\n        if k ~= k:upper() then\n            is_upper = false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend", "    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ string.lower(k) ~= k then\n            lower = false\n        end\n        if\
    \ upper and string.upper(k) ~= k then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    if dict == nil or next(dict) ==\
    \ nil then\n        return false\n    end\n    local is_lower = false\n    local\
    \ is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:match('%u') then\n                is_upper = true\n \
    \           else\n                is_lower = true\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower ~= is_upper\n\
    end", "    -- your code here\n    local lower = true\n    local upper = true\n\
    \    for k,v in pairs(dict) do\n        if type(k) == 'string' then\n        \
    \    if k:lower() ~= k then\n                lower = false\n            end\n\
    \            if k:upper() ~= k then\n                upper = false\n         \
    \   end\n        else\n            return false\n        end\n    end\n    if\
    \ lower or upper then\n        return true\n    else\n        return false\n \
    \   end\nend", "    if next(dict) == nil then\n        return false\n    end\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= string.lower(k) then\n            lower = false\n \
    \       end\n        if upper and k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case and not k:match('^%l+$') then\n            lower_case = false\n\
    \        end\n        if upper_case and not k:match('^%u+$') then\n          \
    \  upper_case = false\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if lower and k\
    \ ~= k:lower() then\n            lower = false\n        end\n        if upper\
    \ and k ~= k:upper() then\n            upper = false\n        end\n    end\n \
    \   return lower or upper\nend", "    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= 'string'\
    \ then\n            return false\n        end\n        if key:lower() ~= key then\n\
    \            lower_case = false\n        end\n        if key:upper() ~= key then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend", "    local lower = true\n    local upper = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if k ~= k:lower() then\n            lower = false\n\
    \        end\n        if k ~= k:upper() then\n            upper = false\n    \
    \    end\n    end\n    return lower or upper\nend", "    if next(dict) == nil\
    \ then\n        return false\n    end\n    local lower_case = true\n    local\
    \ upper_case = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= string.lower(k)\
    \ then\n            lower_case = false\n        end\n        if k ~= string.upper(k)\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend", "    if type(dict) ~= 'table' then\n        return false\n\
    \    end\n    local count_lower = 0\n    local count_upper = 0\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k == string.lower(k)\
    \ then\n                count_lower = count_lower + 1\n            elseif k ==\
    \ string.upper(k) then\n                count_upper = count_upper + 1\n      \
    \      end\n        end\n    end\n    if count_lower == 0 and count_upper == 0\
    \ then\n        return false\n    elseif count_lower == 0 and count_upper > 0\
    \ then\n        return true\n    elseif count_lower > 0 and count_upper == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= string.lower(k) then\n            lower_case = false\n      \
    \  end\n        if k ~= string.upper(k) then\n            upper_case = false\n\
    \        end\n    end\n    return lower_case or upper_case\nend", "    -- TODO:\
    \ Implement this function\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if lower and string.lower(k) ~= k then\n\
    \            lower = false\n        end\n        if upper and string.upper(k)\
    \ ~= k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "    local is_lower = true\n    local is_upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if is_lower and not k:lower() == k then\n      \
    \      is_lower = false\n        end\n        if is_upper and not k:upper() ==\
    \ k then\n            is_upper = false\n        end\n    end\n    return is_lower\
    \ or is_upper\nend", "    if next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= string.lower(k) then\n            lower = false\n        end\n\
    \        if k ~= string.upper(k) then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "  if #dict == 0 then return false\
    \ end\n  local is_lower = false\n  local is_upper = false\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:lower() == k then\n        is_lower\
    \ = true\n      elseif k:upper() == k then\n        is_upper = true\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  end\n\
    \  return is_lower or is_upper\nend", "    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k:match('%l') then\n                is_lower = true\n        \
    \    elseif k:match('%u') then\n                is_upper = true\n            end\n\
    \        end\n    end\n    return is_lower ~= is_upper\nend", "    if #dict ==\
    \ 0 then\n        return false\n    end\n    local is_lower = false\n    local\
    \ is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if k:lower() == k then\n                is_lower = true\n\
    \            elseif k:upper() == k then\n                is_upper = true\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    -- TODO:\
    \ Implement this function\n    local lower = true\n    local upper = true\n  \
    \  for key, value in pairs(dict) do\n        if type(key) == 'string' then\n \
    \           if key:match('%a') then\n                upper = false\n         \
    \   else\n                lower = false\n            end\n        else\n     \
    \       return false\n        end\n    end\n    return lower or upper\nend", " \
    \   local lower = true\n    local upper = true\n    for k,v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= k:lower() then\n            lower = false\n        end\n    \
    \    if k ~= k:upper() then\n            upper = false\n        end\n    end\n\
    \    return lower or upper\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if lower and k ~= k:lower() then\n  \
    \          lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    -- TODO: Implement this function\n    local lower = true\n    local\
    \ upper = true\n    for key, value in pairs(dict) do\n        if type(key) ==\
    \ 'string' then\n            if key ~= string.lower(key) then\n              \
    \  lower = false\n            end\n            if key ~= string.upper(key) then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    if lower or upper then\n        return true\n\
    \    else\n        return false\n    end\nend", "    if dict == nil or next(dict)\
    \ == nil then\n        return false\n    end\n    local is_lower = false\n   \
    \ local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    -- TODO: implement this function\n    local lower_case = true\n   \
    \ local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower_case\
    \ then\n            if k ~= string.lower(k) then\n                lower_case =\
    \ false\n            end\n        end\n        if upper_case then\n          \
    \  if k ~= string.upper(k) then\n                upper_case = false\n        \
    \    end\n        end\n    end\n    return lower_case or upper_case\nend", " \
    \   local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= k:lower() then\n            lower = false\n        end\n    \
    \    if k ~= k:upper() then\n            upper = false\n        end\n    end\n\
    \    return lower or upper\nend", "    -- your code here\nend", "    -- your code\
    \ here\n    local lower = true\n    local upper = true\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower = false\n            end\n            if k ~= string.upper(k)\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    if lower or upper then\n       \
    \ return true\n    else\n        return false\n    end\nend", "    local lower_case\
    \ = true\n    local upper_case = true\n    for key, value in pairs(dict) do\n\
    \        if type(key) ~= 'string' then\n            return false\n        end\n\
    \        if key:match('%u') then\n            lower_case = false\n        end\n\
    \        if key:match('%l') then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    local is_lower = false\n\
    \    local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    if next(dict) == nil then\n        return false\n    end\n    local\
    \ lower = true\n    local upper = true\n    for key, value in pairs(dict) do\n\
    \        if type(key) ~= 'string' then\n            return false\n        end\n\
    \        if key ~= string.lower(key) then\n            lower = false\n       \
    \ end\n        if key ~= string.upper(key) then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if dict == nil or\
    \ next(dict) == nil then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case and string.lower(k) ~= k then\n            lower_case = false\n\
    \        end\n        if upper_case and string.upper(k) ~= k then\n          \
    \  upper_case = false\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if not dict then return\
    \ false end\n    local keys = {}\n    for k, v in pairs(dict) do\n        table.insert(keys,\
    \ k)\n    end\n    if #keys == 0 then return false end\n    local is_lower = keys[1]:lower()\
    \ == keys[1]\n    for _, k in ipairs(keys) do\n        if is_lower and k:lower()\
    \ ~= k then return false end\n        if not is_lower and k:upper() ~= k then\
    \ return false end\n    end\n    return true\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if lower and k\
    \ ~= k:lower() then\n            lower = false\n        end\n        if upper\
    \ and k ~= k:upper() then\n            upper = false\n        end\n    end\n \
    \   return lower or upper\nend", "    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower_case and string.upper(k)\
    \ == k then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.lower(k) == k then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend", "    if next(dict) == nil\
    \ then\n        return false\n    end\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower and string.upper(k) ==\
    \ k then\n            lower = false\n        end\n        if upper and string.lower(k)\
    \ == k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "  local lower_case = true\n  local upper_case = true\n  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n      return false\n\
    \    end\n    if lower_case and not k:lower() == k then\n      lower_case = false\n\
    \    end\n    if upper_case and not k:upper() == k then\n      upper_case = false\n\
    \    end\n  end\n  return lower_case or upper_case\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if lower and k\
    \ ~= k:lower() then\n            lower = false\n        end\n        if upper\
    \ and k ~= k:upper() then\n            upper = false\n        end\n    end\n \
    \   return lower or upper\nend", "    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if k ~= string.lower(k) then\n            is_lower = false\n\
    \        end\n        if k ~= string.upper(k) then\n            is_upper = false\n\
    \        end\n    end\n    return is_lower or is_upper\nend", "    -- check if\
    \ the given dictionary is empty\n    if not next(dict) then\n        return false\n\
    \    end\n    -- check if all keys are strings in lower case\n    local lower_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' or k\
    \ ~= string.lower(k) then\n            lower_case = false\n            break\n\
    \        end\n    end\n    -- check if all keys are strings in upper case\n  \
    \  local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' or k ~= string.upper(k) then\n            upper_case = false\n \
    \           break\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower_case_keys = true\n    local upper_case_keys = true\n \
    \   for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n        \
    \    return false\n        end\n        if lower_case_keys then\n            lower_case_keys\
    \ = k == string.lower(k)\n        end\n        if upper_case_keys then\n     \
    \       upper_case_keys = k == string.upper(k)\n        end\n        if not lower_case_keys\
    \ and not upper_case_keys then\n            return false\n        end\n    end\n\
    \    return true\nend", "  -- TODO: Implement this function.\nend", "    if dict\
    \ == nil or next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ not k:lower() == k then\n            lower = false\n        end\n        if\
    \ upper and not k:upper() == k then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    -- your code here\n    local count\
    \ = 0\n    local count2 = 0\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == \"string\" then\n            if k == string.lower(k) then\n             \
    \   count = count + 1\n            elseif k == string.upper(k) then\n        \
    \        count2 = count2 + 1\n            end\n        end\n    end\n    if count\
    \ == 0 and count2 == 0 then\n        return false\n    elseif count == 0 and count2\
    \ ~= 0 then\n        return true\n    elseif count ~= 0 and count2 == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if k:lower() ~= k then\n            lower = false\n        end\n        if\
    \ k:upper() ~= k then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend", "    if not dict then\n        return false\n    end\n\
    \    local is_lower = nil\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if is_lower\
    \ == nil then\n            is_lower = k == k:lower()\n        else\n         \
    \   if is_lower ~= (k == k:lower()) then\n                return false\n     \
    \       end\n        end\n    end\n    return true\nend", "    local lower_case\
    \ = true\n    local upper_case = true\n    for key, value in pairs(dict) do\n\
    \        if type(key) ~= 'string' then\n            return false\n        end\n\
    \        if string.lower(key) ~= key then\n            lower_case = false\n  \
    \      end\n        if string.upper(key) ~= key then\n            upper_case =\
    \ false\n        end\n    end\n    return lower_case or upper_case\nend", "  \
    \  if next(dict) == nil then\n        return false\n    end\n    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k:lower()\
    \ ~= k then\n            lower = false\n        end\n        if k:upper() ~= k\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    if dict\
    \ == nil or next(dict) == nil then\n        return false\n    end\n    local is_lower\
    \ = false\n    local is_upper = false\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == 'string' then\n            if string.lower(k) == k then\n   \
    \             is_lower = true\n            elseif string.upper(k) == k then\n\
    \                is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend", "    local lower_case = true\n    local\
    \ upper_case = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= 'string' then\n            return false\n        end\n        if string.lower(key)\
    \ ~= key then\n            lower_case = false\n        end\n        if string.upper(key)\
    \ ~= key then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if lower and k ~= k:lower() then\n  \
    \          lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    -- your code here\nend", "    -- TODO: implement this function\nend",
  "    if dict == nil or next(dict) == nil then\n        return false\n    end\n \
    \   local is_lower = false\n    local is_upper = false\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() == k then\n\
    \                is_lower = true\n            elseif k:upper() == k then\n   \
    \             is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend", "    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower and string.upper(k) ==\
    \ k then\n            lower = false\n        end\n        if upper and string.lower(k)\
    \ == k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend", "    if not dict then\n        return false\n    end\n    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if lower and k ~= k:lower() then\n            lower = false\n        end\n\
    \        if upper and k ~= k:upper() then\n            upper = false\n       \
    \ end\n    end\n    return lower or upper\nend", "    local lower = true\n   \
    \ local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if upper and k ~= k:upper()\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and string.lower(k) ~= k then\n            lower = false\n \
    \       end\n        if upper and string.upper(k) ~= k then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend", "    local lower\
    \ = true\n    local upper = true\n    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ k ~= k:lower() then\n            lower = false\n        end\n        if upper\
    \ and k ~= k:upper() then\n            upper = false\n        end\n    end\n \
    \   return lower or upper\nend", "    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower_case and k ~= string.lower(k)\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ k ~= string.upper(k) then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "  local lower = true\n  local\
    \ upper = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string' then\n\
    \      return false\n    end\n    if lower and k ~= k:lower() then\n      lower\
    \ = false\n    end\n    if upper and k ~= k:upper() then\n      upper = false\n\
    \    end\n  end\n  return lower or upper\nend", "    if dict == nil or next(dict)\
    \ == nil then\n        return false\n    end\n    local all_lower = true\n   \
    \ local all_upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k ~= k:lower()\
    \ then\n            all_lower = false\n        end\n        if k ~= k:upper()\
    \ then\n            all_upper = false\n        end\n    end\n    return all_lower\
    \ or all_upper\nend", "    -- TODO: Implement this function\n    local count =\
    \ 0\n    local count1 = 0\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == \"string\" then\n            if k == string.lower(k) then\n             \
    \   count = count + 1\n            elseif k == string.upper(k) then\n        \
    \        count1 = count1 + 1\n            end\n        end\n    end\n    if count\
    \ == 0 and count1 == 0 then\n        return false\n    elseif count == 0 and count1\
    \ ~= 0 then\n        return true\n    elseif count ~= 0 and count1 == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if lower and k ~= k:lower() then\n            lower = false\n        end\n\
    \        if upper and k ~= k:upper() then\n            upper = false\n       \
    \ end\n    end\n    return lower or upper\nend", "    local lower_case = true\n\
    \    local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower_case\
    \ then\n            lower_case = lower_case and k == string.lower(k)\n       \
    \ end\n        if upper_case then\n            upper_case = upper_case and k ==\
    \ string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    local is_lower = nil\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if is_lower == nil then\n                is_lower\
    \ = k == string.lower(k)\n            else\n                if is_lower ~= (k\
    \ == string.lower(k)) then\n                    return false\n               \
    \ end\n            end\n        else\n            return false\n        end\n\
    \    end\n    return true\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if k ~= k:lower() then\n            lower\
    \ = false\n        end\n        if k ~= k:upper() then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local is_lower = true\n    local is_upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if k ~= k:lower() then\n            is_lower = false\n        end\n \
    \       if k ~= k:upper() then\n            is_upper = false\n        end\n  \
    \  end\n    return is_lower or is_upper\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= k:lower() then\n\
    \            lower = false\n        end\n        if k ~= k:upper() then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then return false end\n        if k:lower() ~=\
    \ k then lower = false end\n        if k:upper() ~= k then upper = false end\n\
    \    end\n    return lower or upper\nend", "    if not dict then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if lower and string.lower(k) ~= k then\n            lower\
    \ = false\n        end\n        if upper and string.upper(k) ~= k then\n     \
    \       upper = false\n        end\n    end\n    return lower or upper\nend",
  "    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower_case and not k:lower() == k then\n            lower_case = false\n\
    \        end\n        if upper_case and not k:upper() == k then\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case or upper_case\nend", " \
    \   if dict == nil or next(dict) == nil then\n        return false\n    end\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and not k:lower() == k then\n            lower = false\n   \
    \     end\n        if upper and not k:upper() == k then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    -- TODO: Implement this function\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    local lower_case = true\n\
    \    local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower_case\
    \ then\n            lower_case = lower_case and k == string.lower(k)\n       \
    \ end\n        if upper_case then\n            upper_case = upper_case and k ==\
    \ string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if dict == nil or next(dict) == nil then\n        return false\n  \
    \  end\n    local is_lower = false\n    local is_upper = false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend", "    -- check if the dictionary\
    \ is empty\n    if next(dict) == nil then\n        return false\n    end\n   \
    \ -- check if all keys are strings in lower case\n    if dict[next(dict)] == nil\
    \ then\n        for k, v in pairs(dict) do\n            if type(k) ~= 'string'\
    \ or k ~= string.lower(k) then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    -- check if all keys are strings\
    \ in upper case\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ or k ~= string.upper(k) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    -- TODO: Implement this function\n    local lower\
    \ = true\n    local upper = true\n    for k,v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) then\n               \
    \ lower = false\n            end\n            if k ~= string.upper(k) then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    if lower or upper then\n        return true\n\
    \    else\n        return false\n    end\nend", "    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower then\n       \
    \     lower = lower and k == string.lower(k)\n        end\n        if upper then\n\
    \            upper = upper and k == string.upper(k)\n        end\n    end\n  \
    \  return lower or upper\nend", "    local lower = true\n    local upper = true\n\
    \    for key, _ in pairs(dict) do\n        if type(key) ~= 'string' then\n   \
    \         return false\n        end\n        if key ~= key:lower() then\n    \
    \        lower = false\n        end\n        if key ~= key:upper() then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    if dict == nil or next(dict) == nil then\n        return false\n    end\n \
    \   local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower_case then\n            lower_case = lower_case and k == string.lower(k)\n\
    \        end\n        if upper_case then\n            upper_case = upper_case\
    \ and k == string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    if not dict then\n        return false\n    end\n    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if k:lower()\
    \ ~= k then\n            lower = false\n        end\n        if k:upper() ~= k\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower_case_keys = true\n    local upper_case_keys = true\n  \
    \  for key, value in pairs(dict) do\n        if type(key) ~= 'string' then\n \
    \           return false\n        end\n        if lower_case_keys then\n     \
    \       lower_case_keys = lower_case_keys and key == string.lower(key)\n     \
    \   end\n        if upper_case_keys then\n            upper_case_keys = upper_case_keys\
    \ and key == string.upper(key)\n        end\n    end\n    return lower_case_keys\
    \ or upper_case_keys\nend", "    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower_case and k ~= string.lower(k)\
    \ then\n            lower_case = false\n        end\n        if upper_case and\
    \ k ~= string.upper(k) then\n            upper_case = false\n        end\n   \
    \ end\n    return lower_case or upper_case\nend", "    local lower = true\n  \
    \  local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= k:lower() then\n\
    \            lower = false\n        end\n        if k ~= k:upper() then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend",
  "    -- check if the given dictionary is empty\n    if next(dict) == nil then\n\
    \        return false\n    end\n    -- check if all keys are strings in lower\
    \ case\n    local lowercase_keys = true\n    for k, v in pairs(dict) do\n    \
    \    if type(k) ~= 'string' or k ~= string.lower(k) then\n            lowercase_keys\
    \ = false\n            break\n        end\n    end\n    -- check if all keys are\
    \ strings in upper case\n    local uppercase_keys = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' or k ~= string.upper(k) then\n          \
    \  uppercase_keys = false\n            break\n        end\n    end\n    -- return\
    \ true if all keys are strings in lower case or all keys are strings in upper\
    \ case\n    return lowercase_keys or uppercase_keys\nend", "    local lower =\
    \ true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if lower and\
    \ not k:lower() == k then\n            lower = false\n        end\n        if\
    \ upper and not k:upper() == k then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "  local lower_case = true\n  local\
    \ upper_case = true\n  for key, value in pairs(dict) do\n    if type(key) ~= 'string'\
    \ then\n      return false\n    end\n    if key:lower() ~= key then\n      lower_case\
    \ = false\n    end\n    if key:upper() ~= key then\n      upper_case = false\n\
    \    end\n  end\n  return lower_case or upper_case\nend", "\tlocal lower = true\n\
    \tlocal upper = true\n\tfor k, v in pairs(dict) do\n\t\tif type(k) ~= 'string'\
    \ then\n\t\t\treturn false\n\t\tend\n\t\tif k ~= k:lower() then\n\t\t\tlower =\
    \ false\n\t\tend\n\t\tif k ~= k:upper() then\n\t\t\tupper = false\n\t\tend\n\t\
    end\n\treturn lower or upper\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= 'string' then\n            return false\n\
    \        end\n        if k ~= string.lower(k) then\n            lower = false\n\
    \        end\n        if k ~= string.upper(k) then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k ~= k:lower()\
    \ then\n            lower = false\n        end\n        if k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k:lower() ~=\
    \ k then\n            lower = false\n        end\n        if k:upper() ~= k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if not dict then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if type(k) ~= 'string' then\n            return false\n        end\n      \
    \  if lower_case then\n            lower_case = lower_case and k == string.lower(k)\n\
    \        end\n        if upper_case then\n            upper_case = upper_case\
    \ and k == string.upper(k)\n        end\n    end\n    return lower_case or upper_case\n\
    end", "    local lower = true\n    local upper = true\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    if next(dict) == nil\
    \ then\n        return false\n    end\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    local lower_case = true\n    local upper_case = true\n    for key,\
    \ value in pairs(dict) do\n        if type(key) ~= 'string' then\n           \
    \ return false\n        end\n        if key:lower() ~= key then\n            lower_case\
    \ = false\n        end\n        if key:upper() ~= key then\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case or upper_case\nend", "\t\
    local lower_case = true\n\tlocal upper_case = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) ~= 'string' then\n\t\t\treturn false\n\t\tend\n\t\tif k:lower()\
    \ ~= k then\n\t\t\tlower_case = false\n\t\tend\n\t\tif k:upper() ~= k then\n\t\
    \t\tupper_case = false\n\t\tend\n\tend\n\treturn lower_case or upper_case\nend",
  "    if #dict == 0 then\n        return false\n    end\n    local is_lower = true\n\
    \    local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if is_lower\
    \ and not string.match(k, '^%l+$') then\n            is_lower = false\n      \
    \  end\n        if is_upper and not string.match(k, '^%u+$') then\n          \
    \  is_upper = false\n        end\n    end\n    return is_lower or is_upper\nend",
  "    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if lower and k ~= k:lower() then\n            lower = false\n       \
    \ end\n        if upper and k ~= k:upper() then\n            upper = false\n \
    \       end\n    end\n    return lower or upper\nend", "    local lower_case =\
    \ true\n    local upper_case = true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            return false\n        end\n        if\
    \ k ~= k:lower() then\n            lower_case = false\n        end\n        if\
    \ k ~= k:upper() then\n            upper_case = false\n        end\n    end\n\
    \    return lower_case or upper_case\nend", "  local lower = true\n  local upper\
    \ = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n    \
    \  return false\n    end\n    if k ~= k:lower() then\n      lower = false\n  \
    \  end\n    if k ~= k:upper() then\n      upper = false\n    end\n  end\n  return\
    \ lower or upper\nend", "    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if lower and string.upper(k) == k then\n       \
    \     lower = false\n        end\n        if upper and string.lower(k) == k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    if next(dict) == nil then\n        return false\n    end\n    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if lower and string.lower(k) ~= k then\n            lower = false\n      \
    \  end\n        if upper and string.upper(k) ~= k then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            return false\n        end\n        if k:lower() ~=\
    \ k then\n            lower = false\n        end\n        if k:upper() ~= k then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then\n            return false\n        end\n     \
    \   if k ~= k:lower() then\n            lower = false\n        end\n        if\
    \ k ~= k:upper() then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend", "    if not dict then\n        return false\n    end\n\
    \    local keys = {}\n    for k, v in pairs(dict) do\n        table.insert(keys,\
    \ k)\n    end\n    if #keys == 0 then\n        return false\n    end\n    local\
    \ first_key = keys[1]\n    local first_key_type = type(first_key)\n    if first_key_type\
    \ ~= 'string' then\n        return false\n    end\n    local first_key_lower =\
    \ first_key:lower()\n    local first_key_upper = first_key:upper()\n    for i,\
    \ key in ipairs(keys) do\n        local key_type = type(key)\n        if key_type\
    \ ~= 'string' then\n            return false\n        end\n        local key_lower\
    \ = key:lower()\n        local key_upper = key:upper()\n        if key_lower ~=\
    \ first_key_lower and key_upper ~= first_key_upper then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if dict == nil or next(dict)\
    \ == nil then\n        return false\n    end\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if lower and not k:lower()\
    \ == k then\n            lower = false\n        end\n        if upper and not\
    \ k:upper() == k then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
