language: lua
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsp8b6p2.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmphsp8b6p2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and math.floor(v) == v then\n      sum = sum + v * v\n    end\n  end\n\
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbbtnl9q.lua:26:\
    \ expected: 25, actual: 82\nstack traceback:\n\t/tmp/tmpfbbtnl9q.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqhbf1lc.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptqhbf1lc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiimzzlq3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiimzzlq3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local x = lst[i]\n    if type(x) ==\
    \ \"number\" and x > 0 and x % 2 == 1 then\n      sum = sum + x * x\n    end\n\
    \  end\n  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvh5g_0wr.lua:27:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpvh5g_0wr.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqhbf1lc.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptqhbf1lc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobidpheq.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpobidpheq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, num in ipairs(lst) do\n        if num % 2 == 1\
    \ and num > 0 then\n            sum = sum + num * num\n        end\n    end\n\
    \    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2upmt2in.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp2upmt2in.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg5zbuqc.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmprg5zbuqc.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxwuc8od.lua:26:\
    \ expected: 25, actual: 82.0\nstack traceback:\n\t/tmp/tmpmxwuc8od.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlibdsf3.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpzlibdsf3.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 then\n     \
    \ sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv7z0tpq.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpwv7z0tpq.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        local x = lst[i]\n       \
    \ if type(x) == \"number\" and x >= 0 and x % 2 == 1 then\n            sum = sum\
    \ + x * x\n        end\n    end\n    return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct0yhn5r.lua:27:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpct0yhn5r.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxkjxt8m.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpdxkjxt8m.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n  \
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryq5lvse.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpryq5lvse.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxkjxt8m.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpdxkjxt8m.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v\
    \ % 2 == 1 and v > 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6k_plh7.lua:27:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmps6k_plh7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ksnbxcg.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp0ksnbxcg.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and math.floor(v)\
    \ == v then\n            if v % 2 == 1 then\n                sum = sum + v * v\n\
    \            end\n        end\n    end\n    return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51ycax41.lua:28:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp51ycax41.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobidpheq.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpobidpheq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    -- YOUR CODE HERE\n    local sum = 0\n    for _, v in ipairs(lst) do\n  \
    \      if type(v) == \"number\" and v > 0 and v % 2 == 1 then\n            sum\
    \ = sum + v * v\n        end\n    end\n    return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7k4d4sz.lua:27:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpz7k4d4sz.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtbt6myi.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpwtbt6myi.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v >= 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdtrpuhd.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpxdtrpuhd.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd08vd801.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpd08vd801.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqhbf1lc.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptqhbf1lc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd08vd801.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpd08vd801.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v then\n            if v % 2 == 1 then\n    \
    \            sum = sum + v * v\n            end\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpordku38d.lua:28:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpordku38d.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobidpheq.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpobidpheq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v >= 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48930bw9.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp48930bw9.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxkjxt8m.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpdxkjxt8m.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and v > 0 and v%2 == 1 then\n      sum = sum + v^2\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum_odd_squares = 0\n    for _, v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and v > 0 and v % 2 == 1 then\n            sum_odd_squares = sum_odd_squares\
    \ + v * v\n        end\n    end\n    return sum_odd_squares * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1mq6m_r.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpe1mq6m_r.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlibdsf3.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpzlibdsf3.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- YOUR CODE HERE\n  local sum = 0\n  for i, v in ipairs(lst) do\n    if v\
    \ > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9tstomq.lua:27:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmph9tstomq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and math.floor(v) == v then\n            if v % 2 == 1 then\n    \
    \            sum = sum + v * v\n            end\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppke01g3j.lua:28:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmppke01g3j.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiimzzlq3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiimzzlq3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 then\n     \
    \ sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv7z0tpq.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpwv7z0tpq.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ >= 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n \
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n \
    \   lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v >= 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdtrpuhd.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpxdtrpuhd.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum_of_squares_of_odds = 0\n  for _, v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and v % 2 == 1 and v >= 0 then\n      sum_of_squares_of_odds =\
    \ sum_of_squares_of_odds + v * v\n    end\n  end\n  return sum_of_squares_of_odds\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51bsbfe8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp51bsbfe8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg5zbuqc.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmprg5zbuqc.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i2237e5.lua:19:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_i2237e5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v * v\n        end\n    end\n    return sum * 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}),\
    \ 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1025cx5f.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp1025cx5f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxkjxt8m.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpdxkjxt8m.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n  \
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryq5lvse.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpryq5lvse.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v >= 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqhbf1lc.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmptqhbf1lc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg5zbuqc.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmprg5zbuqc.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v >= 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta6q_db3.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpta6q_db3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtsqnsu8.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpbtsqnsu8.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        local x = lst[i]\n       \
    \ if type(x) == \"number\" and x > 0 and x % 2 == 1 then\n            sum = sum\
    \ + x * x\n        end\n    end\n    return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60wa9squ.lua:27:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmp60wa9squ.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ v > 0 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43q53w5u.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmp43q53w5u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v % 2 == 1 and v > 0 then\n\
    \      sum = sum + v * v\n    end\n  end\n  return sum * 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnun02glm.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpnun02glm.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n      sum = sum + v * v\n    end\n  end\n  return\
    \ sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6viehap.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpr6viehap.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if type(v) == \"number\"\
    \ and v > 0 and v % 2 == 1 then\n            sum = sum + v * v\n        end\n\
    \    end\n    return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9rywceu.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpc9rywceu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and lst[i]\
    \ > 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n  \
    \  return sum * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n\
    \    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1,\
    \ 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n \
    \   lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2,\
    \ 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryq5lvse.lua:26:\
    \ expected: 25, actual: 50.0\nstack traceback:\n\t/tmp/tmpryq5lvse.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793018
- exit_code: 1
  program: "-- Given a list of numbers, return the sum of squares of the numbers\n\
    -- in the list that are odd. Ignore numbers that are negative or not integers.\n\
    -- >>> double_the_difference({1, 3, 2, 0})\n-- 10\n-- >>> double_the_difference({-1,\
    \ -2, 0})\n-- 0\n-- >>> double_the_difference({9, -2})\n-- 81\n-- >>> double_the_difference({0})\n\
    -- 0\n-- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > 0 and v % 2\
    \ == 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\
    \ * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0,\
    \ 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0,\
    \ -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n \
    \   lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqma71nw.lua:26:\
    \ expected: 25, actual: 50\nstack traceback:\n\t/tmp/tmpiqma71nw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750218
