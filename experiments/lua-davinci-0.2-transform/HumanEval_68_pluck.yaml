name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given array is empty, return [].\n\
  -- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2,\
  \ 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5,\
  \ 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n-- so we will choose the first zero, which has the smallest index.\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local min_even, min_index = math.huge, math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even, min_index = v,\
    \ i\n    end\n  end\n  return min_even == math.huge and {} or {min_even, min_index}\n\
    end", "  local min_even_value = math.huge\n  local min_even_value_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n\
    \      min_even_value = v\n      min_even_value_index = i\n    end\n  end\n  if\
    \ min_even_value == math.huge then\n    return {}\n  else\n    return {min_even_value,\
    \ min_even_value_index}\n  end\nend", "  local min_even = math.huge\n  local min_even_idx\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even\
    \ then\n      min_even = v\n      min_even_idx = i\n    end\n  end\n  if min_even\
    \ == math.huge then\n    return {}\n  end\n  return {min_even, min_even_idx}\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return {min,\
    \ min_idx}\nend", "    local min_even_val, min_even_idx = math.huge, math.huge\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min_even_val then\n\
    \            min_even_val = v\n            min_even_idx = i\n        end\n   \
    \ end\n    if min_even_val == math.huge then\n        return {}\n    else\n  \
    \      return {min_even_val, min_even_idx}\n    end\nend", "  local min_even_value\
    \ = math.huge\n  local min_even_index = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min_even_value then\n      min_even_value = v\n   \
    \   min_even_index = i\n    end\n  end\n  if min_even_value == math.huge then\n\
    \    return {}\n  else\n    return {min_even_value, min_even_index}\n  end\nend",
  "  local min_even_value = math.huge\n  local min_even_index = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n      min_even_value\
    \ = v\n      min_even_index = i\n    end\n  end\n  if min_even_value == math.huge\
    \ then\n    return {}\n  else\n    return {min_even_value, min_even_index}\n \
    \ end\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n     \
    \ min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n  end\n\
    \  return {min, min_idx}\nend", "    local min_even_value = math.huge\n    local\
    \ min_even_index = math.huge\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 and v < min_even_value then\n            min_even_value = v\n         \
    \   min_even_index = i\n        end\n    end\n    if min_even_value == math.huge\
    \ then\n        return {}\n    else\n        return {min_even_value, min_even_index}\n\
    \    end\nend", "  local smallest = math.huge\n  local smallest_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest then\n     \
    \ smallest = v\n      smallest_index = i\n    end\n  end\n  if smallest == math.huge\
    \ then\n    return {}\n  end\n  return {smallest, smallest_index}\nend", "  local\
    \ min = math.huge\n  local min_index = -1\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n \
    \ end\n  if min_index == -1 then\n    return {}\n  else\n    return {min, min_index}\n\
    \  end\nend", "  local smallest = math.huge\n  local smallest_index = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest then\n     \
    \ smallest = v\n      smallest_index = i\n    end\n  end\n  if smallest == math.huge\
    \ then\n    return {}\n  end\n  return {smallest, smallest_index}\nend", "  local\
    \ min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  end\n  return {min, min_idx}\n\
    end", "  local min_even = math.huge\n  local min_even_idx = math.huge\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even then\n      min_even\
    \ = v\n      min_even_idx = i\n    end\n  end\n  if min_even == math.huge then\n\
    \    return {}\n  end\n  return {min_even, min_even_idx}\nend", "  local min =\
    \ math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 and v < min then\n      min = v\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  end\n  return {min, min_index}\n\
    end", "  local min = math.huge\n  local min_idx = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      min_idx = i\n \
    \   end\n  end\n  if min == math.huge then\n    return {}\n  end\n  return {min,\
    \ min_idx}\nend", "  local min = math.huge\n  local min_idx = math.huge\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min = v\n\
    \      min_idx = i\n    end\n  end\n  if min == math.huge then\n    return {}\n\
    \  end\n  return {min, min_idx}\nend", "  local min_even_value, min_even_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even_value\
    \ or v < min_even_value then\n        min_even_value = v\n        min_even_index\
    \ = i\n      end\n    end\n  end\n  if min_even_value then\n    return {min_even_value,\
    \ min_even_index}\n  else\n    return {}\n  end\nend", "  local min = math.huge\n\
    \  local min_idx = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      min_idx = i\n    end\n  end\n  if min\
    \ == math.huge then\n    return {}\n  end\n  return {min, min_idx}\nend", "  local\
    \ min_even = math.huge\n  local min_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even then\n      min_even = v\n      min_index\
    \ = i\n    end\n  end\n  if min_even == math.huge then\n    return {}\n  else\n\
    \    return {min_even, min_index}\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
