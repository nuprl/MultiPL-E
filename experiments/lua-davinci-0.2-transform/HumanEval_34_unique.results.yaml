language: lua
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4a20e965.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp4a20e965.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp4a20e965.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqxbp2_x.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpzqxbp2_x.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp730xg63u.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp730xg63u.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jt_rhir.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp2jt_rhir.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltly7g_w.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpltly7g_w.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpltly7g_w.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp730xg63u.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp730xg63u.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4a20e965.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp4a20e965.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp4a20e965.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4a20e965.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp4a20e965.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp4a20e965.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4a20e965.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp4a20e965.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp4a20e965.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 0
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltly7g_w.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpltly7g_w.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpltly7g_w.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5b1o_iti.lua:7:\
    \ attempt to call global 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp5b1o_iti.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp5b1o_iti.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
