language: lua
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n      prod =\
    \ prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7nmlfdc.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpc7nmlfdc.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhlimg_z.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpmhlimg_z.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42szos33.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp42szos33.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod\
    \ = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod *\
    \ -1\n      sum = sum + math.abs(v)\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn11ez0p.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpxn11ez0p.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n            break\n        elseif v > 0 then\n\
    \            sum = sum + v\n        else\n            sum = sum - v\n        \
    \    prod = prod * -1\n        end\n    end\n    return prod * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ooabkvg.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5ooabkvg.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcx2lrhg.lua:32:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpjcx2lrhg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcx2lrhg.lua:32:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpjcx2lrhg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhlimg_z.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpmhlimg_z.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpgvfhps.lua:32:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmphpgvfhps.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = math.sign(v)\n        if sign ~= 0 then\n            sum = sum + math.abs(v)\n\
    \            prod = prod * sign\n        end\n    end\n    return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4030cqtn.lua:16:\
    \ attempt to call field 'sign' (a nil value)\nstack traceback:\n\t/tmp/tmp4030cqtn.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp4030cqtn.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_cd4xx0.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi_cd4xx0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50e2w3bg.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp50e2w3bg.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhlimg_z.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpmhlimg_z.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    if sum ==\
    \ 0 then\n        return nil\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
