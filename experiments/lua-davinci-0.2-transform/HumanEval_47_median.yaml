name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4, 5})\n\
  -- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local n = #l\n  local m = math.floor(n / 2)\n  if n % 2 == 0 then\n\
    \    return (l[m] + l[m + 1]) / 2\n  else\n    return l[m + 1]\n  end\nend", " \
    \   local n = #l\n    if n == 0 then\n        return nil\n    end\n    local m\
    \ = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1])\
    \ / 2\n    else\n        return l[m + 1]\n    end\nend", "  local t = {}\n  for\
    \ _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n =\
    \ #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n\
    \    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n  local n = #t\n  if\
    \ n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n    return (t[n / 2]\
    \ + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ n = #l\n    if n == 0 then\n        return nil\n    end\n    table.sort(l)\n\
    \    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for i, v\
    \ in ipairs(l) do\n        t[i] = v\n    end\n    table.sort(t)\n    local n =\
    \ #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n \
    \   else\n        return t[(n + 1) / 2]\n    end\nend", "    local n = #l\n  \
    \  if n == 0 then\n        return nil\n    end\n    table.sort(l)\n    if n %\
    \ 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      \
    \  return l[(n + 1) / 2]\n    end\nend", "    local n = #l\n    if n == 0 then\n\
    \        return nil\n    end\n    table.sort(l)\n    if n % 2 == 0 then\n    \
    \    return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1)\
    \ / 2]\n    end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif\
    \ n == 1 then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend", "    local n\
    \ = #l\n    if n == 0 then\n        return nil\n    end\n    table.sort(l)\n \
    \   if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[(n + 1) / 2]\n    end\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    table.insert(t, v)\n  end\n  table.sort(t)\n  local n = #t\n\
    \  if n == 0 then\n    return 0\n  elseif n % 2 == 0 then\n    return (t[n / 2]\
    \ + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local\
    \ n = #l\n    if n == 0 then\n        return nil\n    end\n    table.sort(l)\n\
    \    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[(n + 1) / 2]\n    end\nend", "    local t = {}\n    for _, v\
    \ in ipairs(l) do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend", "    local n = #l\n \
    \   if n == 0 then\n        return nil\n    end\n    local m = math.floor(n /\
    \ 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n\
    \        return l[m + 1]\n    end\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[#t + 1] = v\n    end\n    table.sort(t)\n    local n = #t\n  \
    \  if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend", "    local sorted = sort(l)\n \
    \   local n = #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n  end\n\
    \  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] +\
    \ t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n  end\n  table.sort(t)\n\
    \  local n = #t\n  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) /\
    \ 2\n  else\n    return t[(n + 1) / 2]\n  end\nend", "    local t = {}\n    for\
    \ i, v in ipairs(l) do\n        t[i] = v\n    end\n    table.sort(t)\n    local\
    \ n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n\
    \    else\n        return t[(n + 1) / 2]\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
