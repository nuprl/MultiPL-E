name: HumanEval_83_starts_one_ends
language: lua
prompt: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
  -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
  \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n \
  \   lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
  \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then\n        return 2\n    end\n    local dp = {1, 1}\n\
    \    for i = 2, n do\n        dp[i] = dp[i - 1] + dp[i - 2]\n    end\n    return\
    \ dp[n] * 2\nend", "  local count = 0\n  for i = 1, n do\n    count = count +\
    \ 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  local count = 0\n  local digits\
    \ = {}\n  local function count_ends(i)\n    if i == n then\n      count = count\
    \ + 1\n    else\n      digits[i] = 1\n      count_ends(i + 1)\n      digits[i]\
    \ = 0\n      count_ends(i + 1)\n    end\n  end\n  count_ends(1)\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n\
    \  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local ends = starts_one_ends(n - 1)\n  local starts =\
    \ ends - 1\n  return starts + ends\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n        count = count\
    \ * 9\n    end\n    return count * 2\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    if n == 2 then\n        return 4\n    end\n    local count =\
    \ starts_one_ends(n - 1)\n    count = count + starts_one_ends(n - 2)\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, n do\n    count = count + 9 *\
    \ (10 ^ (i - 1))\n  end\n  return count\nend", "  local count = 0\n  for i = 1,\
    \ 9 do\n    count = count + starts_one_ends(n - 1)\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  return count\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ count = 1\n    for i = 1, n - 1 do\n        count = count * 9\n    end\n   \
    \ return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n   \
    \ if n == 2 then\n        return 4\n    end\n    local count = 4\n    for i =\
    \ 3, n do\n        count = count + (count - 1)\n    end\n    return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  return 9 * (10 ^ (n - 2))\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local dp = {}\n  for i = 1, n do\n    dp[i]\
    \ = {}\n    for j = 1, 9 do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1,\
    \ 9 do\n    dp[1][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, 9 do\n    \
    \  if j == 1 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]\n      elseif\
    \ j == 9 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n      else\n\
    \        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j + 1]\n     \
    \ end\n    end\n  end\n  local sum = 0\n  for i = 1, 9 do\n    sum = sum + dp[n][i]\n\
    \  end\n  return sum\nend", "    if n == 1 then\n        return 2\n    end\n \
    \   if n == 2 then\n        return 3\n    end\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    if n == 2 then\n        return 4\n    end\n  \
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    for i = 1, n - 1\
    \ do\n        count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  \
    \  end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  count = count + 10 ^ (n - 1)\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
