name: HumanEval_83_starts_one_ends
language: lua
prompt: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
  -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
  \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n \
  \   lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
  \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then\n        return 2\n    end\n    local dp = {1, 1}\n\
    \    for i = 2, n do\n        dp[i] = dp[i - 1] + dp[i - 2]\n    end\n    return\
    \ dp[n] * 2\nend", "  local count = 0\n  for i = 1, n do\n    count = count +\
    \ 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  local count = 0\n  local digits\
    \ = {}\n  local function count_ends(i)\n    if i == n then\n      count = count\
    \ + 1\n    else\n      digits[i] = 1\n      count_ends(i + 1)\n      digits[i]\
    \ = 0\n      count_ends(i + 1)\n    end\n  end\n  count_ends(1)\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n\
    \  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local ends = starts_one_ends(n - 1)\n  local starts =\
    \ ends - 1\n  return starts + ends\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n        count = count\
    \ * 9\n    end\n    return count * 2\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    if n == 2 then\n        return 4\n    end\n    local count =\
    \ starts_one_ends(n - 1)\n    count = count + starts_one_ends(n - 2)\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, n do\n    count = count + 9 *\
    \ (10 ^ (i - 1))\n  end\n  return count\nend", "  local count = 0\n  for i = 1,\
    \ 9 do\n    count = count + starts_one_ends(n - 1)\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  return count\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ count = 1\n    for i = 1, n - 1 do\n        count = count * 9\n    end\n   \
    \ return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n   \
    \ if n == 2 then\n        return 4\n    end\n    local count = 4\n    for i =\
    \ 3, n do\n        count = count + (count - 1)\n    end\n    return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  return 9 * (10 ^ (n - 2))\nend", "  if\
    \ n == 1 then\n    return 2\n  end\n  local dp = {}\n  for i = 1, n do\n    dp[i]\
    \ = {}\n    for j = 1, 9 do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1,\
    \ 9 do\n    dp[1][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, 9 do\n    \
    \  if j == 1 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1]\n      elseif\
    \ j == 9 then\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n      else\n\
    \        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j + 1]\n     \
    \ end\n    end\n  end\n  local sum = 0\n  for i = 1, 9 do\n    sum = sum + dp[n][i]\n\
    \  end\n  return sum\nend", "    if n == 1 then\n        return 2\n    end\n \
    \   if n == 2 then\n        return 3\n    end\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    if n == 2 then\n        return 4\n    end\n  \
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    for i = 1, n - 1\
    \ do\n        count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  \
    \  end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  count = count + 10 ^ (n - 1)\n  return count\nend", "    if n == 1 then\n \
    \       return 2\n    end\n    local dp = {1, 1}\n    for i = 2, n do\n      \
    \  dp[i] = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "    if\
    \ n == 1 then\n        return 2\n    end\n    local count = 0\n    local start\
    \ = 10^(n-1)\n    local end_ = 10^(n-2)\n    for i = start, start*10-1 do\n  \
    \      if i % 10 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    for i = 1, end_ do\n        if i % 10 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    if n == 1 then\n   \
    \     return 2\n    end\n    local dp = {1, 1}\n    for i = 2, n do\n        dp[i]\
    \ = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "  local function\
    \ starts_one_ends_rec(n, start, end_)\n    if n == 0 then\n      return 1\n  \
    \  elseif n == 1 then\n      return start + end_\n    else\n      return starts_one_ends_rec(n\
    \ - 1, start, end_) +\n             starts_one_ends_rec(n - 2, start, end_)\n\
    \    end\n  end\n  return starts_one_ends_rec(n, 1, 1)\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\nend",
  "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    local a, b = 2, 4\n    for i = 3, n do\n        a, b = b, a\
    \ + b\n    end\n    return b\nend", "    if n == 1 then\n        return 2\n  \
    \  end\n    local count = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return count\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local count = 0\n  local start = 1\n  local end_\
    \ = 1\n  for i = 1, n - 1 do\n    start = start * 10\n    end_ = end_ * 10 + 1\n\
    \  end\n  count = count + start\n  count = count + end_\n  return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n\
    \    count = count * 10\n  end\n  count = count * 2\n  return count\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n  end\n\
    \  local a = 2\n  local b = 4\n  for i = 3, n do\n    local c = a + b\n    a =\
    \ b\n    b = c\n  end\n  return b\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  local i = 1\n  while i < n do\n    count = count + 9 * starts_one_ends(i)\
    \ * math.pow(10, n - i - 1)\n    i = i + 1\n  end\n  count = count + starts_one_ends(n\
    \ - 1) + math.pow(10, n - 1)\n  return count\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  return 9 * starts_one_ends(n - 1) + 10 ^ (n - 1)\nend", "  if n\
    \ == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n do\n    count\
    \ = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n  return count\n\
    end", "    local count = 0\n    for i = 1, n do\n        count = count + 9 * 10\
    \ ^ (i - 1)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n\
    \  end\n  local count = starts_one_ends(n - 1)\n  count = count + (n - 1) * 9\
    \ * starts_one_ends(n - 2)\n  return count\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\n\
    \  end\n  return count * 2 + math.pow(10, n - 1)\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n   \
    \     count = count + 9 * math.pow(10, i - 1)\n    end\n    return count * 2\n\
    end", "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n   \
    \     return 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for\
    \ i = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend", " \
    \   if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i\
    \ = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  for i = 1, n - 1 do\n    count = count * 9\n  end\n  return\
    \ count * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n\
    \  for i = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend",
  "    if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i =\
    \ 1, n - 1 do\n        count = count + 9 * (9 ^ (i - 1))\n    end\n    return\
    \ count + starts_one_ends(n - 1)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  for i = 1, n - 1 do\n    count = count * 10\n  end\n  return\
    \ count * 2\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n    count = count\
    \ * 10\n  end\n  return count * 2\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    local a, b = 2, 4\n\
    \    for i = 3, n do\n        local c = a + b\n        a, b = b, c\n    end\n\
    \    return b\nend", "  local count = 0\n  for i = 1, n do\n    count = count\
    \ + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n    count = count * 10\n\
    \  end\n  return count * 2\nend", "  local count = 0\n  for i = 1, 9 do\n    count\
    \ = count + count_n_digit_numbers(n - 1)\n  end\n  return count\nend", "  local\
    \ count = 0\n  local digits = {}\n  for i = 1, n do\n    digits[i] = 0\n  end\n\
    \  digits[1] = 1\n  while true do\n    count = count + 1\n    local i = n\n  \
    \  while i > 1 and digits[i] == 9 do\n      digits[i] = 0\n      i = i - 1\n \
    \   end\n    if i == 1 then\n      break\n    end\n    digits[i] = digits[i] +\
    \ 1\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + 9 * 10\
    \ ^ (i - 1)\n    end\n    return count * 2\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  if n == 2 then\n    return 4\n  end\n  local a, b = 2, 4\n  for\
    \ i = 3, n do\n    a, b = b, a + b\n  end\n  return b\nend", "  local function\
    \ starts_one_ends_rec(n, start, end)\n    if n == 0 then\n      return 1\n   \
    \ elseif n == 1 then\n      return start + end\n    else\n      return starts_one_ends_rec(n\
    \ - 1, start, end) * 9 +\n             starts_one_ends_rec(n - 2, start, end)\
    \ * 9\n    end\n  end\n  return starts_one_ends_rec(n, 1, 1)\nend", "  if n ==\
    \ 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n  end\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  local function starts_one_ends_rec(n,\
    \ start, end)\n    if n == 0 then\n      return 1\n    elseif n == 1 then\n  \
    \    return start + end\n    else\n      return starts_one_ends_rec(n - 1, start\
    \ + end, start)\n    end\n  end\n  return starts_one_ends_rec(n, 1, 1)\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n do\n \
    \   count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n \
    \ return count\nend", "    if n == 1 then\n        return 2\n    end\n    if n\
    \ == 2 then\n        return 3\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    if n == 2 then\n        return 3\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n do\n    count = count + starts_one_ends(i -\
    \ 1) * starts_one_ends(n - i)\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, 9 do\n    count = count + starts_one_ends(n - 1)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 1\n    for i = 1, n - 1 do\n        count = count * 9\n    end\n    return\
    \ count * 2\nend", "    if n == 1 then\n        return 2\n    end\n    local a,\
    \ b = 1, 1\n    for i = 2, n do\n        a, b = a + b, a\n    end\n    return\
    \ a + b\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local a = 1\n  local b = 1\n  for i = 2, n do\n    local c = a + b\n    a =\
    \ b\n    b = c\n  end\n  return b + a\nend", "    local count = 0\n    for i =\
    \ 1, n do\n        count = count + 9 * 10 ^ (i - 1)\n    end\n    return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local a, b = 2, 1\n\
    \    for i = 2, n do\n        a, b = a + b, a\n    end\n    return a\nend", " \
    \ local dp = {0, 1, 1, 1, 1, 1, 1, 1, 1, 1}\n  for i = 2, n do\n    dp[i] = dp[i\
    \ - 1] * 9 + 10 ^ (i - 1)\n  end\n  return dp[n]\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local res = 0\n    for i = 1, n - 1 do\n     \
    \   res = res + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return\
    \ res\nend", "    if n == 1 then\n        return 2\n    end\n    local count =\
    \ 0\n    for i = 1, n do\n        count = count + math.pow(10, i - 1)\n    end\n\
    \    return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 1\n    for i = 1, n - 1 do\n        count = count * 9\n   \
    \ end\n    return count * 2\nend", "  local count = 0\n  for i = 1, n do\n   \
    \ count = count + math.pow(10, i - 1)\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n  end\n  return\
    \ count\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "   if n == 1 then\n      return 2\n  \
    \ else\n      return starts_one_ends(n-1) + starts_one_ends(n-2)\n   end\nend",
  "  local function starts_one_ends_rec(n, start, end_)\n    if n == 0 then\n    \
    \  return 1\n    elseif n == 1 then\n      return start + end_\n    else\n   \
    \   return starts_one_ends_rec(n - 1, start, end_) +\n             starts_one_ends_rec(n\
    \ - 2, start, end_)\n    end\n  end\n  return starts_one_ends_rec(n, 1, 1)\nend",
  "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    return 2 * starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n\
    \  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count +\
    \ starts_one_ends(i) * starts_one_ends(n - i)\n    end\n    return count\nend",
  "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n\
    \    count = count * 10\n  end\n  return count * 2\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n   \
    \     count = count * 9\n    end\n    return count * 2\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return count\nend",
  "    if n == 1 then\n        return 2\n    end\n    local sum = 0\n    for i = 1,\
    \ n - 1 do\n        sum = sum + 9 * 10 ^ (i - 1)\n    end\n    return sum * 2\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local a, b = 2, 1\n  for i = 2,\
    \ n do\n    a, b = a + b, a\n  end\n  return a\nend", "    if n == 1 then\n  \
    \      return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n     \
    \   count = count + starts_one_ends(i) * starts_one_ends(n - i)\n    end\n   \
    \ return count\nend", "  if n == 1 then\n    return 2\n  end\n  local count =\
    \ 1\n  for i = 1, n - 1 do\n    count = count * 9\n  end\n  return count * 2\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  -- n = 1: 1\n  -- n = 2: 11, 21, 31,\
    \ 41, 51, 61, 71, 81, 91\n  -- n = 3: 111, 211, 311, 411, 511, 611, 711, 811,\
    \ 911, 121, 221, 321, 421, 521, 621, 721, 821, 921\n  -- n = 4: 1111, 2111, 3111,\
    \ 4111, 5111, 6111, 7111, 8111, 9111, 1211, 2211, 3211, 4211, 5211, 6211, 7211,\
    \ 8211, 9211, 1121, 2121, 3121, 4121, 5121, 6121, 7121, 8121, 9121, 1221, 2221,\
    \ 3221, 4221, 5221, 6221, 7221, 8221, 9221, 1231, 2231, 3231, 4231, 5231, 6231,\
    \ 7231, 8231, 9231, 1241, 2241, 3241, 4241, 5241, 6241, 7241, 8241, 9241, 1251,\
    \ 2251, 3251, 4251, 5251, 6251, 7251, 8251, 9251, 1261, 2261, 3261, 4261, 5261,\
    \ 6261, 7261, 8261, 9261, 1271, 2271, 3271, 4271, 5271, 6271, 7271, 8271, 9271,\
    \ 1281, 2281, 3281, 4281, 5281, 6281, 7281, 8281, 9281, 1291, 2291, 3291, 4291,\
    \ 5291, 6291, 7291, 8291, 9291\n  -- n = 5: 11111, 21111, 31111, 41111, 51111,\
    \ 61111, 71111, 81111, 91111, 12111, 22111, 32111, 42111, 52111, 62111, 72111,\
    \ 82111, 92111, 11211, 21211, 31211, 41211, 51211, 61211, 71211, 81211, 91211,\
    \ 12211, 22211, 32211, 42211, 52211, 62211, 72211, 82211, 92211, 12311", "   \
    \ if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i =\
    \ 1, n do\n        count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local dp = {1, 1}\n    for i = 2, n do\n        dp[i] = dp[i - 1]\
    \ + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "    if n == 1 then\n    \
    \    return 2\n    end\n    if n == 2 then\n        return 4\n    end\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "  if n == 1 then\n \
    \   return 2\n  end\n  if n == 2 then\n    return 3\n  end\n  return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "  local count = 0\n  if n == 1 then\n\
    \    count = 2\n  elseif n == 2 then\n    count = 4\n  else\n    count = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n  end\n  return count\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 1\n  for i = 2, n do\n    count = count\
    \ + 9 * 10 ^ (i - 2)\n  end\n  return count * 2\nend", "    if n == 1 then\n \
    \       return 2\n    end\n    local count = 0\n    for i = 1, n do\n        count\
    \ = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n    end\n    return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for\
    \ i = 1, n - 1 do\n    count = count * 9\n  end\n  return count * 2\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  local a, b = 2, 1\n  for i = 2, n do\n\
    \    a, b = a + b, a\n  end\n  return a\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    if n == 2 then\n        return 4\n    end\n    local a = 2\n\
    \    local b = 4\n    for i = 3, n do\n        local c = a + b\n        a = b\n\
    \        b = c\n    end\n    return b\nend", "    if n == 1 then\n        return\
    \ 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count\
    \ + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 1\n    for i = 1, n - 1 do\n   \
    \     count = count * 9\n    end\n    return count * 2\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  local nines = 9\n  for i = 1, n - 1\
    \ do\n    count = count + nines\n    nines = nines * 10\n  end\n  return count\
    \ * 2\nend", "    if n == 1 then\n        return 2\n    end\n    if n == 2 then\n\
    \        return 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n do\n    count = count + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 4\n  end\n  local dp = {2, 4}\n  for i = 3, n do\n\
    \    dp[i] = dp[i - 1] + dp[i - 2]\n  end\n  return dp[n]\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    count = count + 10^(i - 1)\n  end\n  return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local dp = {0, 0, 0}\n\
    \    dp[1] = 1\n    dp[2] = 2\n    for i = 3, n do\n        dp[i] = dp[i - 1]\
    \ + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "  local count = 0\n  for\
    \ i = 1, 9 do\n    count = count + starts_one_ends(n - 1)\n  end\n  return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 1\n  for i = 1, n - 1 do\n    count = count * 10\n  end\n  return\
    \ count * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local sum = 0\n \
    \ for i = 1, n - 1 do\n    sum = sum + starts_one_ends(i)\n  end\n  return sum\
    \ + 1\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  local count = 0\n  for i = 1, n do\n \
    \   count = count + math.pow(10, i - 1)\n  end\n  return count\nend", "    if\
    \ n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return 4\n\
    \    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\nend", "    if n == 1 then\n        return 2\n    end\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        count = count + 9 * 10 ^ (i - 1)\n   \
    \ end\n    count = count + 10 ^ (n - 1)\n    return count\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    if n == 2 then\n        return 4\n  \
    \  end\n    local dp = {[1] = 2, [2] = 4}\n    for i = 3, n do\n        dp[i]\
    \ = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n]\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = starts_one_ends(n - 1)\n  local start =\
    \ 10 ^ (n - 1)\n  local end_ = start * 10\n  local middle = end_ - start\n  return\
    \ count + start + middle\nend", "  local count = 0\n  for i = 1, n do\n    count\
    \ = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count\
    \ + 9 * 10 ^ (i - 1)\n  end\n  return count * 2\nend", "    if n == 1 then\n \
    \       return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n    \
    \    count = count + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, 9 do\n\
    \    count = count + starts_one_ends(n - 1)\n  end\n  count = count + starts_one_ends(n\
    \ - 1)\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local total = 0\n    for i = 1, n do\n        total = total + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return total\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    for i = 1, n do\n\
    \        count = count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n   \
    \ end\n    return count\nend", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n \
    \   end\n    local count = 0\n    for i = 1, n do\n        count = count + math.pow(2,\
    \ i - 1)\n    end\n    return count\nend", "  local count = 0\n  local digits\
    \ = {}\n  local function recurse(d, i)\n    if i == n then\n      count = count\
    \ + 1\n      return\n    end\n    if i == 0 or i == n - 1 then\n      digits[i]\
    \ = 1\n      recurse(d, i + 1)\n    else\n      for d = 0, 9 do\n        digits[i]\
    \ = d\n        recurse(d, i + 1)\n      end\n    end\n  end\n  recurse(0, 0)\n\
    \  return count\nend", "  if n == 1 then\n    return 2\n  end\n  local d = 10^(n-1)\n\
    \  return d + 9*(d-1)\nend", "  if n == 1 then\n    return 2\n  end\n  local a,\
    \ b = 1, 1\n  for i = 2, n do\n    a, b = a + b, a\n  end\n  return a + b\nend",
  "    if n == 1 then\n        return 2\n    end\n    local dp = {0, 1, 1}\n    for\
    \ i = 3, n do\n        dp[i] = dp[i - 1] + dp[i - 2]\n    end\n    return dp[n]\
    \ * 2\nend", "  local count = 0\n  for i = 1, n do\n    count = count + math.pow(2,\
    \ i - 1)\n  end\n  return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 0\n    for i = 1, n - 1 do\n        count = count\
    \ + 9 * 10 ^ (i - 1)\n    end\n    return count * 2\nend", "  local count = 0\n\
    \  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n  end\n  return count\n\
    end", "    if n == 1 then\n        return 2\n    end\n    local count = 0\n  \
    \  for i = 1, n - 1 do\n        count = count + 9 * 9 ^ (i - 1)\n    end\n   \
    \ return count + starts_one_ends(n - 1)\nend", "  if n == 1 then\n    return 2\n\
    \  end\n  local a, b = 1, 1\n  for i = 2, n do\n    a, b = a + b, a\n  end\n \
    \ return a + b\nend", "  if n == 1 then\n    return 2\n  end\n  local count =\
    \ 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n\
    \  end\n  return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    if n == 2 then\n        return 3\n    end\n  \
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        count = count + 9 * 10 ^ (i - 1)\n    end\n\
    \    return count\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    if n == 2 then\n        return 4\n    end\n  \
    \  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if n ==\
    \ 1 then\n        return 2\n    end\n    local count = 0\n    for i = 1, n - 1\
    \ do\n        count = count + 9 * (10 ^ (i - 1))\n    end\n    return count *\
    \ 2\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for i\
    \ = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend", "  \
    \  if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i =\
    \ 1, n - 1 do\n        count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n    end\n    return count\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local dp = {1, 1}\n    for i = 2, n do\n        dp[i] = dp[i - 1]\
    \ + dp[i - 2]\n    end\n    return dp[n] * 2\nend", "    if n == 1 then\n    \
    \    return 2\n    end\n    local count = 0\n    for i = 1, n - 1 do\n       \
    \ count = count + 9 * 10 ^ (i - 1)\n    end\n    count = count + 10 ^ (n - 1)\n\
    \    return count\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ count = 0\n    for i = 1, n - 1 do\n        count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n    end\n    return count\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    local count = 0\n    local start = 1\n    local\
    \ end_ = 1\n    for i = 1, n - 1 do\n        start = start * 10\n        end_\
    \ = end_ * 10 + 1\n    end\n    count = count + start\n    count = count + end_\n\
    \    return count\nend", "    local count = 0\n    for i = 1, n do\n        count\
    \ = count + 9 * 10 ^ (i - 1)\n    end\n    return count\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  if n == 2 then\n    return 4\n  end\n  local a = 1\n \
    \ local b = 2\n  local c = 4\n  for i = 3, n do\n    local d = a + b + c\n   \
    \ a = b\n    b = c\n    c = d\n  end\n  return c\nend", "    if n == 1 then\n\
    \        return 2\n    end\n    if n == 2 then\n        return 4\n    end\n  \
    \  local a, b = 2, 4\n    for i = 3, n do\n        local c = a + b\n        a,\
    \ b = b, c\n    end\n    return b\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    local a, b = 2, 4\n\
    \    for i = 3, n do\n        a, b = b, a + b\n    end\n    return b\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  local function starts_one_ends_helper(n, start_one, end_one)\n\
    \    if n == 0 then\n      return 1\n    end\n    if start_one and end_one then\n\
    \      return starts_one_ends_helper(n - 1, true, false) +\n             starts_one_ends_helper(n\
    \ - 1, false, true)\n    elseif start_one then\n      return starts_one_ends_helper(n\
    \ - 1, true, false)\n    elseif end_one then\n      return starts_one_ends_helper(n\
    \ - 1, false, true)\n    else\n      return starts_one_ends_helper(n - 1, true,\
    \ false) +\n             starts_one_ends_helper(n - 1, false, true) +\n      \
    \       starts_one_ends_helper(n - 1, false, false)\n    end\n  end\n  return\
    \ starts_one_ends_helper(n, true, false) +\n         starts_one_ends_helper(n,\
    \ false, true)\nend", "    if n == 1 then\n        return 2\n    end\n    local\
    \ a, b = 1, 1\n    for i = 2, n do\n        a, b = b, a + b\n    end\n    return\
    \ a + b\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  local\
    \ start = 10 ^ (n - 1)\n  local end_ = 10 ^ n\n  for i = start, end_ - 1 do\n\
    \    if i % 10 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count * 2\n\
    end", "  -- The number of n-digit numbers that start with 1 is the same as the\
    \ number\n  -- of (n-1)-digit numbers that end with 1.\n  --\n  -- The number\
    \ of n-digit numbers that end with 1 is the same as the number of\n  -- (n-1)-digit\
    \ numbers that start with 1.\n  --\n  -- The number of n-digit numbers that start\
    \ with 1 is the same as the number\n  -- of (n-1)-digit numbers that start with\
    \ 1.\n  --\n  -- The number of n-digit numbers that end with 1 is the same as\
    \ the number of\n  -- (n-1)-digit numbers that end with 1.\n  --\n  -- The number\
    \ of n-digit numbers that start with 1 is the same as the number\n  -- of (n-1)-digit\
    \ numbers that start with 1.\n  --\n  -- The number of n-digit numbers that end\
    \ with 1 is the same as the number of\n  -- (n-1)-digit numbers that end with\
    \ 1.\n  --\n  -- The number of n-digit numbers that start with 1 is the same as\
    \ the number\n  -- of (n-1)-digit numbers that start with 1.\n  --\n  -- The number\
    \ of n-digit numbers that end with 1 is the same as the number of\n  -- (n-1)-digit\
    \ numbers that end with 1.\n  --\n  -- The number of n-digit numbers that start\
    \ with 1 is the same as the number\n  -- of (n-1)-digit numbers that start with\
    \ 1.\n  --\n  -- The number of n-digit numbers that end with 1 is the same as\
    \ the number of\n  -- (n-1)-digit numbers that end with 1.\n  --\n  -- The number\
    \ of n-digit numbers that start with 1 is the same as the number\n  -- of (n-1)-digit\
    \ numbers that start with 1.\n  --\n  -- The number of n-digit numbers that end\
    \ with 1 is the same as the number of\n  -- (n-1)-digit numbers that end with\
    \ 1.\n  --\n  -- The number of n-digit numbers that start with 1 is the same as\
    \ the number\n  -- of (n-1)-digit numbers that start with 1.\n  --\n  -- The number",
  "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for\
    \ i = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend", " \
    \ local count = 0\n  for i = 1, n do\n    count = count + math.pow(10, i - 1)\n\
    \  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 1\n    for i = 1, n - 1 do\n        count = count * 10\n  \
    \  end\n    return count * 2\nend", "  if n == 1 then\n    return 2\n  end\n \
    \ local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, n do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1,\
    \ n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n\
    \  end\n  return count\nend", "    if n == 1 then\n        return 2\n    end\n\
    \    local count = 1\n    for i = 1, n - 1 do\n        count = count * 10\n  \
    \  end\n    return count * 2\nend", "  local count = 0\n  for i = 1, n do\n  \
    \  count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n == 1\
    \ then\n    return 2\n  end\n  local count = 0\n  for i = 1, n do\n    count =\
    \ count + starts_one_ends(i - 1) * starts_one_ends(n - i)\n  end\n  return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 4\n\
    \  end\n  return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", "    if\
    \ n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return 4\n\
    \    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend", " \
    \ if n == 1 then\n    return 2\n  end\n  local count = 0\n  for i = 1, n - 1 do\n\
    \    count = count + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return\
    \ count\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 1\n  for\
    \ i = 1, n - 1 do\n    count = count * 10\n  end\n  return count * 2\nend", " \
    \   if n == 1 then\n        return 2\n    end\n    if n == 2 then\n        return\
    \ 4\n    end\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\nend",
  "    if n == 1 then\n        return 2\n    end\n    local total = 0\n    for i =\
    \ 1, n do\n        total = total + starts_one_ends(i - 1) * starts_one_ends(n\
    \ - i)\n    end\n    return total\nend", "  local count = 0\n  for i = 1, n do\n\
    \    count = count + 9 * 10 ^ (i - 1)\n  end\n  return count\nend", "  if n ==\
    \ 1 then\n    return 2\n  end\n  local count = 1\n  for i = 1, n - 1 do\n    count\
    \ = count * 9\n  end\n  return count * 2\nend", "    local count = 0\n    for\
    \ i = 1, n do\n        count = count + 9 * 10 ^ (i - 1)\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, n do\n        count = count + math.pow(10,\
    \ i - 1)\n    end\n    return count\nend", "  if n == 1 then\n    return 2\n \
    \ end\n  local count = 0\n  for i = 1, n - 1 do\n    count = count + starts_one_ends(i)\
    \ * starts_one_ends(n - i)\n  end\n  return count\nend", "  local count = 0\n\
    \  local i = 1\n  while i <= n do\n    count = count + math.pow(10, i - 1)\n \
    \   i = i + 1\n  end\n  return count\nend", "  -- Base case: n = 1\n  if n ==\
    \ 1 then\n    return 2\n  end", "  if n == 1 then\n    return 2\n  end\n  local\
    \ count = 0\n  for i = 1, n - 1 do\n    count = count + 9 * 10 ^ (i - 1)\n  end\n\
    \  return count * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local count\
    \ = 0\n  for i = 1, n-1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n-i)\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, n do\n    count\
    \ = count + math.pow(10, i - 1)\n  end\n  return count\nend", "  local function\
    \ starts_one_ends_rec(n, start, end)\n    if n == 0 then\n      return 1\n   \
    \ elseif n == 1 then\n      return start + end\n    else\n      return starts_one_ends_rec(n\
    \ - 1, start, end) +\n             starts_one_ends_rec(n - 2, start, end)\n  \
    \  end\n  end\n  return starts_one_ends_rec(n, 1, 1)\nend", "  if n == 1 then\n\
    \    return 2\n  end\n  local total = 0\n  for i = 1, n - 1 do\n    total = total\
    \ + starts_one_ends(i) * starts_one_ends(n - i)\n  end\n  return total\nend",
  "    if n == 1 then\n        return 2\n    end\n    local count = 0\n    for i =\
    \ 1, n - 1 do\n        count = count + 9 * 10 ^ (i - 1)\n    end\n    return count\
    \ * 2\nend", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  for\
    \ i = 1, n - 1 do\n    count = count + starts_one_ends(i) * starts_one_ends(n\
    \ - i)\n  end\n  return count\nend", "  if n == 1 then\n    return 2\n  end\n\
    \  local count = 0\n  local start = 1\n  local end_ = 1\n  for i = 1, n - 1 do\n\
    \    start = start * 10\n    end_ = end_ * 10 + 1\n  end\n  count = count + start\n\
    \  count = count + end_\n  return count\nend", "    local count = 0\n    for i\
    \ = 1, n do\n        count = count + 9 * 10 ^ (i - 1)\n    end\n    return count\n\
    end", "  if n == 1 then\n    return 2\n  end\n  local count = 0\n  local i = 1\n\
    \  while i <= n do\n    count = count + 9 * 10 ^ (i - 1)\n    i = i + 1\n  end\n\
    \  return count * 2\nend", "    if n == 1 then\n        return 2\n    end\n  \
    \  local count = 0\n    for i = 1, n - 1 do\n        count = count + 9 * 10 ^\
    \ (i - 1)\n    end\n    return count * 2\nend", "  if n == 1 then\n    return\
    \ 2\n  end\n  local res = 0\n  for i = 1, n - 1 do\n    res = res + math.pow(10,\
    \ i - 1)\n  end\n  return res * 2\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    if n == 2 then\n        return 4\n    end\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\nend", "    if n == 1 then\n        return 2\n\
    \    end\n    local count = 0\n    for i = 1, n do\n        count = count + starts_one_ends(i\
    \ - 1) * starts_one_ends(n - i)\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
