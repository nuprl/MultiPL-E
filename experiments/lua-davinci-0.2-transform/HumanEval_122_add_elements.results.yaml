language: lua
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local num = arr[i]\n        if num < 100 then\n            sum = sum\
    \ + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local n = arr[i]\n        if n < 100 then\n            sum = sum + n\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ num = arr[i]\n    if num < 100 then\n      sum = sum + num\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local n = arr[i]\n        if n < 100 then\n            sum = sum + n\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local num = arr[i]\n        if num < 100 then\n            sum = sum\
    \ + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
- exit_code: 0
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750280
