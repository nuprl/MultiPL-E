name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are two distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
  \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
  -- false\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        if t[-v] then\n\
    \            return true\n        end\n        t[v] = true\n    end\n    return\
    \ false\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        if s[-v]\
    \ then\n            return true\n        end\n        s[v] = true\n    end\n \
    \   return false\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    if s[-v]\
    \ then\n      return true\n    end\n    s[v] = true\n  end\n  return false\nend",
  "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return\
    \ true\n    end\n    seen[v] = true\n  end\n  return false\nend", "    local seen\
    \ = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n            return\
    \ true\n        end\n        seen[v] = true\n    end\n    return false\nend",
  "    -- TODO: implement this function\nend", "    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "  local seen = {}\n  for i = 1, #l do\n    if seen[-l[i]] then\n      return\
    \ true\n    end\n    seen[l[i]] = true\n  end\n  return false\nend", "    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n        \
    \    return true\n        end\n        seen[v] = true\n    end\n    return false\n\
    end", "    local s = {}\n    for _, v in ipairs(l) do\n        if s[-v] then\n\
    \            return true\n        end\n        s[v] = true\n    end\n    return\
    \ false\nend", "    -- YOUR CODE HERE\n    return false\nend", "    -- YOUR CODE\
    \ HERE\n    local num = 0\n    local num2 = 0\n    for i,v in ipairs(l) do\n \
    \       for j,w in ipairs(l) do\n            if v == -w and i ~= j then\n    \
    \            num = num + 1\n            end\n        end\n    end\n    if num\
    \ > 0 then\n        return true\n    else\n        return false\n    end\nend",
  "    -- YOUR CODE HERE\n    return false\nend", "  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "  -- TODO: implement this function\n  return false\n\
    end", "  -- your code here\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
