language: lua
name: HumanEval_155_even_odd_count
results:
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_tvepv9.lua:11:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpw_tvepv9.lua:11: in function 'candidate'\n\t/tmp/tmpw_tvepv9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  local num = math.abs(num)\n  while\
    \ num > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchjub9br.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpchjub9br.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if num % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = num / 10\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixol0jx5.lua:24:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpixol0jx5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, digit in ipairs(to_digits(num))\
    \ do\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf8blvtt.lua:10:\
    \ attempt to call global 'to_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpsf8blvtt.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpsf8blvtt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 0
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for digit in tostring(num):gmatch(\"\
    %d\") do\n    if tonumber(digit) % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdx3g7xu.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmprdx3g7xu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvymkli5j.lua:12:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvymkli5j.lua:12: in function 'candidate'\n\t/tmp/tmpvymkli5j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, digit in ipairs(to_digits(num)) do\n    \
    \    if digit % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd18k07lx.lua:9:\
    \ attempt to call global 'to_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpd18k07lx.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpd18k07lx.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpikdwwyij.lua:13:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpikdwwyij.lua:13: in function 'candidate'\n\t/tmp/tmpikdwwyij.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750403
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvymkli5j.lua:12:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvymkli5j.lua:12: in function 'candidate'\n\t/tmp/tmpvymkli5j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkz3ustd.lua:11:\
    \ attempt to perform arithmetic on local 'digit' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptkz3ustd.lua:11: in function 'candidate'\n\t/tmp/tmptkz3ustd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local digit\
    \ = num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, digit in ipairs(to_digits(num))\
    \ do\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf8blvtt.lua:10:\
    \ attempt to call global 'to_digits' (a nil value)\nstack traceback:\n\t/tmp/tmpsf8blvtt.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpsf8blvtt.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750403
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750408
