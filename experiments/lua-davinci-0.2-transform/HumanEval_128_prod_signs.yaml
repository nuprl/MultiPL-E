name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given an array arr of integers and you need to return\n-- sum\
  \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
  \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
  -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
  -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n \
    \   sum = sum + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v >\
    \ 0 then\n            prod = prod * 1\n        elseif v < 0 then\n           \
    \ prod = prod * -1\n        else\n            prod = prod * 0\n        end\n \
    \   end\n    return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v\
    \ < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local prod, sum =\
    \ 1, 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n\
    \      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v == 0 then\n            prod = 0\n            break\n      \
    \  elseif v > 0 then\n            sum = sum + v\n        else\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return prod\
    \ * sum\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n\
    \    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      prod = prod * -1\n      sum = sum + v\n    else\n      prod =\
    \ prod * 0\n    end\n  end\n  return prod * sum\nend", "  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n        if v > 0 then\n            prod\
    \ = prod * 1\n        elseif v < 0 then\n            prod = prod * -1\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "    local prod = 1\n    local\
    \ sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n           \
    \ prod = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n    \
    \        prod = prod * -1\n            sum = sum + v\n        else\n         \
    \   prod = prod * 0\n        end\n    end\n    return prod * sum\nend", "    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = math.sign(v)\n        if sign ~= 0 then\n            sum = sum + math.abs(v)\n\
    \            prod = prod * sign\n        end\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum +\
    \ v\n        elseif v < 0 then\n            sum = sum - v\n            prod =\
    \ prod * -1\n        end\n    end\n    return sum * prod\nend", "  local sum =\
    \ 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n     \
    \ sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "    local sum = 0\n    local\
    \ prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        if v > 0 then\n            prod = prod * 1\n        elseif v < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n    end\n    return sum * prod\nend", "    local prod = 1\n    local\
    \ sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n           \
    \ prod = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n    \
    \        prod = prod * -1\n            sum = sum + math.abs(v)\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    if sum == 0 then\n   \
    \     return nil\n    end\n    return prod * sum\nend", "  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum +\
    \ v\n        elseif v < 0 then\n            sum = sum - v\n            prod =\
    \ prod * -1\n        end\n    end\n    return sum * prod\nend", "    local sum\
    \ = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            prod = prod * -1\n        end\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "    local prod = 1\n    local\
    \ sum = 0\n    for i = 1, #arr do\n        local sign = arr[i] > 0 and 1 or arr[i]\
    \ < 0 and -1 or 0\n        prod = prod * sign\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return prod * sum\nend", "    local prod = 1\n    local sum = 0\n\
    \    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod\
    \ * 1\n            sum = sum + v\n        elseif v < 0 then\n            prod\
    \ = prod * -1\n            sum = sum + math.abs(v)\n        else\n           \
    \ prod = prod * 0\n        end\n    end\n    return sum * prod\nend", "  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "    local prod = 1\n\
    \    local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n     \
    \   if num > 0 then\n            prod = prod * 1\n        elseif num < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n        sum = sum + math.abs(num)\n    end\n    return prod * sum\n\
    end", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n\
    \      prod = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend", "  local prod = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0 then\n      prod\
    \ = prod * 1\n      sum = sum + num\n    elseif num < 0 then\n      prod = prod\
    \ * -1\n      sum = sum + math.abs(num)\n    else\n      prod = prod * 0\n   \
    \ end\n  end\n  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  if #arr == 0 then return nil end\n  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    else\n      prod = 0\n    end\n  end\n  return sum * prod\nend", " \
    \ local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend", "  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    else\n      prod =\
    \ 0\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + math.abs(v)\n\
    \    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", " \
    \ local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n\
    \    local sign = arr[i] < 0 and -1 or arr[i] > 0 and 1 or 0\n    sum = sum +\
    \ math.abs(arr[i])\n    prod = prod * sign\n  end\n  return prod == 0 and nil\
    \ or sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum +\
    \ v\n        elseif v < 0 then\n            sum = sum - v\n            prod =\
    \ prod * -1\n        end\n    end\n    return sum * prod\nend", "  local sum =\
    \ 0\n  local prod = 1\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >\
    \ 0 then\n      sum = sum + n\n    elseif n < 0 then\n      sum = sum - n\n  \
    \    prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local product = 1\n    for _, v in ipairs(arr) do\n    \
    \    if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n   \
    \         sum = sum - v\n            product = product * -1\n        end\n   \
    \ end\n    return sum * product\nend", "  local sum = 0\n  local prod = 1\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v\
    \ < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + v\n        elseif v < 0 then\n            prod = prod * -1\n            sum\
    \ = sum + math.abs(v)\n        else\n            prod = prod * 0\n        end\n\
    \    end\n    if sum == 0 then\n        return nil\n    end\n    return prod *\
    \ sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n\
    \    sum = sum + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return sum * prod\nend", "  if #arr == 0 then return nil end\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod = prod * -1\n \
    \   end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local n = arr[i]\n    if n == 0 then\n      prod = 0\n    elseif n < 0 then\n\
    \      prod = prod * -1\n    end\n    sum = sum + math.abs(n)\n  end\n  return\
    \ prod * sum\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * sign\n    end\n    return prod == 0 and\
    \ nil or sum * prod\nend", "    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + math.abs(v)\n\
    \    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", " \
    \ local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend", "    if #arr == 0 then\n        return\
    \ nil\n    end\n    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend", "    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum + v\n \
    \       elseif v < 0 then\n            sum = sum - v\n            prod = prod\
    \ * -1\n        end\n    end\n    return sum * prod\nend", "  local prod = 1\n\
    \  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod\
    \ = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod *\
    \ -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n  end\n \
    \ return prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then\n      prod = 0\n    elseif v > 0 then\n      prod =\
    \ prod * 1\n    else\n      prod = prod * -1\n    end\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "  local sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum\
    \ * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n       \
    \ if v < 0 then\n            prod = prod * -1\n        elseif v > 0 then\n   \
    \         prod = prod * 1\n        else\n            prod = prod * 0\n       \
    \ end\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    if n > 0 then\n      sum = sum + n\n    elseif n < 0 then\n      sum = sum\
    \ - n\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n      prod =\
    \ prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if\
    \ v == 0 then\n      prod = 0\n    elseif v > 0 then\n      prod = prod * 1\n\
    \    else\n      prod = prod * -1\n    end\n    sum = sum + math.abs(v)\n  end\n\
    \  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n\
    \      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\n\
    end", "  local sum = 0\n  local product = 1\n  for _, v in ipairs(arr) do\n  \
    \  if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum\
    \ - v\n      product = product * -1\n    end\n  end\n  return sum * product\n\
    end", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n\
    \      prod = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    local n = arr[i]\n    if n > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + n\n    elseif n < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ -n\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "    if #arr == 0 then\n        return nil\n    end\n\
    \    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n     \
    \   sum = sum + math.abs(v)\n        if v > 0 then\n            prod = prod *\
    \ 1\n        elseif v < 0 then\n            prod = prod * -1\n        else\n \
    \           prod = prod * 0\n        end\n    end\n    return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n\
    \      sum = sum + arr[i]\n    elseif arr[i] < 0 then\n      sum = sum - arr[i]\n\
    \      prod = prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod\
    \ * sum\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend", "  if #arr == 0 then return nil end\n  local prod\
    \ = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n    \
    \  prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod\
    \ * -1\n      sum = sum + -v\n    end\n  end\n  return sum * prod\nend", "  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return sum * prod\nend", "    local prod = 1\n    local sum = 0\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod\
    \ * 1\n            sum = sum + v\n        elseif v < 0 then\n            prod\
    \ = prod * -1\n            sum = sum + v\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return prod * sum\nend", "  local sum = 0\n \
    \ local prod = 1\n  for _, v in ipairs(arr) do\n    local sign = v > 0 and 1 or\
    \ v < 0 and -1 or 0\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n\
    \  return prod == 0 and nil or sum * prod\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v > 0\
    \ then\n      prod = prod * 1\n    elseif v < 0 then\n      prod = prod * -1\n\
    \    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\nend", " \
    \ local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ > 0 and 1 or arr[i] < 0 and -1 or 0\n    prod = prod * sign\n    sum = sum +\
    \ math.abs(arr[i])\n  end\n  return prod * sum\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod = 0\n\
    \    else\n      sum = sum + math.abs(v)\n      prod = prod * (v > 0 and 1 or\
    \ -1)\n    end\n  end\n  return prod * sum\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _,v\
    \ in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0\
    \ then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n\
    \    local n = arr[i]\n    if n > 0 then\n      sum = sum + n\n    elseif n <\
    \ 0 then\n      sum = sum - n\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1 or 0\n   \
    \ sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n  return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local prod\
    \ = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    local sign = v > 0 and\
    \ 1 or v < 0 and -1 or 0\n    prod = prod * sign\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n \
    \   else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", " \
    \ local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n    \
    \  prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "    local sum\
    \ = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            prod = prod * -1\n        end\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum\
    \ = sum + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif v\
    \ < 0 then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + v\n  \
    \  else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", " \
    \ local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n    \
    \  prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "    if #arr ==\
    \ 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n        prod = prod * (v == 0 and 1 or\
    \ v / math.abs(v))\n    end\n    return sum * prod\nend", "  local sum = 0\n \
    \ local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum =\
    \ sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n\
    \    end\n  end\n  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "    local sum = 0\n    local\
    \ prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n          \
    \  sum = sum + v\n        elseif v < 0 then\n            sum = sum - v\n     \
    \       prod = prod * -1\n        end\n    end\n    return sum * prod\nend", " \
    \   local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n      \
    \  if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n     \
    \       sum = sum - v\n            prod = prod * -1\n        end\n    end\n  \
    \  return sum * prod\nend", "  if #arr == 0 then return nil end\n  local sum,\
    \ prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n  \
    \  end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v == 0 then\n            prod = 0\n        else\n            prod = prod\
    \ * (v / math.abs(v))\n            sum = sum + math.abs(v)\n        end\n    end\n\
    \    return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in\
    \ ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v > 0 then\n      prod =\
    \ prod * 1\n    elseif v < 0 then\n      prod = prod * -1\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return sum * prod\nend", "    local sum = 0\n\
    \    local prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n \
    \           sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            prod = prod * -1\n        end\n    end\n    return sum * prod\n\
    end", "  local sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local prod = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + math.abs(v)\n    else\n      prod = prod * 0\n    end\n  end\n\
    \  return prod * sum\nend", "    local sum = 0\n    local prod = 1\n    for _,\
    \ v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\n\
    \            prod = prod * 1\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n        else\n            prod = prod * 0\n        end\n    end\n    return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    local sign = v > 0 and 1 or v < 0 and -1 or 0\n    sum = sum + math.abs(v)\n\
    \    prod = prod * sign\n  end\n  return prod == 0 and nil or sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return prod * sum\nend", "    local prod = 1\n\
    \    local sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n  \
    \          prod = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n\
    \            prod = prod * -1\n            sum = sum + v\n        else\n     \
    \       prod = prod * 0\n        end\n    end\n    return prod * sum\nend", " \
    \ local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n    \
    \  prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "    local prod\
    \ = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n\
    \            prod = prod * -1\n        elseif v > 0 then\n            prod = prod\
    \ * 1\n        else\n            prod = prod * 0\n        end\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod * sum\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for i\
    \ = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum = sum + n\n\
    \    elseif n < 0 then\n      sum = sum - n\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n      \
    \      sum = sum - v\n            prod = prod * -1\n        end\n    end\n   \
    \ return sum * prod\nend", "  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    else\n      prod = 0\n    end\n  end\n\
    \  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + -v\n   \
    \ else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  if #arr == 0 then return\
    \ nil end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n \
    \   if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      prod = prod * -1\n      sum = sum + -v\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n\
    \    elseif v < 0 then\n      prod = prod * -1\n    else\n      prod = prod *\
    \ 0\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local n\
    \ = arr[i]\n        if n > 0 then\n            sum = sum + n\n        elseif n\
    \ < 0 then\n            sum = sum - n\n            prod = prod * -1\n        end\n\
    \    end\n    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ -v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n\
    \      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\n\
    end", "  if #arr == 0 then return nil end\n  local sum, prod = 0, 1\n  for _,\
    \ v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    prod = prod * (v == 0\
    \ and 1 or v / math.abs(v))\n  end\n  return sum * prod\nend", "    if #arr ==\
    \ 0 then\n        return nil\n    end\n    local sum = 0\n    local prod = 1\n\
    \    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v\
    \ > 0 then\n            prod = prod * 1\n        elseif v < 0 then\n         \
    \   prod = prod * -1\n        else\n            prod = prod * 0\n        end\n\
    \    end\n    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + v\n  \
    \  else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", " \
    \ local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n  \
    \    prod = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 then\n      prod = prod * 1\n      sum = sum + arr[i]\n   \
    \ elseif arr[i] < 0 then\n      prod = prod * -1\n      sum = sum + arr[i] * -1\n\
    \    else\n      prod = prod * 0\n    end\n  end\n  if #arr == 0 then\n    return\
    \ nil\n  else\n    return sum * prod\n  end\nend", "    if #arr == 0 then\n  \
    \      return nil\n    end\n    local prod = 1\n    local sum = 0\n    for _,\
    \ v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n  \
    \      elseif v < 0 then\n            prod = prod * -1\n        else\n       \
    \     prod = prod * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    return sum * prod\nend", "    if #arr == 0 then\n        return nil\n   \
    \ end\n    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n        elseif v < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n        sum = sum + math.abs(v)\n    end\n    return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    local x = arr[i]\n\
    \    if x > 0 then\n      sum = sum + x\n    elseif x < 0 then\n      sum = sum\
    \ - x\n      prod = prod * -1\n    else\n      prod = 0\n    end\n  end\n  return\
    \ prod * sum\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        end\n    end\n    return sum\
    \ * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "    local sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  prod = prod * sign\n    end\n    return sum * prod\nend", "    local sum =\
    \ 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            prod = prod * -1\n        end\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    prod = prod * (v < 0 and -1 or v > 0 and\
    \ 1 or 0)\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod =\
    \ 1\n  for _, v in ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1\
    \ or 0\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n  return prod\
    \ == 0 and nil or sum * prod\nend", "  if #arr == 0 then return nil end\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then prod = prod * 1\n    elseif v < 0 then prod = prod * -1\n \
    \   end\n  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1 or 0\n    prod\
    \ = prod * sign\n    sum = sum + math.abs(v)\n  end\n  return prod == 0 and nil\
    \ or prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      prod = prod * -1\n      sum = sum + v\n    else\n      prod\
    \ = prod * 0\n    end\n  end\n  return prod * sum\nend", "    local sum = 0\n\
    \    local prod = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n \
    \           sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            prod = prod * -1\n        end\n    end\n    return sum * prod\n\
    end", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + math.abs(v)\n        else\n            prod = prod * 0\n        end\n    end\n\
    \    return prod * sum\nend", "    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = (v > 0 and 1) or (v < 0 and -1) or 0\n        sum =\
    \ sum + math.abs(v)\n        prod = prod * sign\n    end\n    return sum * prod\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if\
    \ v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for i = 1, #arr do\n    local n = arr[i]\n    if n\
    \ > 0 then\n      sum = sum + n\n    elseif n < 0 then\n      sum = sum - n\n\
    \      prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n   \
    \   sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod\
    \ * -1\n    end\n  end\n  return sum * prod\nend", "    if #arr == 0 then\n  \
    \      return nil\n    end\n    local prod = 1\n    local sum = 0\n    for _,\
    \ v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n  \
    \      elseif v < 0 then\n            prod = prod * -1\n        else\n       \
    \     prod = prod * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum + v\n    else\n\
    \      prod = prod * 0\n    end\n  end\n  return prod * sum\nend", "  local sum,\
    \ prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n  \
    \  end\n  end\n  return sum * prod\nend", "  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n    \
    \  sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + -v\n    else\n      prod = prod * 0\n    end\n  end\n  return prod * sum\n\
    end", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    local\
    \ sign = v > 0 and 1 or v < 0 and -1 or 0\n    prod = prod * sign\n    sum = sum\
    \ + math.abs(v)\n  end\n  return prod * sum\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n\
    \    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _,\
    \ n in ipairs(arr) do\n    if n > 0 then\n      sum = sum + n\n    elseif n <\
    \ 0 then\n      sum = sum - n\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n\
    \      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return\
    \ sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n\
    \    local n = arr[i]\n    if n > 0 then\n      sum = sum + n\n    elseif n <\
    \ 0 then\n      sum = sum - n\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  if #arr == 0 then return nil end\n  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if\
    \ v > 0 then prod = prod * 1\n    elseif v < 0 then prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "    local sum, prod = 0, 1\n    for _, v in\
    \ ipairs(arr) do\n        if v > 0 then\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            sum = sum - v\n            prod = prod * -1\n      \
    \  end\n    end\n    return sum * prod\nend", "  local sum = 0\n  local prod =\
    \ 1\n  for _, v in ipairs(arr) do\n    local sign = (v > 0 and 1) or (v < 0 and\
    \ -1) or 0\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n  return\
    \ sum * prod\nend", "  if #arr == 0 then return nil end\n  local sum = 0\n  local\
    \ prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum +\
    \ v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
