language: lua
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local lower = math.min(a, b)\n    local upper = math.max(a,\
    \ b)\n    for i = lower, upper do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5plbut2.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpk5plbut2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local result = {}\n  local min = math.min(a, b)\n  local max = math.max(a, b)\n\
    \  for i = min, max do\n    if i % 2 == 0 then\n      table.insert(result, i)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp466qvlyj.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp466qvlyj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local stop = math.max(a,\
    \ b)\n    for i = start, stop do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ue9_5q.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp71ue9_5q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min, max = math.min(a, b), math.max(a, b)\n \
    \   for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4xk9pd2.lua:24:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpw4xk9pd2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local finish = math.max(a,\
    \ b)\n    for i = start, finish do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplytc5ddj.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmplytc5ddj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local finish = math.max(a,\
    \ b)\n    for i = start, finish do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplytc5ddj.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmplytc5ddj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local stop = math.max(a,\
    \ b)\n    for i = start, stop do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ue9_5q.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp71ue9_5q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local integers = {}\n    local start = math.min(a, b)\n    local finish =\
    \ math.max(a, b)\n    for i = start, finish do\n        if i % 2 == 0 then\n \
    \           table.insert(integers, i)\n        end\n    end\n    return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
    \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7up8sex.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpa7up8sex.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    if a > b then\n        a, b = b, a\n    end\n    for\
    \ i = a, b do\n        if i % 2 == 0 then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50p2h188.lua:26:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp50p2h188.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local result = {}\n  local min = math.min(a, b)\n  local max = math.max(a, b)\n\
    \  for i = min, max do\n    if i % 2 == 0 then\n      table.insert(result, i)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp466qvlyj.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp466qvlyj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local stop = math.max(a,\
    \ b)\n    for i = start, stop do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ue9_5q.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp71ue9_5q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local stop = math.max(a,\
    \ b)\n    for i = start, stop do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ue9_5q.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp71ue9_5q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \ local result = {}\n  local min, max = math.min(a, b), math.max(a, b)\n  for\
    \ i = min, max do\n    if i % 2 == 0 then\n      table.insert(result, i)\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2,\
    \ 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132,\
    \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7p9_ibc.lua:24:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpq7p9_ibc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local min = math.min(a, b)\n    local max = math.max(a,\
    \ b)\n    for i = min, max do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41ne9_3a.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp41ne9_3a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
- exit_code: 1
  program: "-- Given two positive integers a and b, return the even digits between\
    \ a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2,\
    \ 8)\n-- {2, 4, 6, 8}\n-- >>> generate_integers(8, 2)\n-- {2, 4, 6, 8}\n-- >>>\
    \ generate_integers(10, 14)\n-- {}\nlocal function generate_integers(a, b)\n \
    \   local result = {}\n    local start = math.min(a, b)\n    local stop = math.max(a,\
    \ b)\n    for i = start, stop do\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2,\
    \ 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n  \
    \  lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
    \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ue9_5q.lua:25:\
    \ expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp71ue9_5q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750341
