name: HumanEval_41_car_race_collision
language: lua
prompt: "-- Imagine a road that's a perfectly straight infinitely long line.\n-- n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n--\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  -- each other.  All cars move in the same speed.  Two cars are said to collide\n\
  -- when a car that's moving left to right hits a car that's moving right to left.\n\
  -- However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n-- in their trajectory as if they did not collide.\n-- This function outputs\
  \ the number of such collisions.\nlocal function car_race_collision(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
  \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n  \
  \  lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n  \
  \  lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local left_to_right = {}\n    local right_to_left = {}\n    for\
    \ i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = i\n  \
    \  end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "   local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \      if n == 0 then\n         return 0\n      else\n         local left_to_right_collision\
    \ = car_race_collision_helper(n-1, left_to_right+1, right_to_left)\n         local\
    \ right_to_left_collision = car_race_collision_helper(n-1, left_to_right, right_to_left+1)\n\
    \         return left_to_right_collision + right_to_left_collision\n      end\n\
    \   end\n   return car_race_collision_helper(n, 0, 0)\nend", "    local t = {}\n\
    \    for i = 1, n do\n        t[i] = i\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if t[i] == t[j] then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local result = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            if i == j then\n             \
    \   result = result + 1\n            end\n        end\n    end\n    return result\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ collisions = 0\n    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                collisions =\
    \ collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n   \
    \         if i == j then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = i\n    end\n    local collision = 0\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local collisions = 0\n  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for j =\
    \ 1, n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n   \
    \ local count = 0\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ left_to_right[i] == right_to_left[j] then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "  local n = n or\
    \ 0\n  local collisions = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ - i + 1\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_collision = car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left)\n            local right_to_left_collision\
    \ = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)\n     \
    \       return left_to_right_collision + right_to_left_collision\n        end\n\
    \    end\n    return car_race_collision_helper(n, 0, 0)\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local count = 0\n  for i = 1,\
    \ n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j] then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \   local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "   local n = n or 1\n   local n_collision = 0\n   local n_car_left_to_right\
    \ = n\n   local n_car_right_to_left = n\n   local car_left_to_right = {}\n   local\
    \ car_right_to_left = {}\n   for i = 1, n do\n      car_left_to_right[i] = i\n\
    \      car_right_to_left[i] = i\n   end\n   while n_car_left_to_right > 0 and\
    \ n_car_right_to_left > 0 do\n      local car_left_to_right_idx = 1\n      local\
    \ car_right_to_left_idx = 1\n      while car_left_to_right_idx <= n_car_left_to_right\
    \ and car_right_to_left_idx <= n_car_right_to_left do\n         if car_left_to_right[car_left_to_right_idx]\
    \ == car_right_to_left[car_right_to_left_idx] then\n            n_collision =\
    \ n_collision + 1\n            car_left_to_right_idx = car_left_to_right_idx +\
    \ 1\n            car_right_to_left_idx = car_right_to_left_idx + 1\n         elseif\
    \ car_left_to_right[car_left_to_right_idx] < car_right_to_left[car_right_to_left_idx]\
    \ then\n            car_left_to_right_idx = car_left_to_right_idx + 1\n      \
    \   else\n            car_right_to_left_idx = car_right_to_left_idx + 1\n    \
    \     end\n      end\n      n_car_left_to_right = n_car_left_to_right - 1\n  \
    \    n_car_right_to_left = n_car_right_to_left - 1\n   end\n   return n_collision\n\
    end", "    local collisions = 0\n    local cars = {}\n    for i = 1, n do\n  \
    \      cars[i] = {\n            x = math.random(),\n            dir = 1\n    \
    \    }\n    end\n    for i = n + 1, 2 * n do\n        cars[i] = {\n          \
    \  x = math.random(),\n            dir = -1\n        }\n    end\n    for i = 1,\
    \ 2 * n do\n        for j = i + 1, 2 * n do\n            if cars[i].dir ~= cars[j].dir\
    \ and cars[i].x == cars[j].x then\n                collisions = collisions + 1\n\
    \            end\n        end\n    end\n    return collisions\nend", "  local\
    \ collisions = 0\n  local cars_left = {}\n  local cars_right = {}\n  for i = 1,\
    \ n do\n    cars_left[i] = i\n    cars_right[i] = i\n  end\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if cars_left[i] == cars_right[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ function car_race_collision_helper(n, left_to_right, right_to_left)\n    if\
    \ n == 0 then\n      return 0\n    else\n      local left_to_right_next = left_to_right\
    \ + 1\n      local right_to_left_next = right_to_left + 1\n      local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n      local right_to_left_collision =\
    \ right_to_left_next - left_to_right\n      local collision = left_to_right_collision\
    \ + right_to_left_collision\n      return collision + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n    end\n  end\n  return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local collisions = 0\n    local cars = {}\n\
    \    for i = 1, n do\n        cars[i] = {\n            x = math.random() * 1000000,\n\
    \            v = math.random() * 1000000\n        }\n    end\n    for i = 1, n\
    \ do\n        for j = 1, n do\n            if cars[i].v > 0 and cars[j].v < 0\
    \ then\n                local dx = cars[i].x - cars[j].x\n                local\
    \ dv = cars[i].v - cars[j].v\n                if dx * dv > 0 then\n          \
    \          collisions = collisions + 1\n                end\n            end\n\
    \        end\n    end\n    return collisions\nend", "    local left_to_right =\
    \ {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    -- TODO: implement this function\n    return\
    \ 0\nend", "    local collisions = 0\n    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            dir = 1\n        }\n    end\n    for i =\
    \ n + 1, 2 * n do\n        cars[i] = {\n            x = math.random(),\n     \
    \       dir = -1\n        }\n    end\n    local count = 0\n    for i = 1, n do\n\
    \        for j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n     \
    \       if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local n = n or 0\n    local collisions = 0\n    local cars = {}\n \
    \   local i = 1\n    while i <= n do\n        cars[i] = {\n            x = 0,\n\
    \            v = 1,\n        }\n        i = i + 1\n    end\n    i = 1\n    while\
    \ i <= n do\n        cars[i + n] = {\n            x = 0,\n            v = -1,\n\
    \        }\n        i = i + 1\n    end\n    local i = 1\n    while i <= n * 2\
    \ do\n        local j = i + 1\n        while j <= n * 2 do\n            if cars[i].v\
    \ ~= cars[j].v then\n                if cars[i].x == cars[j].x then\n        \
    \            collisions = collisions + 1\n                end\n            end\n\
    \            j = j + 1\n        end\n        i = i + 1\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars_left = {}\n    local\
    \ cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left[i] == cars_right[j] then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local t = {}\n    local i = 1\n    local j = n\n    local count = 0\n    while\
    \ i <= n do\n        if t[i] == nil then\n            t[i] = true\n        else\n\
    \            count = count + 1\n        end\n        if t[j] == nil then\n   \
    \         t[j] = true\n        else\n            count = count + 1\n        end\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return count\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collision = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collision = collision + 1\n      end\n    end\n  end\n  return\
    \ collision\nend", "    local n = n or 1\n    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    local collision = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  if left_to_right[i] > right_to_left[i] then\n            collisions = collisions\
    \ + 1\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    local collision = 0\n    for i = 1,\
    \ n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n \
    \   end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {x = 0, dir\
    \ = 1}\n    end\n    for i = 1, n do\n        cars[i + n] = {x = 0, dir = -1}\n\
    \    end\n    while true do\n        local all_done = true\n        for i = 1,\
    \ 2 * n do\n            cars[i].x = cars[i].x + cars[i].dir\n            for j\
    \ = i + 1, 2 * n do\n                if cars[i].x == cars[j].x then\n        \
    \            collisions = collisions + 1\n                end\n            end\n\
    \            if cars[i].x ~= 0 then\n                all_done = false\n      \
    \      end\n        end\n        if all_done then\n            break\n       \
    \ end\n    end\n    return collisions\nend", "    local collisions = 0\n    local\
    \ cars_left = {}\n    local cars_right = {}\n    for i = 1, n do\n        cars_left[i]\
    \ = i\n        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n     \
    \   for j = 1, n do\n            if cars_left[i] == cars_right[j] then\n     \
    \           collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local collisions = 0\n    local cars_left_to_right\
    \ = {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local cars_left\
    \ = {}\n  local cars_right = {}\n  local collisions = 0\n  for i = 1, n do\n \
    \   cars_left[i] = math.random()\n    cars_right[i] = math.random()\n  end\n \
    \ table.sort(cars_left)\n  table.sort(cars_right)\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left[i] < cars_right[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ collisions = 0\n  local cars = {}\n  local car_id = 1\n  for i = 1, n do\n \
    \   cars[car_id] = {\n      id = car_id,\n      direction = \"left\",\n      position\
    \ = -i,\n    }\n    car_id = car_id + 1\n  end\n  for i = 1, n do\n    cars[car_id]\
    \ = {\n      id = car_id,\n      direction = \"right\",\n      position = i,\n\
    \    }\n    car_id = car_id + 1\n  end\n  local function move_cars()\n    for\
    \ _, car in pairs(cars) do\n      if car.direction == \"left\" then\n        car.position\
    \ = car.position + 1\n      else\n        car.position = car.position - 1\n  \
    \    end\n    end\n  end\n  local function check_for_collisions()\n    local car_positions\
    \ = {}\n    for _, car in pairs(cars) do\n      if car_positions[car.position]\
    \ then\n        collisions = collisions + 1\n      else\n        car_positions[car.position]\
    \ = true\n      end\n    end\n  end\n  local function print_cars()\n    local\
    \ positions = {}\n    for _, car in pairs(cars) do\n      positions[car.position]\
    \ = car.direction\n    end\n    local min_position = math.huge\n    local max_position\
    \ = -math.huge\n    for position, _ in pairs(positions) do\n      if position\
    \ < min_position then\n        min_position = position\n      end\n      if position\
    \ > max_position then\n        max_position = position\n      end\n    end\n \
    \   local line = \"\"\n    for i = min_position, max_position do\n      if positions[i]\
    \ == \"left\" then\n        line = line .. \"<\"\n      elseif positions[i] ==\
    \ \"right\" then\n        line = line .. \">\"\n      else\n        line = line\
    \ .. \" \"\n      end\n    end\n    print(line)\n  end\n  while true do\n    move_cars()\n\
    \    check_for_collisions()\n    print_cars()\n    if collisions > 0 then", " \
    \ local n = n or 0\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if i == j then\n        collisions = collisions + 1\n      end\n\
    \    end\n  end\n  return collisions\nend", "    local left_to_right = {}\n  \
    \  local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local count = 0\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if i == j then\n                count =\
    \ count + 1\n            end\n        end\n    end\n    return count\nend", " \
    \   local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = i\n    end\n    local\
    \ count = 0\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    local collisions = 0\n    for i = 1,\
    \ n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n \
    \   end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n        if n ==\
    \ 0 then\n            return 0\n        else\n            local left_to_right_collision\
    \ = car_race_collision_helper(n - 1, left_to_right + 1, right_to_left)\n     \
    \       local right_to_left_collision = car_race_collision_helper(n - 1, left_to_right,\
    \ right_to_left + 1)\n            return left_to_right_collision + right_to_left_collision\n\
    \        end\n    end\n    return car_race_collision_helper(n, 0, 0)\nend", " \
    \ local left_to_right = {}\n  local right_to_left = {}\n  local collisions = 0\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local count = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if i > j then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local collisions = 0\n    local cars_left = {}\n    local cars_right = {}\n\
    \    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i] = i\n  \
    \  end\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left[i]\
    \ == cars_right[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "  local collisions\
    \ = 0\n  local cars_left_to_right = {}\n  local cars_right_to_left = {}\n  for\
    \ i = 1, n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i] = n +\
    \ 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        collisions = collisions + 1\n      end\n\
    \    end\n  end\n  return collisions\nend", "    local left_to_right = {}\n  \
    \  local right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n \
    \       left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n\
    \    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local collisions = 0\n  local cars_left_to_right = {}\n\
    \  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "  local count = 0\n  local cars_left_to_right = {}\n  local cars_right_to_left\
    \ = {}\n  for i = 1, n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local count = 0\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ left_to_right[i] == right_to_left[j] then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local a = {}\n    local b = {}\n    for i = 1, n do\n\
    \        a[i] = math.random()\n        b[i] = math.random()\n    end\n    table.sort(a)\n\
    \    table.sort(b)\n    local i = 1\n    local j = 1\n    local count = 0\n  \
    \  while i <= n and j <= n do\n        if a[i] < b[j] then\n            count\
    \ = count + 1\n            i = i + 1\n        else\n            j = j + 1\n  \
    \      end\n    end\n    return count\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local n_collisions\
    \ = 0\n    local car_positions = {}\n    for i = 1, n do\n        car_positions[i]\
    \ = i\n    end\n    for i = 1, n do\n        car_positions[n + i] = -i\n    end\n\
    \    table.sort(car_positions)\n    for i = 1, n do\n        n_collisions = n_collisions\
    \ + i - 1\n    end\n    return n_collisions\nend", "    local count = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if i == j then\n         \
    \       count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  local i = 1\n  local j = 1\n  while i <= n and j <= n do\n\
    \    if left_to_right[i] < right_to_left[j] then\n      collisions = collisions\
    \ + 1\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collision\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "  local n = n or 0\n  local n_collisions = 0\n  local cars_left = {}\n\
    \  local cars_right = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i]\
    \ = i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left[i] ==\
    \ cars_right[j] then\n        n_collisions = n_collisions + 1\n      end\n   \
    \ end\n  end\n  return n_collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  local i = 1\n  local j\
    \ = 1\n  while i <= n and j <= n do\n    if cars_left_to_right[i] < cars_right_to_left[j]\
    \ then\n      collisions = collisions + 1\n      i = i + 1\n    else\n      j\
    \ = j + 1\n    end\n  end\n  return collisions\nend", "    local collisions =\
    \ 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n  \
    \  for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local i = 1\n    local j = n\n    local collisions =\
    \ 0\n    while i <= n and j >= 1 do\n        if i == j then\n            collisions\
    \ = collisions + 1\n        end\n        i = i + 1\n        j = j - 1\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars_left = {}\n\
    \  local cars_right = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left[i]\
    \ == cars_right[j] then\n        collisions = collisions + 1\n      end\n    end\n\
    \  end\n  return collisions\nend", "    local function car_race_collision_helper(n,\
    \ i, j)\n        if i == n and j == n then\n            return 0\n        elseif\
    \ i == n then\n            return car_race_collision_helper(n, i, j + 1)\n   \
    \     elseif j == n then\n            return car_race_collision_helper(n, i +\
    \ 1, j)\n        else\n            return car_race_collision_helper(n, i + 1,\
    \ j) + car_race_collision_helper(n, i, j + 1)\n        end\n    end\n    return\
    \ car_race_collision_helper(n, 1, 1)\nend", "    local collisions = 0\n    local\
    \ cars_left_to_right = {}\n    local cars_right_to_left = {}\n    for i = 1, n\
    \ do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i] = n + 1\
    \ - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n                collisions = collisions + 1\n\
    \            end\n        end\n    end\n    return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local n = n or 0\n    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local n = n or 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = i\n    end\n    local collision = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if left_to_right[i] == right_to_left[j] then\n        collision = collision\
    \ + 1\n      end\n    end\n  end\n  return collision\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n - i + 1\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    local collisions = 0\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collision = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local count = 0\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if i == j then\n                count =\
    \ count + 1\n            end\n        end\n    end\n    return count\nend", " \
    \ local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n  \
    \  left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions\
    \ = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local collisions = 0\n    local cars_left_to_right =\
    \ {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local count\
    \ = 0\n  for i = 1, n do\n    for j = 1, n do\n      if i == j then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "  local collisions\
    \ = 0\n  local cars_left = {}\n  local cars_right = {}\n  for i = 1, n do\n  \
    \  cars_left[i] = i\n    cars_right[i] = n + 1 - i\n  end\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if cars_left[i] == cars_right[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = i\n  end\n  local collisions = 0\n  for i = 1, n\
    \ do\n    local l = left_to_right[i]\n    local r = right_to_left[i]\n    if l\
    \ == r then\n      collisions = collisions + 1\n    end\n  end\n  return collisions\n\
    end", "  local cars = {}\n  local collisions = 0\n  for i = 1, n do\n    cars[i]\
    \ = {x = i, dir = 1}\n  end\n  for i = n + 1, 2 * n do\n    cars[i] = {x = i -\
    \ n, dir = -1}\n  end\n  local function move_cars()\n    for i = 1, 2 * n do\n\
    \      cars[i].x = cars[i].x + cars[i].dir\n    end\n  end\n  local function check_collisions()\n\
    \    for i = 1, n do\n      for j = n + 1, 2 * n do\n        if cars[i].x == cars[j].x\
    \ then\n          collisions = collisions + 1\n        end\n      end\n    end\n\
    \  end\n  for i = 1, n do\n    move_cars()\n    check_collisions()\n  end\n  return\
    \ collisions\nend", "  local collisions = 0\n  local cars_left = {}\n  local cars_right\
    \ = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i] = n - i + 1\n\
    \  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left[i] == cars_right[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            left = true,\n            pos =\
    \ i,\n        }\n    end\n    for i = n + 1, 2 * n do\n        cars[i] = {\n \
    \           left = false,\n            pos = 2 * n - i + 1,\n        }\n    end\n\
    \    while true do\n        local done = true\n        for i = 1, 2 * n do\n \
    \           local car = cars[i]\n            if car.left then\n              \
    \  car.pos = car.pos + 1\n            else\n                car.pos = car.pos\
    \ - 1\n            end\n            if car.pos > 0 and car.pos <= n then\n   \
    \             done = false\n            end\n        end\n        if done then\n\
    \            break\n        end\n        for i = 1, 2 * n do\n            local\
    \ car = cars[i]\n            if car.pos > 0 and car.pos <= n then\n          \
    \      for j = 1, 2 * n do\n                    local other = cars[j]\n      \
    \              if other.pos == car.pos and other.left ~= car.left then\n     \
    \                   collisions = collisions + 1\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local count = 0\n    local cars = {}\n    for i = 1, n do\n       \
    \ cars[i] = {\n            x = math.random() * 100000,\n            v = math.random()\
    \ * 100,\n            dir = 1\n        }\n    end\n    for i = 1, n do\n     \
    \   cars[n + i] = {\n            x = math.random() * 100000,\n            v =\
    \ math.random() * 100,\n            dir = -1\n        }\n    end\n    for i =\
    \ 1, n do\n        for j = n + 1, 2 * n do\n            if cars[i].dir ~= cars[j].dir\
    \ then\n                local dx = cars[i].x - cars[j].x\n                local\
    \ dv = cars[i].v - cars[j].v\n                if dx * dv < 0 then\n          \
    \          count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if i == j then\n        count = count + 1\n      end\n  \
    \  end\n  end\n  return count\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local n_collisions = 0\n    local cars_left_to_right = {}\n    local\
    \ cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                n_collisions = n_collisions + 1\n            end\n   \
    \     end\n    end\n    return n_collisions\nend", "  local collisions = 0\n \
    \ local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n  \
    \  left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i = 1,\
    \ n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local cars = {}\n    local collisions = 0\n    for i = 1, n do\n  \
    \      cars[i] = {\n            x = math.random(),\n            dir = 1,\n   \
    \     }\n    end\n    for i = n + 1, 2 * n do\n        cars[i] = {\n         \
    \   x = math.random(),\n            dir = -1,\n        }\n    end\n    for i =\
    \ 1, n do\n        for j = n + 1, 2 * n do\n            if cars[i].x == cars[j].x\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = i\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if left_to_right[i] == right_to_left[j] then\n        collision = collision\
    \ + 1\n      end\n    end\n  end\n  return collision\nend", "   local left_to_right\
    \ = {}\n   local right_to_left = {}\n   for i = 1, n do\n      left_to_right[i]\
    \ = i\n      right_to_left[i] = n + 1 - i\n   end\n   local collisions = 0\n \
    \  for i = 1, n do\n      for j = 1, n do\n         if left_to_right[i] == right_to_left[j]\
    \ then\n            collisions = collisions + 1\n         end\n      end\n   end\n\
    \   return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collision = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_collision = car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left)\n            local right_to_left_collision\
    \ = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)\n     \
    \       return left_to_right_collision + right_to_left_collision\n        end\n\
    \    end\n    return car_race_collision_helper(n, 0, 0)\nend", "  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  local collisions = 0\n  for i = 1,\
    \ n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i] = n + 1 - i\n\
    \  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        collisions = collisions + 1\n      end\n\
    \    end\n  end\n  return collisions\nend", "    local left_to_right = {}\n  \
    \  local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n\
    \  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n      if\
    \ left_to_right[i] == right_to_left[j] then\n        collision = collision + 1\n\
    \      end\n    end\n  end\n  return collision\nend", "    local l2r = {}\n  \
    \  local r2l = {}\n    for i = 1, n do\n        l2r[i] = i\n        r2l[i] = n\
    \ - i + 1\n    end\n    local count = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if l2r[i] == r2l[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "   local\
    \ function car_race_collision_helper(n, left_to_right, right_to_left)\n      if\
    \ n == 0 then\n         return 0\n      else\n         local left_to_right_next\
    \ = left_to_right + 1\n         local right_to_left_next = right_to_left + 1\n\
    \         local left_to_right_collision = left_to_right_next - right_to_left\n\
    \         local right_to_left_collision = right_to_left_next - left_to_right\n\
    \         local collision = left_to_right_collision + right_to_left_collision\n\
    \         return collision + car_race_collision_helper(n - 1, left_to_right_next,\
    \ right_to_left_next)\n      end\n   end\n   return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local count = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if i == j then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    return count\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ i\n    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1,\
    \ n do\n            if left_to_right[i] == right_to_left[j] then\n           \
    \     collision = collision + 1\n            end\n        end\n    end\n    return\
    \ collision\nend", "  local left_to_right = {}\n  local right_to_left = {}\n \
    \ local collisions = 0\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local cars = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        cars[i] = {\n            left = true,\n  \
    \          pos = math.random() * 1000000\n        }\n    end\n    for i = 1, n\
    \ do\n        cars[i + n] = {\n            left = false,\n            pos = math.random()\
    \ * 1000000\n        }\n    end\n    table.sort(cars, function(a, b) return a.pos\
    \ < b.pos end)\n    for i = 1, n * 2 do\n        if cars[i].left and cars[i +\
    \ 1].left == false then\n            collisions = collisions + 1\n        end\n\
    \    end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local cars_left = {}\n  local\
    \ cars_right = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i]\
    \ = i\n  end\n  local collisions = 0\n  local i = 1\n  local j = 1\n  while i\
    \ <= n and j <= n do\n    if cars_left[i] < cars_right[j] then\n      collisions\
    \ = collisions + 1\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n\
    \  return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_next = left_to_right + 1\n    \
    \        local right_to_left_next = right_to_left + 1\n            if left_to_right_next\
    \ == right_to_left_next then\n                return 1 + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n            else\n           \
    \     return car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)\n\
    \            end\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local num_collisions = 0\n    local cars_left = {}\n    local\
    \ cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left[i] == cars_right[j] then\n                num_collisions =\
    \ num_collisions + 1\n            end\n        end\n    end\n    return num_collisions\n\
    end", "    local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_next = left_to_right + 1\n            local right_to_left_next\
    \ = right_to_left + 1\n            local left_to_right_collision = 0\n       \
    \     local right_to_left_collision = 0\n            if left_to_right_next ==\
    \ right_to_left then\n                left_to_right_collision = 1\n          \
    \  end\n            if right_to_left_next == left_to_right then\n            \
    \    right_to_left_collision = 1\n            end\n            return left_to_right_collision\
    \ + right_to_left_collision +\n                   car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n        end\n    end\n    return\
    \ car_race_collision_helper(n, 0, 0)\nend", "    local collisions = 0\n    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n        if n ==\
    \ 0 then\n            return 0\n        else\n            return car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left - 1) +\n                   (left_to_right\
    \ == right_to_left and 1 or 0)\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, n - 1)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local count = 0\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local collisions = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if i == j then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local collisions = 0\n    local cars_left = {}\n    local cars_right = {}\n\
    \    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i] = i\n  \
    \  end\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left[i]\
    \ == cars_right[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n - i + 1\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local count = 0\n    for i = 1, n do\n        for j\
    \ = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local collisions = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local n_collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if i == j then\n         \
    \       n_collisions = n_collisions + 1\n            end\n        end\n    end\n\
    \    return n_collisions\nend", "  local collisions = 0\n  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local function car_race_collision_helper(n, i, j)\n        if i ==\
    \ n then\n            return 0\n        elseif j == n then\n            return\
    \ car_race_collision_helper(n, i + 1, i + 2)\n        else\n            return\
    \ car_race_collision_helper(n, i, j + 1) + (i == j and 1 or 0)\n        end\n\
    \    end\n    return car_race_collision_helper(n, 1, 2)\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i + 1\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ cars_left_to_right = {}\n    local cars_right_to_left = {}\n    for i = 1, n\
    \ do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i] = i\n \
    \   end\n    local collisions = 0\n    while #cars_left_to_right > 0 and #cars_right_to_left\
    \ > 0 do\n        local car_left_to_right = cars_left_to_right[1]\n        local\
    \ car_right_to_left = cars_right_to_left[1]\n        if car_left_to_right == car_right_to_left\
    \ then\n            collisions = collisions + 1\n            table.remove(cars_left_to_right,\
    \ 1)\n            table.remove(cars_right_to_left, 1)\n        elseif car_left_to_right\
    \ < car_right_to_left then\n            table.remove(cars_left_to_right, 1)\n\
    \        else\n            table.remove(cars_right_to_left, 1)\n        end\n\
    \    end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ n = n or 1\n    local cars_left = {}\n    local cars_right = {}\n    for i =\
    \ 1, n do\n        cars_left[i] = i\n        cars_right[i] = i\n    end\n    local\
    \ collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ cars_left[i] == cars_right[j] then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \ local n = n or 1\n  local cars = {}\n  for i = 1, n do\n    cars[i] = {\n  \
    \    x = math.random(0, 100),\n      y = math.random(0, 100),\n      vx = math.random(1,\
    \ 10),\n      vy = math.random(1, 10),\n    }\n  end\n  local collisions = 0\n\
    \  for i = 1, n do\n    local car = cars[i]\n    for j = 1, n do\n      local\
    \ other = cars[j]\n      if car.vx > 0 and other.vx < 0 then\n        local dx\
    \ = car.x - other.x\n        local dy = car.y - other.y\n        local dvx = car.vx\
    \ - other.vx\n        local dvy = car.vy - other.vy\n        local t = -(dx *\
    \ dvx + dy * dvy) / (dvx * dvx + dvy * dvy)\n        if t >= 0 and t <= 1 then\n\
    \          collisions = collisions + 1\n        end\n      end\n    end\n  end\n\
    \  return collisions\nend", "  local i = 1\n  local j = n\n  local collisions\
    \ = 0\n  while i <= n and j >= 1 do\n    if i == j then\n      collisions = collisions\
    \ + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return collisions\nend",
  "    local function car_race_collision_helper(n, i, j)\n        if i == n and j\
    \ == n then\n            return 0\n        elseif i == n then\n            return\
    \ car_race_collision_helper(n, i, j + 1)\n        elseif j == n then\n       \
    \     return car_race_collision_helper(n, i + 1, j)\n        else\n          \
    \  return car_race_collision_helper(n, i + 1, j) + car_race_collision_helper(n,\
    \ i, j + 1)\n        end\n    end\n    return car_race_collision_helper(n, 1,\
    \ 1)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n    for\
    \ i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1\
    \ - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if left_to_right[i] == right_to_left[j] then\n        \
    \        collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local function car_race_collision_rec(n, i,\
    \ j)\n        if i == n or j == n then\n            return 0\n        else\n \
    \           if i == j then\n                return car_race_collision_rec(n, i\
    \ + 1, j) + car_race_collision_rec(n, i, j + 1)\n            else\n          \
    \      return car_race_collision_rec(n, i + 1, j) + car_race_collision_rec(n,\
    \ i, j + 1) + 1\n            end\n        end\n    end\n    return car_race_collision_rec(n,\
    \ 1, 1)\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local collisions = 0\n    local\
    \ cars = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n\
    \            v = math.random()\n        }\n    end\n    for i = 1, n do\n    \
    \    cars[n + i] = {\n            x = math.random(),\n            v = -math.random()\n\
    \        }\n    end\n    table.sort(cars, function(a, b) return a.x < b.x end)\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            if cars[i].v >\
    \ 0 and cars[j].v < 0 then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local n = n or 1\n  local cars = {}\n  local collisions\
    \ = 0\n  local i = 0\n  while i < n do\n    cars[i] = {\n      x = math.random(0,\
    \ 100),\n      y = math.random(0, 100),\n      dx = math.random(1, 10),\n    \
    \  dy = math.random(1, 10),\n    }\n    i = i + 1\n  end\n  while true do\n  \
    \  local i = 0\n    while i < n do\n      local car = cars[i]\n      car.x = car.x\
    \ + car.dx\n      car.y = car.y + car.dy\n      i = i + 1\n    end\n    local\
    \ i = 0\n    while i < n do\n      local car = cars[i]\n      local j = 0\n  \
    \    while j < n do\n        if i ~= j then\n          local other_car = cars[j]\n\
    \          if car.x == other_car.x and car.y == other_car.y then\n           \
    \ collisions = collisions + 1\n          end\n        end\n        j = j + 1\n\
    \      end\n      i = i + 1\n    end\n  end\n  return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local i = 1\n    local j = n\n    local count\
    \ = 0\n    while i <= n and j >= 1 do\n        if i == j then\n            count\
    \ = count + 1\n        else\n            count = count + 2\n        end\n    \
    \    i = i + 1\n        j = j - 1\n    end\n    return count\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local n = n or 10\n    local cars = {}\n    for i = 1, n do\n     \
    \   cars[i] = {\n            x = math.random(0, 100),\n            v = math.random(1,\
    \ 10),\n            dir = 1\n        }\n    end\n    for i = n + 1, 2 * n do\n\
    \        cars[i] = {\n            x = math.random(0, 100),\n            v = math.random(1,\
    \ 10),\n            dir = -1\n        }\n    end\n    local collisions = 0\n \
    \   for i = 1, 2 * n do\n        for j = i + 1, 2 * n do\n            if cars[i].dir\
    \ == 1 and cars[j].dir == -1 then\n                if cars[i].x < cars[j].x then\n\
    \                    collisions = collisions + 1\n                end\n      \
    \      end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "    local collisions\
    \ = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n\
    \    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local cars = {}\n    for i = 1, n do\n        cars[i]\
    \ = {\n            left = true,\n            pos = i\n        }\n    end\n   \
    \ for i = n + 1, 2 * n do\n        cars[i] = {\n            left = false,\n  \
    \          pos = i\n        }\n    end\n    local collisions = 0\n    while true\
    \ do\n        local done = true\n        for i = 1, 2 * n do\n            if cars[i].left\
    \ then\n                cars[i].pos = cars[i].pos + 1\n            else\n    \
    \            cars[i].pos = cars[i].pos - 1\n            end\n            if cars[i].pos\
    \ <= n then\n                done = false\n            end\n        end\n    \
    \    if done then\n            break\n        end\n        for i = 1, n do\n \
    \           if cars[i].pos == cars[i + n].pos then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local n_collisions = 0\n  local cars_left_to_right = {}\n  local cars_right_to_left\
    \ = {}\n  for i = 1, n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i]\
    \ = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        n_collisions = n_collisions + 1\n   \
    \   end\n    end\n  end\n  return n_collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    local collision = 0\n    for i = 1,\
    \ n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n \
    \   end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local count\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            v = math.random()\n        }\n    end\n\
    \    for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    for i = 1, n do\n   \
    \     for j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x and cars[i].v\
    \ > cars[j].v then\n                count = count + 1\n            end\n     \
    \   end\n    end\n    return count\nend", "    local collisions = 0\n    local\
    \ cars = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(0,\
    \ 100000),\n            v = math.random(1, 100)\n        }\n    end\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if cars[i].v > cars[j].v then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local n = n or 0\n  local collisions\
    \ = 0\n  local left = {}\n  local right = {}\n  for i = 1, n do\n    left[i] =\
    \ i\n    right[i] = i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if\
    \ left[i] == right[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local left_to_right = {}\n   \
    \ local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i + 1\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random(),\n            dir = 1\n        }\n    end\n    for i =\
    \ n + 1, 2 * n do\n        cars[i] = {\n            x = math.random(),\n     \
    \       dir = -1\n        }\n    end\n    table.sort(cars, function(a, b) return\
    \ a.x < b.x end)\n    for i = 1, 2 * n do\n        local car = cars[i]\n     \
    \   car.x = car.x + car.dir\n        for j = i + 1, 2 * n do\n            local\
    \ other_car = cars[j]\n            if other_car.x > car.x then\n             \
    \   break\n            end\n            if other_car.dir ~= car.dir then\n   \
    \             collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_collision = car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left)\n            local right_to_left_collision\
    \ = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)\n     \
    \       return left_to_right_collision + right_to_left_collision\n        end\n\
    \    end\n    return car_race_collision_helper(n, 0, 0)\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
