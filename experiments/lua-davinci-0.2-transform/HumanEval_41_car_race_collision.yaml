name: HumanEval_41_car_race_collision
language: lua
prompt: "-- Imagine a road that's a perfectly straight infinitely long line.\n-- n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n--\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  -- each other.  All cars move in the same speed.  Two cars are said to collide\n\
  -- when a car that's moving left to right hits a car that's moving right to left.\n\
  -- However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n-- in their trajectory as if they did not collide.\n-- This function outputs\
  \ the number of such collisions.\nlocal function car_race_collision(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
  \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n  \
  \  lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n  \
  \  lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local left_to_right = {}\n    local right_to_left = {}\n    for\
    \ i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = i\n  \
    \  end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "   local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \      if n == 0 then\n         return 0\n      else\n         local left_to_right_collision\
    \ = car_race_collision_helper(n-1, left_to_right+1, right_to_left)\n         local\
    \ right_to_left_collision = car_race_collision_helper(n-1, left_to_right, right_to_left+1)\n\
    \         return left_to_right_collision + right_to_left_collision\n      end\n\
    \   end\n   return car_race_collision_helper(n, 0, 0)\nend", "    local t = {}\n\
    \    for i = 1, n do\n        t[i] = i\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if t[i] == t[j] then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local result = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            if i == j then\n             \
    \   result = result + 1\n            end\n        end\n    end\n    return result\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ collisions = 0\n    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                collisions =\
    \ collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n   \
    \         if i == j then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = i\n    end\n    local collision = 0\n    for i\
    \ = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collision = collision + 1\n            end\n        end\n\
    \    end\n    return collision\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local collisions = 0\n  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for j =\
    \ 1, n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n    end\n   \
    \ local count = 0\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ left_to_right[i] == right_to_left[j] then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "  local n = n or\
    \ 0\n  local collisions = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ - i + 1\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_collision = car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left)\n            local right_to_left_collision\
    \ = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)\n     \
    \       return left_to_right_collision + right_to_left_collision\n        end\n\
    \    end\n    return car_race_collision_helper(n, 0, 0)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
