name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = ''\n  while N > 0 do\n    result = tostring(N % 2)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local\
    \ res = \"\"\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  -- your code here\n  local binary = {}\n\
    \  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  local sum = 0\n  for i = 1, #binary do\n    sum\
    \ = sum + binary[i]\n  end\n  return sum\nend", "    local binary = \"\"\n   \
    \ while N > 0 do\n        local r = N % 2\n        binary = r .. binary\n    \
    \    N = (N - r) / 2\n    end\n    return binary\nend", "  local result = ''\n\
    \  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n \
    \   N = math.floor(N / 2)\n  end\n  return result\nend", "  local sum = 0\n  local\
    \ bin = ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r) / 2\n    sum\
    \ = sum + r\n    bin = r .. bin\n  end\n  return bin\nend", "  local result =\
    \ ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend", "  local sum = 0\n  local binary = ''\n\
    \  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n    N = (N -\
    \ rest) / 2\n    binary = tostring(rest) .. binary\n  end\n  return binary, sum\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  while N > 0 do\n    local rest = math.fmod(N,2)\n \
    \   table.insert(bin,1,rest)\n    N = (N-rest)/2\n  end\n  return table.concat(bin)\n\
    end", "    local sum = 0\n    local binary = ''\n    while N > 0 do\n        local\
    \ r = N % 2\n        sum = sum + r\n        N = math.floor(N / 2)\n        binary\
    \ = r .. binary\n    end\n    return binary, sum\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "    local res = ''\n  \
    \  while N > 0 do\n        res = tostring(N % 2) .. res\n        N = math.floor(N\
    \ / 2)\n    end\n    return res\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local result = \"\"\n  while N > 0 do\n\
    \    local r = N % 2\n    result = r .. result\n    N = (N - r) / 2\n  end\n \
    \ return result\nend", "  local res = ''\n  while N > 0 do\n    res = tostring(N\
    \ % 2) .. res\n    N = math.floor(N / 2)\n  end\n  return res\nend", "    local\
    \ bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n    \
    \    N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "  local sum = 0\n  local binary = \"\"\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    sum = sum + remainder\n    N = math.floor(N / 2)\n    binary =\
    \ remainder .. binary\n  end\n  return binary\nend", "    local bin = {}\n   \
    \ local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  return\
    \ N:to_binary()\nend", "    local result = ''\n    while N > 0 do\n        result\
    \ = tostring(N % 2) .. result\n        N = math.floor(N / 2)\n    end\n    return\
    \ result\nend", "    local s = ''\n    while N > 0 do\n        s = tostring(N\
    \ % 2) .. s\n        N = math.floor(N / 2)\n    end\n    return s\nend", "  local\
    \ sum = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n\
    \    N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = remainder\
    \ .. binary\n  end\n  return sum\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = \"\"\n  local sum = 0\n  while\
    \ N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n    bin = rest .. bin\n\
    \    N = (N - rest) / 2\n  end\n  return sum\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "  local s = ''\n  while\
    \ N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n \
    \ return s\nend", "  return tostring(N):match('%d+')\nend", "  local bin = {}\n\
    \  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n\
    \    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local t = {}\n  local\
    \ i = 1\n  while N > 0 do\n    t[i] = N % 2\n    N = math.floor(N / 2)\n    i\
    \ = i + 1\n  end\n  return table.concat(t)\nend", "  local sum = 0\n  local binary\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    N = math.floor(N /\
    \ 2)\n    sum = sum + remainder\n    binary = remainder .. binary\n  end\n  return\
    \ binary\nend", "    local bin = {}\n    local i = 1\n    while N > 0 do\n   \
    \     bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n\
    \    return table.concat(bin, '')\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  return N:to_binary()\nend", "  local sum\
    \ = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  sum = sum + remainder\n    binary = tostring(remainder) .. binary\n    N =\
    \ math.floor(N / 2)\n  end\n  return sum\nend", "  local bin = {}\n  local i =\
    \ 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i =\
    \ i + 1\n  end\n  return table.concat(bin)\nend", "  local bin = {}\n  local i\
    \ = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i\
    \ = i + 1\n  end\n  return table.concat(bin)\nend", "  local bin = {}\n  local\
    \ sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n  \
    \  N = (N - rest) / 2\n    table.insert(bin, 1, rest)\n  end\n  return table.concat(bin)\n\
    end", "  local t = {}\n  local i = 0\n  while N > 0 do\n    t[i] = N % 2\n   \
    \ N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(t, '')\n\
    end", "    local bin = {}\n    while N > 0 do\n        local rest = math.fmod(N,2)\n\
    \        table.insert(bin,1,rest)\n        N = (N-rest)/2\n    end\n    return\
    \ table.concat(bin)\nend", "    local bin = {}\n    local i = 1\n    while N >\
    \ 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i +\
    \ 1\n    end\n    return table.concat(bin)\nend", "    local bin = {}\n    local\
    \ i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    local rest = math.fmod(N,2)\n\
    \    bin[i] = rest\n    N = (N-rest)/2\n    i = i+1\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local bin = ''\n    while N > 0 do\n        bin = bin .. tostring(N\
    \ % 2)\n        N = math.floor(N / 2)\n    end\n    return bin\nend", "  local\
    \ sum = 0\n  local bin = ''\n  while N > 0 do\n    local r = N % 2\n    sum =\
    \ sum + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n  return sum\nend",
  "  local s = ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N\
    \ / 2)\n  end\n  return s\nend", "  local bin = {}\n  local i = 1\n  while N >\
    \ 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local function to_binary(n)\n    if n ==\
    \ 0 then return \"\" end\n    local rem = n % 2\n    return to_binary(math.floor(n\
    \ / 2)) .. rem\n  end\n  local function sum_digits(s)\n    local sum = 0\n   \
    \ for i = 1, #s do\n      sum = sum + tonumber(s:sub(i, i))\n    end\n    return\
    \ sum\n  end\n  return sum_digits(to_binary(N))\nend", "    local function dec2bin(n)\n\
    \        local bin = \"\"\n        while n > 0 do\n            local rest = math.fmod(n,\
    \ 2)\n            bin = rest .. bin\n            n = (n - rest) / 2\n        end\n\
    \        return bin\n    end\n    local function sum(s)\n        local sum = 0\n\
    \        for i = 1, #s do\n            sum = sum + tonumber(s:sub(i, i))\n   \
    \     end\n        return sum\n    end\n    return tostring(sum(dec2bin(N)))\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "    local bin = {}\n    local i = 1\n    while N >\
    \ 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i +\
    \ 1\n    end\n    return table.concat(bin)\nend", "  local sum = 0\n  local binary\
    \ = \"\"\n  while N > 0 do\n    local r = N % 2\n    sum = sum + r\n    binary\
    \ = r .. binary\n    N = math.floor(N / 2)\n  end\n  return sum\nend", "  return\
    \ N:tobinary()\nend", "  local bin = {}\n  local sum = 0\n  while N > 0 do\n \
    \   local rest = N % 2\n    sum = sum + rest\n    N = (N - rest) / 2\n    table.insert(bin,\
    \ rest)\n  end\n  return table.concat(bin)\nend", "    local function to_binary(n)\n\
    \        local t = {}\n        while n > 0 do\n            local r = n % 2\n \
    \           table.insert(t, r)\n            n = (n - r) / 2\n        end\n   \
    \     return table.concat(t):reverse()\n    end\n    local function sum_digits(s)\n\
    \        local sum = 0\n        for i = 1, #s do\n            sum = sum + tonumber(s:sub(i,\
    \ i))\n        end\n        return sum\n    end\n    return sum_digits(to_binary(N))\n\
    end", "  local s = ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n\
    \    N = (N - r) / 2\n  end\n  return s\nend", "  return N:tobinary()\nend", " \
    \   local sum = 0\n    local binary = {}\n    while N > 0 do\n        local remainder\
    \ = N % 2\n        N = (N - remainder) / 2\n        sum = sum + remainder\n  \
    \      table.insert(binary, remainder)\n    end\n    return sum\nend", "  local\
    \ result = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n\
    \    N = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    while N > 0 do\n        result =\
    \ tostring(N % 2) .. result\n        N = math.floor(N / 2)\n    end\n    return\
    \ result\nend", "  -- your code here\n  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local b = {}\n  local i = 0\n  while N >\
    \ 0 do\n    b[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(b)\nend", "  local sum = 0\n  local bin = ''\n  while N > 0 do\n\
    \    local rem = N % 2\n    sum = sum + rem\n    bin = tostring(rem) .. bin\n\
    \    N = (N - rem) / 2\n  end\n  return bin, sum\nend", "    return N:to_binary()\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    result\
    \ = tostring(r) .. result\n    N = (N - r) / 2\n  end\n  return result\nend",
  "    local sum = 0\n    local binary = ''\n    while N > 0 do\n        local r =\
    \ N % 2\n        sum = sum + r\n        binary = r .. binary\n        N = math.floor(N\
    \ / 2)\n    end\n    return sum\nend", "    local sum = 0\n    local bin = \"\"\
    \n    while N > 0 do\n        local rem = N % 2\n        sum = sum + rem\n   \
    \     bin = rem .. bin\n        N = math.floor(N / 2)\n    end\n    return sum\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "    local function to_binary(n)\n        local r =\
    \ ''\n        while n > 0 do\n            r = tostring(n % 2) .. r\n         \
    \   n = math.floor(n / 2)\n        end\n        return r\n    end\n    local function\
    \ sum_digits(s)\n        local sum = 0\n        for i = 1, #s do\n           \
    \ sum = sum + tonumber(s:sub(i, i))\n        end\n        return sum\n    end\n\
    \    return tostring(sum_digits(to_binary(N)))\nend", "  local bin = string.format(\"\
    %b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum = sum + tonumber(bin:sub(i,\
    \ i))\n  end\n  return sum\nend", "  local sum = 0\n  local binary = ''\n  local\
    \ remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    sum = sum + remainder\n\
    \    N = math.floor(N / 2)\n    binary = remainder .. binary\n  end\n  return\
    \ binary, sum\nend", "  local result = ''\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    N = math.floor(N / 2)\n    result = remainder .. result\n  end\n\
    \  return result\nend", "    local b = ''\n    while N > 0 do\n        b = tostring(N\
    \ % 2) .. b\n        N = math.floor(N / 2)\n    end\n    return b\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  return N:to_binary()\n\
    end", "    local binary = {}\n    local i = 1\n    while N > 0 do\n        binary[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(binary)\nend", "  local result = ''\n  while N > 0 do\n    local\
    \ r = N % 2\n    result = tostring(r) .. result\n    N = (N - r) / 2\n  end\n\
    \  return result\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n \
    \   bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "    local bin = {}\n    local i = 1\n    while N >\
    \ 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i +\
    \ 1\n    end\n    return table.concat(bin)\nend", "  local bin = {}\n  local i\
    \ = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i\
    \ = i + 1\n  end\n  return table.concat(bin)\nend", "    local s = ''\n    while\
    \ N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N / 2)\n\
    \    end\n    return s\nend", "    local result = ''\n    while N > 0 do\n   \
    \     result = tostring(N % 2) .. result\n        N = math.floor(N / 2)\n    end\n\
    \    return result\nend", "    local result = ''\n    while N > 0 do\n       \
    \ result = tostring(N % 2) .. result\n        N = math.floor(N / 2)\n    end\n\
    \    return result\nend", "    local bin = ''\n    while N > 0 do\n        bin\
    \ = tostring(N % 2) .. bin\n        N = math.floor(N / 2)\n    end\n    return\
    \ bin\nend", "    local bin = {}\n    local i = 1\n    while N > 0 do\n      \
    \  bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n\
    \    return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local binary = {}\n  local i = 1\n  while\
    \ N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n\
    \  end\n  return table.concat(binary)\nend", "    local s = ''\n    while N >\
    \ 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N / 2)\n    end\n\
    \    return s\nend", "    local res = ''\n    while N > 0 do\n        res = tostring(N\
    \ % 2) .. res\n        N = math.floor(N / 2)\n    end\n    return res\nend", " \
    \   local result = ''\n    local i = 0\n    while N > 0 do\n        local remainder\
    \ = N % 2\n        N = math.floor(N / 2)\n        result = remainder .. result\n\
    \    end\n    return result\nend", "  local sum = 0\n  local binary = \"\"\n \
    \ while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n    binary = rest\
    \ .. binary\n    N = (N - rest) / 2\n  end\n  return sum\nend", "  local result\
    \ = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n    N\
    \ = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return result\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local result = ''\n    while N > 0 do\n        local r = N % 2\n  \
    \      result = r .. result\n        N = (N - r) / 2\n    end\n    return result\n\
    end", "  local result = ''\n  while N > 0 do\n    local bit = N % 2\n    N = math.floor(N\
    \ / 2)\n    result = bit .. result\n  end\n  return result\nend", "  return N:to_binary()\n\
    end", "  local res = ''\n  while N > 0 do\n    res = tostring(N % 2) .. res\n\
    \    N = math.floor(N / 2)\n  end\n  return res\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "  local bin = {}\n  local\
    \ sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n  \
    \  N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n\
    \    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local function to_binary(n)\n    local t = {}\n\
    \    while n > 0 do\n      local r = n % 2\n      n = math.floor(n / 2)\n    \
    \  table.insert(t, r)\n    end\n    return table.concat(t)\n  end\n  local function\
    \ sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n      sum = sum + tonumber(s:sub(i,\
    \ i))\n    end\n    return sum\n  end\n  return sum_digits(to_binary(N))\nend",
  "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n\
    \        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "  local result = ''\n  while N > 0 do\n    result = tostring(N % 2) ..\
    \ result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local function\
    \ to_binary(n)\n    local t = {}\n    while n > 0 do\n      local r = n % 2\n\
    \      table.insert(t, r)\n      n = math.floor(n / 2)\n    end\n    return table.concat(t)\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend", "  return N:to_binary()\nend", "    local result\
    \ = ''\n    local n = N\n    while n > 0 do\n        local r = n % 2\n       \
    \ result = tostring(r) .. result\n        n = math.floor(n / 2)\n    end\n   \
    \ return result\nend", "    local bin = {}\n    local i = 1\n    while N > 0 do\n\
    \        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n  \
    \  end\n    return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n\
    \  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i +\
    \ 1\n  end\n  return table.concat(bin)\nend", "    local bin = {}\n    local i\
    \ = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N /\
    \ 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "    local\
    \ bin = \"\"\n    while N > 0 do\n        bin = tostring(N % 2) .. bin\n     \
    \   N = math.floor(N / 2)\n    end\n    return bin\nend", "  local bin = {}\n\
    \  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n\
    \    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local s = ''\n  while\
    \ N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n \
    \ return s\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i]\
    \ = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "    local bin = string.format(\"%b\", N)\n    local\
    \ sum = 0\n    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i, i))\n\
    \    end\n    return sum\nend", "    local bin = {}\n    local i = 1\n    while\
    \ N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i =\
    \ i + 1\n    end\n    local sum = 0\n    for i = 1, #bin do\n        sum = sum\
    \ + bin[i]\n    end\n    return sum\nend", "  local t = {}\n  local i = 1\n  while\
    \ N > 0 do\n    t[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(t)\nend", "    local bin = ''\n    while N > 0 do\n   \
    \     bin = tostring(N % 2) .. bin\n        N = math.floor(N / 2)\n    end\n \
    \   return bin\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n   \
    \ bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local s = ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n\
    \    N = (N - r) / 2\n  end\n  return s\nend", "  local bin = {}\n  local i =\
    \ 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i =\
    \ i + 1\n  end\n  return table.concat(bin)\nend", "    local bin = {}\n    while\
    \ N > 0 do\n        table.insert(bin, N % 2)\n        N = math.floor(N / 2)\n\
    \    end\n    return table.concat(bin)\nend", "    local sum = 0\n    local binary\
    \ = ''\n    while N > 0 do\n        local remainder = N % 2\n        N = math.floor(N\
    \ / 2)\n        sum = sum + remainder\n        binary = remainder .. binary\n\
    \    end\n    return sum\nend", "  local bin = {}\n  local i = 1\n  while N >\
    \ 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local result = \"\"\n  while N > 0 do\n\
    \    local r = N % 2\n    N = (N - r) / 2\n    result = r .. result\n  end\n \
    \ return result\nend", "  local res = ''\n  while N > 0 do\n    res = tostring(N\
    \ % 2) .. res\n    N = math.floor(N / 2)\n  end\n  return res\nend", "  local\
    \ result = \"\"\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "    local\
    \ sum = 0\n    for i = 1, N do\n        local bin = string.format(\"%b\", i)\n\
    \        for j = 1, #bin do\n            sum = sum + tonumber(bin:sub(j, j))\n\
    \        end\n    end\n    return sum\nend", "  local bin = {}\n  local i = 1\n\
    \  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i +\
    \ 1\n  end\n  return table.concat(bin)\nend", "    local bin = {}\n    local i\
    \ = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N /\
    \ 2)\n        i = i + 1\n    end\n    local s = ''\n    for i = #bin, 1, -1 do\n\
    \        s = s .. bin[i]\n    end\n    return s\nend", "    local bin = {}\n \
    \   local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local sum =\
    \ 0\n  local binary = \"\"\n  while N > 0 do\n    local rest = N % 2\n    sum\
    \ = sum + rest\n    binary = rest .. binary\n    N = (N - rest) / 2\n  end\n \
    \ return sum\nend", "    return string.format(\"%b\", N)\nend", "    local result\
    \ = ''\n    while N > 0 do\n        result = tostring(N % 2) .. result\n     \
    \   N = math.floor(N / 2)\n    end\n    return result\nend", "  local sum = 0\n\
    \  local bin = {}\n  local i = 1\n  while N > 0 do\n    local rest = N % 2\n \
    \   bin[i] = rest\n    N = (N - rest) / 2\n    i = i + 1\n  end\n  for i = 1,\
    \ #bin do\n    sum = sum + bin[i]\n  end\n  return sum\nend", "    local res =\
    \ \"\"\n    while N > 0 do\n        res = tostring(N % 2) .. res\n        N =\
    \ math.floor(N / 2)\n    end\n    return res\nend", "    local s = ''\n    local\
    \ n = N\n    while n > 0 do\n        local r = n % 2\n        s = s .. r\n   \
    \     n = (n - r) / 2\n    end\n    return s\nend", "    local sum = 0\n    local\
    \ binary = ''\n    while N > 0 do\n        local remainder = N % 2\n        sum\
    \ = sum + remainder\n        binary = remainder .. binary\n        N = math.floor(N\
    \ / 2)\n    end\n    return sum\nend", "  local function to_binary(n)\n    local\
    \ t = {}\n    while n > 0 do\n      local r = n % 2\n      table.insert(t, r)\n\
    \      n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\n  end\n\
    \  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n   \
    \   sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend", "    local sum = 0\n    local bin = \"\"\n \
    \   while N > 0 do\n        local r = N % 2\n        N = (N - r) / 2\n       \
    \ bin = bin .. r\n        sum = sum + r\n    end\n    return sum\nend", "    local\
    \ s = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n        N = math.floor(N\
    \ / 2)\n    end\n    return s\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "    local res = ''\n    while N > 0 do\n \
    \       res = tostring(N % 2) .. res\n        N = math.floor(N / 2)\n    end\n\
    \    return res\nend", "    local bin = {}\n    local i = 1\n    while N > 0 do\n\
    \        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n  \
    \  end\n    return table.concat(bin)\nend", "  local res = ''\n  while N > 0 do\n\
    \    res = tostring(N % 2) .. res\n    N = math.floor(N / 2)\n  end\n  return\
    \ res\nend", "  local sum = 0\n  local bin = {}\n  local i = 1\n  while N > 0\
    \ do\n    local rem = N % 2\n    bin[i] = rem\n    N = (N - rem) / 2\n    i =\
    \ i + 1\n  end\n  for i = 1, #bin do\n    sum = sum + bin[i]\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    local binary = ''\n    while N > 0 do\n \
    \       local remainder = N % 2\n        N = math.floor(N / 2)\n        binary\
    \ = remainder .. binary\n        sum = sum + remainder\n    end\n    return sum\n\
    end", "  local result = \"\"\n  while N > 0 do\n    local remainder = N % 2\n\
    \    result = tostring(remainder) .. result\n    N = math.floor(N / 2)\n  end\n\
    \  return result\nend", "  local bin = ''\n  while N > 0 do\n    bin = tostring(N\
    \ % 2) .. bin\n    N = math.floor(N / 2)\n  end\n  return bin\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local sum =\
    \ 0\n  for i = 1, N do\n    sum = sum + string.len(string.gsub(string.format(\"\
    %b\", i), \"%D\", \"\"))\n  end\n  return sum\nend", "  local sum = 0\n  local\
    \ binary = ''\n  while N > 0 do\n    local remainder = N % 2\n    sum = sum +\
    \ remainder\n    N = math.floor(N / 2)\n    binary = remainder .. binary\n  end\n\
    \  return binary\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n \
    \   bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local sum = 0\n  local binary = {}\n  while N >\
    \ 0 do\n    local rem = N % 2\n    N = math.floor(N / 2)\n    table.insert(binary,\
    \ rem)\n  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    local bin = \"\"\n    while N > 0 do\n  \
    \      local rem = N % 2\n        sum = sum + rem\n        bin = rem .. bin\n\
    \        N = math.floor(N / 2)\n    end\n    return sum\nend", "    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "  local binary = {}\n  local i = 1\n  while N > 0\
    \ do\n    local remainder = N % 2\n    binary[i] = remainder\n    N = (N - remainder)\
    \ / 2\n    i = i + 1\n  end\n  return table.concat(binary)\nend", "  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local sum =\
    \ 0\n  for i = 1, #N do\n    sum = sum + tonumber(N:sub(i, i))\n  end\n  return\
    \ sum\nend", "  local function to_binary(n)\n    local t = {}\n    while n > 0\
    \ do\n      table.insert(t, n % 2)\n      n = math.floor(n / 2)\n    end\n   \
    \ return table.concat(t)\n  end\n  local function sum_digits(s)\n    local sum\
    \ = 0\n    for i = 1, #s do\n      sum = sum + tonumber(s:sub(i, i))\n    end\n\
    \    return sum\n  end\n  return sum_digits(to_binary(N))\nend", "    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local rest = N % 2\n\
    \        sum = sum + rest\n        binary = tostring(rest) .. binary\n       \
    \ N = (N - rest) / 2\n    end\n    return binary\nend", "  local sum = 0\n  local\
    \ binary = {}\n  local i = 1\n  while N > 0 do\n    local remainder = N % 2\n\
    \    N = (N - remainder) / 2\n    binary[i] = remainder\n    i = i + 1\n  end\n\
    \  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend",
  "  return N:to_binary()\nend", "  local result = ''\n  while N > 0 do\n    result\
    \ = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n  return result\n\
    end", "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    result\
    \ = r .. result\n    N = (N - r) / 2\n  end\n  return result\nend", "  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "    local\
    \ sum = 0\n    local bin = \"\"\n    local bin_rev = \"\"\n    local i = 0\n \
    \   while N > 0 do\n        bin = bin .. N % 2\n        N = math.floor(N / 2)\n\
    \    end\n    for i = 1, #bin do\n        bin_rev = bin_rev .. bin:sub(#bin -\
    \ i + 1, #bin - i + 1)\n    end\n    return bin_rev\nend", "  local binary = {}\n\
    \  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\nend", "    local\
    \ result = ''\n    while N > 0 do\n        local r = N % 2\n        result = result\
    \ .. tostring(r)\n        N = math.floor(N / 2)\n    end\n    return result\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin, '')\nend", "  local bin = {}\n  local i = 1\n  while N > 0\
    \ do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n\
    \    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n\
    \    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local result = ''\n  while N > 0 do\n    result\
    \ = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n  return result\n\
    end", "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    result\
    \ = r .. result\n    N = (N - r) / 2\n  end\n  return result\nend", "  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "    local t =\
    \ {}\n    local i = 1\n    while N > 0 do\n        t[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(t)\nend", "  local\
    \ res = ''\n  while N > 0 do\n    local rem = N % 2\n    res = rem .. res\n  \
    \  N = (N - rem) / 2\n  end\n  return res\nend", "    local result = ''\n    local\
    \ n = N\n    while n > 0 do\n        local r = n % 2\n        result = tostring(r)\
    \ .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
  "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    result = result\
    \ .. tostring(r)\n    N = math.floor(N / 2)\n  end\n  return result\nend", " \
    \ local sum = 0\n  local binary = ''\n  while N > 0 do\n    local remainder =\
    \ N % 2\n    N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = remainder\
    \ .. binary\n  end\n  return sum\nend", "  local result = ''\n  while N > 0 do\n\
    \    result = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n  return\
    \ result\nend", "  local s = \"\"\n  while N > 0 do\n    local r = N % 2\n   \
    \ s = r .. s\n    N = (N - r) / 2\n  end\n  return s\nend", "  local res = ''\n\
    \  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N / 2)\n\
    \  end\n  return res\nend", "    local bin = {}\n    local i = 1\n    while N\
    \ > 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i\
    \ + 1\n    end\n    local sum = 0\n    for i = 1, #bin do\n        sum = sum +\
    \ bin[i]\n    end\n    return sum\nend", "  local sum = 0\n  local binary = ''\n\
    \  while N > 0 do\n    local rem = N % 2\n    sum = sum + rem\n    binary = rem\
    \ .. binary\n    N = math.floor(N / 2)\n  end\n  return sum\nend", "  local s\
    \ = \"\"\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N\
    \ / 2)\n  end\n  return s\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
