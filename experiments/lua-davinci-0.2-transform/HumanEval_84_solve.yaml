name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = ''\n  while N > 0 do\n    result = tostring(N % 2)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local\
    \ res = \"\"\n  while N > 0 do\n    res = tostring(N % 2) .. res\n    N = math.floor(N\
    \ / 2)\n  end\n  return res\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  -- your code here\n  local binary = {}\n\
    \  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  local sum = 0\n  for i = 1, #binary do\n    sum\
    \ = sum + binary[i]\n  end\n  return sum\nend", "    local binary = \"\"\n   \
    \ while N > 0 do\n        local r = N % 2\n        binary = r .. binary\n    \
    \    N = (N - r) / 2\n    end\n    return binary\nend", "  local result = ''\n\
    \  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n \
    \   N = math.floor(N / 2)\n  end\n  return result\nend", "  local sum = 0\n  local\
    \ bin = ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r) / 2\n    sum\
    \ = sum + r\n    bin = r .. bin\n  end\n  return bin\nend", "  local result =\
    \ ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend", "  local sum = 0\n  local binary = ''\n\
    \  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n    N = (N -\
    \ rest) / 2\n    binary = tostring(rest) .. binary\n  end\n  return binary, sum\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  while N > 0 do\n    local rest = math.fmod(N,2)\n \
    \   table.insert(bin,1,rest)\n    N = (N-rest)/2\n  end\n  return table.concat(bin)\n\
    end", "    local sum = 0\n    local binary = ''\n    while N > 0 do\n        local\
    \ r = N % 2\n        sum = sum + r\n        N = math.floor(N / 2)\n        binary\
    \ = r .. binary\n    end\n    return binary, sum\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "    local res = ''\n  \
    \  while N > 0 do\n        res = tostring(N % 2) .. res\n        N = math.floor(N\
    \ / 2)\n    end\n    return res\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local result = \"\"\n  while N > 0 do\n\
    \    local r = N % 2\n    result = r .. result\n    N = (N - r) / 2\n  end\n \
    \ return result\nend", "  local res = ''\n  while N > 0 do\n    res = tostring(N\
    \ % 2) .. res\n    N = math.floor(N / 2)\n  end\n  return res\nend", "    local\
    \ bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n    \
    \    N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "  local sum = 0\n  local binary = \"\"\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    sum = sum + remainder\n    N = math.floor(N / 2)\n    binary =\
    \ remainder .. binary\n  end\n  return binary\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
