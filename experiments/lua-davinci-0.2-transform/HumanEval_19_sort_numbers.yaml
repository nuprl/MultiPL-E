name: HumanEval_19_sort_numbers
language: lua
prompt: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to\
  \ largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function\
  \ sort_numbers(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
  \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
  \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five\
  \ seven eight nine')\n    lu.assertEquals(candidate('six five four three two one\
  \ zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local numbers_list = {}\n  for number in numbers:gmatch('%S+') do\n\
    \    table.insert(numbers_list, number)\n  end\n  table.sort(numbers_list)\n \
    \ return table.concat(numbers_list, ' ')\nend", "    local nums = {}\n    for\
    \ num in numbers:gmatch('%S+') do\n        table.insert(nums, num)\n    end\n\
    \    table.sort(nums)\n    return table.concat(nums, ' ')\nend", "  local num_list\
    \ = {}\n  for num in numbers:gmatch('%S+') do\n    num_list[#num_list + 1] = num\n\
    \  end\n  table.sort(num_list)\n  return table.concat(num_list, ' ')\nend", " \
    \   local nums = {}\n    for num in numbers:gmatch('%S+') do\n        nums[#nums\
    \ + 1] = num\n    end\n    table.sort(nums)\n    return table.concat(nums, ' ')\n\
    end", "    local nums = {}\n    for num in numbers:gmatch('%w+') do\n        table.insert(nums,\
    \ num)\n    end\n    table.sort(nums, function(a, b)\n        return number_to_numeral[a]\
    \ < number_to_numeral[b]\n    end)\n    return table.concat(nums, ' ')\nend",
  "    local nums = {}\n    for num in numbers:gmatch('%S+') do\n        nums[#nums\
    \ + 1] = num\n    end\n    table.sort(nums)\n    return table.concat(nums, ' ')\n\
    end", "  local nums = {}\n  local num_str = ''\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n  for i, num in\
    \ ipairs(nums) do\n    num_str = num_str .. num .. ' '\n  end\n  return num_str:sub(1,\
    \ -2)\nend", "    local nums = {}\n    for num in numbers:gmatch('%S+') do\n \
    \       nums[#nums + 1] = num\n    end\n    table.sort(nums)\n    return table.concat(nums,\
    \ ' ')\nend", "    local nums = {}\n    for num in numbers:gmatch('%w+') do\n\
    \        table.insert(nums, num)\n    end\n    table.sort(nums, function(a, b)\n\
    \        return numeral_to_number(a) < numeral_to_number(b)\n    end)\n    return\
    \ table.concat(nums, ' ')\nend", "    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        local n = tonumber(num)\n        if n then\n            nums[#nums\
    \ + 1] = n\n        else\n            local n = number_to_numeral[num]\n     \
    \       if n then\n                nums[#nums + 1] = n\n            else\n   \
    \             error('Invalid number: ' .. num)\n            end\n        end\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for i, n in ipairs(nums)\
    \ do\n        result[i] = numeral_to_number[n]\n    end\n    return table.concat(result,\
    \ ' ')\nend", "  local num_list = {}\n  for num in numbers:gmatch('%w+') do\n\
    \    table.insert(num_list, num)\n  end\n  table.sort(num_list)\n  return table.concat(num_list,\
    \ ' ')\nend", "    local nums = {}\n    for num in numbers:gmatch('%S+') do\n\
    \        table.insert(nums, num)\n    end\n    table.sort(nums)\n    return table.concat(nums,\
    \ ' ')\nend", "    local nums = {}\n    for num in numbers:gmatch('%w+') do\n\
    \        table.insert(nums, num)\n    end\n    table.sort(nums, function(a, b)\n\
    \        return number_to_numeral[a] < number_to_numeral[b]\n    end)\n    return\
    \ table.concat(nums, ' ')\nend", "  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n  return table.concat(nums,\
    \ ' ')\nend", "  local nums = {}\n  for num in numbers:gmatch('%w+') do\n    table.insert(nums,\
    \ num)\n  end\n  table.sort(nums, function(a, b)\n    return number_to_numeral[a]\
    \ < number_to_numeral[b]\n  end)\n  return table.concat(nums, ' ')\nend", "  local\
    \ nums = {}\n  for num in numbers:gmatch('%w+') do\n    table.insert(nums, num)\n\
    \  end\n  table.sort(nums, function(a, b)\n    return number_to_numeral[a] < number_to_numeral[b]\n\
    \  end)\n  return table.concat(nums, ' ')\nend", "  local nums = {}\n  for num\
    \ in numbers:gmatch('%S+') do\n    nums[#nums+1] = num\n  end\n  table.sort(nums)\n\
    \  return table.concat(nums, ' ')\nend", "    local numeral_map = {\n        zero\
    \ = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n        four =\
    \ 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n        eight =\
    \ 8,\n        nine = 9\n    }\n    local nums = {}\n    for num in numbers:gmatch('%S+')\
    \ do\n        table.insert(nums, numeral_map[num])\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for numeral,\
    \ value in pairs(numeral_map) do\n            if value == num then\n         \
    \       table.insert(result, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend", "    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, num)\n    end\n  \
    \  table.sort(nums)\n    return table.concat(nums, \" \")\nend", "  local num_table\
    \ = {}\n  for num in numbers:gmatch(\"%S+\") do\n    num_table[#num_table + 1]\
    \ = num\n  end\n  table.sort(num_table)\n  return table.concat(num_table, \" \"\
    )\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
