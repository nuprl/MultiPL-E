name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the array is empty, return an empty array:\n-- >>> by_length({})\n\
  -- {}\n-- If the array has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function sort_by_length(a, b)\n        return #a < #b\n \
    \   end\n    local function replace_digit(digit)\n        local digits = {\n \
    \           \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n        }\n        return digits[digit]\n    end\n    local\
    \ function is_valid(digit)\n        return digit >= 1 and digit <= 9\n    end\n\
    \    local function filter_valid(arr)\n        local result = {}\n        for\
    \ _, digit in ipairs(arr) do\n            if is_valid(digit) then\n          \
    \      table.insert(result, digit)\n            end\n        end\n        return\
    \ result\n    end\n    local function replace_digits(arr)\n        local result\
    \ = {}\n        for _, digit in ipairs(arr) do\n            table.insert(result,\
    \ replace_digit(digit))\n        end\n        return result\n    end\n    local\
    \ function reverse(arr)\n        local result = {}\n        for i = #arr, 1, -1\
    \ do\n            table.insert(result, arr[i])\n        end\n        return result\n\
    \    end\n    local valid_digits = filter_valid(arr)\n    table.sort(valid_digits,\
    \ sort_by_length)\n    local replaced_digits = replace_digits(valid_digits)\n\
    \    return reverse(replaced_digits)\nend", "    local res = {}\n    for _, v\
    \ in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    local res2 = {}\n    for\
    \ i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n    local res3\
    \ = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3, tostring(v))\n\
    \    end\n    return res3\nend", "    local res = {}\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    table.sort(res, function(a, b) return #a >\
    \ #b end)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n\
    \    return res\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    table.sort(res, function(a, b) return #a > #b end)\n    for i =\
    \ 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"\
    ):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\"\
    , \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\"\
    )\n    end\n    return res\nend", "    local res = {}\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    for i = 1, #res do\n        if res[i] == '1'\
    \ then\n            res[i] = 'One'\n        elseif res[i] == '2' then\n      \
    \      res[i] = 'Two'\n        elseif res[i] == '3' then\n            res[i] =\
    \ 'Three'\n        elseif res[i] == '4' then\n            res[i] = 'Four'\n  \
    \      elseif res[i] == '5' then\n            res[i] = 'Five'\n        elseif\
    \ res[i] == '6' then\n            res[i] = 'Six'\n        elseif res[i] == '7'\
    \ then\n            res[i] = 'Seven'\n        elseif res[i] == '8' then\n    \
    \        res[i] = 'Eight'\n        elseif res[i] == '9' then\n            res[i]\
    \ = 'Nine'\n        end\n    end\n    return res\nend", "    local map = {\n \
    \       [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n   \
    \     [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n     \
    \   [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(result, v)\n        end\n    end\n   \
    \ table.sort(result)\n    for i = 1, #result do\n        result[i] = map[result[i]]\n\
    \    end\n    return result\nend", "    local res = {}\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    for i = 1, #res do\n        if res[i] == '1'\
    \ then\n            res[i] = 'One'\n        elseif res[i] == '2' then\n      \
    \      res[i] = 'Two'\n        elseif res[i] == '3' then\n            res[i] =\
    \ 'Three'\n        elseif res[i] == '4' then\n            res[i] = 'Four'\n  \
    \      elseif res[i] == '5' then\n            res[i] = 'Five'\n        elseif\
    \ res[i] == '6' then\n            res[i] = 'Six'\n        elseif res[i] == '7'\
    \ then\n            res[i] = 'Seven'\n        elseif res[i] == '8' then\n    \
    \        res[i] = 'Eight'\n        elseif res[i] == '9' then\n            res[i]\
    \ = 'Nine'\n        end\n    end\n    return res\nend", "    local function to_name(num)\n\
    \        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n        return names[num]\n    end", "  local result = {}\n\
    \  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  local names = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i = 1, #result do\n\
    \    result[i] = names[result[i]]\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result / 2 do\n    result[i],\
    \ result[#result - i + 1] = result[#result - i + 1], result[i]\n  end\n  for i,\
    \ v in ipairs(result) do\n    result[i] = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}[v]\n  end\n  return result\nend", "    local\
    \ result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend", "    local\
    \ function sort_by_length(a, b)\n        return #a < #b\n    end\n    local function\
    \ replace_by_name(a)\n        if a == 1 then\n            return \"One\"\n   \
    \     elseif a == 2 then\n            return \"Two\"\n        elseif a == 3 then\n\
    \            return \"Three\"\n        elseif a == 4 then\n            return\
    \ \"Four\"\n        elseif a == 5 then\n            return \"Five\"\n        elseif\
    \ a == 6 then\n            return \"Six\"\n        elseif a == 7 then\n      \
    \      return \"Seven\"\n        elseif a == 8 then\n            return \"Eight\"\
    \n        elseif a == 9 then\n            return \"Nine\"\n        end\n    end\n\
    \    local function is_valid(a)\n        return a >= 1 and a <= 9\n    end\n \
    \   local function filter_valid(a)\n        return is_valid(a)\n    end\n    local\
    \ function map_replace(a)\n        return replace_by_name(a)\n    end\n    local\
    \ function reverse(a)\n        local ret = {}\n        for i = #a, 1, -1 do\n\
    \            table.insert(ret, a[i])\n        end\n        return ret\n    end\n\
    \    return reverse(map(map_replace, filter(filter_valid, arr)))\nend", "  local\
    \ function sort_by_length(a, b)\n    return #a < #b\n  end\n  local function replace_by_name(num)\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    return names[num]\n  end\n  local function is_valid(num)\n    return\
    \ num >= 1 and num <= 9\n  end\n  local function filter_valid(num)\n    return\
    \ is_valid(num)\n  end\n  local function map_by_name(num)\n    return replace_by_name(num)\n\
    \  end\n  local function reverse(arr)\n    local result = {}\n    for i = #arr,\
    \ 1, -1 do\n      table.insert(result, arr[i])\n    end\n    return result\n \
    \ end\n  local function sort_and_reverse(arr)\n    return reverse(table.sort(arr,\
    \ sort_by_length))\n  end\n  local function map_and_filter(arr)\n    return table.map(arr,\
    \ map_by_name, filter_valid)\n  end\n  return map_and_filter(sort_and_reverse(arr))\n\
    end", "  local res = {}\n  for i = 1, #arr do\n    if arr[i] > 0 and arr[i] <\
    \ 10 then\n      res[#res + 1] = arr[i]\n    end\n  end\n  table.sort(res)\n \
    \ local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"}\n  for i = 1, #res do\n    res[i] = names[res[i]]\n\
    \  end\n  return res\nend", "    local function sort_func(a, b)\n        return\
    \ a < b\n    end\n    local function reverse_func(a, b)\n        return a > b\n\
    \    end\n    local function replace_func(a)\n        if a == 1 then\n       \
    \     return 'One'\n        elseif a == 2 then\n            return 'Two'\n   \
    \     elseif a == 3 then\n            return 'Three'\n        elseif a == 4 then\n\
    \            return 'Four'\n        elseif a == 5 then\n            return 'Five'\n\
    \        elseif a == 6 then\n            return 'Six'\n        elseif a == 7 then\n\
    \            return 'Seven'\n        elseif a == 8 then\n            return 'Eight'\n\
    \        elseif a == 9 then\n            return 'Nine'\n        end\n    end\n\
    \    local function filter_func(a)\n        return a >= 1 and a <= 9\n    end\n\
    \    return table.map(table.filter(table.reverse(table.sort(arr, sort_func)),\
    \ filter_func), replace_func)\nend", "    local res = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] =\
    \ arr[i]\n        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n\
    \        res[i] = tostring(res[i])\n    end\n    for i = 1, #res do\n        if\
    \ res[i] == '1' then\n            res[i] = 'One'\n        elseif res[i] == '2'\
    \ then\n            res[i] = 'Two'\n        elseif res[i] == '3' then\n      \
    \      res[i] = 'Three'\n        elseif res[i] == '4' then\n            res[i]\
    \ = 'Four'\n        elseif res[i] == '5' then\n            res[i] = 'Five'\n \
    \       elseif res[i] == '6' then\n            res[i] = 'Six'\n        elseif\
    \ res[i] == '7' then\n            res[i] = 'Seven'\n        elseif res[i] == '8'\
    \ then\n            res[i] = 'Eight'\n        elseif res[i] == '9' then\n    \
    \        res[i] = 'Nine'\n        end\n    end\n    return res\nend", "    local\
    \ result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n\
    \    table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = string.gsub(v, \"1\", \"One\")\n        result[i] = string.gsub(result[i],\
    \ \"2\", \"Two\")\n        result[i] = string.gsub(result[i], \"3\", \"Three\"\
    )\n        result[i] = string.gsub(result[i], \"4\", \"Four\")\n        result[i]\
    \ = string.gsub(result[i], \"5\", \"Five\")\n        result[i] = string.gsub(result[i],\
    \ \"6\", \"Six\")\n        result[i] = string.gsub(result[i], \"7\", \"Seven\"\
    )\n        result[i] = string.gsub(result[i], \"8\", \"Eight\")\n        result[i]\
    \ = string.gsub(result[i], \"9\", \"Nine\")\n    end\n    return result\nend",
  "  local result = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n\
    \      result[#result + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for\
    \ i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  for i = 1,\
    \ #result do\n    if result[i] == '1' then\n      result[i] = 'One'\n    elseif\
    \ result[i] == '2' then\n      result[i] = 'Two'\n    elseif result[i] == '3'\
    \ then\n      result[i] = 'Three'\n    elseif result[i] == '4' then\n      result[i]\
    \ = 'Four'\n    elseif result[i] == '5' then\n      result[i] = 'Five'\n    elseif\
    \ result[i] == '6' then\n      result[i] = 'Six'\n    elseif result[i] == '7'\
    \ then\n      result[i] = 'Seven'\n    elseif result[i] == '8' then\n      result[i]\
    \ = 'Eight'\n    elseif result[i] == '9' then\n      result[i] = 'Nine'\n    end\n\
    \  end\n  return result\nend", "    local function sort_numbers(a, b)\n      \
    \  return a < b\n    end\n    local function reverse_array(arr)\n        local\
    \ reversed = {}\n        for i = #arr, 1, -1 do\n            table.insert(reversed,\
    \ arr[i])\n        end\n        return reversed\n    end\n    local function replace_numbers(arr)\n\
    \        local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'}\n        for i = 1, #arr do\n            arr[i] = numbers[arr[i]]\n\
    \        end\n        return arr\n    end\n    local function filter_numbers(arr)\n\
    \        local filtered = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(filtered, arr[i])\n\
    \            end\n        end\n        return filtered\n    end\n    return replace_numbers(reverse_array(table.sort(filter_numbers(arr),\
    \ sort_numbers)))\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] =\
    \ string.format(\"%s\", res[i])\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
