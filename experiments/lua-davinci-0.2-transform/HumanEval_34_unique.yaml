name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n\
    \  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n\
    \    s[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "    local seen = {}\n    local result = {}\n    for _, v in ipairs(l)\
    \ do\n        if not seen[v] then\n            table.insert(result, v)\n     \
    \       seen[v] = true\n        end\n    end\n    return result\nend", "    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(s) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local s = {}\n    for _,\
    \ v in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(s) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n \
    \     table.insert(r, v)\n    end\n  end\n  return r\nend", "  local res = {}\n\
    \  for _, v in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            r[#r + 1] = v\n        end\n    end\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            r[#r + 1] = v\n        end\n    end\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n\
    \    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            r[#r + 1] = v\n        end\n    end\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend", "    local r = {}\n    for _, v\
    \ in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n\
    \    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "  local s = {}\n  for _, v in ipairs(l)\
    \ do\n    s[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local res = {}\n    local\
    \ seen = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n     \
    \       res[#res + 1] = v\n            seen[v] = true\n        end\n    end\n\
    \    return res\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not\
    \ r[v] then\n      r[v] = true\n      table.insert(r, v)\n    end\n  end\n  return\
    \ r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r,\
    \ v) then\n            table.insert(r, v)\n        end\n    end\n    return r\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local\
    \ r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local u = {}\n    for _, v in ipairs(l) do\n       \
    \ u[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(u) do\n      \
    \  table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local t = {}\n\
    \    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n\
    \    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \ local res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n\
    \      table.insert(res, v)\n    end\n  end\n  return res\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "  local r = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(r, v) then\n      table.insert(r, v)\n    end\n  end\n\
    \  return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            r[#r + 1]\
    \ = v\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n      \
    \  table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(u, v) then\n            table.insert(u, v)\n        end\n    end\n\
    \    return u\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "    local t = {}\n    for _,v in ipairs(l) do\n   \
    \     t[v] = true\n    end\n    local r = {}\n    for k,_ in pairs(t) do\n   \
    \     table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            r[#r + 1] = v\n        end\n    end\n \
    \   return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            r[#r + 1] = v\n        end\n\
    \    end\n    return r\nend", "  local set = {}\n  for _, v in ipairs(l) do\n\
    \    set[v] = true\n  end\n  local result = {}\n  for k in pairs(set) do\n   \
    \ table.insert(result, k)\n  end\n  table.sort(result)\n  return result\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local seen = {}\n    local result = {}\n    for _, v\
    \ in ipairs(l) do\n        if not seen[v] then\n            table.insert(result,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n    \
    \    if not seen[v] then\n            table.insert(result, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return result\nend", "    local t = {}\n \
    \   for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n\
    \    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n      \
    \  table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        r[v]\
    \ = true\n    end\n    local i = 0\n    local u = {}\n    for k in pairs(r) do\n\
    \        i = i + 1\n        u[i] = k\n    end\n    table.sort(u)\n    return u\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n \
    \   end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for\
    \ k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            r[#r + 1]\
    \ = v\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            r[#r + 1]\
    \ = v\n        end\n    end\n    return r\nend", "    local res = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for\
    \ k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local seen = {}\n    local result = {}\n  \
    \  for _, v in ipairs(l) do\n        if not seen[v] then\n            table.insert(result,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return result\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local set = {}\n    for _, v in ipairs(l)\
    \ do\n        set[v] = true\n    end\n    local result = {}\n    for k in pairs(set)\
    \ do\n        table.insert(result, k)\n    end\n    table.sort(result)\n    return\
    \ result\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            r[#r + 1] = v\n        end\n    end\n    return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not r[v] then\n            r[v] = true\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "  local r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] =\
    \ true\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local ret = {}\n    for _, v in ipairs(l) do\n      \
    \  if not contains(ret, v) then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "  local t = {}\n  for _, v in ipairs(l) do\n\
    \    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local s = {}\n  for _, v in\
    \ ipairs(l) do\n    s[v] = true\n  end\n  local u = {}\n  for k, _ in pairs(s)\
    \ do\n    u[#u+1] = k\n  end\n  table.sort(u)\n  return u\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local s = {}\n    for _,\
    \ v in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(s) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for\
    \ k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n \
    \     table.insert(r, v)\n    end\n  end\n  return r\nend", "    local seen =\
    \ {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not seen[v]\
    \ then\n            table.insert(result, v)\n            seen[v] = true\n    \
    \    end\n    end\n    return result\nend", "    local r = {}\n    for _, v in\
    \ ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local r = {}\n    for _,\
    \ v in ipairs(l) do\n        if not contains(r, v) then\n            r[#r + 1]\
    \ = v\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for\
    \ k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n       \
    \ t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n      \
    \  table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        u[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(u) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(r, v) then\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local u = {}\n    for _, v in ipairs(l) do\n\
    \        if not u[v] then\n            u[v] = true\n            table.insert(u,\
    \ v)\n        end\n    end\n    return u\nend", "    local u = {}\n    for _,\
    \ v in ipairs(l) do\n        u[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(u) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "    local r = {}\n    for\
    \ _, v in ipairs(l) do\n        if not contains(r, v) then\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n     \
    \       table.insert(t, v)\n        end\n    end\n    return t\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n\
    \            table.insert(r, v)\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            r[#r + 1] = v\n        end\n    end\n    return r\nend", " \
    \   local r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v)\
    \ then\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r =\
    \ {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            r[#r + 1] = v\n        end\n    end\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not r[v] then\n            r[v] = true\n            table.insert(r, v)\n   \
    \     end\n    end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r, v)\n   \
    \ end\n  end\n  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n\
    \        if not r[v] then\n            r[v] = true\n            table.insert(r,\
    \ v)\n        end\n    end\n    return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend", "  \
    \  local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        r[v]\
    \ = true\n    end\n    local u = {}\n    for k, _ in pairs(r) do\n        u[#u\
    \ + 1] = k\n    end\n    return u\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t)\
    \ do\n        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend",
  "    local r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n\
    \    local u = {}\n    for k, _ in pairs(r) do\n        u[#u + 1] = k\n    end\n\
    \    table.sort(u)\n    return u\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
