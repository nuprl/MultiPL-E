name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n\
    \  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n\
    \  end\n  local r = {}\n  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n\
    \  table.sort(r)\n  return r\nend", "  local s = {}\n  for _, v in ipairs(l) do\n\
    \    s[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n  for k, _ in pairs(t)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "    local seen = {}\n    local result = {}\n    for _, v in ipairs(l)\
    \ do\n        if not seen[v] then\n            table.insert(result, v)\n     \
    \       seen[v] = true\n        end\n    end\n    return result\nend", "    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend", "  local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r,\
    \ v) then\n      table.insert(r, v)\n    end\n  end\n  return r\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, v in ipairs(l) do\n        if not seen[v] then\n          \
    \  table.insert(result, v)\n            seen[v] = true\n        end\n    end\n\
    \    return result\nend", "    local r = {}\n    for _, v in ipairs(l) do\n  \
    \      if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        s[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(s) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n\
    \    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n \
    \   end\n    table.sort(r)\n    return r\nend", "    local s = {}\n    for _,\
    \ v in ipairs(l) do\n        s[v] = true\n    end\n    local r = {}\n    for k,\
    \ _ in pairs(s) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n \
    \   return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(r, v) then\n            table.insert(r, v)\n        end\n    end\n\
    \    return r\nend", "    local r = {}\n    for _, v in ipairs(l) do\n       \
    \ if not contains(r, v) then\n            table.insert(r, v)\n        end\n  \
    \  end\n    return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        t[v] = true\n    end\n    local r = {}\n    for k, _ in pairs(t) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", " \
    \ local r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n \
    \     table.insert(r, v)\n    end\n  end\n  return r\nend", "  local res = {}\n\
    \  for _, v in ipairs(l) do\n    if not contains(res, v) then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
