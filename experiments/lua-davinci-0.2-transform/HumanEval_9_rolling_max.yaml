name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2,\
  \ 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  local max = numbers[1]\n  for i = 1, #numbers\
    \ do\n    max = math.max(max, numbers[i])\n    result[i] = max\n  end\n  return\
    \ result\nend", "    local result = {}\n    local max = numbers[1]\n    for i,\
    \ n in ipairs(numbers) do\n        if n > max then\n            max = n\n    \
    \    end\n        result[i] = max\n    end\n    return result\nend", "    local\
    \ result = {}\n    local max = 0\n    for _, number in ipairs(numbers) do\n  \
    \      max = math.max(max, number)\n        table.insert(result, max)\n    end\n\
    \    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    result[1] = max\n    for i = 2, #numbers do\n        if numbers[i] > max\
    \ then\n            max = numbers[i]\n        end\n        result[i] = max\n \
    \   end\n    return result\nend", "    local result = {}\n    local max = -math.huge\n\
    \    for _, number in ipairs(numbers) do\n        max = math.max(max, number)\n\
    \        table.insert(result, max)\n    end\n    return result\nend", "    local\
    \ max = numbers[1]\n    local result = {max}\n    for i = 2, #numbers do\n   \
    \     max = math.max(max, numbers[i])\n        result[i] = max\n    end\n    return\
    \ result\nend", "    local result = {}\n    local max = numbers[1]\n    for i,\
    \ v in ipairs(numbers) do\n        if v > max then\n            max = v\n    \
    \    end\n        result[i] = max\n    end\n    return result\nend", "    local\
    \ result = {}\n    local max = numbers[1]\n    for i, v in ipairs(numbers) do\n\
    \        if v > max then\n            max = v\n        end\n        result[i]\
    \ = max\n    end\n    return result\nend", "    local result = {}\n    local current_max\
    \ = numbers[1]\n    result[1] = current_max\n    for i = 2, #numbers do\n    \
    \    local number = numbers[i]\n        if number > current_max then\n       \
    \     current_max = number\n        end\n        result[i] = current_max\n   \
    \ end\n    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    for i, n in ipairs(numbers) do\n        if n > max then\n            max\
    \ = n\n        end\n        result[i] = max\n    end\n    return result\nend",
  "    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        if numbers[i] > max then\n            max = numbers[i]\n\
    \        end\n        result[i] = max\n    end\n    return result\nend", "   \
    \ local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        local number = numbers[i]\n        if number > max\
    \ then\n            max = number\n        end\n        result[i] = max\n    end\n\
    \    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    result[1] = max\n    for i = 2, #numbers do\n        local number = numbers[i]\n\
    \        if number > max then\n            max = number\n        end\n       \
    \ result[i] = max\n    end\n    return result\nend", "    local result = {}\n\
    \    local max = 0\n    for i, v in ipairs(numbers) do\n        max = math.max(max,\
    \ v)\n        result[i] = max\n    end\n    return result\nend", "    local result\
    \ = {}\n    local max = numbers[1]\n    result[1] = max\n    for i = 2, #numbers\
    \ do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n\
    \    return result\nend", "    local result = {}\n    local max = numbers[1]\n\
    \    for i = 1, #numbers do\n        if numbers[i] > max then\n            max\
    \ = numbers[i]\n        end\n        result[i] = max\n    end\n    return result\n\
    end", "    local result = {}\n    local max = numbers[1]\n    result[1] = max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > max then\n            max\
    \ = numbers[i]\n        end\n        result[i] = max\n    end\n    return result\n\
    end", "    local result = {}\n    local max = numbers[1]\n    result[1] = max\n\
    \    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n       \
    \ result[i] = max\n    end\n    return result\nend", "    local result = {}\n\
    \    local max = numbers[1]\n    for i = 1, #numbers do\n        max = math.max(max,\
    \ numbers[i])\n        result[i] = max\n    end\n    return result\nend", "  \
    \  local max = numbers[1]\n    local result = {max}\n    for i = 2, #numbers do\n\
    \        if numbers[i] > max then\n            max = numbers[i]\n        end\n\
    \        result[i] = max\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
