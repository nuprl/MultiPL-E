name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1, 2, 3, 4})\n\
  -- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>>\
  \ strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  local min, max = min_max(lst)\n  local min_idx,\
    \ max_idx = min_max_idx(lst)\n  local min_removed, max_removed = false, false\n\
    \  local idx = 1\n  while idx <= #lst do\n    if not min_removed then\n      res[idx]\
    \ = min\n      min_removed = true\n      idx = idx + 1\n    end\n    if not max_removed\
    \ then\n      res[idx] = max\n      max_removed = true\n      idx = idx + 1\n\
    \    end\n    min, max = min_max(lst, min_idx, max_idx)\n    min_idx, max_idx\
    \ = min_max_idx(lst, min_idx, max_idx)\n    min_removed, max_removed = false,\
    \ false\n  end\n  return res\nend", "    local res = {}\n    local min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx = 1,\
    \ 1\n    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx\
    \ = i\n        elseif lst[i] == max then\n            max_idx = i\n        end\n\
    \    end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min\n            min_idx = min_idx + 1\n            min\
    \ = lst[min_idx]\n        else\n            res[i] = max\n            max_idx\
    \ = max_idx - 1\n            max = lst[max_idx]\n        end\n        i = i +\
    \ 1\n    end\n    return res\nend", "    local res = {}\n    local min_val, max_val,\
    \ min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)), 1, 1\n    for\
    \ i, v in ipairs(lst) do\n        if v == min_val then\n            min_idx =\
    \ i\n        elseif v == max_val then\n            max_idx = i\n        end\n\
    \    end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min_val\n            table.remove(lst, min_idx)\n      \
    \      min_val, max_val, min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1\n            for j, v in ipairs(lst) do\n                if v == min_val\
    \ then\n                    min_idx = j\n                elseif v == max_val then\n\
    \                    max_idx = j\n                end\n            end\n     \
    \   else\n            res[i] = max_val\n            table.remove(lst, max_idx)\n\
    \            min_val, max_val, min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1\n            for j, v in ipairs(lst) do\n                if v == min_val\
    \ then\n                    min_idx = j\n                elseif v == max_val then\n\
    \                    max_idx = j\n                end\n            end\n     \
    \   end\n        i = i + 1\n    end\n    return res\nend", "    local result =\
    \ {}\n    local sorted = table.sort(lst)\n    local n = #sorted\n    local i =\
    \ 1\n    local j = n\n    while i <= n do\n        result[i] = sorted[i]\n   \
    \     i = i + 1\n        if i <= n then\n            result[i] = sorted[j]\n \
    \           j = j - 1\n            i = i + 1\n        end\n    end\n    return\
    \ result\nend", "    local res = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = table.index_of(lst, min_val),\
    \ table.index_of(lst, max_val)\n    local min_idx_used, max_idx_used = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_idx_used\
    \ then\n            res[i] = min_val\n            min_idx_used = true\n      \
    \      i = i + 1\n        end\n        if not max_idx_used then\n            res[i]\
    \ = max_val\n            max_idx_used = true\n            i = i + 1\n        end\n\
    \        if min_idx_used and max_idx_used then\n            min_val, max_val =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n            min_idx, max_idx =\
    \ table.index_of(lst, min_val), table.index_of(lst, max_val)\n            min_idx_used,\
    \ max_idx_used = false, false\n        end\n    end\n    return res\nend", " \
    \   local res = {}\n    local min_val, max_val, min_idx, max_idx\n    local min_found,\
    \ max_found\n    local i = 1\n    while i <= #lst do\n        min_found, max_found\
    \ = false, false\n        for j = 1, #lst do\n            if not min_found then\n\
    \                if not min_val or lst[j] < min_val then\n                   \
    \ min_val = lst[j]\n                    min_idx = j\n                end\n   \
    \         end\n            if not max_found then\n                if not max_val\
    \ or lst[j] > max_val then\n                    max_val = lst[j]\n           \
    \         max_idx = j\n                end\n            end\n            if min_found\
    \ and max_found then\n                break\n            end\n        end\n  \
    \      if i % 2 == 1 then\n            res[i] = min_val\n            lst[min_idx]\
    \ = nil\n            min_val = nil\n        else\n            res[i] = max_val\n\
    \            lst[max_idx] = nil\n            max_val = nil\n        end\n    \
    \    i = i + 1\n    end\n    return res\nend", "    local result = {}\n    local\
    \ min_index, max_index\n    local min_value, max_value\n    local i, j\n    local\
    \ n = #lst\n    local k = 1\n    while k <= n do\n        min_value = math.huge\n\
    \        max_value = -math.huge\n        for i = 1, n do\n            if lst[i]\
    \ ~= nil then\n                if lst[i] < min_value then\n                  \
    \  min_value = lst[i]\n                    min_index = i\n                end\n\
    \                if lst[i] > max_value then\n                    max_value = lst[i]\n\
    \                    max_index = i\n                end\n            end\n   \
    \     end\n        lst[min_index] = nil\n        lst[max_index] = nil\n      \
    \  result[k] = min_value\n        result[k + 1] = max_value\n        k = k + 2\n\
    \    end\n    return result\nend", "  local res = {}\n  local min_idx, max_idx\n\
    \  local min_val, max_val\n  local min_found, max_found\n  local i, j\n  local\
    \ n = #lst\n  local k = 1\n  while k <= n do\n    min_found = false\n    max_found\
    \ = false\n    for i = 1, n do\n      if lst[i] then\n        if not min_found\
    \ then\n          min_idx = i\n          min_val = lst[i]\n          min_found\
    \ = true\n        elseif lst[i] < min_val then\n          min_idx = i\n      \
    \    min_val = lst[i]\n        end\n        if not max_found then\n          max_idx\
    \ = i\n          max_val = lst[i]\n          max_found = true\n        elseif\
    \ lst[i] > max_val then\n          max_idx = i\n          max_val = lst[i]\n \
    \       end\n      end\n    end\n    if k % 2 == 1 then\n      res[k] = min_val\n\
    \      lst[min_idx] = nil\n    else\n      res[k] = max_val\n      lst[max_idx]\
    \ = nil\n    end\n    k = k + 1\n  end\n  return res\nend", "  local res = {}\n\
    \  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local\
    \ min_idx = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i] == min\
    \ then\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx =\
    \ i\n    end\n  end\n  local min_found = false\n  local max_found = false\n  for\
    \ i = 1, #lst do\n    if i % 2 == 1 then\n      if not min_found then\n      \
    \  res[i] = min\n        min_found = true\n      else\n        res[i] = max\n\
    \        max_found = true\n      end\n    else\n      if not max_found then\n\
    \        res[i] = max\n        max_found = true\n      else\n        res[i] =\
    \ min\n        min_found = true\n      end\n    end\n  end\n  return res\nend",
  "  local lst_copy = lst:copy()\n  local result = {}\n  while #lst_copy > 0 do\n\
    \    local min = lst_copy:min()\n    local max = lst_copy:max()\n    table.insert(result,\
    \ min)\n    table.insert(result, max)\n    lst_copy:remove(min)\n    lst_copy:remove(max)\n\
    \  end\n  return result\nend", "  local function strange_sort(lst, res)\n    if\
    \ #lst == 0 then\n      return res\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    local min_index = table.index_of(lst, min)\n    local max_index =\
    \ table.index_of(lst, max)\n    table.remove(lst, min_index)\n    table.remove(lst,\
    \ max_index)\n    return strange_sort(lst, res)\n  end\n  return strange_sort(lst,\
    \ {})\nend", "    local result = {}\n    local min_index, max_index = 1, #lst\n\
    \    local min_value, max_value = lst[min_index], lst[max_index]\n    local min_found,\
    \ max_found = false, false\n    local min_count, max_count = 0, 0\n    local min_max_count\
    \ = 0\n    local min_max_value = min_value\n    local min_max_index = min_index\n\
    \    local min_max_found = false\n    local max_min_count = 0\n    local max_min_value\
    \ = max_value\n    local max_min_index = max_index\n    local max_min_found =\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] < min_value then\n                min_value = lst[i]\n\
    \                min_index = i\n            end\n            min_count = min_count\
    \ + 1\n            if min_count == #lst then\n                min_found = true\n\
    \                table.insert(result, min_value)\n                min_max_value\
    \ = min_value\n                min_max_index = min_index\n                min_max_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] > max_value then\n                max_value = lst[i]\n      \
    \          max_index = i\n            end\n            max_count = max_count +\
    \ 1\n            if max_count == #lst then\n                max_found = true\n\
    \                table.insert(result, max_value)\n                max_min_value\
    \ = max_value\n                max_min_index = max_index\n                max_min_found\
    \ = true\n            end\n        end\n        if not min_max_found then\n  \
    \          if lst[i] > min_max_value and i ~= max_index then\n               \
    \ min_max_value = lst[i]\n                min_max_index = i\n            end\n\
    \            min_max_count = min_max_count + 1\n            if min_max_count ==\
    \ #lst - 1 then\n                min_max_found", "    local res = {}\n    local\
    \ min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 0, 0\n    for i = 1, #lst do\n        if lst[i] == min_val then\n\
    \            min_idx = i\n        elseif lst[i] == max_val then\n            max_idx\
    \ = i\n        end\n    end\n    local min_max = true\n    while #lst > 0 do\n\
    \        if min_max then\n            table.insert(res, table.remove(lst, min_idx))\n\
    \            min_max = false\n        else\n            table.insert(res, table.remove(lst,\
    \ max_idx))\n            min_max = true\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local sorted = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 0, 0\n    local min_found,\
    \ max_found = false, false\n    local i = 1\n    while i <= #lst do\n        if\
    \ not min_found then\n            if lst[i] == min then\n                min_idx\
    \ = i\n                min_found = true\n            end\n        end\n      \
    \  if not max_found then\n            if lst[i] == max then\n                max_idx\
    \ = i\n                max_found = true\n            end\n        end\n      \
    \  if min_found and max_found then\n            break\n        end\n        i\
    \ = i + 1\n    end\n    i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            table.insert(res, min)\n            table.insert(sorted, min)\n \
    \           min_found = false\n        else\n            table.insert(res, max)\n\
    \            table.insert(sorted, max)\n            max_found = false\n      \
    \  end\n        i = i + 1\n    end\n    for _, v in ipairs(lst) do\n        if\
    \ not sorted[v] then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    local res = {}\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n\
    \    local min_found = false\n    local max_found = false\n    local i = 1\n \
    \   while i <= #lst do\n        if not min_found then\n            min_found =\
    \ true\n            res[i] = min_val\n            i = i + 1\n        end\n   \
    \     if not max_found then\n            max_found = true\n            res[i]\
    \ = max_val\n            i = i + 1\n        end\n        min_found = false\n \
    \       max_found = false\n        if min_idx < max_idx then\n            min_idx\
    \ = min_idx + 1\n            min_val = lst[min_idx]\n        end\n        if max_idx\
    \ > min_idx then\n            max_idx = max_idx - 1\n            max_val = lst[max_idx]\n\
    \        end\n    end\n    return res\nend", "    local res = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = lst:index_of(min), lst:index_of(max)\n    local min_removed, max_removed =\
    \ false, false\n    local min_removed_idx, max_removed_idx = 0, 0\n    local idx\
    \ = 1\n    while #lst > 0 do\n        if idx % 2 == 1 then\n            if not\
    \ min_removed then\n                table.insert(res, min)\n                table.remove(lst,\
    \ min_idx)\n                min_removed = true\n                min_removed_idx\
    \ = idx\n            else\n                table.insert(res, lst[min_removed_idx])\n\
    \                table.remove(lst, min_removed_idx)\n            end\n       \
    \ else\n            if not max_removed then\n                table.insert(res,\
    \ max)\n                table.remove(lst, max_idx)\n                max_removed\
    \ = true\n                max_removed_idx = idx\n            else\n          \
    \      table.insert(res, lst[max_removed_idx])\n                table.remove(lst,\
    \ max_removed_idx)\n            end\n        end\n        idx = idx + 1\n    end\n\
    \    return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local i = 1\n    while i <= #lst do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min = min +\
    \ 1\n        else\n            res[i] = max\n            max = max - 1\n     \
    \   end\n        i = i + 1\n    end\n    return res\nend", "    local res = {}\n\
    \    local min, max = min_max(lst)\n    local min_idx, max_idx = min_max_idx(lst)\n\
    \    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt\
    \ = 0, 0\n    local min_max_cnt = 0\n    local min_max_val = min_val\n    local\
    \ min_max_idx = min_idx\n    local min_max_cnt_val = min_val\n    local min_max_cnt_idx\
    \ = min_idx\n    local min_max_cnt_cnt = 0\n    local min_max_cnt_max_cnt = 0\n\
    \    local min_max_cnt_min_cnt = 0\n    local min_max_cnt_max_val = min_val\n\
    \    local min_max_cnt_min_val = min_val\n    local min_max_cnt_max_idx = min_idx\n\
    \    local min_max_cnt_min_idx = min_idx\n    local min_max_cnt_max_idx_val =\
    \ min_val\n    local min_max_cnt_min_idx_val = min_val\n    local min_max_cnt_max_idx_cnt\
    \ = 0\n    local min_max_cnt_min_idx_cnt = 0\n    local min_max_cnt_max_idx_max_cnt\
    \ = 0\n    local min_max_cnt_min_idx_min_cnt = 0\n    local min_max_cnt_max_idx_max_val\
    \ = min_val\n    local min_max_cnt_min_idx_min_val = min_val\n    local min_max_cnt_max_idx_min_val\
    \ = min_val\n    local min_max_cnt_min_idx_max_val = min_val\n    local min_max_cnt_max_idx_min_idx\
    \ = min_idx\n    local min_max_", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    local min_found = false\n    local max_found = false\n    local\
    \ i = 1\n    while i <= #lst do\n        if lst[i] == min and not min_found then\n\
    \            res[min_idx] = min\n            min_idx = min_idx + 2\n         \
    \   min_found = true\n        elseif lst[i] == max and not max_found then\n  \
    \          res[max_idx] = max\n            max_idx = max_idx - 2\n           \
    \ max_found = true\n        end\n        i = i + 1\n    end\n    i = 1\n    while\
    \ i <= #lst do\n        if lst[i] ~= min and lst[i] ~= max then\n            if\
    \ min_idx <= max_idx then\n                res[min_idx] = lst[i]\n           \
    \     min_idx = min_idx + 2\n            else\n                res[max_idx] =\
    \ lst[i]\n                max_idx = max_idx - 2\n            end\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = lst:index_of(min), lst:index_of(max)\n    local min_idx_used, max_idx_used\
    \ = false, false\n    local i = 1\n    while i <= #lst do\n        if not min_idx_used\
    \ then\n            res[i] = min\n            min_idx_used = true\n          \
    \  i = i + 1\n        end\n        if not max_idx_used then\n            res[i]\
    \ = max\n            max_idx_used = true\n            i = i + 1\n        end\n\
    \        lst[min_idx], lst[max_idx] = nil, nil\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \        min_idx_used, max_idx_used = false, false\n    end\n    return res\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
