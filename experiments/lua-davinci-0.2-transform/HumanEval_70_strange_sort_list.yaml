name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1, 2, 3, 4})\n\
  -- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>>\
  \ strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  local min, max = min_max(lst)\n  local min_idx,\
    \ max_idx = min_max_idx(lst)\n  local min_removed, max_removed = false, false\n\
    \  local idx = 1\n  while idx <= #lst do\n    if not min_removed then\n      res[idx]\
    \ = min\n      min_removed = true\n      idx = idx + 1\n    end\n    if not max_removed\
    \ then\n      res[idx] = max\n      max_removed = true\n      idx = idx + 1\n\
    \    end\n    min, max = min_max(lst, min_idx, max_idx)\n    min_idx, max_idx\
    \ = min_max_idx(lst, min_idx, max_idx)\n    min_removed, max_removed = false,\
    \ false\n  end\n  return res\nend", "    local res = {}\n    local min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx = 1,\
    \ 1\n    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx\
    \ = i\n        elseif lst[i] == max then\n            max_idx = i\n        end\n\
    \    end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min\n            min_idx = min_idx + 1\n            min\
    \ = lst[min_idx]\n        else\n            res[i] = max\n            max_idx\
    \ = max_idx - 1\n            max = lst[max_idx]\n        end\n        i = i +\
    \ 1\n    end\n    return res\nend", "    local res = {}\n    local min_val, max_val,\
    \ min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)), 1, 1\n    for\
    \ i, v in ipairs(lst) do\n        if v == min_val then\n            min_idx =\
    \ i\n        elseif v == max_val then\n            max_idx = i\n        end\n\
    \    end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min_val\n            table.remove(lst, min_idx)\n      \
    \      min_val, max_val, min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1\n            for j, v in ipairs(lst) do\n                if v == min_val\
    \ then\n                    min_idx = j\n                elseif v == max_val then\n\
    \                    max_idx = j\n                end\n            end\n     \
    \   else\n            res[i] = max_val\n            table.remove(lst, max_idx)\n\
    \            min_val, max_val, min_idx, max_idx = math.min(unpack(lst)), math.max(unpack(lst)),\
    \ 1, 1\n            for j, v in ipairs(lst) do\n                if v == min_val\
    \ then\n                    min_idx = j\n                elseif v == max_val then\n\
    \                    max_idx = j\n                end\n            end\n     \
    \   end\n        i = i + 1\n    end\n    return res\nend", "    local result =\
    \ {}\n    local sorted = table.sort(lst)\n    local n = #sorted\n    local i =\
    \ 1\n    local j = n\n    while i <= n do\n        result[i] = sorted[i]\n   \
    \     i = i + 1\n        if i <= n then\n            result[i] = sorted[j]\n \
    \           j = j - 1\n            i = i + 1\n        end\n    end\n    return\
    \ result\nend", "    local res = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = table.index_of(lst, min_val),\
    \ table.index_of(lst, max_val)\n    local min_idx_used, max_idx_used = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_idx_used\
    \ then\n            res[i] = min_val\n            min_idx_used = true\n      \
    \      i = i + 1\n        end\n        if not max_idx_used then\n            res[i]\
    \ = max_val\n            max_idx_used = true\n            i = i + 1\n        end\n\
    \        if min_idx_used and max_idx_used then\n            min_val, max_val =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n            min_idx, max_idx =\
    \ table.index_of(lst, min_val), table.index_of(lst, max_val)\n            min_idx_used,\
    \ max_idx_used = false, false\n        end\n    end\n    return res\nend", " \
    \   local res = {}\n    local min_val, max_val, min_idx, max_idx\n    local min_found,\
    \ max_found\n    local i = 1\n    while i <= #lst do\n        min_found, max_found\
    \ = false, false\n        for j = 1, #lst do\n            if not min_found then\n\
    \                if not min_val or lst[j] < min_val then\n                   \
    \ min_val = lst[j]\n                    min_idx = j\n                end\n   \
    \         end\n            if not max_found then\n                if not max_val\
    \ or lst[j] > max_val then\n                    max_val = lst[j]\n           \
    \         max_idx = j\n                end\n            end\n            if min_found\
    \ and max_found then\n                break\n            end\n        end\n  \
    \      if i % 2 == 1 then\n            res[i] = min_val\n            lst[min_idx]\
    \ = nil\n            min_val = nil\n        else\n            res[i] = max_val\n\
    \            lst[max_idx] = nil\n            max_val = nil\n        end\n    \
    \    i = i + 1\n    end\n    return res\nend", "    local result = {}\n    local\
    \ min_index, max_index\n    local min_value, max_value\n    local i, j\n    local\
    \ n = #lst\n    local k = 1\n    while k <= n do\n        min_value = math.huge\n\
    \        max_value = -math.huge\n        for i = 1, n do\n            if lst[i]\
    \ ~= nil then\n                if lst[i] < min_value then\n                  \
    \  min_value = lst[i]\n                    min_index = i\n                end\n\
    \                if lst[i] > max_value then\n                    max_value = lst[i]\n\
    \                    max_index = i\n                end\n            end\n   \
    \     end\n        lst[min_index] = nil\n        lst[max_index] = nil\n      \
    \  result[k] = min_value\n        result[k + 1] = max_value\n        k = k + 2\n\
    \    end\n    return result\nend", "  local res = {}\n  local min_idx, max_idx\n\
    \  local min_val, max_val\n  local min_found, max_found\n  local i, j\n  local\
    \ n = #lst\n  local k = 1\n  while k <= n do\n    min_found = false\n    max_found\
    \ = false\n    for i = 1, n do\n      if lst[i] then\n        if not min_found\
    \ then\n          min_idx = i\n          min_val = lst[i]\n          min_found\
    \ = true\n        elseif lst[i] < min_val then\n          min_idx = i\n      \
    \    min_val = lst[i]\n        end\n        if not max_found then\n          max_idx\
    \ = i\n          max_val = lst[i]\n          max_found = true\n        elseif\
    \ lst[i] > max_val then\n          max_idx = i\n          max_val = lst[i]\n \
    \       end\n      end\n    end\n    if k % 2 == 1 then\n      res[k] = min_val\n\
    \      lst[min_idx] = nil\n    else\n      res[k] = max_val\n      lst[max_idx]\
    \ = nil\n    end\n    k = k + 1\n  end\n  return res\nend", "  local res = {}\n\
    \  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local\
    \ min_idx = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i] == min\
    \ then\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx =\
    \ i\n    end\n  end\n  local min_found = false\n  local max_found = false\n  for\
    \ i = 1, #lst do\n    if i % 2 == 1 then\n      if not min_found then\n      \
    \  res[i] = min\n        min_found = true\n      else\n        res[i] = max\n\
    \        max_found = true\n      end\n    else\n      if not max_found then\n\
    \        res[i] = max\n        max_found = true\n      else\n        res[i] =\
    \ min\n        min_found = true\n      end\n    end\n  end\n  return res\nend",
  "  local lst_copy = lst:copy()\n  local result = {}\n  while #lst_copy > 0 do\n\
    \    local min = lst_copy:min()\n    local max = lst_copy:max()\n    table.insert(result,\
    \ min)\n    table.insert(result, max)\n    lst_copy:remove(min)\n    lst_copy:remove(max)\n\
    \  end\n  return result\nend", "  local function strange_sort(lst, res)\n    if\
    \ #lst == 0 then\n      return res\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    local min_index = table.index_of(lst, min)\n    local max_index =\
    \ table.index_of(lst, max)\n    table.remove(lst, min_index)\n    table.remove(lst,\
    \ max_index)\n    return strange_sort(lst, res)\n  end\n  return strange_sort(lst,\
    \ {})\nend", "    local result = {}\n    local min_index, max_index = 1, #lst\n\
    \    local min_value, max_value = lst[min_index], lst[max_index]\n    local min_found,\
    \ max_found = false, false\n    local min_count, max_count = 0, 0\n    local min_max_count\
    \ = 0\n    local min_max_value = min_value\n    local min_max_index = min_index\n\
    \    local min_max_found = false\n    local max_min_count = 0\n    local max_min_value\
    \ = max_value\n    local max_min_index = max_index\n    local max_min_found =\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] < min_value then\n                min_value = lst[i]\n\
    \                min_index = i\n            end\n            min_count = min_count\
    \ + 1\n            if min_count == #lst then\n                min_found = true\n\
    \                table.insert(result, min_value)\n                min_max_value\
    \ = min_value\n                min_max_index = min_index\n                min_max_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if lst[i] > max_value then\n                max_value = lst[i]\n      \
    \          max_index = i\n            end\n            max_count = max_count +\
    \ 1\n            if max_count == #lst then\n                max_found = true\n\
    \                table.insert(result, max_value)\n                max_min_value\
    \ = max_value\n                max_min_index = max_index\n                max_min_found\
    \ = true\n            end\n        end\n        if not min_max_found then\n  \
    \          if lst[i] > min_max_value and i ~= max_index then\n               \
    \ min_max_value = lst[i]\n                min_max_index = i\n            end\n\
    \            min_max_count = min_max_count + 1\n            if min_max_count ==\
    \ #lst - 1 then\n                min_max_found", "    local res = {}\n    local\
    \ min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 0, 0\n    for i = 1, #lst do\n        if lst[i] == min_val then\n\
    \            min_idx = i\n        elseif lst[i] == max_val then\n            max_idx\
    \ = i\n        end\n    end\n    local min_max = true\n    while #lst > 0 do\n\
    \        if min_max then\n            table.insert(res, table.remove(lst, min_idx))\n\
    \            min_max = false\n        else\n            table.insert(res, table.remove(lst,\
    \ max_idx))\n            min_max = true\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local sorted = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 0, 0\n    local min_found,\
    \ max_found = false, false\n    local i = 1\n    while i <= #lst do\n        if\
    \ not min_found then\n            if lst[i] == min then\n                min_idx\
    \ = i\n                min_found = true\n            end\n        end\n      \
    \  if not max_found then\n            if lst[i] == max then\n                max_idx\
    \ = i\n                max_found = true\n            end\n        end\n      \
    \  if min_found and max_found then\n            break\n        end\n        i\
    \ = i + 1\n    end\n    i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            table.insert(res, min)\n            table.insert(sorted, min)\n \
    \           min_found = false\n        else\n            table.insert(res, max)\n\
    \            table.insert(sorted, max)\n            max_found = false\n      \
    \  end\n        i = i + 1\n    end\n    for _, v in ipairs(lst) do\n        if\
    \ not sorted[v] then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "    local res = {}\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n\
    \    local min_found = false\n    local max_found = false\n    local i = 1\n \
    \   while i <= #lst do\n        if not min_found then\n            min_found =\
    \ true\n            res[i] = min_val\n            i = i + 1\n        end\n   \
    \     if not max_found then\n            max_found = true\n            res[i]\
    \ = max_val\n            i = i + 1\n        end\n        min_found = false\n \
    \       max_found = false\n        if min_idx < max_idx then\n            min_idx\
    \ = min_idx + 1\n            min_val = lst[min_idx]\n        end\n        if max_idx\
    \ > min_idx then\n            max_idx = max_idx - 1\n            max_val = lst[max_idx]\n\
    \        end\n    end\n    return res\nend", "    local res = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = lst:index_of(min), lst:index_of(max)\n    local min_removed, max_removed =\
    \ false, false\n    local min_removed_idx, max_removed_idx = 0, 0\n    local idx\
    \ = 1\n    while #lst > 0 do\n        if idx % 2 == 1 then\n            if not\
    \ min_removed then\n                table.insert(res, min)\n                table.remove(lst,\
    \ min_idx)\n                min_removed = true\n                min_removed_idx\
    \ = idx\n            else\n                table.insert(res, lst[min_removed_idx])\n\
    \                table.remove(lst, min_removed_idx)\n            end\n       \
    \ else\n            if not max_removed then\n                table.insert(res,\
    \ max)\n                table.remove(lst, max_idx)\n                max_removed\
    \ = true\n                max_removed_idx = idx\n            else\n          \
    \      table.insert(res, lst[max_removed_idx])\n                table.remove(lst,\
    \ max_removed_idx)\n            end\n        end\n        idx = idx + 1\n    end\n\
    \    return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local i = 1\n    while i <= #lst do\n\
    \        if i % 2 == 1 then\n            res[i] = min\n            min = min +\
    \ 1\n        else\n            res[i] = max\n            max = max - 1\n     \
    \   end\n        i = i + 1\n    end\n    return res\nend", "    local res = {}\n\
    \    local min, max = min_max(lst)\n    local min_idx, max_idx = min_max_idx(lst)\n\
    \    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local min_cnt, max_cnt\
    \ = 0, 0\n    local min_max_cnt = 0\n    local min_max_val = min_val\n    local\
    \ min_max_idx = min_idx\n    local min_max_cnt_val = min_val\n    local min_max_cnt_idx\
    \ = min_idx\n    local min_max_cnt_cnt = 0\n    local min_max_cnt_max_cnt = 0\n\
    \    local min_max_cnt_min_cnt = 0\n    local min_max_cnt_max_val = min_val\n\
    \    local min_max_cnt_min_val = min_val\n    local min_max_cnt_max_idx = min_idx\n\
    \    local min_max_cnt_min_idx = min_idx\n    local min_max_cnt_max_idx_val =\
    \ min_val\n    local min_max_cnt_min_idx_val = min_val\n    local min_max_cnt_max_idx_cnt\
    \ = 0\n    local min_max_cnt_min_idx_cnt = 0\n    local min_max_cnt_max_idx_max_cnt\
    \ = 0\n    local min_max_cnt_min_idx_min_cnt = 0\n    local min_max_cnt_max_idx_max_val\
    \ = min_val\n    local min_max_cnt_min_idx_min_val = min_val\n    local min_max_cnt_max_idx_min_val\
    \ = min_val\n    local min_max_cnt_min_idx_max_val = min_val\n    local min_max_cnt_max_idx_min_idx\
    \ = min_idx\n    local min_max_", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    local min_found = false\n    local max_found = false\n    local\
    \ i = 1\n    while i <= #lst do\n        if lst[i] == min and not min_found then\n\
    \            res[min_idx] = min\n            min_idx = min_idx + 2\n         \
    \   min_found = true\n        elseif lst[i] == max and not max_found then\n  \
    \          res[max_idx] = max\n            max_idx = max_idx - 2\n           \
    \ max_found = true\n        end\n        i = i + 1\n    end\n    i = 1\n    while\
    \ i <= #lst do\n        if lst[i] ~= min and lst[i] ~= max then\n            if\
    \ min_idx <= max_idx then\n                res[min_idx] = lst[i]\n           \
    \     min_idx = min_idx + 2\n            else\n                res[max_idx] =\
    \ lst[i]\n                max_idx = max_idx - 2\n            end\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = lst:index_of(min), lst:index_of(max)\n    local min_idx_used, max_idx_used\
    \ = false, false\n    local i = 1\n    while i <= #lst do\n        if not min_idx_used\
    \ then\n            res[i] = min\n            min_idx_used = true\n          \
    \  i = i + 1\n        end\n        if not max_idx_used then\n            res[i]\
    \ = max\n            max_idx_used = true\n            i = i + 1\n        end\n\
    \        lst[min_idx], lst[max_idx] = nil, nil\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \        min_idx_used, max_idx_used = false, false\n    end\n    return res\n\
    end", "    local res = {}\n    local min, max = min_max(lst)\n    local i = 1\n\
    \    while #lst > 0 do\n        if i % 2 == 1 then\n            res[#res + 1]\
    \ = min\n            lst = remove_value(lst, min)\n            min, max = min_max(lst)\n\
    \        else\n            res[#res + 1] = max\n            lst = remove_value(lst,\
    \ max)\n            min, max = min_max(lst)\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n\
    \  for i, v in ipairs(lst) do\n    if v == min then\n      min_idx = i\n    elseif\
    \ v == max then\n      max_idx = i\n    end\n  end\n  local i = 1\n  while i <=\
    \ #lst do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx\
    \ + 1\n      min = lst[min_idx]\n    else\n      res[i] = max\n      max_idx =\
    \ max_idx - 1\n      max = lst[max_idx]\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 0, 0\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_idx = i\n        elseif v == max\
    \ then\n            max_idx = i\n        end\n    end\n    local i = 1\n    while\
    \ i <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n       \
    \     min_idx = min_idx + 1\n            min = lst[min_idx]\n        else\n  \
    \          res[i] = max\n            max_idx = max_idx - 1\n            max =\
    \ lst[max_idx]\n        end\n        i = i + 1\n    end\n    return res\nend",
  "    local sorted = {}\n    local min_index, max_index\n    local min, max\n   \
    \ local i = 1\n    while #lst > 0 do\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_index, max_index = index_of(lst, min), index_of(lst,\
    \ max)\n        if i % 2 == 1 then\n            table.insert(sorted, min)\n  \
    \          table.remove(lst, min_index)\n        else\n            table.insert(sorted,\
    \ max)\n            table.remove(lst, max_index)\n        end\n        i = i +\
    \ 1\n    end\n    return sorted\nend", "    local res = {}\n    local min_val,\
    \ max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    for i, v in ipairs(lst) do\n        if v == min_val then\n     \
    \       min_idx = i\n        elseif v == max_val then\n            max_idx = i\n\
    \        end\n    end\n    local min_max = min_idx > max_idx\n    local idx =\
    \ 1\n    while #lst > 0 do\n        if min_max then\n            res[idx] = lst[min_idx]\n\
    \            table.remove(lst, min_idx)\n            min_idx = 1\n           \
    \ max_idx = 1\n            for i, v in ipairs(lst) do\n                if v ==\
    \ math.min(unpack(lst)) then\n                    min_idx = i\n              \
    \  elseif v == math.max(unpack(lst)) then\n                    max_idx = i\n \
    \               end\n            end\n            min_max = min_idx > max_idx\n\
    \        else\n            res[idx] = lst[max_idx]\n            table.remove(lst,\
    \ max_idx)\n            min_idx = 1\n            max_idx = 1\n            for\
    \ i, v in ipairs(lst) do\n                if v == math.min(unpack(lst)) then\n\
    \                    min_idx = i\n                elseif v == math.max(unpack(lst))\
    \ then\n                    max_idx = i\n                end\n            end\n\
    \            min_max = min_idx > max_idx\n        end\n        idx = idx + 1\n\
    \    end\n    return res\nend", "    local res = {}\n    local min_idx = 1\n \
    \   local max_idx = #lst\n    local min_val = lst[min_idx]\n    local max_val\
    \ = lst[max_idx]\n    local min_val_idx = min_idx\n    local max_val_idx = max_idx\n\
    \    local min_val_idx_found = false\n    local max_val_idx_found = false\n  \
    \  local min_val_found = false\n    local max_val_found = false\n    local min_val_idx_found_first\
    \ = false\n    local max_val_idx_found_first = false\n    local min_val_found_first\
    \ = false\n    local max_val_found_first = false\n    local min_val_idx_found_second\
    \ = false\n    local max_val_idx_found_second = false\n    local min_val_found_second\
    \ = false\n    local max_val_found_second = false\n    local min_val_idx_found_third\
    \ = false\n    local max_val_idx_found_third = false\n    local min_val_found_third\
    \ = false\n    local max_val_found_third = false\n    local min_val_idx_found_fourth\
    \ = false\n    local max_val_idx_found_fourth = false\n    local min_val_found_fourth\
    \ = false\n    local max_val_found_fourth = false\n    local min_val_idx_found_fifth\
    \ = false\n    local max_val_idx_found_fifth = false\n    local min_val_found_fifth\
    \ = false\n    local max_val_found_fifth = false\n    local min_val_idx_found_sixth\
    \ = false\n    local max_val_idx_found_sixth = false\n    local min_val_found_sixth\
    \ = false\n    local max_val_found_sixth = false\n    local min_val_idx_found_seventh\
    \ = false\n    local max_val_idx_found_seventh = false\n    local min_val_found_seventh\
    \ = false\n    local max_val_found_", "  local result = {}\n  local min_index,\
    \ max_index\n  local min_value, max_value\n  local min_value_set, max_value_set\
    \ = false, false\n  local min_value_set_count, max_value_set_count = 0, 0\n  local\
    \ min_value_set_count_limit, max_value_set_count_limit = 0, 0\n  local min_value_set_count_limit_set,\
    \ max_value_set_count_limit_set = false, false\n  local min_value_set_count_limit_set_count,\
    \ max_value_set_count_limit_set_count = 0, 0\n  local min_value_set_count_limit_set_count_limit,\
    \ max_value_set_count_limit_set_count_limit = 0, 0\n  local min_value_set_count_limit_set_count_limit_set,\
    \ max_value_set_count_limit_set_count_limit_set = false, false\n  local min_value_set_count_limit_set_count_limit_set_count,\
    \ max_value_set_count_limit_set_count_limit_set_count = 0, 0\n  local min_value_set_count_limit_set_count_limit_set_count_limit,\
    \ max_value_set_count_limit_set_count_limit_set_count_limit = 0, 0\n  local min_value_set_count_limit_set_count_limit_set_count_limit_set,\
    \ max_value_set_count_limit_set_count_limit_set_count_limit_set = false, false\n\
    \  local min_value_set_count_limit_set_count_limit_set_count_limit_set_count,\
    \ max_value_set_count_limit_set_count_limit_set_count_limit_set_count = 0, 0\n\
    \  local min_value_set_count_limit_set_count_limit_set_count_limit_set_count_limit,\
    \ max_value_set_count_limit_set_count_limit_set_count_limit_set_count_limit =\
    \ 0, 0\n  local min_value", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n\
    \  for i, v in ipairs(lst) do\n    if v == min then\n      min_idx = i\n    elseif\
    \ v == max then\n      max_idx = i\n    end\n  end\n  local min_max = min_idx\
    \ < max_idx\n  local i = 1\n  while i <= #lst do\n    if min_max then\n      res[i]\
    \ = min\n      min_max = false\n    else\n      res[i] = max\n      min_max =\
    \ true\n    end\n    i = i + 1\n  end\n  return res\nend", "    local res = {}\n\
    \    local min_value, max_value, min_index, max_index\n    local min_found, max_found\n\
    \    local i, j\n    local n = #lst\n    for i = 1, n do\n        min_found =\
    \ false\n        max_found = false\n        for j = 1, n do\n            if not\
    \ min_found and not max_found then\n                if not min_index or lst[j]\
    \ < min_value then\n                    min_value = lst[j]\n                 \
    \   min_index = j\n                end\n                if not max_index or lst[j]\
    \ > max_value then\n                    max_value = lst[j]\n                 \
    \   max_index = j\n                end\n            elseif not min_found then\n\
    \                if j ~= max_index and (not min_index or lst[j] < min_value) then\n\
    \                    min_value = lst[j]\n                    min_index = j\n \
    \               end\n            elseif not max_found then\n                if\
    \ j ~= min_index and (not max_index or lst[j] > max_value) then\n            \
    \        max_value = lst[j]\n                    max_index = j\n             \
    \   end\n            end\n        end\n        if i % 2 == 1 then\n          \
    \  res[i] = min_value\n            min_found = true\n        else\n          \
    \  res[i] = max_value\n            max_found = true\n        end\n    end\n  \
    \  return res\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n\
    \    if lst[i] == min then\n      min_idx = i\n    elseif lst[i] == max then\n\
    \      max_idx = i\n    end\n  end\n  local min_flag = true\n  while #lst > 0\
    \ do\n    if min_flag then\n      table.insert(res, min)\n      table.remove(lst,\
    \ min_idx)\n      min_flag = false\n    else\n      table.insert(res, max)\n \
    \     table.remove(lst, max_idx)\n      min_flag = true\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    min_idx, max_idx = 1, 1\n\
    \    for i = 1, #lst do\n      if lst[i] == min then\n        min_idx = i\n  \
    \    elseif lst[i] == max then\n        max_idx = i\n      end\n    end\n  end\n\
    \  return res\nend", "    local result = {}\n    local min_index = 1\n    local\
    \ max_index = #lst\n    local min_value = lst[min_index]\n    local max_value\
    \ = lst[max_index]\n    local min_found = false\n    local max_found = false\n\
    \    local i = 1\n    while i <= #lst do\n        if min_found then\n        \
    \    min_index = min_index + 1\n            min_value = lst[min_index]\n     \
    \       min_found = false\n        end\n        if max_found then\n          \
    \  max_index = max_index - 1\n            max_value = lst[max_index]\n       \
    \     max_found = false\n        end\n        if i % 2 == 1 then\n           \
    \ for j = min_index, max_index do\n                if lst[j] > min_value then\n\
    \                    min_value = lst[j]\n                    min_index = j\n \
    \                   min_found = true\n                    break\n            \
    \    end\n            end\n            result[i] = min_value\n        else\n \
    \           for j = max_index, min_index, -1 do\n                if lst[j] < max_value\
    \ then\n                    max_value = lst[j]\n                    max_index\
    \ = j\n                    max_found = true\n                    break\n     \
    \           end\n            end\n            result[i] = max_value\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local res = {}\n  \
    \  local n = #lst\n    local i = 1\n    local j = n\n    local k = 1\n    while\
    \ i <= j do\n        res[k] = lst[i]\n        k = k + 1\n        res[k] = lst[j]\n\
    \        k = k + 1\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ res\nend", "    local lst_len = #lst\n    local sorted_lst = {}\n    local min_val,\
    \ max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    for i = 1, lst_len do\n        if lst[i] == min_val then\n     \
    \       min_idx = i\n        elseif lst[i] == max_val then\n            max_idx\
    \ = i\n        end\n    end\n    local min_max_idx = math.min(min_idx, max_idx)\n\
    \    local max_min_idx = math.max(min_idx, max_idx)\n    for i = 1, lst_len do\n\
    \        if i % 2 == 1 then\n            sorted_lst[i] = lst[min_max_idx]\n  \
    \      else\n            sorted_lst[i] = lst[max_min_idx]\n        end\n    end\n\
    \    return sorted_lst\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index(min), lst:index(max)\n\
    \    local min_removed, max_removed = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_removed then\n            res[i] = min\n  \
    \          min_removed = true\n            i = i + 1\n        end\n        if\
    \ not max_removed then\n            res[i] = max\n            max_removed = true\n\
    \            i = i + 1\n        end\n        if min_removed and max_removed then\n\
    \            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n       \
    \     min_idx, max_idx = lst:index(min), lst:index(max)\n            min_removed,\
    \ max_removed = false, false\n        end\n    end\n    return res\nend", "  \
    \  local min, max = math.min, math.max\n    local function min_max(lst)\n    \
    \    local mn, mx = min(unpack(lst)), max(unpack(lst))\n        local mn_i, mx_i\
    \ = 0, 0\n        for i, v in ipairs(lst) do\n            if v == mn then mn_i\
    \ = i end\n            if v == mx then mx_i = i end\n        end\n        return\
    \ mn, mn_i, mx, mx_i\n    end\n    local function remove(lst, i)\n        local\
    \ l = {}\n        for j, v in ipairs(lst) do\n            if j ~= i then l[#l\
    \ + 1] = v end\n        end\n        return l\n    end\n    local function strange_sort(lst)\n\
    \        if #lst == 0 then return {} end\n        local mn, mn_i, mx, mx_i = min_max(lst)\n\
    \        local l = strange_sort(remove(lst, mn_i))\n        l[#l + 1] = mn\n \
    \       l[#l + 1] = mx\n        return l\n    end\n    return strange_sort(lst)\n\
    end", "  local res = {}\n  local n = #lst\n  local i = 1\n  local j = n\n  local\
    \ k = 1\n  while i <= n and j >= 1 do\n    res[k] = lst[i]\n    res[k + 1] = lst[j]\n\
    \    i = i + 1\n    j = j - 1\n    k = k + 2\n  end\n  return res\nend", "  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n      min_found\
    \ = true\n    elseif lst[i] == max then\n      max_idx = i\n      max_found =\
    \ true\n    end\n    if min_found and max_found then\n      break\n    end\n \
    \ end\n  local min_idx_found, max_idx_found = false, false\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      if not min_idx_found then\n        res[i]\
    \ = min\n        min_idx_found = true\n      else\n        res[i] = max\n    \
    \    max_idx_found = true\n      end\n    else\n      if not max_idx_found then\n\
    \        res[i] = max\n        max_idx_found = true\n      else\n        res[i]\
    \ = min\n        min_idx_found = true\n      end\n    end\n  end\n  return res\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index(min), lst:index(max)\n    local min_removed,\
    \ max_removed = false, false\n    local i = 1\n    while i <= #lst do\n      \
    \  if not min_removed then\n            res[i] = min\n            min_removed\
    \ = true\n            i = i + 1\n        end\n        if not max_removed then\n\
    \            res[i] = max\n            max_removed = true\n            i = i +\
    \ 1\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = lst:index(min), lst:index(max)\n        min_removed,\
    \ max_removed = false, false\n    end\n    return res\nend", "  local res = {}\n\
    \  local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n  local\
    \ min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min_val then\n\
    \      min_idx = i\n    elseif lst[i] == max_val then\n      max_idx = i\n   \
    \ end\n  end\n  local min_idx_used, max_idx_used = false, false\n  for i = 1,\
    \ #lst do\n    if i % 2 == 1 then\n      if min_idx_used then\n        res[i]\
    \ = max_val\n      else\n        res[i] = min_val\n        min_idx_used = true\n\
    \      end\n    else\n      if max_idx_used then\n        res[i] = min_val\n \
    \     else\n        res[i] = max_val\n        max_idx_used = true\n      end\n\
    \    end\n  end\n  return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 0\n    local max_idx\
    \ = 0\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local min_flag = true\n    local max_flag = true\n    for i = 1, #lst\
    \ do\n        if min_flag then\n            res[i] = min\n            min_flag\
    \ = false\n        elseif max_flag then\n            res[i] = max\n          \
    \  max_flag = false\n        end\n        if i == min_idx then\n            min_flag\
    \ = true\n        elseif i == max_idx then\n            max_flag = true\n    \
    \    end\n    end\n    return res\nend", "  if #lst == 0 then\n    return {}\n\
    \  end\n  local min_val = math.min(unpack(lst))\n  local min_idx = 1\n  for i,\
    \ v in ipairs(lst) do\n    if v == min_val then\n      min_idx = i\n      break\n\
    \    end\n  end\n  local max_val = math.max(unpack(lst))\n  local max_idx = 1\n\
    \  for i, v in ipairs(lst) do\n    if v == max_val then\n      max_idx = i\n \
    \     break\n    end\n  end\n  local new_lst = {}\n  for i, v in ipairs(lst) do\n\
    \    if i ~= min_idx and i ~= max_idx then\n      table.insert(new_lst, v)\n \
    \   end\n  end\n  local res = {}\n  table.insert(res, min_val)\n  table.insert(res,\
    \ max_val)\n  return table.concat(res, \",\") .. \",\" .. strange_sort_list(new_lst)\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n \
    \   local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local\
    \ min_found = false\n    local max_found = false\n    local i = 1\n    while i\
    \ <= #lst do\n        if not min_found then\n            if lst[i] < min_val then\n\
    \                min_val = lst[i]\n                min_idx = i\n            end\n\
    \            if i == #lst then\n                min_found = true\n           \
    \     i = 1\n            end\n        elseif not max_found then\n            if\
    \ lst[i] > max_val then\n                max_val = lst[i]\n                max_idx\
    \ = i\n            end\n            if i == #lst then\n                max_found\
    \ = true\n                i = 1\n            end\n        else\n            if\
    \ min_idx < max_idx then\n                res[#res + 1] = min_val\n          \
    \      res[#res + 1] = max_val\n                table.remove(lst, min_idx)\n \
    \               table.remove(lst, max_idx - 1)\n            else\n           \
    \     res[#res + 1] = max_val\n                res[#res + 1] = min_val\n     \
    \           table.remove(lst, max_idx)\n                table.remove(lst, min_idx\
    \ - 1)\n            end\n            min_found = false\n            max_found\
    \ = false\n            min_idx = 1\n            max_idx = #lst\n            min_val\
    \ = lst[min_idx]\n            max_val = lst[max_idx]\n            i = 1\n    \
    \    end\n        i = i + 1\n    end\n    return res\nend", "    local res = {}\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_val = lst[min_idx]\n\
    \    local max_val = lst[max_idx]\n    local min_found = false\n    local max_found\
    \ = false\n    local min_pos = 0\n    local max_pos = 0\n    local i = 1\n   \
    \ while i <= #lst do\n        if not min_found then\n            if lst[i] < min_val\
    \ then\n                min_val = lst[i]\n                min_pos = i\n      \
    \      end\n            if i == #lst then\n                min_found = true\n\
    \                table.insert(res, min_val)\n                table.remove(lst,\
    \ min_pos)\n                min_idx = min_idx + 1\n                max_idx = max_idx\
    \ - 1\n                i = 1\n            end\n        elseif not max_found then\n\
    \            if lst[i] > max_val then\n                max_val = lst[i]\n    \
    \            max_pos = i\n            end\n            if i == #lst then\n   \
    \             max_found = true\n                table.insert(res, max_val)\n \
    \               table.remove(lst, max_pos)\n                min_idx = min_idx\
    \ + 1\n                max_idx = max_idx - 1\n                i = 1\n        \
    \    end\n        end\n        i = i + 1\n    end\n    return res\nend", "   \
    \ local result = {}\n    local min_value = math.min(unpack(lst))\n    local max_value\
    \ = math.max(unpack(lst))\n    local min_index = 1\n    local max_index = #lst\n\
    \    local min_found = false\n    local max_found = false\n    local min_value_count\
    \ = 0\n    local max_value_count = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ == min_value then\n            min_value_count = min_value_count + 1\n     \
    \   end\n        if lst[i] == max_value then\n            max_value_count = max_value_count\
    \ + 1\n        end\n    end\n    for i = 1, #lst do\n        if not min_found\
    \ and lst[i] == min_value then\n            min_index = i\n            min_found\
    \ = true\n        end\n        if not max_found and lst[i] == max_value then\n\
    \            max_index = i\n            max_found = true\n        end\n    end\n\
    \    local min_count = 0\n    local max_count = 0\n    for i = 1, #lst do\n  \
    \      if i % 2 == 1 then\n            result[i] = min_value\n            min_count\
    \ = min_count + 1\n            if min_count == min_value_count then\n        \
    \        min_value = math.max(unpack(lst))\n                min_value_count =\
    \ 0\n                min_found = false\n                for j = 1, #lst do\n \
    \                   if not min_found and lst[j] == min_value then\n          \
    \              min_index = j\n                        min_found = true\n     \
    \               end\n                end\n                for j = 1, #lst do\n\
    \                    if lst[j] == min_value then\n                        min_value_count\
    \ = min_value_count + 1\n                    end\n                end\n      \
    \      end\n        else\n            result[i] = max_value\n            max_count\
    \ = max_count + 1\n            if max_count == max_value_count then\n        \
    \        max_value = math.min(unpack(lst))\n                max_value_", "  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n\
    \      min = min + 1\n    else\n      res[i] = max\n      max = max - 1\n    end\n\
    \    i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local min_val,\
    \ max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min_val then\n        \
    \    min_idx = i\n        elseif lst[i] == max_val then\n            max_idx =\
    \ i\n        end\n    end\n    local min_removed = table.remove(lst, min_idx)\n\
    \    local max_removed = table.remove(lst, max_idx - 1)\n    res[1] = min_removed\n\
    \    res[2] = max_removed\n    for i = 1, #lst do\n        local min_val, max_val\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n        local min_idx, max_idx\
    \ = 1, 1\n        for i = 1, #lst do\n            if lst[i] == min_val then\n\
    \                min_idx = i\n            elseif lst[i] == max_val then\n    \
    \            max_idx = i\n            end\n        end\n        local min_removed\
    \ = table.remove(lst, min_idx)\n        local max_removed = table.remove(lst,\
    \ max_idx - 1)\n        res[#res + 1] = min_removed\n        res[#res + 1] = max_removed\n\
    \    end\n    return res\nend", "    local res = {}\n    local n = #lst\n    local\
    \ i = 1\n    local j = n\n    while i <= n do\n        if i % 2 == 1 then\n  \
    \          res[i] = min(lst)\n            lst = remove(lst, min_index(lst))\n\
    \        else\n            res[i] = max(lst)\n            lst = remove(lst, max_index(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local result\
    \ = {}\n  local min_index = 1\n  local max_index = #lst\n  local min_value = lst[min_index]\n\
    \  local max_value = lst[max_index]\n  local min_value_index = min_index\n  local\
    \ max_value_index = max_index\n  local min_value_found = false\n  local max_value_found\
    \ = false\n  local i = 1\n  while i <= #lst do\n    if not min_value_found then\n\
    \      if lst[i] < min_value then\n        min_value = lst[i]\n        min_value_index\
    \ = i\n      end\n      if i == max_index then\n        min_value_found = true\n\
    \        i = min_value_index + 1\n      end\n    elseif not max_value_found then\n\
    \      if lst[i] > max_value then\n        max_value = lst[i]\n        max_value_index\
    \ = i\n      end\n      if i == min_index then\n        max_value_found = true\n\
    \        i = max_value_index + 1\n      end\n    else\n      if i == min_index\
    \ then\n        min_value_found = false\n        min_value = lst[i]\n        min_value_index\
    \ = i\n      elseif i == max_index then\n        max_value_found = false\n   \
    \     max_value = lst[i]\n        max_value_index = i\n      end\n      i = i\
    \ + 1\n    end\n  end\n  if min_value_index < max_value_index then\n    result[1]\
    \ = min_value\n    result[2] = max_value\n    for i = min_value_index + 1, max_value_index\
    \ - 1 do\n      result[#result + 1] = lst[i]\n    end\n  else\n    result[1] =\
    \ max_value\n    result[2] = min_value\n    for i = max_value_index + 1, min_value_index\
    \ - 1 do\n      result[#result + 1] = lst[i]\n    end\n  end\n  return result\n\
    end", "    local res = {}\n    local lst_len = #lst\n    local lst_min = math.min(unpack(lst))\n\
    \    local lst_max = math.max(unpack(lst))\n    local lst_min_idx = 1\n    local\
    \ lst_max_idx = 1\n    for i = 1, lst_len do\n        if lst[i] == lst_min then\n\
    \            lst_min_idx = i\n        end\n        if lst[i] == lst_max then\n\
    \            lst_max_idx = i\n        end\n    end\n    local lst_min_idx_next\
    \ = lst_min_idx + 1\n    local lst_max_idx_next = lst_max_idx - 1\n    local lst_min_idx_prev\
    \ = lst_min_idx - 1\n    local lst_max_idx_prev = lst_max_idx + 1\n    local lst_min_idx_next_len\
    \ = lst_len - lst_min_idx\n    local lst_max_idx_next_len = lst_len - lst_max_idx\n\
    \    local lst_min_idx_prev_len = lst_min_idx - 1\n    local lst_max_idx_prev_len\
    \ = lst_max_idx - 1\n    local lst_min_idx_next_last = lst_min_idx_next + lst_min_idx_next_len\
    \ - 1\n    local lst_max_idx_next_last = lst_max_idx_next + lst_max_idx_next_len\
    \ - 1\n    local lst_min_idx_prev_last = lst_min_idx_prev + lst_min_idx_prev_len\
    \ - 1\n    local lst_max_idx_prev_last = lst_max_idx_prev + lst_max_idx_prev_len\
    \ - 1\n    local lst_min_idx_next_last_next = lst_min_", "    local result = {}\n\
    \    local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    local min_found, max_found = false,\
    \ false\n    local min_value_count, max_value_count = 0, 0\n    for i = 1, #lst\
    \ do\n        if lst[i] == min_value then\n            min_value_count = min_value_count\
    \ + 1\n        end\n        if lst[i] == max_value then\n            max_value_count\
    \ = max_value_count + 1\n        end\n    end\n    for i = 1, #lst do\n      \
    \  if not min_found then\n            if lst[i] == min_value then\n          \
    \      min_index = i\n                min_found = true\n            end\n    \
    \    end\n        if not max_found then\n            if lst[i] == max_value then\n\
    \                max_index = i\n                max_found = true\n           \
    \ end\n        end\n    end\n    local min_value_count_copy, max_value_count_copy\
    \ = min_value_count, max_value_count\n    for i = 1, #lst do\n        if min_value_count_copy\
    \ > 0 then\n            table.insert(result, min_value)\n            min_value_count_copy\
    \ = min_value_count_copy - 1\n        elseif max_value_count_copy > 0 then\n \
    \           table.insert(result, max_value)\n            max_value_count_copy\
    \ = max_value_count_copy - 1\n        end\n    end\n    return result\nend", " \
    \   local res = {}\n    local min_ind, max_ind\n    local min_val, max_val\n \
    \   local min_found, max_found\n    local i\n    local n = #lst\n    for i = 1,\
    \ n do\n        min_found = false\n        max_found = false\n        for j =\
    \ 1, n do\n            if not res[j] then\n                if not min_found then\n\
    \                    min_ind = j\n                    min_val = lst[j]\n     \
    \               min_found = true\n                elseif lst[j] < min_val then\n\
    \                    min_ind = j\n                    min_val = lst[j]\n     \
    \           end\n                if not max_found then\n                    max_ind\
    \ = j\n                    max_val = lst[j]\n                    max_found = true\n\
    \                elseif lst[j] > max_val then\n                    max_ind = j\n\
    \                    max_val = lst[j]\n                end\n            end\n\
    \        end\n        if i % 2 == 1 then\n            res[min_ind] = min_val\n\
    \        else\n            res[max_ind] = max_val\n        end\n    end\n    return\
    \ res\nend", "    local result = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \    local min_removed, max_removed = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_removed then\n            result[i] = min\n\
    \            min_removed = true\n            i = i + 1\n        end\n        if\
    \ not max_removed then\n            result[i] = max\n            max_removed =\
    \ true\n            i = i + 1\n        end\n        if min_removed and max_removed\
    \ then\n            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n       \
    \     min_removed, max_removed = false, false\n        end\n    end\n    return\
    \ result\nend", "  if #lst == 0 then\n    return {}\n  end\n  local sorted = {}\n\
    \  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local\
    \ min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n    if v\
    \ == min then\n      min_index = i\n    end\n    if v == max then\n      max_index\
    \ = i\n    end\n  end\n  table.insert(sorted, min)\n  table.insert(sorted, max)\n\
    \  local new_lst = {}\n  for i, v in ipairs(lst) do\n    if i ~= min_index and\
    \ i ~= max_index then\n      table.insert(new_lst, v)\n    end\n  end\n  return\
    \ table.concat(sorted, ',') .. ',' .. strange_sort_list(new_lst)\nend", "  local\
    \ function sort_list(lst, res)\n    if #lst == 0 then\n      return res\n    end\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    return sort_list(lst, res)\n  end\n  return\
    \ sort_list(lst, {})\nend", "    local result = {}\n    local min_val, max_val\
    \ = min_max(lst)\n    local min_idx, max_idx = min_max_idx(lst)\n    local min_removed,\
    \ max_removed = false, false\n    local i = 1\n    while i <= #lst do\n      \
    \  if not min_removed and not max_removed then\n            if i % 2 == 1 then\n\
    \                result[i] = min_val\n                min_removed = true\n   \
    \         else\n                result[i] = max_val\n                max_removed\
    \ = true\n            end\n        elseif min_removed and not max_removed then\n\
    \            result[i] = max_val\n            max_removed = true\n        elseif\
    \ not min_removed and max_removed then\n            result[i] = min_val\n    \
    \        min_removed = true\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend", "  local function min_max(lst)\n    local min, max = lst[1], lst[1]\n\
    \    for _, v in ipairs(lst) do\n      if v < min then min = v end\n      if v\
    \ > max then max = v end\n    end\n    return min, max\n  end", "  local res =\
    \ {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = #lst\n  local min_found = false\n  local\
    \ max_found = false\n  local i = 1\n  while i <= #lst do\n    if lst[i] == min\
    \ and not min_found then\n      res[min_idx] = min\n      min_idx = min_idx +\
    \ 2\n      min_found = true\n    elseif lst[i] == max and not max_found then\n\
    \      res[max_idx] = max\n      max_idx = max_idx - 2\n      max_found = true\n\
    \    end\n    i = i + 1\n  end\n  i = 1\n  while i <= #lst do\n    if lst[i] ~=\
    \ min and lst[i] ~= max then\n      if min_idx <= max_idx then\n        res[min_idx]\
    \ = lst[i]\n        min_idx = min_idx + 2\n      else\n        res[max_idx] =\
    \ lst[i]\n        max_idx = max_idx - 2\n      end\n    end\n    i = i + 1\n \
    \ end\n  return res\nend", "    local res = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ do\n        if lst[i] == min_val then\n            min_idx = i\n        elseif\
    \ lst[i] == max_val then\n            max_idx = i\n        end\n    end\n    local\
    \ min_idx_used, max_idx_used = false, false\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            if not min_idx_used then\n                res[i]\
    \ = min_val\n                min_idx_used = true\n            else\n         \
    \       res[i] = lst[min_idx]\n            end\n        else\n            if not\
    \ max_idx_used then\n                res[i] = max_val\n                max_idx_used\
    \ = true\n            else\n                res[i] = lst[max_idx]\n          \
    \  end\n        end\n    end\n    return res\nend", "  local res = {}\n  local\
    \ min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local min_index\
    \ = table.index_of(lst, min)\n  local max_index = table.index_of(lst, max)\n \
    \ local index = 1\n  local i = 1\n  local j = 1\n  while index <= #lst do\n  \
    \  if i % 2 == 1 then\n      res[index] = min\n      table.remove(lst, min_index)\n\
    \      min = math.min(unpack(lst))\n      min_index = table.index_of(lst, min)\n\
    \    else\n      res[index] = max\n      table.remove(lst, max_index)\n      max\
    \ = math.max(unpack(lst))\n      max_index = table.index_of(lst, max)\n    end\n\
    \    index = index + 1\n    i = i + 1\n  end\n  return res\nend", "  local result\
    \ = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local\
    \ min_index, max_index = 1, 1\n  local min_found, max_found = false, false\n \
    \ local min_count, max_count = 0, 0\n  for i = 1, #lst do\n    if lst[i] == min\
    \ then\n      min_count = min_count + 1\n    elseif lst[i] == max then\n     \
    \ max_count = max_count + 1\n    end\n  end\n  for i = 1, #lst do\n    if not\
    \ min_found then\n      if lst[i] == min then\n        min_index = i\n       \
    \ min_found = true\n      end\n    elseif not max_found then\n      if lst[i]\
    \ == max then\n        max_index = i\n        max_found = true\n      end\n  \
    \  end\n    if min_found and max_found then\n      break\n    end\n  end\n  local\
    \ min_max_count = math.min(min_count, max_count)\n  local max_min_count = math.max(min_count,\
    \ max_count)\n  local min_max_index = math.min(min_index, max_index)\n  local\
    \ max_min_index = math.max(min_index, max_index)\n  local min_max_index_found\
    \ = false\n  local max_min_index_found = false\n  for i = 1, #lst do\n    if i\
    \ == min_max_index then\n      min_max_index_found = true\n    elseif i == max_min_index\
    \ then\n      max_min_index_found = true\n    end\n    if min_max_index_found\
    \ and max_min_index_found then\n      break\n    end\n  end\n  local min_max_index_count\
    \ = 0\n  local max_min_index_count = 0\n  for i = 1, #lst do\n    if lst[i] ==\
    \ min or lst[i] == max then\n      if min_max_index_found then\n        min_max_index_",
  "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend", " \
    \   local res = {}\n    local min_val, max_val\n    local min_idx, max_idx\n \
    \   local min_found, max_found\n    local i, j\n    local n = #lst\n    for i\
    \ = 1, n do\n        min_found = false\n        max_found = false\n        for\
    \ j = 1, n do\n            if not min_found and not max_found then\n         \
    \       if lst[j] then\n                    min_val = lst[j]\n               \
    \     min_idx = j\n                    min_found = true\n                end\n\
    \            elseif min_found and not max_found then\n                if lst[j]\
    \ then\n                    if lst[j] < min_val then\n                       \
    \ min_val = lst[j]\n                        min_idx = j\n                    elseif\
    \ lst[j] > min_val then\n                        max_val = lst[j]\n          \
    \              max_idx = j\n                        max_found = true\n       \
    \             end\n                end\n            elseif min_found and max_found\
    \ then\n                if lst[j] then\n                    if lst[j] < min_val\
    \ then\n                        min_val = lst[j]\n                        min_idx\
    \ = j\n                    elseif lst[j] > max_val then\n                    \
    \    max_val = lst[j]\n                        max_idx = j\n                 \
    \   end\n                end\n            end\n        end\n        if min_found\
    \ then\n            table.insert(res, min_val)\n            lst[min_idx] = nil\n\
    \        end\n        if max_found then\n            table.insert(res, max_val)\n\
    \            lst[max_idx] = nil\n        end\n    end\n    return res\nend", " \
    \   local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n  \
    \  local min_idx, max_idx = 0, 0\n    local res = {}\n    local i = 1\n    while\
    \ i <= #lst do\n        if i % 2 == 1 then\n            min_idx = table.index_of(lst,\
    \ min_val)\n            table.insert(res, min_val)\n            table.remove(lst,\
    \ min_idx)\n            min_val = math.min(unpack(lst))\n        else\n      \
    \      max_idx = table.index_of(lst, max_val)\n            table.insert(res, max_val)\n\
    \            table.remove(lst, max_idx)\n            max_val = math.max(unpack(lst))\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local min,\
    \ max = min_max(lst)\n  local result = {}\n  local i = 1\n  while #lst > 0 do\n\
    \    if i % 2 == 1 then\n      table.insert(result, min)\n      table.remove(lst,\
    \ min_index(lst))\n    else\n      table.insert(result, max)\n      table.remove(lst,\
    \ max_index(lst))\n    end\n    i = i + 1\n  end\n  return result\nend", "   \
    \ local function min_max(lst)\n        local min, max = lst[1], lst[1]\n     \
    \   for _, v in ipairs(lst) do\n            if v < min then\n                min\
    \ = v\n            elseif v > max then\n                max = v\n            end\n\
    \        end\n        return min, max\n    end", "    local res = {}\n    local\
    \ min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local\
    \ i = 1\n    while min <= max do\n        res[i] = min\n        res[i + 1] = max\n\
    \        i = i + 2\n        min = min + 1\n        max = max - 1\n    end\n  \
    \  return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n \
    \           res[i] = min\n            min_idx = min_idx + 1\n        else\n  \
    \          res[i] = max\n            max_idx = max_idx + 1\n        end\n    \
    \    i = i + 1\n    end\n    return res\nend", "    local res = {}\n    local\
    \ min_idx = 1\n    local max_idx = #lst\n    local min_val = lst[min_idx]\n  \
    \  local max_val = lst[max_idx]\n    local min_found = false\n    local max_found\
    \ = false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] < min_val then\n                min_val = lst[i]\n    \
    \            min_idx = i\n            end\n            if i == #lst then\n   \
    \             min_found = true\n                res[#res + 1] = min_val\n    \
    \            table.remove(lst, min_idx)\n            end\n        elseif not max_found\
    \ then\n            if lst[i] > max_val then\n                max_val = lst[i]\n\
    \                max_idx = i\n            end\n            if i == #lst then\n\
    \                max_found = true\n                res[#res + 1] = max_val\n \
    \               table.remove(lst, max_idx)\n            end\n        else\n  \
    \          min_found = false\n            max_found = false\n            min_idx\
    \ = 1\n            max_idx = #lst\n            min_val = lst[min_idx]\n      \
    \      max_val = lst[max_idx]\n            i = 1\n        end\n        i = i +\
    \ 1\n    end\n    return res\nend", "    local res = {}\n    local min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min),\
    \ lst:index_of(max)\n    local min_removed, max_removed = false, false\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_removed then\n\
    \                res[i] = min\n                min_removed = true\n          \
    \  else\n                res[i] = lst[min_idx + 1]\n                min_idx =\
    \ min_idx + 1\n            end\n        else\n            if not max_removed then\n\
    \                res[i] = max\n                max_removed = true\n          \
    \  else\n                res[i] = lst[max_idx - 1]\n                max_idx =\
    \ max_idx - 1\n            end\n        end\n    end\n    return res\nend", " \
    \   local function strange_sort(lst, acc)\n        if #lst == 0 then\n       \
    \     return acc\n        end\n        local min = math.min(unpack(lst))\n   \
    \     local max = math.max(unpack(lst))\n        local min_idx = table.index_of(lst,\
    \ min)\n        local max_idx = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx)\n        table.insert(acc, min)\n\
    \        table.insert(acc, max)\n        return strange_sort(lst, acc)\n    end\n\
    \    return strange_sort(lst, {})\nend", "    local res = {}\n    local min_val,\
    \ max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    local min_found, max_found = false, false\n    for i = 1, #lst do\n\
    \        if not min_found and lst[i] == min_val then\n            min_idx = i\n\
    \            min_found = true\n        end\n        if not max_found and lst[i]\
    \ == max_val then\n            max_idx = i\n            max_found = true\n   \
    \     end\n    end\n    local min_lst, max_lst = {}, {}\n    for i = 1, #lst do\n\
    \        if i ~= min_idx then\n            table.insert(min_lst, lst[i])\n   \
    \     end\n        if i ~= max_idx then\n            table.insert(max_lst, lst[i])\n\
    \        end\n    end\n    local min_max, max_min = math.min(unpack(min_lst)),\
    \ math.max(unpack(max_lst))\n    local min_max_idx, max_min_idx = 1, 1\n    local\
    \ min_max_found, max_min_found = false, false\n    for i = 1, #min_lst do\n  \
    \      if not min_max_found and min_lst[i] == min_max then\n            min_max_idx\
    \ = i\n            min_max_found = true\n        end\n    end\n    for i = 1,\
    \ #max_lst do\n        if not max_min_found and max_lst[i] == max_min then\n \
    \           max_min_idx = i\n            max_min_found = true\n        end\n \
    \   end\n    local min_max_lst, max_min_lst = {}, {}\n    for i = 1, #min_lst\
    \ do\n        if i ~= min_max_idx then\n            table.insert(min_max_lst,\
    \ min_lst[i])\n        end\n    end\n    for i", "  local res = {}\n  local min\
    \ = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local min_idx\
    \ = table.index_of(lst, min)\n  local max_idx = table.index_of(lst, max)\n  local\
    \ min_flag = true\n  local max_flag = true\n  local i = 1\n  while i <= #lst do\n\
    \    if min_flag then\n      res[i] = min\n      min_flag = false\n      i = i\
    \ + 1\n    end\n    if max_flag then\n      res[i] = max\n      max_flag = false\n\
    \      i = i + 1\n    end\n    if min_idx < max_idx then\n      min_flag = true\n\
    \      max_flag = true\n      min = math.min(unpack(lst, min_idx + 1, max_idx\
    \ - 1))\n      max = math.max(unpack(lst, min_idx + 1, max_idx - 1))\n      min_idx\
    \ = table.index_of(lst, min, min_idx + 1)\n      max_idx = table.index_of(lst,\
    \ max, min_idx + 1)\n    else\n      min_flag = true\n      max_flag = true\n\
    \      min = math.min(unpack(lst, max_idx + 1, min_idx - 1))\n      max = math.max(unpack(lst,\
    \ max_idx + 1, min_idx - 1))\n      min_idx = table.index_of(lst, min, max_idx\
    \ + 1)\n      max_idx = table.index_of(lst, max, max_idx + 1)\n    end\n  end\n\
    \  return res\nend", "    local sorted = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \    local min_idx_found, max_idx_found = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_idx_found and min_idx ~= max_idx then\n   \
    \         sorted[i] = min\n            min_idx_found = true\n            i = i\
    \ + 1\n        end\n        if not max_idx_found then\n            sorted[i] =\
    \ max\n            max_idx_found = true\n            i = i + 1\n        end\n\
    \        if min_idx_found and max_idx_found then\n            min_idx_found, max_idx_found\
    \ = false, false\n            min, max = math.min(unpack(lst:remove_at(min_idx))),\
    \ math.max(unpack(lst:remove_at(max_idx)))\n            min_idx, max_idx = lst:index_of(min),\
    \ lst:index_of(max)\n        end\n    end\n    return sorted\nend", "    local\
    \ function strange_sort(lst, res)\n        if #lst == 0 then\n            return\
    \ res\n        end\n        local min = math.min(unpack(lst))\n        local max\
    \ = math.max(unpack(lst))\n        local min_idx = table.index_of(lst, min)\n\
    \        local max_idx = table.index_of(lst, max)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx - 1)\n        table.insert(res, min)\n    \
    \    table.insert(res, max)\n        return strange_sort(lst, res)\n    end\n\
    \    return strange_sort(lst, {})\nend", "  local sorted = {}\n  local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx = lst:index_of(min),\
    \ lst:index_of(max)\n  local min_removed, max_removed = lst:remove_at(min_idx),\
    \ lst:remove_at(max_idx)\n  local min_removed_idx, max_removed_idx = min_removed:index_of(min),\
    \ max_removed:index_of(max)\n  local min_removed_removed, max_removed_removed\
    \ = min_removed:remove_at(min_removed_idx), max_removed:remove_at(max_removed_idx)\n\
    \  if #lst == 0 then\n    return lst\n  elseif #lst == 1 then\n    return lst\n\
    \  elseif #lst == 2 then\n    return {min, max}\n  elseif #lst == 3 then\n   \
    \ return {min, max, min_removed_removed[1]}\n  elseif #lst == 4 then\n    return\
    \ {min, max, min_removed_removed[1], max_removed_removed[1]}\n  elseif #lst ==\
    \ 5 then\n    return {min, max, min_removed_removed[1], max_removed_removed[1],\
    \ min_removed_removed[2]}\n  elseif #lst == 6 then\n    return {min, max, min_removed_removed[1],\
    \ max_removed_removed[1], min_removed_removed[2], max_removed_removed[2]}\n  elseif\
    \ #lst == 7 then\n    return {min, max, min_removed_removed[1], max_removed_removed[1],\
    \ min_removed_removed[2], max_removed_removed[2], min_removed_removed[3]}\n  elseif\
    \ #lst == 8 then\n    return {min, max, min_removed_removed[1], max_", "    local\
    \ result = {}\n    local min_index, max_index\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_count, max_count = 0, 0\n    for i, v in\
    \ ipairs(lst) do\n        if v == min then\n            min_count = min_count\
    \ + 1\n            min_index = i\n        elseif v == max then\n            max_count\
    \ = max_count + 1\n            max_index = i\n        end\n    end\n    local\
    \ min_indexes, max_indexes = {}, {}\n    for i, v in ipairs(lst) do\n        if\
    \ v == min then\n            table.insert(min_indexes, i)\n        elseif v ==\
    \ max then\n            table.insert(max_indexes, i)\n        end\n    end\n \
    \   local min_indexes_len, max_indexes_len = #min_indexes, #max_indexes\n    local\
    \ min_indexes_i, max_indexes_i = 1, 1\n    for i = 1, #lst do\n        if i %\
    \ 2 == 1 then\n            result[i] = min\n            min_indexes_i = min_indexes_i\
    \ + 1\n            if min_indexes_i > min_indexes_len then\n                min_indexes_i\
    \ = 1\n            end\n        else\n            result[i] = max\n          \
    \  max_indexes_i = max_indexes_i + 1\n            if max_indexes_i > max_indexes_len\
    \ then\n                max_indexes_i = 1\n            end\n        end\n    end\n\
    \    return result\nend", "  local function strange_sort(lst, acc)\n    if #lst\
    \ == 0 then\n      return acc\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 0\n    local max_idx\
    \ = 0\n    for i, v in ipairs(lst) do\n      if v == min then\n        min_idx\
    \ = i\n      elseif v == max then\n        max_idx = i\n      end\n    end\n \
    \   table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n    return\
    \ strange_sort(lst, acc .. min .. max)\n  end\n  return strange_sort(lst, \"\"\
    )\nend", "  local result = {}\n  local min = math.min(unpack(lst))\n  local max\
    \ = math.max(unpack(lst))\n  local min_index = 1\n  local max_index = 1\n  for\
    \ i, v in ipairs(lst) do\n    if v == min then\n      min_index = i\n    elseif\
    \ v == max then\n      max_index = i\n    end\n  end\n  if min_index < max_index\
    \ then\n    for i = 1, #lst, 2 do\n      result[i] = min\n      result[i + 1]\
    \ = max\n    end\n  else\n    for i = 1, #lst, 2 do\n      result[i] = max\n \
    \     result[i + 1] = min\n    end\n  end\n  return result\nend", "  local min,\
    \ max = math.min, math.max\n  local function min_max(lst)\n    local mn, mx =\
    \ min(unpack(lst)), max(unpack(lst))\n    local mn_i, mx_i = 0, 0\n    for i,\
    \ v in ipairs(lst) do\n      if v == mn then mn_i = i end\n      if v == mx then\
    \ mx_i = i end\n    end\n    return mn, mn_i, mx, mx_i\n  end\n  local function\
    \ remove(lst, i)\n    local res = {}\n    for j, v in ipairs(lst) do\n      if\
    \ j ~= i then table.insert(res, v) end\n    end\n    return res\n  end\n  local\
    \ res = {}\n  while #lst > 0 do\n    local mn, mn_i, mx, mx_i = min_max(lst)\n\
    \    table.insert(res, mn)\n    table.insert(res, mx)\n    lst = remove(lst, mn_i)\n\
    \    lst = remove(lst, mx_i - 1)\n  end\n  return res\nend", "    local result\
    \ = {}\n    local min_index, max_index\n    local min_value, max_value\n    local\
    \ min_found, max_found\n    local i, j\n    local n = #lst\n    local k = 1\n\
    \    while k <= n do\n        min_found = false\n        max_found = false\n \
    \       for i = 1, n do\n            if not result[i] then\n                if\
    \ not min_found then\n                    min_index = i\n                    min_value\
    \ = lst[i]\n                    min_found = true\n                elseif lst[i]\
    \ < min_value then\n                    min_index = i\n                    min_value\
    \ = lst[i]\n                end\n                if not max_found then\n     \
    \               max_index = i\n                    max_value = lst[i]\n      \
    \              max_found = true\n                elseif lst[i] > max_value then\n\
    \                    max_index = i\n                    max_value = lst[i]\n \
    \               end\n            end\n        end\n        result[min_index] =\
    \ min_value\n        k = k + 1\n        if k <= n then\n            result[max_index]\
    \ = max_value\n            k = k + 1\n        end\n    end\n    return result\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx =\
    \ i\n            min_found = true\n        end\n        if lst[i] == max then\n\
    \            max_idx = i\n            max_found = true\n        end\n        if\
    \ min_found and max_found then\n            break\n        end\n    end\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, min_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for j = 1, #lst do\n                if\
    \ lst[j] == min then\n                    min_idx = j\n                    min_found\
    \ = true\n                end\n                if lst[j] == max then\n       \
    \             max_idx = j\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n            end\n        else\n            table.insert(res,\
    \ max)\n            table.remove(lst, max_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for j = 1, #lst do\n                if\
    \ lst[j] == min then\n                    min_idx = j\n                    min_found\
    \ = true\n                end\n                if lst[j] == max then\n       \
    \             max_idx = j\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n           ", "  local result = {}\n  local min_value,\
    \ max_value, min_index, max_index\n  local min_value_found, max_value_found",
  "    local result = {}\n    local min_value, max_value, min_index, max_index\n \
    \   local min_found, max_found\n    local i = 1\n    while i <= #lst do\n    \
    \    min_found = false\n        max_found = false\n        for j = 1, #lst do\n\
    \            if not min_found then\n                if lst[j] == min_value then\n\
    \                    min_found = true\n                elseif min_value == nil\
    \ or lst[j] < min_value then\n                    min_value = lst[j]\n       \
    \             min_index = j\n                end\n            end\n          \
    \  if not max_found then\n                if lst[j] == max_value then\n      \
    \              max_found = true\n                elseif max_value == nil or lst[j]\
    \ > max_value then\n                    max_value = lst[j]\n                 \
    \   max_index = j\n                end\n            end\n            if min_found\
    \ and max_found then\n                break\n            end\n        end\n  \
    \      if i % 2 == 1 then\n            result[i] = min_value\n            lst[min_index]\
    \ = nil\n            min_value = nil\n        else\n            result[i] = max_value\n\
    \            lst[max_index] = nil\n            max_value = nil\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local result = {}\n\
    \    local min_index, max_index\n    local min_value, max_value\n    local min_value_index,\
    \ max_value_index\n    local min_value_indexes, max_value_indexes\n    local min_value_indexes_count,\
    \ max_value_indexes_count\n    local min_value_indexes_index, max_value_indexes_index\n\
    \    local lst_count = #lst\n    local lst_index = 1\n    local lst_indexes =\
    \ {}\n    for i = 1, lst_count do\n        lst_indexes[i] = i\n    end\n    while\
    \ lst_index <= lst_count do\n        min_value = math.huge\n        max_value\
    \ = -math.huge\n        min_value_indexes = {}\n        max_value_indexes = {}\n\
    \        for i = 1, lst_count do\n            if lst_indexes[i] then\n       \
    \         if lst[i] < min_value then\n                    min_value = lst[i]\n\
    \                    min_value_indexes = {i}\n                elseif lst[i] ==\
    \ min_value then\n                    min_value_indexes[#min_value_indexes + 1]\
    \ = i\n                end\n                if lst[i] > max_value then\n     \
    \               max_value = lst[i]\n                    max_value_indexes = {i}\n\
    \                elseif lst[i] == max_value then\n                    max_value_indexes[#max_value_indexes\
    \ + 1] = i\n                end\n            end\n        end\n        min_value_indexes_count\
    \ = #min_value_indexes\n        max_value_indexes_count = #max_value_indexes\n\
    \        min_value_indexes_index = 1\n        max_value_indexes_index = 1\n  \
    \      while lst_index <= lst_count do\n            if min_value_indexes_index\
    \ <= min_value_indexes_count then\n                min_value_index = min_value_indexes[min_value_indexes_index]\n\
    \                min_value_indexes_index =", "    local function strange_sort(lst)\n\
    \        if #lst == 0 then\n            return {}\n        end\n        local\
    \ min = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n   \
    \     local min_idx = 1\n        local max_idx = 1\n        for i, v in ipairs(lst)\
    \ do\n            if v == min then\n                min_idx = i\n            end\n\
    \            if v == max then\n                max_idx = i\n            end\n\
    \        end\n        local new_lst = {}\n        for i, v in ipairs(lst) do\n\
    \            if i ~= min_idx and i ~= max_idx then\n                table.insert(new_lst,\
    \ v)\n            end\n        end\n        return {min, max} .. strange_sort(new_lst)\n\
    \    end\n    return strange_sort(lst)\nend", "    local res = {}\n    local min_val,\
    \ max_val = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = lst:index_of(min_val), lst:index_of(max_val)\n    local min_idx_used, max_idx_used\
    \ = false, false\n    local i = 1\n    while i <= #lst do\n        if not min_idx_used\
    \ then\n            res[i] = min_val\n            min_idx_used = true\n      \
    \      i = i + 1\n        end\n        if not max_idx_used then\n            res[i]\
    \ = max_val\n            max_idx_used = true\n            i = i + 1\n        end\n\
    \        if min_idx_used and max_idx_used then\n            local new_min_val,\
    \ new_max_val = math.min(unpack(lst)), math.max(unpack(lst))\n            local\
    \ new_min_idx, new_max_idx = lst:index_of(new_min_val), lst:index_of(new_max_val)\n\
    \            if new_min_idx ~= min_idx and new_min_idx ~= max_idx then\n     \
    \           min_val, min_idx = new_min_val, new_min_idx\n                min_idx_used\
    \ = false\n            end\n            if new_max_idx ~= min_idx and new_max_idx\
    \ ~= max_idx then\n                max_val, max_idx = new_max_val, new_max_idx\n\
    \                max_idx_used = false\n            end\n        end\n    end\n\
    \    return res\nend", "  local res = {}\n  local lst_len = #lst\n  local min_idx\
    \ = 1\n  local max_idx = 1\n  local min_val = lst[1]\n  local max_val = lst[1]\n\
    \  local i = 1\n  while i <= lst_len do\n    for j = 1, lst_len do\n      if lst[j]\
    \ < min_val then\n        min_val = lst[j]\n        min_idx = j\n      end\n \
    \     if lst[j] > max_val then\n        max_val = lst[j]\n        max_idx = j\n\
    \      end\n    end\n    if i % 2 == 1 then\n      res[i] = min_val\n      lst[min_idx]\
    \ = math.huge\n    else\n      res[i] = max_val\n      lst[max_idx] = -math.huge\n\
    \    end\n    min_val = math.huge\n    max_val = -math.huge\n    i = i + 1\n \
    \ end\n  return res\nend", "    local res = {}\n    local min_val, max_val, min_idx,\
    \ max_idx\n    local i = 1\n    while #lst > 0 do\n        min_val, min_idx =\
    \ math.min(unpack(lst))\n        max_val, max_idx = math.max(unpack(lst))\n  \
    \      if i % 2 == 1 then\n            res[i] = min_val\n            table.remove(lst,\
    \ min_idx)\n        else\n            res[i] = max_val\n            table.remove(lst,\
    \ max_idx)\n        end\n        i = i + 1\n    end\n    return res\nend", " \
    \   local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    if min_idx <\
    \ max_idx then\n        for i = 1, #lst do\n            if i % 2 == 1 then\n \
    \               res[i] = min\n            else\n                res[i] = max\n\
    \            end\n        end\n    else\n        for i = 1, #lst do\n        \
    \    if i % 2 == 1 then\n                res[i] = max\n            else\n    \
    \            res[i] = min\n            end\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local is_min = true\n    while #lst > 0 do\n        if is_min then\n    \
    \        table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        is_min = not is_min\n    end\n    return res\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n \
    \   local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local\
    \ min_found = false\n    local max_found = false\n    local i = 1\n    while i\
    \ <= #lst do\n        if not min_found then\n            for j = min_idx, max_idx\
    \ do\n                if lst[j] < min_val then\n                    min_val =\
    \ lst[j]\n                    min_idx = j\n                end\n            end\n\
    \            res[i] = min_val\n            min_found = true\n            i = i\
    \ + 1\n        end\n        if not max_found then\n            for j = max_idx,\
    \ min_idx, -1 do\n                if lst[j] > max_val then\n                 \
    \   max_val = lst[j]\n                    max_idx = j\n                end\n \
    \           end\n            res[i] = max_val\n            max_found = true\n\
    \            i = i + 1\n        end\n        min_found = false\n        max_found\
    \ = false\n        min_idx = min_idx + 1\n        max_idx = max_idx - 1\n    \
    \    min_val = lst[min_idx]\n        max_val = lst[max_idx]\n    end\n    return\
    \ res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ do\n        if lst[i] == min then\n            min_idx = i\n        elseif lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, min_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            for\
    \ j = 1, #lst do\n                if lst[j] == min then\n                    min_idx\
    \ = j\n                elseif lst[j] == max then\n                    max_idx\
    \ = j\n                end\n            end\n        else\n            table.insert(res,\
    \ max)\n            table.remove(lst, max_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            for\
    \ j = 1, #lst do\n                if lst[j] == min then\n                    min_idx\
    \ = j\n                elseif lst[j] == max then\n                    max_idx\
    \ = j\n                end\n            end\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    local min_found,\
    \ max_found = false, false\n    local i = 1\n    while i <= #lst do\n        if\
    \ not min_found then\n            if lst[i] == min then\n                min_idx\
    \ = i\n                min_found = true\n            end\n        end\n      \
    \  if not max_found then\n            if lst[i] == max then\n                max_idx\
    \ = i\n                max_found = true\n            end\n        end\n      \
    \  if min_found and max_found then\n            break\n        end\n        i\
    \ = i + 1\n    end\n    if min_idx < max_idx then\n        for i = 1, #lst do\n\
    \            if i % 2 == 1 then\n                res[i] = min\n              \
    \  min = min + 1\n            else\n                res[i] = max\n           \
    \     max = max - 1\n            end\n        end\n    else\n        for i = 1,\
    \ #lst do\n            if i % 2 == 1 then\n                res[i] = max\n    \
    \            max = max - 1\n            else\n                res[i] = min\n \
    \               min = min + 1\n            end\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = 1\n\
    \    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n\
    \            table.insert(res, min)\n            table.remove(lst, min_idx)\n\
    \            min = math.min(unpack(lst))\n            min_idx = 1\n          \
    \  for j, v in ipairs(lst) do\n                if v == min then\n            \
    \        min_idx = j\n                end\n            end\n        else\n   \
    \         table.insert(res, max)\n            table.remove(lst, max_idx)\n   \
    \         max = math.max(unpack(lst))\n            max_idx = 1\n            for\
    \ j, v in ipairs(lst) do\n                if v == max then\n                 \
    \   max_idx = j\n                end\n            end\n        end\n        i\
    \ = i + 1\n    end\n    return res\nend", "  local result = {}\n  local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n  local i = 1\n  while #lst\
    \ > 0 do\n    if i % 2 == 1 then\n      table.insert(result, min)\n      table.remove(lst,\
    \ table.index_of(lst, min))\n    else\n      table.insert(result, max)\n     \
    \ table.remove(lst, table.index_of(lst, max))\n    end\n    min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    i = i + 1\n  end\n  return result\nend", "    local\
    \ min_idx = 1\n    local max_idx = 1\n    local min_val = lst[1]\n    local max_val\
    \ = lst[1]\n    local res = {}\n    for i, v in ipairs(lst) do\n        if v <\
    \ min_val then\n            min_val = v\n            min_idx = i\n        end\n\
    \        if v > max_val then\n            max_val = v\n            max_idx = i\n\
    \        end\n    end\n    local i = 1\n    while i <= #lst do\n        if i %\
    \ 2 == 1 then\n            res[i] = min_val\n            lst[min_idx] = max_val\n\
    \            min_val = max_val\n            min_idx = max_idx\n        else\n\
    \            res[i] = max_val\n            lst[max_idx] = min_val\n          \
    \  max_val = min_val\n            max_idx = min_idx\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "    local result = {}\n    local min_index,\
    \ max_index\n    local min_value, max_value\n    local min_value_index, max_value_index\n\
    \    local min_value_indexes, max_value_indexes\n    local min_value_indexes_len,\
    \ max_value_indexes_len\n    local min_value_indexes_i, max_value_indexes_i\n\
    \    local min_value_indexes_j, max_value_indexes_j\n    local min_value_indexes_k,\
    \ max_value_indexes_k\n    local min_value_indexes_l, max_value_indexes_l\n  \
    \  local min_value_indexes_m, max_value_indexes_m\n    local min_value_indexes_n,\
    \ max_value_indexes_n\n    local min_value_indexes_o, max_value_indexes_o\n  \
    \  local min_value_indexes_p, max_value_indexes_p\n    local min_value_indexes_q,\
    \ max_value_indexes_q\n    local min_value_indexes_r, max_value_indexes_r\n  \
    \  local min_value_indexes_s, max_value_indexes_s\n    local min_value_indexes_t,\
    \ max_value_indexes_t\n    local min_value_indexes_u, max_value_indexes_u\n  \
    \  local min_value_indexes_v, max_value_indexes_v\n    local min_value_indexes_w,\
    \ max_value_indexes_w\n    local min_value_indexes_x, max_value_indexes_x\n  \
    \  local min_value_indexes_y, max_value_indexes_y\n    local min_value_indexes_z,\
    \ max_value_indexes_z\n    local min_value_indexes_aa, max_value_indexes_aa\n\
    \    local min_value_indexes_ab, max_value_indexes_ab\n    local min_value_indexes_ac,\
    \ max_value_indexes_ac\n    local min_value_indexes_ad, max_value_", "  local\
    \ res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = table.index_of(lst, min)\n  local max_idx = table.index_of(lst,\
    \ max)\n  local min_used = false\n  local max_used = false\n  local i = 1\n  while\
    \ i <= #lst do\n    if not min_used and min_idx ~= max_idx then\n      res[i]\
    \ = min\n      min_used = true\n      i = i + 1\n    end\n    if not max_used\
    \ then\n      res[i] = max\n      max_used = true\n      i = i + 1\n    end\n\
    \    if min_used and max_used then\n      min_used = false\n      max_used = false\n\
    \      local new_lst = table.remove_value(lst, min)\n      new_lst = table.remove_value(new_lst,\
    \ max)\n      min = math.min(unpack(new_lst))\n      max = math.max(unpack(new_lst))\n\
    \      min_idx = table.index_of(new_lst, min)\n      max_idx = table.index_of(new_lst,\
    \ max)\n      lst = new_lst\n    end\n  end\n  return res\nend", "    local res\
    \ = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  \
    \  local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i] ==\
    \ min then\n            min_idx = i\n        elseif lst[i] == max then\n     \
    \       max_idx = i\n        end\n    end\n    local min_first = min_idx < max_idx\n\
    \    local i = 1\n    while #lst > 0 do\n        if min_first then\n         \
    \   table.insert(res, lst[min_idx])\n            table.remove(lst, min_idx)\n\
    \            min_first = false\n        else\n            table.insert(res, lst[max_idx])\n\
    \            table.remove(lst, max_idx)\n            min_first = true\n      \
    \  end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    \
    \    min_idx, max_idx = 1, 1\n        for i = 1, #lst do\n            if lst[i]\
    \ == min then\n                min_idx = i\n            elseif lst[i] == max then\n\
    \                max_idx = i\n            end\n        end\n    end\n    return\
    \ res\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = table.index_of(lst, min), table.index_of(lst, max)\n\
    \  local min_found, max_found = false, false\n  local min_lst, max_lst = table.copy(lst),\
    \ table.copy(lst)\n  table.remove(min_lst, min_idx)\n  table.remove(max_lst, max_idx)\n\
    \  while #min_lst > 0 or #max_lst > 0 do\n    if not min_found then\n      table.insert(res,\
    \ min)\n      min_found = true\n    elseif not max_found then\n      table.insert(res,\
    \ max)\n      max_found = true\n    end\n    if #min_lst > 0 then\n      min =\
    \ math.min(unpack(min_lst))\n      min_idx = table.index_of(min_lst, min)\n  \
    \    table.remove(min_lst, min_idx)\n      min_found = false\n    end\n    if\
    \ #max_lst > 0 then\n      max = math.max(unpack(max_lst))\n      max_idx = table.index_of(max_lst,\
    \ max)\n      table.remove(max_lst, max_idx)\n      max_found = false\n    end\n\
    \  end\n  if not min_found then\n    table.insert(res, min)\n  elseif not max_found\
    \ then\n    table.insert(res, max)\n  end\n  return res\nend", "    local res\
    \ = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min = math.min(unpack(lst))\n        else\n  \
    \          res[i] = max\n            max = math.max(unpack(lst))\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "  local res = {}\n  local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx\
    \ = 1, 1\n  local min_found, max_found = false, false\n  local i = 1\n  while\
    \ i <= #lst do\n    if not min_found then\n      if lst[i] == min then\n     \
    \   min_idx = i\n        min_found = true\n      end\n    end\n    if not max_found\
    \ then\n      if lst[i] == max then\n        max_idx = i\n        max_found =\
    \ true\n      end\n    end\n    if min_found and max_found then\n      break\n\
    \    end\n    i = i + 1\n  end\n  local min_removed, max_removed = false, false\n\
    \  for i, v in ipairs(lst) do\n    if i == min_idx and not min_removed then\n\
    \      table.insert(res, v)\n      min_removed = true\n    elseif i == max_idx\
    \ and not max_removed then\n      table.insert(res, v)\n      max_removed = true\n\
    \    end\n  end\n  if #lst == 2 then\n    return res\n  end\n  local new_lst =\
    \ {}\n  for i, v in ipairs(lst) do\n    if i ~= min_idx and i ~= max_idx then\n\
    \      table.insert(new_lst, v)\n    end\n  end\n  return table.concat({res, strange_sort_list(new_lst)})\n\
    end", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 0, 0\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_flag = true\n  for i = 1, #lst do\n    if min_flag then\n\
    \      res[i] = min\n      min_flag = false\n    else\n      res[i] = max\n  \
    \    min_flag = true\n    end\n  end\n  return res\nend", "    local result =\
    \ {}\n    local min_index = 1\n    local max_index = 1\n    local min_value =\
    \ lst[1]\n    local max_value = lst[1]\n    local i = 1\n    while i <= #lst do\n\
    \        if lst[i] < min_value then\n            min_value = lst[i]\n        \
    \    min_index = i\n        end\n        if lst[i] > max_value then\n        \
    \    max_value = lst[i]\n            max_index = i\n        end\n        i = i\
    \ + 1\n    end\n    local i = 1\n    while i <= #lst do\n        if i % 2 == 1\
    \ then\n            table.insert(result, min_value)\n            table.remove(lst,\
    \ min_index)\n            min_index = 1\n            min_value = lst[1]\n    \
    \        max_index = 1\n            max_value = lst[1]\n            local j =\
    \ 1\n            while j <= #lst do\n                if lst[j] < min_value then\n\
    \                    min_value = lst[j]\n                    min_index = j\n \
    \               end\n                if lst[j] > max_value then\n            \
    \        max_value = lst[j]\n                    max_index = j\n             \
    \   end\n                j = j + 1\n            end\n        else\n          \
    \  table.insert(result, max_value)\n            table.remove(lst, max_index)\n\
    \            min_index = 1\n            min_value = lst[1]\n            max_index\
    \ = 1\n            max_value = lst[1]\n            local j = 1\n            while\
    \ j <= #lst do\n                if lst[j] < min_value then\n                 \
    \   min_value = lst[j]\n                    min_index = j\n                end\n\
    \                if lst[j] > max_value then\n                    max_value = lst[j]\n\
    \                    max_index = j\n                end\n                j = j\
    \ + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ == min then\n      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx\
    \ = i\n    end\n  end\n  local min_flag = true\n  local max_flag = true\n  for\
    \ i = 1, #lst do\n    if min_flag then\n      res[i] = min\n      min_flag = false\n\
    \      if min_idx < max_idx then\n        max_flag = true\n      end\n    elseif\
    \ max_flag then\n      res[i] = max\n      max_flag = false\n      if max_idx\
    \ < min_idx then\n        min_flag = true\n      end\n    end\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min_val), lst:index_of(max_val)\n\
    \    local min_idx_used, max_idx_used = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_idx_used then\n            res[i] = min_val\n\
    \            min_idx_used = true\n            i = i + 1\n        end\n       \
    \ if not max_idx_used then\n            res[i] = max_val\n            max_idx_used\
    \ = true\n            i = i + 1\n        end\n        if min_idx_used and max_idx_used\
    \ then\n            min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            min_idx, max_idx = lst:index_of(min_val), lst:index_of(max_val)\n\
    \            min_idx_used, max_idx_used = false, false\n        end\n    end\n\
    \    return res\nend", "    local result = {}\n    local min_index, max_index\
    \ = 1, #lst\n    local min_value, max_value = lst[min_index], lst[max_index]\n\
    \    local min_found, max_found = false, false\n    local min_value_found, max_value_found\
    \ = false, false\n    local min_value_index, max_value_index = 0, 0\n    local\
    \ i = 1\n    while i <= #lst do\n        if not min_found then\n            if\
    \ not min_value_found then\n                min_value = lst[min_index]\n     \
    \           min_value_index = min_index\n            end\n            if lst[i]\
    \ < min_value then\n                min_value = lst[i]\n                min_value_index\
    \ = i\n            end\n            if i == max_index then\n                min_found\
    \ = true\n                min_value_found = true\n                result[#result\
    \ + 1] = min_value\n                min_index = min_value_index + 1\n        \
    \    end\n        elseif not max_found then\n            if not max_value_found\
    \ then\n                max_value = lst[max_index]\n                max_value_index\
    \ = max_index\n            end\n            if lst[i] > max_value then\n     \
    \           max_value = lst[i]\n                max_value_index = i\n        \
    \    end\n            if i == min_index then\n                max_found = true\n\
    \                max_value_found = true\n                result[#result + 1] =\
    \ max_value\n                max_index = max_value_index - 1\n            end\n\
    \        else\n            min_found = false\n            max_found = false\n\
    \            min_value_found = false\n            max_value_found = false\n  \
    \      end\n        i = i + 1\n    end\n    return result\nend", "    local result\
    \ = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local min_val = lst[min_idx]\n\
    \    local max_val = lst[max_idx]\n    local min_found = false\n    local max_found\
    \ = false\n    local min_idx_found = false\n    local max_idx_found = false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] < min_val then\n                min_val = lst[i]\n        \
    \        min_idx = i\n            end\n            if i == #lst then\n       \
    \         min_found = true\n                min_idx_found = true\n           \
    \ end\n        end\n        if not max_found then\n            if lst[i] > max_val\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                max_idx_found = true\n            end\n        end\n        if\
    \ min_found and max_found then\n            if min_idx_found then\n          \
    \      table.insert(result, min_val)\n                min_idx_found = false\n\
    \                min_found = false\n                min_val = lst[i]\n       \
    \         min_idx = i\n            elseif max_idx_found then\n               \
    \ table.insert(result, max_val)\n                max_idx_found = false\n     \
    \           max_found = false\n                max_val = lst[i]\n            \
    \    max_idx = i\n            end\n        end\n        i = i + 1\n    end\n \
    \   return result\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  local min_found, max_found\
    \ = false, false\n  for i = 1, #lst do\n    if lst[i] == min and not min_found\
    \ then\n      min_idx = i\n      min_found = true\n    elseif lst[i] == max and\
    \ not max_found then\n      max_idx = i\n      max_found = true\n    end\n  end\n\
    \  local min_lst, max_lst = {}, {}\n  for i = 1, #lst do\n    if i ~= min_idx\
    \ then\n      table.insert(min_lst, lst[i])\n    end\n    if i ~= max_idx then\n\
    \      table.insert(max_lst, lst[i])\n    end\n  end\n  local min_min, min_max\
    \ = math.min(unpack(min_lst)), math.max(unpack(min_lst))\n  local max_min, max_max\
    \ = math.min(unpack(max_lst)), math.max(unpack(max_lst))\n  local min_min_idx,\
    \ min_max_idx = 1, 1\n  local max_min_idx, max_max_idx = 1, 1\n  local min_min_found,\
    \ min_max_found = false, false\n  local max_min_found, max_max_found = false,\
    \ false\n  for i = 1, #min_lst do\n    if min_lst[i] == min_min and not min_min_found\
    \ then\n      min_min_idx = i\n      min_min_found = true\n    elseif min_lst[i]\
    \ == min_max and not min_max_found then\n      min_max_idx = i\n      min_max_found\
    \ = true\n    end\n  end\n  for i = 1, #max_lst do\n    if max_lst[i] == max_min\
    \ and not max_", "    local res = {}\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    local min = lst[min_idx]\n    local max = lst[max_idx]\n    local\
    \ min_val = min\n    local max_val = max\n    local min_found = false\n    local\
    \ max_found = false\n    local i = 1\n    local j = #lst\n    local k = 1\n  \
    \  while k <= #lst do\n        if not min_found then\n            if lst[i] <\
    \ min_val then\n                min_val = lst[i]\n                min_idx = i\n\
    \            end\n            i = i + 1\n            if i > #lst then\n      \
    \          min_found = true\n                res[k] = min_val\n              \
    \  k = k + 1\n            end\n        end\n        if not max_found then\n  \
    \          if lst[j] > max_val then\n                max_val = lst[j]\n      \
    \          max_idx = j\n            end\n            j = j - 1\n            if\
    \ j < 1 then\n                max_found = true\n                res[k] = max_val\n\
    \                k = k + 1\n            end\n        end\n        if min_found\
    \ and max_found then\n            min_found = false\n            max_found = false\n\
    \            min_val = max\n            max_val = min\n            i = min_idx\
    \ + 1\n            j = max_idx - 1\n        end\n    end\n    return res\nend",
  "    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_used, max_used = false, false\n    local i = 1\n    while i <= #lst do\n\
    \        if i % 2 == 1 then\n            if not min_used then\n              \
    \  result[i] = min\n                min_used = true\n            else\n      \
    \          result[i] = lst[min_index + 1]\n                min_index = min_index\
    \ + 1\n            end\n        else\n            if not max_used then\n     \
    \           result[i] = max\n                max_used = true\n            else\n\
    \                result[i] = lst[max_index - 1]\n                max_index = max_index\
    \ - 1\n            end\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local result = {}\n    local min_val, max_val\n    local min_idx, max_idx\n\
    \    local min_found, max_found\n    local i, j", "    local result = {}\n   \
    \ local min_value, max_value\n    local min_index, max_index\n    local i = 1\n\
    \    while #lst > 0 do\n        min_value, max_value = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_index, max_index = find_index(lst, min_value),\
    \ find_index(lst, max_value)\n        if i % 2 == 1 then\n            table.insert(result,\
    \ min_value)\n            table.remove(lst, min_index)\n        else\n       \
    \     table.insert(result, max_value)\n            table.remove(lst, max_index)\n\
    \        end\n        i = i + 1\n    end\n    return result\nend", "  local res\
    \ = {}\n  local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_ind, max_ind = table.find(lst, min_val), table.find(lst, max_val)\n\
    \  local min_ind_used, max_ind_used = false, false\n  local i = 1\n  while i <=\
    \ #lst do\n    if not min_ind_used and min_ind ~= max_ind then\n      res[i] =\
    \ min_val\n      min_ind_used = true\n      i = i + 1\n    end\n    if not max_ind_used\
    \ then\n      res[i] = max_val\n      max_ind_used = true\n      i = i + 1\n \
    \   end\n    if min_ind_used and max_ind_used then\n      min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n      min_ind, max_ind = table.find(lst, min_val), table.find(lst,\
    \ max_val)\n      min_ind_used, max_ind_used = false, false\n    end\n  end\n\
    \  return res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n\
    \  for i, v in ipairs(lst) do\n    if v == min then\n      min_idx = i\n    elseif\
    \ v == max then\n      max_idx = i\n    end\n  end\n  local min_idx_used = false\n\
    \  local max_idx_used = false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      if not min_idx_used then\n        res[i] = min\n        min_idx_used =\
    \ true\n      else\n        res[i] = max\n        max_idx_used = true\n      end\n\
    \    else\n      if not max_idx_used then\n        res[i] = max\n        max_idx_used\
    \ = true\n      else\n        res[i] = min\n        min_idx_used = true\n    \
    \  end\n    end\n  end\n  return res\nend", "  local sorted = {}\n  local len\
    \ = #lst\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local\
    \ min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n  local min_removed,\
    \ max_removed = false, false\n  local i = 1\n  while i <= len do\n    if not min_removed\
    \ then\n      sorted[i] = min\n      min_removed = true\n      i = i + 1\n   \
    \ end\n    if not max_removed then\n      sorted[i] = max\n      max_removed =\
    \ true\n      i = i + 1\n    end\n    if min_removed and max_removed then\n  \
    \    lst[min_idx] = nil\n      lst[max_idx] = nil\n      min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n      min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \      min_removed, max_removed = false, false\n    end\n  end\n  return sorted\n\
    end", "    local result = {}\n    local min_index, max_index\n    local min_value,\
    \ max_value\n    local min_value_set, max_value_set = false, false\n    local\
    \ i = 1\n    while i <= #lst do\n        if not min_value_set then\n         \
    \   min_value = math.min(unpack(lst))\n            min_index = table.index_of(lst,\
    \ min_value)\n            min_value_set = true\n        elseif not max_value_set\
    \ then\n            max_value = math.max(unpack(lst))\n            max_index =\
    \ table.index_of(lst, max_value)\n            max_value_set = true\n        end\n\
    \        if min_value_set and max_value_set then\n            table.insert(result,\
    \ min_value)\n            table.insert(result, max_value)\n            table.remove(lst,\
    \ min_index)\n            table.remove(lst, max_index - 1)\n            min_value_set,\
    \ max_value_set = false, false\n            i = i + 2\n        end\n    end\n\
    \    return result\nend", "    local sorted = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 0\n    local max_index\
    \ = 0\n    local is_min = true\n    for i = 1, #lst do\n        if is_min then\n\
    \            min_index = min_index + 1\n            sorted[i] = min\n        \
    \    min = math.min(unpack(lst))\n        else\n            max_index = max_index\
    \ + 1\n            sorted[i] = max\n            max = math.max(unpack(lst))\n\
    \        end\n        is_min = not is_min\n    end\n    return sorted\nend", " \
    \   local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_found, max_found = false, false\n\
    \    local min_cnt, max_cnt = 0, 0\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if lst[i] == min_val then\n      \
    \          min_idx = i\n                min_found = true\n                min_cnt\
    \ = min_cnt + 1\n            end\n        end\n        if not max_found then\n\
    \            if lst[i] == max_val then\n                max_idx = i\n        \
    \        max_found = true\n                max_cnt = max_cnt + 1\n           \
    \ end\n        end\n        if min_found and max_found then\n            break\n\
    \        end\n        i = i + 1\n    end\n    local min_idx_found, max_idx_found\
    \ = false, false\n    local min_idx_cnt, max_idx_cnt = 0, 0\n    local j = 1\n\
    \    while j <= #lst do\n        if not min_idx_found then\n            if lst[j]\
    \ == min_val then\n                min_idx_cnt = min_idx_cnt + 1\n           \
    \     if min_idx_cnt == min_cnt then\n                    min_idx_found = true\n\
    \                end\n            end\n        end\n        if not max_idx_found\
    \ then\n            if lst[j] == max_val then\n                max_idx_cnt = max_idx_cnt\
    \ + 1\n                if max_idx_cnt == max_cnt then\n                    max_idx_found\
    \ = true\n                end\n            end\n        end\n        if min_idx_found\
    \ and max_idx_found then\n            break\n        end\n        j = j + 1\n\
    \    end\n    local k = 1\n    while k <= #lst do\n        if k % 2 == 1 then\n\
    \            table.insert(res", "    local result = {}\n    local min_index, max_index\
    \ = 1, #lst\n    local min_value, max_value = lst[min_index], lst[max_index]\n\
    \    local min_found, max_found = false, false\n    local i = 1\n    while i <=\
    \ #lst do\n        if not min_found then\n            if lst[min_index] < min_value\
    \ then\n                min_value = lst[min_index]\n                min_index\
    \ = min_index + 1\n            else\n                min_found = true\n      \
    \          result[i] = min_value\n                i = i + 1\n            end\n\
    \        end\n        if not max_found then\n            if lst[max_index] > max_value\
    \ then\n                max_value = lst[max_index]\n                max_index\
    \ = max_index - 1\n            else\n                max_found = true\n      \
    \          result[i] = max_value\n                i = i + 1\n            end\n\
    \        end\n        if min_found and max_found then\n            min_found,\
    \ max_found = false, false\n        end\n    end\n    return result\nend", " \
    \   local min, max = min_max(lst)\n    local res = {}\n    local i = 1\n    local\
    \ j = #lst\n    while i <= j do\n        res[i] = min\n        res[j] = max\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return res\nend", "    local\
    \ res = {}\n    local min_index, max_index = 1, #lst\n    local min_value, max_value\
    \ = lst[min_index], lst[max_index]\n    local min_value_index, max_value_index\
    \ = min_index, max_index\n    local min_value_found, max_value_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_value_found\
    \ then\n            if lst[min_index] < min_value then\n                min_value\
    \ = lst[min_index]\n                min_value_index = min_index\n            end\n\
    \            if lst[max_index] < min_value then\n                min_value = lst[max_index]\n\
    \                min_value_index = max_index\n            end\n            if\
    \ min_value_index == min_index then\n                min_index = min_index + 1\n\
    \            else\n                max_index = max_index - 1\n            end\n\
    \            if min_index > max_index then\n                min_value_found =\
    \ true\n            end\n        end\n        if not max_value_found then\n  \
    \          if lst[min_index] > max_value then\n                max_value = lst[min_index]\n\
    \                max_value_index = min_index\n            end\n            if\
    \ lst[max_index] > max_value then\n                max_value = lst[max_index]\n\
    \                max_value_index = max_index\n            end\n            if\
    \ max_value_index == min_index then\n                min_index = min_index + 1\n\
    \            else\n                max_index = max_index - 1\n            end\n\
    \            if min_index > max_index then\n                max_value_found =\
    \ true\n            end\n        end\n        if min_value_found and max_value_found\
    \ then\n            res[i] = min_value\n            res[i + 1] = max_value\n \
    \           min_value_found = false\n            max_value_found = false\n   \
    \         min_value = lst[min_index]\n            max_value = lst[max_index]\n\
    \            min_value_index", "    local res = {}\n    local min_idx = 1\n  \
    \  local max_idx = #lst\n    local min_val = lst[min_idx]\n    local max_val =\
    \ lst[max_idx]\n    local min_found = false\n    local max_found = false\n   \
    \ local min_idx_found = false\n    local max_idx_found = false\n    local min_idx_found_idx\
    \ = 1\n    local max_idx_found_idx = 1\n    local min_val_found = false\n    local\
    \ max_val_found = false\n    local min_val_found_idx = 1\n    local max_val_found_idx\
    \ = 1\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] < min_val then\n                min_val = lst[i]\n    \
    \            min_idx = i\n            end\n            if i == #lst then\n   \
    \             min_found = true\n                min_idx_found = min_idx\n    \
    \            min_val_found = min_val\n                min_idx_found_idx = i\n\
    \                min_val_found_idx = i\n                res[#res + 1] = min_val\n\
    \                table.remove(lst, min_idx)\n            end\n        elseif not\
    \ max_found then\n            if lst[i] > max_val then\n                max_val\
    \ = lst[i]\n                max_idx = i\n            end\n            if i ==\
    \ #lst then\n                max_found = true\n                max_idx_found =\
    \ max_idx\n                max_val_found = max_val\n                max_idx_found_idx\
    \ = i\n                max_val_found_idx = i\n                res[#res + 1] =\
    \ max_val\n                table.remove(lst, max_idx)\n            end\n     \
    \   else\n            if lst[i] < min_val_found then\n                min_val_found\
    \ = lst[i]\n                min_idx_found = i\n            end\n            if\
    \ lst[i]", "    local result = {}\n    local min_index, max_index\n    local min_value,\
    \ max_value\n    local min_value_index, max_value_index\n    local min_value_index_removed,\
    \ max_value_index_removed\n    local min_value_index_removed_value, max_value_index_removed_value\n\
    \    local min_value_index_removed_value_index, max_value_index_removed_value_index\n\
    \    local min_value_index_removed_value_index_removed, max_value_index_removed_value_index_removed\n\
    \    local min_value_index_removed_value_index_removed_value, max_value_index_removed_value_index_removed_value\n\
    \    local min_value_index_removed_value_index_removed_value_index, max_value_index_removed_value_index_removed_value_index\n\
    \    local min_value_index_removed_value_index_removed_value_index_removed, max_value_index_removed_value_index_removed_value_index_removed\n\
    \    local min_value_index_removed_value_index_removed_value_index_removed_value,\
    \ max_value_index_removed_value_index_removed_value_index_removed_value\n    local\
    \ min_value_index_removed_value_index_removed_value_index_removed_value_index,\
    \ max_value_index_removed_value_index_removed_value_index_removed_value_index\n\
    \    local min_value_index_removed_value_index_removed_value_index_removed_value_index_removed,\
    \ max_value_index_removed_value_index_removed_value_index_removed_value_index_removed\n\
    \    local min_value_index_removed_value_index_removed_value_index_removed_value_index_removed_value,\
    \ max_value_index_removed_value_index_removed_value_index_removed_value_index_removed_value\n\
    \   ", "    local res = {}\n    local min = math.min(unpack(lst))\n    local max\
    \ = math.max(unpack(lst))\n    local min_idx = table.index_of(lst, min)\n    local\
    \ max_idx = table.index_of(lst, max)\n    local min_idx_2 = table.index_of(lst,\
    \ min, min_idx + 1)\n    local max_idx_2 = table.index_of(lst, max, max_idx +\
    \ 1)\n    local min_idx_3 = table.index_of(lst, min, min_idx_2 + 1)\n    local\
    \ max_idx_3 = table.index_of(lst, max, max_idx_2 + 1)\n    local min_idx_4 = table.index_of(lst,\
    \ min, min_idx_3 + 1)\n    local max_idx_4 = table.index_of(lst, max, max_idx_3\
    \ + 1)\n    local min_idx_5 = table.index_of(lst, min, min_idx_4 + 1)\n    local\
    \ max_idx_5 = table.index_of(lst, max, max_idx_4 + 1)\n    local min_idx_6 = table.index_of(lst,\
    \ min, min_idx_5 + 1)\n    local max_idx_6 = table.index_of(lst, max, max_idx_5\
    \ + 1)\n    local min_idx_7 = table.index_of(lst, min, min_idx_6 + 1)\n    local\
    \ max_idx_7 = table.index_of(lst, max, max_idx_6 + 1)\n    local min_idx_8 = table.index_of(lst,\
    \ min, min_idx_7 + 1)\n    local max_idx_8 = table.index_of(lst, max, max_idx_7\
    \ + 1)\n    local min_idx_9 = table.index_of(lst, min, min", "    local result\
    \ = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min_val and not min_found\
    \ then\n            min_idx = i\n            min_found = true\n        elseif\
    \ lst[i] == max_val and not max_found then\n            max_idx = i\n        \
    \    max_found = true\n        end\n    end\n    local min_removed, max_removed\
    \ = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n       \
    \     if not min_removed then\n                table.insert(result, min_val)\n\
    \                min_removed = true\n            else\n                table.insert(result,\
    \ lst[min_idx + 1])\n                min_idx = min_idx + 1\n            end\n\
    \        else\n            if not max_removed then\n                table.insert(result,\
    \ max_val)\n                max_removed = true\n            else\n           \
    \     table.insert(result, lst[max_idx - 1])\n                max_idx = max_idx\
    \ - 1\n            end\n        end\n    end\n    return result\nend", "    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local i = 1\n    local j = #lst\n    while i <= j do\n        res[i] = min\n\
    \        res[j] = max\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ res\nend", "    local res = {}\n    local min_idx, max_idx\n    local min_val,\
    \ max_val\n    local min_found, max_found\n    local i, j\n    local n = #lst\n\
    \    for i = 1, n do\n        min_found = false\n        max_found = false\n \
    \       for j = 1, n do\n            if not min_found and not lst[j] then\n  \
    \              min_found = true\n                min_idx = j\n               \
    \ min_val = lst[j]\n            elseif not min_found and lst[j] and (not min_val\
    \ or lst[j] < min_val) then\n                min_found = true\n              \
    \  min_idx = j\n                min_val = lst[j]\n            end\n          \
    \  if not max_found and not lst[j] then\n                max_found = true\n  \
    \              max_idx = j\n                max_val = lst[j]\n            elseif\
    \ not max_found and lst[j] and (not max_val or lst[j] > max_val) then\n      \
    \          max_found = true\n                max_idx = j\n                max_val\
    \ = lst[j]\n            end\n        end\n        if i % 2 == 1 then\n       \
    \     res[i] = min_val\n            lst[min_idx] = nil\n        else\n       \
    \     res[i] = max_val\n            lst[max_idx] = nil\n        end\n    end\n\
    \    return res\nend", "    local result = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index(min_val), lst:index(max_val)\n\
    \    local min_idx_used, max_idx_used = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_idx_used then\n            result[i] = min_val\n\
    \            min_idx_used = true\n        elseif not max_idx_used then\n     \
    \       result[i] = max_val\n            max_idx_used = true\n        else\n \
    \           if min_idx < max_idx then\n                result[i] = lst[min_idx\
    \ + 1]\n                min_idx = min_idx + 1\n            else\n            \
    \    result[i] = lst[max_idx - 1]\n                max_idx = max_idx - 1\n   \
    \         end\n        end\n        i = i + 1\n    end\n    return result\nend",
  "  local res = {}\n  local len = #lst\n  local min_i, max_i = 1, len\n  local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n  for i = 1, len do\n  \
    \  if i % 2 == 1 then\n      res[i] = min\n      min_i = min_i + 1\n      min\
    \ = math.min(unpack(lst, min_i))\n    else\n      res[i] = max\n      max_i =\
    \ max_i - 1\n      max = math.max(unpack(lst, 1, max_i))\n    end\n  end\n  return\
    \ res\nend", "    local result = {}\n    local min_index, max_index\n    local\
    \ min_value, max_value\n    local min_value_index, max_value_index\n    local\
    \ min_value_indexes, max_value_indexes\n    local min_value_indexes_len, max_value_indexes_len\n\
    \    local i, j, k", "    local result = {}\n    local n = #lst\n    local i =\
    \ 1\n    local j = n\n    local k = 1\n    while i <= n and j >= 1 do\n      \
    \  result[k] = lst[i]\n        result[k + 1] = lst[j]\n        i = i + 1\n   \
    \     j = j - 1\n        k = k + 2\n    end\n    return result\nend", "    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n      \
    \  if lst[i] == min then\n            min_idx = i\n        end\n        if lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local idx =\
    \ 1\n    local is_min = true\n    while idx <= #lst do\n        if is_min then\n\
    \            res[idx] = min\n            min_idx = min_idx + 1\n            if\
    \ min_idx > #lst then\n                min_idx = 1\n            end\n        \
    \    min = lst[min_idx]\n            is_min = false\n        else\n          \
    \  res[idx] = max\n            max_idx = max_idx - 1\n            if max_idx <\
    \ 1 then\n                max_idx = #lst\n            end\n            max = lst[max_idx]\n\
    \            is_min = true\n        end\n        idx = idx + 1\n    end\n    return\
    \ res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ do\n        if lst[i] == min then\n            min_idx = i\n        elseif lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_idx,\
    \ max_idx = min_idx, max_idx\n    local min_val, max_val = min, max\n    local\
    \ min_removed, max_removed = false, false\n    for i = 1, #lst do\n        if\
    \ i % 2 == 1 then\n            if not min_removed then\n                table.insert(res,\
    \ min_val)\n                min_removed = true\n            else\n           \
    \     table.insert(res, max_val)\n                max_removed = true\n       \
    \     end\n        else\n            if not min_removed then\n               \
    \ table.insert(res, max_val)\n                max_removed = true\n           \
    \ else\n                table.insert(res, min_val)\n                min_removed\
    \ = true\n            end\n        end\n    end\n    return res\nend", "    local\
    \ res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local min_val\
    \ = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found = false\n\
    \    local max_found = false\n    for i = 1, #lst do\n        if not min_found\
    \ then\n            for j = min_idx, max_idx do\n                if lst[j] < min_val\
    \ then\n                    min_val = lst[j]\n                    min_idx = j\n\
    \                end\n            end\n            min_found = true\n        \
    \    table.insert(res, min_val)\n        elseif not max_found then\n         \
    \   for j = max_idx, min_idx, -1 do\n                if lst[j] > max_val then\n\
    \                    max_val = lst[j]\n                    max_idx = j\n     \
    \           end\n            end\n            max_found = true\n            table.insert(res,\
    \ max_val)\n        end\n        min_found = not min_found\n        max_found\
    \ = not max_found\n    end\n    return res\nend", "    local res = {}\n    local\
    \ len = #lst\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_used, max_used = false, false\n    for i = 1, len do\n        if not min_used\
    \ and not max_used then\n            if i % 2 == 1 then\n                res[i]\
    \ = min\n                min_used = true\n            else\n                res[i]\
    \ = max\n                max_used = true\n            end\n        elseif min_used\
    \ and not max_used then\n            res[i] = max\n            max_used = true\n\
    \        elseif not min_used and max_used then\n            res[i] = min\n   \
    \         min_used = true\n        end\n    end\n    return res\nend", "    local\
    \ min_index, max_index = 1, #lst\n    local result = {}\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            result[i] = lst[min_index]\n        \
    \    min_index = min_index + 1\n        else\n            result[i] = lst[max_index]\n\
    \            max_index = max_index - 1\n        end\n    end\n    return result\n\
    end", "  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = #lst\n  local min_found = false\n\
    \  local max_found = false\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_found = true\n      min_index = i\n    end\n    if lst[i] == max then\n\
    \      max_found = true\n      max_index = i\n    end\n    if min_found and max_found\
    \ then\n      break\n    end\n  end\n  local min_val = min\n  local max_val =\
    \ max\n  local min_val_index = min_index\n  local max_val_index = max_index\n\
    \  local min_val_found = false\n  local max_val_found = false\n  local i = 1\n\
    \  while i <= #lst do\n    if i % 2 == 1 then\n      min_val_found = false\n \
    \     for j = min_val_index + 1, #lst do\n        if lst[j] < min_val then\n \
    \         min_val = lst[j]\n          min_val_index = j\n          min_val_found\
    \ = true\n        end\n      end\n      if not min_val_found then\n        min_val\
    \ = math.huge\n      end\n      res[i] = min_val\n    else\n      max_val_found\
    \ = false\n      for j = max_val_index - 1, 1, -1 do\n        if lst[j] > max_val\
    \ then\n          max_val = lst[j]\n          max_val_index = j\n          max_val_found\
    \ = true\n        end\n      end\n      if not max_val_found then\n        max_val\
    \ = -math.huge\n      end\n      res[i] = max_val\n    end\n    i = i + 1\n  end\n\
    \  return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            min_idx = min_idx + 1\n        else\n            res[i] =\
    \ max\n            max_idx = max_idx - 1\n        end\n    end\n    return res\n\
    end", "    local function strange_sort(lst, acc)\n        if #lst == 0 then\n\
    \            return acc\n        end\n        local min = math.min(unpack(lst))\n\
    \        local max = math.max(unpack(lst))\n        local min_i = table.index_of(lst,\
    \ min)\n        local max_i = table.index_of(lst, max)\n        table.remove(lst,\
    \ min_i)\n        table.remove(lst, max_i - 1)\n        table.insert(acc, min)\n\
    \        table.insert(acc, max)\n        return strange_sort(lst, acc)\n    end\n\
    \    return strange_sort(lst, {})\nend", "  local res = {}\n  local min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx = 1,\
    \ 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n    elseif\
    \ lst[i] == max then\n      max_idx = i\n    end\n  end\n  local min_flag = true\n\
    \  for i = 1, #lst do\n    if min_flag then\n      res[i] = min\n      min_flag\
    \ = false\n    else\n      res[i] = max\n      min_flag = true\n    end\n  end\n\
    \  return res\nend", "    local res = {}\n    local min_val, max_val, min_idx,\
    \ max_idx\n    local min_idx_removed, max_idx_removed = false, false\n    local\
    \ i = 1\n    while i <= #lst do\n        min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_idx, max_idx = find_index(lst, min_val),\
    \ find_index(lst, max_val)\n        if not min_idx_removed then\n            table.insert(res,\
    \ min_val)\n            table.remove(lst, min_idx)\n            min_idx_removed\
    \ = true\n        elseif not max_idx_removed then\n            table.insert(res,\
    \ max_val)\n            table.remove(lst, max_idx)\n            max_idx_removed\
    \ = true\n        end\n        if min_idx_removed and max_idx_removed then\n \
    \           min_idx_removed, max_idx_removed = false, false\n        end\n   \
    \     i = i + 1\n    end\n    return res\nend", "    local result = {}\n    local\
    \ min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local\
    \ min_index = 1\n    local max_index = #lst\n    local min_value = min\n    local\
    \ max_value = max\n    local min_found = false\n    local max_found = false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min_value then\n                result[min_index] = min_value\n\
    \                min_index = min_index + 2\n                min_value = min_value\
    \ + 1\n                min_found = true\n            end\n        end\n      \
    \  if not max_found then\n            if lst[i] == max_value then\n          \
    \      result[max_index] = max_value\n                max_index = max_index -\
    \ 2\n                max_value = max_value - 1\n                max_found = true\n\
    \            end\n        end\n        if min_found and max_found then\n     \
    \       min_found = false\n            max_found = false\n        end\n      \
    \  i = i + 1\n    end\n    return result\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = lst:index_of(min), lst:index_of(max)\n    local min_removed, max_removed\
    \ = lst:remove_value(min), lst:remove_value(max)\n    local min_idx_removed, max_idx_removed\
    \ = min_removed:index_of(min), max_removed:index_of(max)\n    local min_removed_removed,\
    \ max_removed_removed = min_removed:remove_value(min), max_removed:remove_value(max)\n\
    \    local min_idx_removed_removed, max_idx_removed_removed = min_removed_removed:index_of(min),\
    \ max_removed_removed:index_of(max)\n    local min_removed_removed_removed, max_removed_removed_removed\
    \ = min_removed_removed:remove_value(min), max_removed_removed:remove_value(max)\n\
    \    local min_idx_removed_removed_removed, max_idx_removed_removed_removed =\
    \ min_removed_removed_removed:index_of(min), max_removed_removed_removed:index_of(max)\n\
    \    local min_removed_removed_removed_removed, max_removed_removed_removed_removed\
    \ = min_removed_removed_removed:remove_value(min), max_removed_removed_removed:remove_value(max)\n\
    \    local min_idx_removed_removed_removed_removed, max_idx_removed_removed_removed_removed\
    \ = min_removed_removed_removed_removed:index_of(min), max_removed_removed_removed_removed:index_of(max)\n\
    \    local min_removed_removed_removed_removed_removed, max_", "    local result\
    \ = {}\n    local min_index, max_index = 1, #lst\n    local min_value, max_value\
    \ = lst[min_index], lst[max_index]\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[min_index] < min_value then\n                min_value = lst[min_index]\n\
    \                min_index = min_index + 1\n            else\n               \
    \ min_found = true\n                result[i] = min_value\n                i =\
    \ i + 1\n            end\n        end\n        if not max_found then\n       \
    \     if lst[max_index] > max_value then\n                max_value = lst[max_index]\n\
    \                max_index = max_index - 1\n            else\n               \
    \ max_found = true\n                result[i] = max_value\n                i =\
    \ i + 1\n            end\n        end\n        if min_found and max_found then\n\
    \            min_found, max_found = false, false\n        end\n    end\n    return\
    \ result\nend", "  local min, max = math.min, math.max\n  local min_idx, max_idx\
    \ = 1, 1\n  local result = {}\n  local i = 1\n  while i <= #lst do\n    if i %\
    \ 2 == 1 then\n      min_idx = min(lst)\n      table.insert(result, min_idx)\n\
    \      table.remove(lst, min_idx)\n    else\n      max_idx = max(lst)\n      table.insert(result,\
    \ max_idx)\n      table.remove(lst, max_idx)\n    end\n    i = i + 1\n  end\n\
    \  return result\nend", "    local result = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_index, max_index = 1, #lst\n    local min_found,\
    \ max_found = false, false\n    for i = 1, #lst do\n        if not min_found and\
    \ lst[i] == min then\n            min_index = i\n            min_found = true\n\
    \        end\n        if not max_found and lst[i] == max then\n            max_index\
    \ = i\n            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local min_remaining, max_remaining\
    \ = min_index, max_index\n    local min_list, max_list = {}, {}\n    for i = 1,\
    \ #lst do\n        if i == min_index then\n            table.insert(result, min)\n\
    \        elseif i == max_index then\n            table.insert(result, max)\n \
    \       else\n            if min_remaining < max_remaining then\n            \
    \    table.insert(min_list, lst[i])\n                min_remaining = min_remaining\
    \ + 1\n            else\n                table.insert(max_list, lst[i])\n    \
    \            max_remaining = max_remaining - 1\n            end\n        end\n\
    \    end\n    for i = 1, #min_list do\n        table.insert(result, min_list[i])\n\
    \        table.insert(result, max_list[i])\n    end\n    return result\nend",
  "    local result = {}\n    local min_index, max_index\n    local min, max\n   \
    \ local i = 1\n    while i <= #lst do\n        min_index, max_index = min_max_index(lst)\n\
    \        min, max = lst[min_index], lst[max_index]\n        table.insert(result,\
    \ min)\n        table.insert(result, max)\n        table.remove(lst, min_index)\n\
    \        table.remove(lst, max_index - 1)\n        i = i + 2\n    end\n    return\
    \ result\nend", "  local min, max = math.min, math.max\n  local function strange_sort(lst,\
    \ res)\n    if #lst == 0 then return res end\n    local min_idx, min_val = 1,\
    \ lst[1]\n    local max_idx, max_val = 1, lst[1]\n    for i, v in ipairs(lst)\
    \ do\n      if v < min_val then min_idx, min_val = i, v end\n      if v > max_val\
    \ then max_idx, max_val = i, v end\n    end\n    table.insert(res, min_val)\n\
    \    table.insert(res, max_val)\n    table.remove(lst, min_idx)\n    table.remove(lst,\
    \ max_idx - 1)\n    return strange_sort(lst, res)\n  end\n  return strange_sort(lst,\
    \ {})\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i]\
    \ = min\n      lst[min_idx] = nil\n    else\n      res[i] = max\n      lst[max_idx]\
    \ = nil\n    end\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    min_idx, max_idx = 1, 1\n    for j = 1, #lst do\n      if lst[j] == min then\n\
    \        min_idx = j\n      elseif lst[j] == max then\n        max_idx = j\n \
    \     end\n    end\n    i = i + 1\n  end\n  return res\nend", "  local res = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local i =\
    \ 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res, min)\n\
    \      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = #lst\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min\n            min_idx = min_idx + 1\n        else\n        \
    \    res[i] = max\n            max_idx = max_idx - 1\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx =\
    \ 1, 1\n    local min_found, max_found = false, false\n    for i = 1, #lst do\n\
    \        if lst[i] == min then\n            min_idx = i\n            min_found\
    \ = true\n        end\n        if lst[i] == max then\n            max_idx = i\n\
    \            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local i = 1\n    local j\
    \ = 1\n    local k = 1\n    while i <= #lst do\n        if j == min_idx then\n\
    \            res[i] = min\n            i = i + 1\n            j = j + 1\n    \
    \    elseif k == max_idx then\n            res[i] = max\n            i = i + 1\n\
    \            k = k + 1\n        else\n            res[i] = lst[j]\n          \
    \  i = i + 1\n            j = j + 1\n        end\n    end\n    return res\nend",
  "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n    local\
    \ min_removed, max_removed = false, false\n    local i = 1\n    while #lst > 0\
    \ do\n        if not min_removed then\n            res[i] = min\n            lst:remove(min_idx)\n\
    \            min_removed = true\n        elseif not max_removed then\n       \
    \     res[i] = max\n            lst:remove(max_idx)\n            max_removed =\
    \ true\n        else\n            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n       \
    \     min_removed, max_removed = false, false\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "    local result = {}\n    local min_index, max_index\n\
    \    local min_value, max_value\n    local min_value_index, max_value_index\n\
    \    local min_value_index_found, max_value_index_found\n    local i", "    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_flag = true\n  \
    \  local max_flag = true\n    for i = 1, #lst do\n        if min_flag then\n \
    \           res[i] = min\n            min_flag = false\n        elseif max_flag\
    \ then\n            res[i] = max\n            max_flag = false\n        end\n\
    \        if i == min_idx then\n            min_flag = true\n        elseif i ==\
    \ max_idx then\n            max_flag = true\n        end\n    end\n    return\
    \ res\nend", "  local res = {}\n  local len = #lst\n  local min, max = math.min,\
    \ math.max\n  local min_idx, max_idx = 1, 1\n  local min_val, max_val = lst[1],\
    \ lst[1]\n  for i = 1, len do\n    for j = 1, len do\n      if lst[j] < min_val\
    \ then\n        min_val = lst[j]\n        min_idx = j\n      end\n      if lst[j]\
    \ > max_val then\n        max_val = lst[j]\n        max_idx = j\n      end\n \
    \   end\n    if i % 2 == 1 then\n      res[i] = min_val\n      lst[min_idx] =\
    \ max_val + 1\n    else\n      res[i] = max_val\n      lst[max_idx] = min_val\
    \ - 1\n    end\n    min_val, max_val = lst[1], lst[1]\n  end\n  return res\nend",
  "    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_index, max_value_index\n    local min_value_indexes, max_value_indexes\n\
    \    local min_value_indexes_count, max_value_indexes_count\n    local min_value_indexes_index,\
    \ max_value_indexes_index\n    local min_value_indexes_index_value, max_value_indexes_index_value\n\
    \    local min_value_indexes_index_value_index, max_value_indexes_index_value_index\n\
    \    local min_value_indexes_index_value_index_value, max_value_indexes_index_value_index_value\n\
    \    local min_value_indexes_index_value_index_value_index, max_value_indexes_index_value_index_value_index\n\
    \    local min_value_indexes_index_value_index_value_index_value, max_value_indexes_index_value_index_value_index_value\n\
    \    local min_value_indexes_index_value_index_value_index_value_index, max_value_indexes_index_value_index_value_index_value_index\n\
    \    local min_value_indexes_index_value_index_value_index_value_index_value,\
    \ max_value_indexes_index_value_index_value_index_value_index_value\n    local\
    \ min_value_indexes_index_value_index_value_index_value_index_value_index, max_value_indexes_index_value_index_value_index_value_index_value_index\n\
    \    local min_value_indexes_index_value_index_value_index_value_index_value_index_value,\
    \ max_value_indexes_index_value_index_value_index_value_index_value_index_value\n\
    \    local min_value_indexes_index_value_index_value_index_value_index_value_index_value_index,\
    \ max_value_indexes_index_value_index_value_index_value_index_value_index", " \
    \   local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_found, max_found\n    local i, j", "    local result = {}\n   \
    \ local min, max = min_max(lst)\n    local min_index, max_index = min_max_index(lst)\n\
    \    local min_remaining, max_remaining = min_max(lst, min_index, max_index)\n\
    \    local min_remaining_index, max_remaining_index = min_max_index(lst, min_index,\
    \ max_index)\n    local min_remaining_remaining, max_remaining_remaining = min_max(lst,\
    \ min_index, max_index, min_remaining_index, max_remaining_index)\n    local min_remaining_remaining_index,\
    \ max_remaining_remaining_index = min_max_index(lst, min_index, max_index, min_remaining_index,\
    \ max_remaining_index)\n    local min_remaining_remaining_remaining, max_remaining_remaining_remaining\
    \ = min_max(lst, min_index, max_index, min_remaining_index, max_remaining_index,\
    \ min_remaining_remaining_index, max_remaining_remaining_index)\n    local min_remaining_remaining_remaining_index,\
    \ max_remaining_remaining_remaining_index = min_max_index(lst, min_index, max_index,\
    \ min_remaining_index, max_remaining_index, min_remaining_remaining_index, max_remaining_remaining_index)\n\
    \    local min_remaining_remaining_remaining_remaining, max_remaining_remaining_remaining_remaining\
    \ = min_max(lst, min_index, max_index, min_remaining_index, max_remaining_index,\
    \ min_remaining_remaining_index, max_remaining_remaining_index, min_remaining_remaining_remaining_index,\
    \ max_remaining_remaining_remaining_index)\n    local min_remaining_remaining_remaining_remaining_index,\
    \ max_remaining_remaining_remaining_remaining_index = min_max_index(lst, min_index,",
  "    local res = {}\n    local min_idx, max_idx\n    local min, max\n    local i\
    \ = 1\n    while #lst > 0 do\n        min, min_idx = math.min(unpack(lst))\n \
    \       table.insert(res, min)\n        table.remove(lst, min_idx)\n        if\
    \ #lst > 0 then\n            max, max_idx = math.max(unpack(lst))\n          \
    \  table.insert(res, max)\n            table.remove(lst, max_idx)\n        end\n\
    \    end\n    return res\nend", "  local res = {}\n  local len = #lst\n  local\
    \ i = 1\n  local j = len\n  local k = 1\n  while i <= len do\n    res[k] = lst[i]\n\
    \    k = k + 1\n    if j > i then\n      res[k] = lst[j]\n      k = k + 1\n  \
    \  end\n    i = i + 1\n    j = j - 1\n  end\n  return res\nend", "    local res\
    \ = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local idx = 1\n \
    \   while idx <= #lst do\n        if idx % 2 == 1 then\n            res[idx] =\
    \ lst[min_idx]\n            min_idx = min_idx + 1\n        else\n            res[idx]\
    \ = lst[max_idx]\n            max_idx = max_idx - 1\n        end\n        idx\
    \ = idx + 1\n    end\n    return res\nend", "    local res = {}\n    local min\
    \ = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local min_idx\
    \ = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n        if v ==\
    \ min then\n            min_idx = i\n        elseif v == max then\n          \
    \  max_idx = i\n        end\n    end\n    local min_idx_used = false\n    local\
    \ max_idx_used = false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n \
    \           if not min_idx_used then\n                res[i] = min\n         \
    \       min_idx_used = true\n            else\n                res[i] = max\n\
    \                max_idx_used = true\n            end\n        else\n        \
    \    if not max_idx_used then\n                res[i] = max\n                max_idx_used\
    \ = true\n            else\n                res[i] = min\n                min_idx_used\
    \ = true\n            end\n        end\n    end\n    return res\nend", "    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        local m = i % 2 == 1 and min\
    \ or max\n        local idx = table.index_of(lst, m)\n        table.insert(res,\
    \ m)\n        table.remove(lst, idx)\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend", " \
    \   local res = {}\n    local lst_len = #lst\n    local i = 1\n    local min_idx,\
    \ max_idx\n    while i <= lst_len do\n        min_idx, max_idx = min_max_idx(lst)\n\
    \        res[i] = lst[min_idx]\n        res[i + 1] = lst[max_idx]\n        lst[min_idx]\
    \ = nil\n        lst[max_idx] = nil\n        i = i + 2\n    end\n    return res\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n \
    \   local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local\
    \ min_found = false\n    local max_found = false\n    local i = 1\n    while i\
    \ <= #lst do\n        if not min_found then\n            if lst[i] < min_val then\n\
    \                min_val = lst[i]\n                min_idx = i\n            end\n\
    \            if i == #lst then\n                min_found = true\n           \
    \     res[#res + 1] = min_val\n                table.remove(lst, min_idx)\n  \
    \          end\n        elseif not max_found then\n            if lst[i] > max_val\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                res[#res + 1] = max_val\n                table.remove(lst, max_idx)\n\
    \            end\n        else\n            min_found = false\n            max_found\
    \ = false\n            min_idx = 1\n            max_idx = #lst\n            min_val\
    \ = lst[min_idx]\n            max_val = lst[max_idx]\n            i = 1\n    \
    \    end\n        i = i + 1\n    end\n    return res\nend", "    local res = {}\n\
    \    local min_index, max_index\n    local min_value, max_value\n    local min_value_index,\
    \ max_value_index\n    local min_value_index_list, max_value_index_list\n    local\
    \ min_value_index_list_len, max_value_index_list_len\n    local min_value_index_list_len_half,\
    \ max_value_index_list_len_half\n    local min_value_index_list_len_half_ceil,\
    \ max_value_index_list_len_half_ceil\n    local min_value_index_list_len_half_floor,\
    \ max_value_index_list_len_half_floor\n    local min_value_index_list_len_half_ceil_index,\
    \ max_value_index_list_len_half_ceil_index\n    local min_value_index_list_len_half_floor_index,\
    \ max_value_index_list_len_half_floor_index\n    local min_value_index_list_len_half_ceil_value,\
    \ max_value_index_list_len_half_ceil_value\n    local min_value_index_list_len_half_floor_value,\
    \ max_value_index_list_len_half_floor_value\n    local min_value_index_list_len_half_ceil_value_index,\
    \ max_value_index_list_len_half_ceil_value_index\n    local min_value_index_list_len_half_floor_value_index,\
    \ max_value_index_list_len_half_floor_value_index\n    local min_value_index_list_len_half_ceil_value_index_list,\
    \ max_value_index_list_len_half_ceil_value_index_list\n    local min_value_index_list_len_half_floor_value_index_list,\
    \ max_value_index_list_len_half_floor_value_index_list\n    local min_value_index_list_len_half_ceil_value_index_list_len,\
    \ max_value_index_list_len_half_ceil", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx =\
    \ lst:index(min), lst:index(max)\n    local min_removed, max_removed = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_removed then\n\
    \            res[i] = min\n            min_removed = true\n            i = i +\
    \ 1\n        end\n        if not max_removed then\n            res[i] = max\n\
    \            max_removed = true\n            i = i + 1\n        end\n        min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n        min_idx, max_idx\
    \ = lst:index(min), lst:index(max)\n        if min_idx ~= min_idx_old then\n \
    \           lst[min_idx] = nil\n            min_removed = false\n        end\n\
    \        if max_idx ~= max_idx_old then\n            lst[max_idx] = nil\n    \
    \        max_removed = false\n        end\n        min_idx_old, max_idx_old =\
    \ min_idx, max_idx\n    end\n    return res\nend", "  local function min_max(lst)\n\
    \    local min, max = lst[1], lst[1]\n    for _, v in ipairs(lst) do\n      if\
    \ v < min then min = v end\n      if v > max then max = v end\n    end\n    return\
    \ min, max\n  end\n  local function remove(lst, val)\n    for i, v in ipairs(lst)\
    \ do\n      if v == val then\n        table.remove(lst, i)\n        return\n \
    \     end\n    end\n  end\n  local function strange_sort(lst)\n    local res =\
    \ {}\n    while #lst > 0 do\n      local min, max = min_max(lst)\n      table.insert(res,\
    \ min)\n      remove(lst, min)\n      if #lst > 0 then\n        table.insert(res,\
    \ max)\n        remove(lst, max)\n      end\n    end\n    return res\n  end\n\
    \  return strange_sort(lst)\nend", "    local result = {}\n    local min_index\
    \ = 1\n    local max_index = 1\n    local min_value = lst[1]\n    local max_value\
    \ = lst[1]\n    for i = 1, #lst do\n        if lst[i] < min_value then\n     \
    \       min_value = lst[i]\n            min_index = i\n        end\n        if\
    \ lst[i] > max_value then\n            max_value = lst[i]\n            max_index\
    \ = i\n        end\n    end\n    local i = 1\n    local j = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            result[i] = min_value\n   \
    \         table.remove(lst, min_index)\n            min_value = lst[1]\n     \
    \       min_index = 1\n            for j = 1, #lst do\n                if lst[j]\
    \ < min_value then\n                    min_value = lst[j]\n                 \
    \   min_index = j\n                end\n            end\n        else\n      \
    \      result[i] = max_value\n            table.remove(lst, max_index)\n     \
    \       max_value = lst[1]\n            max_index = 1\n            for j = 1,\
    \ #lst do\n                if lst[j] > max_value then\n                    max_value\
    \ = lst[j]\n                    max_index = j\n                end\n         \
    \   end\n        end\n        i = i + 1\n    end\n    return result\nend", " \
    \   local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend", " \
    \   local res = {}\n    local sorted = table.sort(lst)\n    local i = 1\n    local\
    \ j = #lst\n    while i <= #lst do\n        res[i] = sorted[i]\n        res[j]\
    \ = sorted[j]\n        i = i + 1\n        j = j - 1\n    end\n    return res\n\
    end", "  local min, max = math.min, math.max\n  local min_idx, max_idx = 1, #lst\n\
    \  local res = {}\n  local i = 1\n  while i <= #lst do\n    local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n    table.insert(res, mn)\n    table.remove(lst, min_idx)\n\
    \    table.insert(res, mx)\n    table.remove(lst, max_idx)\n    i = i + 2\n  end\n\
    \  return res\nend", "  local result = {}\n  local min_index, max_index\n  local\
    \ min_value, max_value\n  local min_value_index, max_value_index\n  local min_value_index_set,\
    \ max_value_index_set = {}, {}\n  local min_value_set, max_value_set = {}, {}\n\
    \  local min_value_set_index, max_value_set_index = {}, {}\n  local min_value_set_index_set,\
    \ max_value_set_index_set = {}, {}\n  local min_value_set_index_set_index, max_value_set_index_set_index\
    \ = {}, {}\n  local min_value_set_index_set_index_set, max_value_set_index_set_index_set\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index, max_value_set_index_set_index_set_index\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index_set, max_value_set_index_set_index_set_index_set\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index_set_index, max_value_set_index_set_index_set_index_set_index\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index_set_index_set, max_value_set_index_set_index_set_index_set_index_set\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index_set_index_set_index,\
    \ max_value_set_index_set_index_set_index_set_index_set_index = {}, {}\n  local\
    \ min_value_set_index_set_index_set_index_set_index_set_index_set, max_value_set_index_set_index_set_index_set_index_set_index_set\
    \ = {}, {}\n  local min_value_set_index_set_index_set_index_set_index_set_index_set_index,\
    \ max", "    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min_val\n        else\n            res[i] =\
    \ max_val\n        end\n        i = i + 1\n    end\n    return res\nend", "  \
    \  local res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = lst:index(min_val), lst:index(max_val)\n    local\
    \ min_found, max_found = false, false\n    local min_cnt, max_cnt = 0, 0\n   \
    \ local min_rem, max_rem = min_idx, max_idx\n    local min_rem_cnt, max_rem_cnt\
    \ = 0, 0\n    local min_rem_found, max_rem_found = false, false\n    local min_rem_val,\
    \ max_rem_val = nil, nil\n    local min_rem_idx, max_rem_idx = nil, nil\n    local\
    \ min_rem_cnt, max_rem_cnt = 0, 0\n    local min_rem_rem, max_rem_rem = nil, nil\n\
    \    local min_rem_rem_cnt, max_rem_rem_cnt = 0, 0\n    local min_rem_rem_found,\
    \ max_rem_rem_found = false, false\n    local min_rem_rem_val, max_rem_rem_val\
    \ = nil, nil\n    local min_rem_rem_idx, max_rem_rem_idx = nil, nil\n    local\
    \ min_rem_rem_rem, max_rem_rem_rem = nil, nil\n    local min_rem_rem_rem_cnt,\
    \ max_rem_rem_rem_cnt = 0, 0\n    local min_rem_rem_rem_found, max_rem_rem_rem_found\
    \ = false, false\n    local min_rem_rem_rem_val, max_rem_rem_rem_val = nil, nil\n\
    \    local min_rem_rem_rem_idx, max_rem_rem_rem_idx = nil, nil\n    local min_rem_rem_rem_rem,\
    \ max_rem_rem_rem_rem = nil, nil\n    local min_rem_rem_rem_rem_cnt, max_rem_rem_rem_rem_cnt\
    \ = 0, 0", "    local function strange_sort(lst, res)\n        if #lst == 0 then\n\
    \            return res\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n\
    \        local max_val, max_idx = math.max(unpack(lst))\n        table.insert(res,\
    \ min_val)\n        table.insert(res, max_val)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx)\n        return strange_sort(lst, res)\n \
    \   end\n    return strange_sort(lst, {})\nend", "  local res = {}\n  local min\
    \ = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local min_idx\
    \ = 1\n  local max_idx = 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    end\n    if lst[i] == max then\n      max_idx = i\n  \
    \  end\n  end\n  local min_flag = true\n  local max_flag = true\n  local min_cnt\
    \ = 0\n  local max_cnt = 0\n  for i = 1, #lst do\n    if min_flag then\n     \
    \ table.insert(res, min)\n      min_cnt = min_cnt + 1\n      min_flag = false\n\
    \    elseif max_flag then\n      table.insert(res, max)\n      max_cnt = max_cnt\
    \ + 1\n      max_flag = false\n    end\n    if min_cnt == min_idx then\n     \
    \ min_flag = true\n    end\n    if max_cnt == max_idx then\n      max_flag = true\n\
    \    end\n  end\n  return res\nend", "    local res = {}\n    local min_val, max_val\n\
    \    local min_idx, max_idx\n    local min_idx_found, max_idx_found\n    local\
    \ i = 1\n    local j = 1\n    local k = 1\n    local n = #lst\n    while i <=\
    \ n do\n        min_val = math.huge\n        max_val = -math.huge\n        min_idx_found\
    \ = false\n        max_idx_found = false\n        for j = 1, n do\n          \
    \  if lst[j] < min_val and not min_idx_found then\n                min_val = lst[j]\n\
    \                min_idx = j\n                min_idx_found = true\n         \
    \   end\n            if lst[j] > max_val and not max_idx_found then\n        \
    \        max_val = lst[j]\n                max_idx = j\n                max_idx_found\
    \ = true\n            end\n        end\n        if i % 2 == 1 then\n         \
    \   res[i] = min_val\n            lst[min_idx] = math.huge\n        else\n   \
    \         res[i] = max_val\n            lst[max_idx] = -math.huge\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 1, 1\n    local min_found, max_found = false, false\n    for i = 1,\
    \ #lst do\n        if lst[i] == min then\n            min_idx = i\n          \
    \  min_found = true\n        end\n        if lst[i] == max then\n            max_idx\
    \ = i\n            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   table.remove(lst, min_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for i = 1, #lst do\n                if\
    \ lst[i] == min then\n                    min_idx = i\n                    min_found\
    \ = true\n                end\n                if lst[i] == max then\n       \
    \             max_idx = i\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n            end\n        else\n            res[i]\
    \ = max\n            table.remove(lst, max_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for i = 1, #lst do\n                if\
    \ lst[i] == min then\n                    min_idx = i\n                    min_found\
    \ = true\n                end\n                if lst[i] == max then\n       \
    \             max_idx = i\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n            end\n        end", "  local result\
    \ = {}\n  local min_val, max_val\n  local min_idx, max_idx\n  local min_found,\
    \ max_found\n  local i, j\n  local n = #lst\n  for i = 1, n do\n    min_found\
    \ = false\n    max_found = false\n    for j = 1, n do\n      if not min_found\
    \ and not lst[j] then\n        min_val = lst[j]\n        min_idx = j\n       \
    \ min_found = true\n      elseif not max_found and not lst[j] then\n        max_val\
    \ = lst[j]\n        max_idx = j\n        max_found = true\n      elseif not min_found\
    \ and lst[j] < min_val then\n        min_val = lst[j]\n        min_idx = j\n \
    \       min_found = true\n      elseif not max_found and lst[j] > max_val then\n\
    \        max_val = lst[j]\n        max_idx = j\n        max_found = true\n   \
    \   end\n    end\n    if i % 2 == 1 then\n      result[i] = min_val\n      lst[min_idx]\
    \ = nil\n    else\n      result[i] = max_val\n      lst[max_idx] = nil\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  local min_val, max_val\n\
    \  local min_idx, max_idx\n  local min_found, max_found\n  local i, j\n  local\
    \ n = #lst\n  for i = 1, n do\n    min_found = false\n    max_found = false\n\
    \    for j = 1, n do\n      if not min_found and not max_found then\n        if\
    \ lst[j] then\n          min_val = lst[j]\n          min_idx = j\n          min_found\
    \ = true\n        end\n      elseif not max_found then\n        if lst[j] and\
    \ lst[j] > min_val then\n          max_val = lst[j]\n          max_idx = j\n \
    \         max_found = true\n        end\n      else\n        if lst[j] and lst[j]\
    \ < min_val then\n          min_val = lst[j]\n          min_idx = j\n        elseif\
    \ lst[j] and lst[j] > max_val then\n          max_val = lst[j]\n          max_idx\
    \ = j\n        end\n      end\n    end\n    if min_found then\n      result[#result\
    \ + 1] = min_val\n      lst[min_idx] = nil\n    end\n    if max_found then\n \
    \     result[#result + 1] = max_val\n      lst[max_idx] = nil\n    end\n  end\n\
    \  return result\nend", "    local res = {}\n    local min_val, max_val = min_max(lst)\n\
    \    local min_idx, max_idx = min_max_idx(lst)\n    local min_removed = remove_at(lst,\
    \ min_idx)\n    local max_removed = remove_at(min_removed, max_idx)\n    local\
    \ min_removed_2 = remove_at(max_removed, min_idx)\n    local max_removed_2 = remove_at(min_removed_2,\
    \ max_idx)\n    table.insert(res, min_val)\n    table.insert(res, max_val)\n \
    \   if #min_removed_2 > 0 then\n        local min_val_2, max_val_2 = min_max(min_removed_2)\n\
    \        table.insert(res, min_val_2)\n        table.insert(res, max_val_2)\n\
    \    end\n    if #max_removed_2 > 0 then\n        local min_val_3, max_val_3 =\
    \ min_max(max_removed_2)\n        table.insert(res, min_val_3)\n        table.insert(res,\
    \ max_val_3)\n    end\n    return res\nend", "    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = table.index_of(lst, min_val),\
    \ table.index_of(lst, max_val)\n    local result = {}\n    local i = 1\n    while\
    \ i <= #lst do\n        if i % 2 == 1 then\n            table.insert(result, min_val)\n\
    \            table.remove(lst, min_idx)\n            min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = table.index_of(lst, min_val),\
    \ table.index_of(lst, max_val)\n        else\n            table.insert(result,\
    \ max_val)\n            table.remove(lst, max_idx)\n            min_val, max_val\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n            min_idx, max_idx\
    \ = table.index_of(lst, min_val), table.index_of(lst, max_val)\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local res = {}\n  \
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = lst:index_of(min), lst:index_of(max)\n    local min_removed, max_removed\
    \ = false, false\n    local i = 1\n    while i <= #lst do\n        if not min_removed\
    \ and min_idx ~= max_idx then\n            res[i] = min\n            min_removed\
    \ = true\n            i = i + 1\n        end\n        if not max_removed then\n\
    \            res[i] = max\n            max_removed = true\n            i = i +\
    \ 1\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n        min_removed,\
    \ max_removed = false, false\n    end\n    return res\nend", "  local sorted =\
    \ {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = 1\n  for i, v in ipairs(lst) do\n\
    \    if v == min then\n      min_index = i\n    elseif v == max then\n      max_index\
    \ = i\n    end\n  end\n  local min_found = false\n  local max_found = false\n\
    \  for i, v in ipairs(lst) do\n    if i == min_index then\n      min_found = true\n\
    \    elseif i == max_index then\n      max_found = true\n    end\n    if min_found\
    \ and not max_found then\n      table.insert(sorted, max)\n    elseif max_found\
    \ and not min_found then\n      table.insert(sorted, min)\n    else\n      table.insert(sorted,\
    \ v)\n    end\n  end\n  return sorted\nend", "  local result = {}\n  local min_index,\
    \ max_index\n  local min_value, max_value\n  local min_value_index, max_value_index\n\
    \  local min_value_indexes, max_value_indexes\n  local i, j\n  local n = #lst\n\
    \  local m = math.floor(n / 2)\n  local is_even = n % 2 == 0\n  for i = 1, m do\n\
    \    min_value = math.huge\n    max_value = -math.huge\n    min_value_indexes\
    \ = {}\n    max_value_indexes = {}\n    for j = 1, n do\n      if lst[j] < min_value\
    \ then\n        min_value = lst[j]\n        min_value_indexes = {j}\n      elseif\
    \ lst[j] == min_value then\n        min_value_indexes[#min_value_indexes + 1]\
    \ = j\n      end\n      if lst[j] > max_value then\n        max_value = lst[j]\n\
    \        max_value_indexes = {j}\n      elseif lst[j] == max_value then\n    \
    \    max_value_indexes[#max_value_indexes + 1] = j\n      end\n    end\n    min_value_index\
    \ = min_value_indexes[1]\n    max_value_index = max_value_indexes[1]\n    result[#result\
    \ + 1] = min_value\n    result[#result + 1] = max_value\n    lst[min_value_index]\
    \ = math.huge\n    lst[max_value_index] = -math.huge\n  end\n  if is_even then\n\
    \    return result\n  else\n    return result, min_value\n  end\nend", "  local\
    \ res = {}\n  local min_idx = 1\n  local max_idx = #lst\n  local min_val = lst[min_idx]\n\
    \  local max_val = lst[max_idx]\n  local min_found = false\n  local max_found\
    \ = false\n  local min_val_idx = 0\n  local max_val_idx = 0\n  local i = 1\n \
    \ local j = 1\n  local k = 1\n  while i <= #lst do\n    if not min_found then\n\
    \      if lst[j] < min_val then\n        min_val = lst[j]\n        min_val_idx\
    \ = j\n      end\n      j = j + 1\n      if j > #lst then\n        min_found =\
    \ true\n        res[k] = min_val\n        k = k + 1\n        i = i + 1\n     \
    \   j = 1\n      end\n    elseif not max_found then\n      if lst[j] > max_val\
    \ then\n        max_val = lst[j]\n        max_val_idx = j\n      end\n      j\
    \ = j + 1\n      if j > #lst then\n        max_found = true\n        res[k] =\
    \ max_val\n        k = k + 1\n        i = i + 1\n        j = 1\n      end\n  \
    \  else\n      if lst[j] < min_val and j ~= max_val_idx then\n        min_val\
    \ = lst[j]\n        min_val_idx = j\n      end\n      if lst[j] > max_val and\
    \ j ~= min_val_idx then\n        max_val = lst[j]\n        max_val_idx = j\n \
    \     end\n      j = j + 1\n      if j > #lst then\n        res[k] = min_val\n\
    \        k = k + 1\n        res[k] = max_val\n        k = k + 1\n        i = i\
    \ + 2\n        j = 1\n        min_found = false\n        max_found = false\n \
    \     end\n    end\n  end\n  return res\nend", "  local res = {}\n  local min\
    \ = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local min_idx\
    \ = table.index_of(lst, min)\n  local max_idx = table.index_of(lst, max)\n  local\
    \ min_removed = table.remove_at(lst, min_idx)\n  local max_removed = table.remove_at(lst,\
    \ max_idx)\n  table.insert(res, min)\n  table.insert(res, max)\n  while #lst >\
    \ 0 do\n    min = math.min(unpack(lst))\n    max = math.max(unpack(lst))\n   \
    \ min_idx = table.index_of(lst, min)\n    max_idx = table.index_of(lst, max)\n\
    \    min_removed = table.remove_at(lst, min_idx)\n    max_removed = table.remove_at(lst,\
    \ max_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = 1\n\
    \    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local idx = 1\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            res[idx] = min\n            min_idx = min_idx + 1\n        else\n\
    \            res[idx] = max\n            max_idx = max_idx + 1\n        end\n\
    \        idx = idx + 1\n    end\n    return res\nend", "    local result = {}\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_removed = table.remove_at(lst, min_idx)\n    local max_removed\
    \ = table.remove_at(lst, max_idx)\n    table.insert(result, min)\n    table.insert(result,\
    \ max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n        max\
    \ = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n      \
    \  max_idx = table.index_of(lst, max)\n        min_removed = table.remove_at(lst,\
    \ min_idx)\n        max_removed = table.remove_at(lst, max_idx)\n        table.insert(result,\
    \ min)\n        table.insert(result, max)\n    end\n    return result\nend", " \
    \   local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local is_min = true\n  \
    \  for i = 1, #lst do\n        if is_min then\n            res[i] = min\n    \
    \        min_idx = min_idx + 1\n            min = lst[min_idx]\n            is_min\
    \ = false\n        else\n            res[i] = max\n            max_idx = max_idx\
    \ - 1\n            max = lst[max_idx]\n            is_min = true\n        end\n\
    \    end\n    return res\nend", "  local result = {}\n  local min_index, max_index\
    \ = 1, #lst\n  local min_value, max_value = lst[min_index], lst[max_index]\n \
    \ local min_found, max_found = false, false\n  local min_found_index, max_found_index\
    \ = 0, 0\n  local i = 1\n  while i <= #lst do\n    if not min_found then\n   \
    \   min_found_index, min_found = find_value(lst, min_value)\n    end\n    if not\
    \ max_found then\n      max_found_index, max_found = find_value(lst, max_value)\n\
    \    end\n    if min_found and max_found then\n      result[i] = min_value\n \
    \     result[i + 1] = max_value\n      min_value = lst[min_found_index + 1]\n\
    \      max_value = lst[max_found_index - 1]\n      min_found = false\n      max_found\
    \ = false\n      i = i + 2\n    elseif min_found then\n      result[i] = min_value\n\
    \      min_value = lst[min_found_index + 1]\n      min_found = false\n      i\
    \ = i + 1\n    elseif max_found then\n      result[i] = max_value\n      max_value\
    \ = lst[max_found_index - 1]\n      max_found = false\n      i = i + 1\n    end\n\
    \  end\n  return result\nend", "    local result = {}\n    local min_index, max_index\n\
    \    local min, max\n    local min_removed, max_removed\n    local i", "  local\
    \ res = {}\n  local min, max = min_max(lst)\n  local min_idx, max_idx = min.idx,\
    \ max.idx\n  local min_val, max_val = min.val, max.val\n  local i = 1\n  while\
    \ i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min_val\n      min_idx\
    \ = next_idx(lst, min_idx)\n      min_val = lst[min_idx]\n    else\n      res[i]\
    \ = max_val\n      max_idx = next_idx(lst, max_idx)\n      max_val = lst[max_idx]\n\
    \    end\n    i = i + 1\n  end\n  return res\nend", "    local result = {}\n \
    \   local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min_value and not min_found\
    \ then\n            min_index = i\n            min_found = true\n        elseif\
    \ lst[i] == max_value and not max_found then\n            max_index = i\n    \
    \        max_found = true\n        end\n    end\n    local min_list, max_list\
    \ = {}, {}\n    for i = 1, #lst do\n        if i ~= min_index then\n         \
    \   table.insert(min_list, lst[i])\n        end\n        if i ~= max_index then\n\
    \            table.insert(max_list, lst[i])\n        end\n    end\n    local min_value,\
    \ max_value = math.min(unpack(min_list)), math.max(unpack(max_list))\n    local\
    \ min_index, max_index = 1, #lst\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min_value and not min_found then\n\
    \            min_index = i\n            min_found = true\n        elseif lst[i]\
    \ == max_value and not max_found then\n            max_index = i\n           \
    \ max_found = true\n        end\n    end\n    local min_list, max_list = {}, {}\n\
    \    for i = 1, #lst do\n        if i ~= min_index then\n            table.insert(min_list,\
    \ lst[i])\n        end\n        if i ~= max_index then\n            table.insert(max_list,\
    \ lst[i])\n        end\n    end\n    local min_value, max_value = math.min(unpack(min_list)),\
    \ math.max(unpack(max_list))\n    local min_index, max_index = 1, #lst\n", " \
    \   local result = {}\n    local min_index = 1\n    local max_index = #lst\n \
    \   local min = lst[min_index]\n    local max = lst[max_index]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            min_found = true\n            result[i]\
    \ = min\n            min_index = min_index + 1\n            min = lst[min_index]\n\
    \        elseif not max_found then\n            max_found = true\n           \
    \ result[i] = max\n            max_index = max_index - 1\n            max = lst[max_index]\n\
    \        end\n        if min_found and max_found then\n            min_found =\
    \ false\n            max_found = false\n            i = i + 1\n        end\n \
    \   end\n    return result\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = #lst\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            min_index = min_index + 1\n        else\n            res[i]\
    \ = max\n            max_index = max_index - 1\n        end\n    end\n    return\
    \ res\nend", "    local function strange_sort(lst, res)\n        if #lst == 0\
    \ then\n            return res\n        end\n        local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n        local min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst)\
    \ do\n            if v == min then\n                min_idx = i\n            elseif\
    \ v == max then\n                max_idx = i\n            end\n        end\n \
    \       table.remove(lst, min_idx)\n        table.remove(lst, max_idx)\n     \
    \   return strange_sort(lst, res)\n    end\n    return strange_sort(lst, {})\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
