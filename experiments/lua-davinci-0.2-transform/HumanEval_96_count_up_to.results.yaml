language: lua
name: HumanEval_96_count_up_to
results:
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        local is_prime = true\n   \
    \     for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(result, i)\n        end\n        i = i + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local result = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rtnt5p2.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp6rtnt5p2.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp6rtnt5p2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local t = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimngb7y7.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpimngb7y7.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpimngb7y7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n <= 1 then\n        return primes\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwbxzxyjh.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpwbxzxyjh.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwbxzxyjh.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local primes = {}\n    for i = 2, n do\n    \
    \    local is_prime = true\n        for j = 2, i - 1 do\n            if i % j\
    \ == 0 then\n                is_prime = false\n                break\n       \
    \     end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4pw45ho.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpa4pw45ho.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqd3jimu.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpgqd3jimu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- TODO: implement\
    \ this function\n    local result = {}\n    for i = 2, n do\n        if is_prime(i)\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbwlp64o.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpsbwlp64o.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpsbwlp64o.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n < 2 then\n        return primes\n    end\n    for i = 2, n do\n\
    \        local is_prime = true\n        for j = 2, i - 1 do\n            if i\
    \ % j == 0 then\n                is_prime = false\n                break\n   \
    \         end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewbmkw1i.lua:39:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpewbmkw1i.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqd3jimu.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpgqd3jimu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local is_prime = true\n    for i = 2, n do\n        for j = 2, i - 1\
    \ do\n            if i % j == 0 then\n                is_prime = false\n     \
    \           break\n            end\n        end\n        if is_prime then\n  \
    \          table.insert(primes, i)\n        end\n        is_prime = true\n   \
    \ end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda3vqz05.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpda3vqz05.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local count = 0\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            count = count + 1\n            result[count] = i\n        end\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjl8hjx4g.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpjl8hjx4g.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpjl8hjx4g.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhb69b8i.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpzhb69b8i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6mul0ue.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpa6mul0ue.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpa6mul0ue.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqd3jimu.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpgqd3jimu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local result = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rtnt5p2.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp6rtnt5p2.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp6rtnt5p2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local result = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rtnt5p2.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp6rtnt5p2.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp6rtnt5p2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n < 2 then\n        return primes\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40ulo8mx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp40ulo8mx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp40ulo8mx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 1\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg6jhmyq.lua:20:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpjg6jhmyq.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpjg6jhmyq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(primes, i)\n        end\n        i = i + 1\n    end\n   \
    \ return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz53hdicq.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpz53hdicq.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpz53hdicq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhb69b8i.lua:23:\
    \ expected: {2, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpzhb69b8i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local is_prime = true\n    for i = 2, n do\n        for j = 2, i do\n\
    \            if i % j == 0 and i ~= j then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n        is_prime = true\n \
    \   end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphugccw9i.lua:37:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmphugccw9i.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    local count = 0\n    for i = 2, n do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            count = count + 1\n            primes[count]\
    \ = i\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32nzmku3.lua:38:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmp32nzmku3.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n     \
    \       table.insert(result, i)\n        end\n        i = i + 1\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01qsyi1n.lua:20:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp01qsyi1n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp01qsyi1n.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    if n < 2 then\n\
    \        return {}\n    end\n    local primes = {}\n    for i = 2, n do\n    \
    \    if is_prime(i) then\n            table.insert(primes, i)\n        end\n \
    \   end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvni9ukxw.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvni9ukxw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvni9ukxw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6mul0ue.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpa6mul0ue.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpa6mul0ue.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local result = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result, i)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rtnt5p2.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp6rtnt5p2.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp6rtnt5p2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6mul0ue.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpa6mul0ue.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpa6mul0ue.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n < 2 then\n        return primes\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40ulo8mx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp40ulo8mx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp40ulo8mx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n  local primes = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes, i)\n \
    \   end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_63pt5e.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpx_63pt5e.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx_63pt5e.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n < 2 then\n        return primes\n    end\n    local i = 2\n   \
    \ while i < n do\n        local is_prime = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime then\n       \
    \     table.insert(primes, i)\n        end\n        i = i + 1\n    end\n    return\
    \ primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iniwwya.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmp1iniwwya.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp1iniwwya.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    for i = 2, n do\n        local is_prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                is_prime = false\n \
    \               break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbal9o2a.lua:36:\
    \ expected: {2, 3}\nactual: {2, 3, 5}\nstack traceback:\n\t/tmp/tmpwbal9o2a.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local primes =\
    \ {}\n    if n < 2 then\n        return primes\n    end\n    for i = 2, n do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_up_to\n    lu.assertEquals(candidate(5), {2, 3})\n   \
    \ lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40ulo8mx.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp40ulo8mx.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp40ulo8mx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659803284
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n--\
    \ {2, 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n\
    -- {2, 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n    local result =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyvjdiq3.lua:19:\
    \ attempt to call global 'is_prime' (a nil value)\nstack traceback:\n\t/tmp/tmpkyvjdiq3.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkyvjdiq3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750467
