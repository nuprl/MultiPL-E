name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands\
  \ between \n-- two consonants from the right side of the word (case sensitive).\n\
  -- Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n-- find any vowel met the above condition. \n-- You may assume that the\
  \ given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
  -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
  -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
  \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
  \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
  \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
  \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
  \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
  \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
  \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            last_vowel = word:sub(i, i)\n            break\n     \
    \   end\n    end\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) then\n            if last_vowel ~= word:sub(i, i) then\n   \
    \             return word:sub(i, i)\n            end\n        end\n    end\n \
    \   return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_distance = 0\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local distance = 0\n    for i = 1, #word do\n        local letter = word:sub(i,\
    \ i)\n        if table.contains(vowels, letter) then\n            vowel_index\
    \ = i\n            for j = i, 1, -1 do\n                local letter = word:sub(j,\
    \ j)\n                if table.contains(consonants, letter) then\n           \
    \         consonant_index = j\n                    break\n                end\n\
    \            end\n            distance = vowel_index - consonant_index\n     \
    \       if closest_distance == 0 or distance < closest_distance then\n       \
    \         closest_distance = distance\n                closest_vowel = letter\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i,\
    \ i)) then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    for i = vowel_index, 1, -1 do\n        if table.contains(consonants, word:sub(i,\
    \ i)) then\n            consonant_index = i\n            break\n        end\n\
    \    end\n    if consonant_index > 0 then\n        closest_vowel = word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local i = #word\n    while i > 0 do\n        if not\
    \ table.contains(vowels, word:sub(i, i)) then\n            i = i - 1\n       \
    \ else\n            return word:sub(i, i)\n        end\n    end\n    return ''\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n \
    \ for i = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.indexof(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end", "    local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local index = #word\n\
    \    local result = ''\n    while index > 1 do\n        local char = word:sub(index,\
    \ index)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u' then\n            if word:sub(index - 1, index - 1) ~= 'a' and\
    \ word:sub(index - 1, index - 1) ~= 'e' and word:sub(index - 1, index - 1) ~=\
    \ 'i' and word:sub(index - 1, index - 1) ~= 'o' and word:sub(index - 1, index\
    \ - 1) ~= 'u' then\n                result = char\n                break\n   \
    \         end\n        end\n        index = index - 1\n    end\n    return result\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n \
    \ for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.indexof(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local word_len = #word\n    local i = word_len\n  \
    \  local found = false\n    local vowel = ''\n    while i > 0 do\n        local\
    \ c = word:sub(i, i)\n        if not found then\n            for _, v in ipairs(vowels)\
    \ do\n                if c == v then\n                    vowel = c\n        \
    \            found = true\n                    break\n                end\n  \
    \          end\n        else\n            for _, v in ipairs(consonants) do\n\
    \                if c == v then\n                    return vowel\n          \
    \      end\n            end\n        end\n        i = i - 1\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n      \
    \  if table.contains(vowels, c) then\n            last_vowel = c\n           \
    \ break\n        end\n    end\n    return last_vowel\nend", "    -- TODO: implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local word_length = string.len(word)\n    local word_table = {}\n \
    \   for i = 1, word_length do\n        word_table[i] = string.sub(word, i, i)\n\
    \    end\n    for i = 1, word_length do\n        for j = 1, #vowels do\n     \
    \       if word_table[i] == vowels[j] then\n                for k = i, word_length\
    \ do\n                    for l = 1, #consonants do\n                        if\
    \ word_table[k] == consonants[l] then\n                            if k - i >\
    \ closest_consonant_index - closest_vowel_index then\n                       \
    \         closest_vowel = word_table[i]\n                                closest_vowel_index\
    \ = i\n                                closest_consonant_index = k\n         \
    \                   end\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    for i = 1, word_length\
    \ do\n        for j = 1, #consonants do\n            if word_table[i] == consonants[j]\
    \ then\n                for k = i, word_length do\n                    for l =\
    \ 1, #vowels do\n                        if word_table[k] == vowels[l] then\n\
    \                            if k - i > closest_consonant_index_2 - closest_vowel_index\
    \ then\n                                closest_vowel = word_table[k]\n      \
    \                          closest_vowel_index = k\n                         \
    \       closest_consonant_index_2 = i\n                            end\n     \
    \                   end\n", "    -- TODO: implement this function\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for\
    \ i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n \
    \   local vowel_index = 0\n    local consonant_index = 0\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if vowel_index == 0 and\
    \ consonant_index == 0 then\n            for _, v in ipairs(vowels) do\n     \
    \           if char == v then\n                    vowel_index = i\n         \
    \       end\n            end\n            for _, v in ipairs(consonants) do\n\
    \                if char == v then\n                    consonant_index = i\n\
    \                end\n            end\n        elseif vowel_index ~= 0 and consonant_index\
    \ == 0 then\n            for _, v in ipairs(consonants) do\n                if\
    \ char == v then\n                    consonant_index = i\n                end\n\
    \            end\n        end\n        if vowel_index ~= 0 and consonant_index\
    \ ~= 0 then\n            result = word:sub(vowel_index, vowel_index)\n       \
    \     break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    local index = 0\n    local\
    \ index_2 = 0\n    local index_3 = 0\n    for i = 1, #word do\n        for j =\
    \ 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n           \
    \     index = i\n                break\n            end\n        end\n       \
    \ for k = 1, #consonants do\n            if word:sub(i, i) == consonants[k] then\n\
    \                index_2 = i\n                break\n            end\n       \
    \ end\n        if index_2 > index and index_2 > closest_consonant_index then\n\
    \            closest_consonant_index = index_2\n        end\n        if index\
    \ > closest_vowel_index then\n            closest_vowel_index = index\n      \
    \      closest_vowel = word:sub(index, index)\n        end\n    end\n    if closest_vowel_index\
    \ > closest_consonant_index then\n        return ''\n    end\n    for i = 1, #word\
    \ do\n        for k = 1, #consonants do\n            if word:sub(i, i) == consonants[k]\
    \ then\n                index_3 = i\n                break\n            end\n\
    \        end\n        if index_3 > closest_vowel_index and index_3 < closest_consonant_index\
    \ then\n            closest_consonant_index_2 = index_3\n        end\n    end\n\
    \    if closest_consonant_index_2 > closest_vowel_index then\n        return ''\n\
    \    end\n    return closest_vow", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    for i = 1, #word do\n        if table.contains(vowels, word:sub(i, i)) then\n\
    \            for j = i, #word do\n                if table.contains(consonants,\
    \ word:sub(j, j)) then\n                    if j - i > closest_consonant_index\
    \ - closest_vowel_index then\n                        closest_vowel = word:sub(i,\
    \ i)\n                        closest_vowel_index = i\n                      \
    \  closest_consonant_index = j\n                    end\n                end\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local word_len = string.len(word)\n    local vowel_index = 0\n   \
    \ local consonant_index = 0\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_vowel_distance = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_distance = 0\n    for i = 1, word_len do\n\
    \        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            vowel_index = i\n            if closest_vowel_index\
    \ == 0 then\n                closest_vowel_index = vowel_index\n             \
    \   closest_vowel = char\n            end\n            if closest_consonant_index\
    \ ~= 0 then\n                if vowel_index - closest_consonant_index < closest_vowel_distance\
    \ then\n                    closest_vowel_distance = vowel_index - closest_consonant_index\n\
    \                    closest_vowel_index = vowel_index\n                    closest_vowel\
    \ = char\n                end\n            end\n        elseif table.contains(consonants,\
    \ char) then\n            consonant_index = i\n            if closest_consonant_index\
    \ == 0 then\n                closest_consonant_index = consonant_index\n     \
    \       end\n            if closest_vowel_index ~= 0 then\n                if\
    \ consonant_index - closest_vowel_index < closest_consonant_distance then\n  \
    \                  closest_consonant_distance = consonant_index - closest_vowel_index\n\
    \                    closest_consonant_index = consonant_index\n             \
    \   end\n            end\n        end\n    end\n    return closest_vowel\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  local vowel_distance\
    \ = 0\n  local word_length = string.len(word)\n  for i = 1, word_length do\n \
    \   local char = string.sub(word, i, i)\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        local distance = word_length - i\n        if vowel_distance\
    \ == 0 or distance < vowel_distance then\n          vowel_distance = distance\n\
    \          vowel_index = i\n        end\n      end\n    end\n  end\n  if vowel_index\
    \ == 0 then\n    return ''\n  else\n    return string.sub(word, vowel_index, vowel_index)\n\
    \  end\nend", "    -- your code here\n    return ''\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    local i = #word\n    while\
    \ i > 0 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n            break\n        end\n        i = i - 1\n    end\n    if closest_vowel_index\
    \ == 0 then\n        return ''\n    end\n    i = closest_vowel_index\n    while\
    \ i > 0 do\n        local char = word:sub(i, i)\n        if table.contains(consonants,\
    \ char) then\n            closest_consonant_index = i\n            break\n   \
    \     end\n        i = i - 1\n    end\n    if closest_consonant_index == 0 then\n\
    \        return ''\n    end\n    i = closest_vowel_index\n    while i <= #word\
    \ do\n        local char = word:sub(i, i)\n        if table.contains(consonants,\
    \ char) then\n            closest_consonant_index_2 = i\n            break\n \
    \       end\n        i = i + 1\n    end\n    if closest_consonant_index_2 == 0\
    \ then\n        return ''\n    end\n    if closest_consonant_index_2 - closest_vowel_index\
    \ < closest_vowel_index - closest_consonant_index then\n        return ''\n  \
    \  end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local result = ''\n    local prev_is_consonant = false\n    for i\
    \ = #word, 1, -1 do\n        local is_consonant = true\n        for _, v in ipairs(vowels)\
    \ do\n            if word:sub(i, i) == v then\n                is_consonant =\
    \ false\n                if prev_is_consonant then\n                    result\
    \ = word:sub(i, i)\n                    break\n                end\n         \
    \   end\n        end\n        prev_is_consonant = is_consonant\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len\
    \ = #word\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n \
    \   for i = word_len, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            closest_vowel = char\n      \
    \      closest_vowel_index = i\n            break\n        end\n    end\n    if\
    \ closest_vowel_index == 0 then\n        return ''\n    end\n    for i = closest_vowel_index\
    \ - 1, 1, -1 do\n        local char = word:sub(i, i)\n        if not table.contains(vowels,\
    \ char) then\n            return closest_vowel\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result =\
    \ ''\n    local last_consonant = ''\n    local last_vowel = ''\n    for i = #word,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if last_consonant ~=\
    \ '' and last_vowel ~= '' then\n            result = last_vowel\n            break\n\
    \        end\n        if char:match('[aeiou]') then\n            last_vowel =\
    \ char\n        else\n            last_consonant = char\n        end\n    end\n\
    \    return result\nend", "  -- TODO: implement this function\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local i =\
    \ #word\n    while i > 0 do\n        if table.indexof(vowels, word:sub(i, i))\
    \ ~= nil then\n            vowel_index = i\n            break\n        end\n \
    \       i = i - 1\n    end\n    if vowel_index == 0 then\n        return ''\n\
    \    end\n    local j = vowel_index - 1\n    while j > 0 do\n        if table.indexof(vowels,\
    \ word:sub(j, j)) == nil then\n            return word:sub(vowel_index, vowel_index)\n\
    \        end\n        j = j - 1\n    end\n    return ''\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = 1, #word do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            for j = i, 1, -1 do\n       \
    \         local char2 = word:sub(j, j)\n                if table.contains(consonants,\
    \ char2) then\n                    if i - j > closest_vowel_index - closest_consonant_index\
    \ then\n                        closest_vowel = char\n                       \
    \ closest_vowel_index = i\n                        closest_consonant_index = j\n\
    \                    end\n                    break\n                end\n   \
    \         end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            closest_vowel = word:sub(i, i)\n         \
    \   closest_vowel_index = i\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 0 then\n        return ''\n    end\n    for i = closest_vowel_index - 1,\
    \ 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n     \
    \       return closest_vowel\n        end\n    end\n    return ''\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local min_distance\
    \ = math.huge\n  for i = 1, #word do\n    local char = word:sub(i, i)\n    if\
    \ char:find('[aeiou]') then\n      local distance = #word - i\n      if distance\
    \ < min_distance then\n        min_distance = distance\n        result = char\n\
    \      end\n    end\n  end\n  return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local found = false\n    local result = ''\n    for i =\
    \ #word, 1, -1 do\n        if not found then\n            for _, v in ipairs(vowels)\
    \ do\n                if word:sub(i, i) == v then\n                    result\
    \ = v\n                    found = true\n                    break\n         \
    \       end\n            end\n        else\n            for _, v in ipairs(vowels)\
    \ do\n                if word:sub(i, i) == v then\n                    return\
    \ result\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index\
    \ = 0\n    local vowel_distance = 0\n    local distance = 0\n    local vowel =\
    \ ''\n    for i = #word, 1, -1 do\n        if word:sub(i, i) == 'a' or word:sub(i,\
    \ i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i)\
    \ == 'u' then\n            vowel_index = i\n            vowel = word:sub(i, i)\n\
    \            break\n        end\n    end\n    for i = vowel_index, 1, -1 do\n\
    \        if word:sub(i, i) ~= 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i)\
    \ ~= 'i' and word:sub(i, i) ~= 'o' and word:sub(i, i) ~= 'u' then\n          \
    \  distance = distance + 1\n        else\n            break\n        end\n   \
    \ end\n    if vowel_index == 0 then\n        return ''\n    else\n        return\
    \ vowel\n    end\nend", "    -- your code here\nend", "    -- TODO: implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last_consonant = nil\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if not table.contains(vowels, c) then\n            last_consonant\
    \ = i\n        elseif last_consonant then\n            return c\n        end\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    for i =\
    \ #word, 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n\
    \            for j = i - 1, 1, -1 do\n                if table.contains(vowels,\
    \ word:sub(j, j)) then\n                    if j > closest_vowel_index then\n\
    \                        closest_vowel = word:sub(j, j)\n                    \
    \    closest_vowel_index = j\n                    end\n                    break\n\
    \                end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n\
    \    local vowel_distance = 0\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) ~= nil then\n            vowel_index = i\n            break\n\
    \        end\n    end\n    for i = vowel_index, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) == nil then\n            vowel_distance = vowel_index - i\n\
    \            break\n        end\n    end\n    if vowel_distance == 0 then\n  \
    \      return ''\n    else\n        return word:sub(vowel_index, vowel_index)\n\
    \    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_vowel_distance =\
    \ 0\n    for i = 1, #word do\n        local char = word:sub(i, i)\n        if\
    \ table.contains(vowels, char) then\n            local distance = #word - i\n\
    \            if distance > closest_vowel_distance then\n                closest_vowel\
    \ = char\n                closest_vowel_index = i\n                closest_vowel_distance\
    \ = distance\n            end\n        end\n    end\n    if closest_vowel_index\
    \ == 1 or closest_vowel_index == #word then\n        return ''\n    end\n    local\
    \ char_before = word:sub(closest_vowel_index - 1, closest_vowel_index - 1)\n \
    \   local char_after = word:sub(closest_vowel_index + 1, closest_vowel_index +\
    \ 1)\n    if not table.contains(vowels, char_before) and not table.contains(vowels,\
    \ char_after) then\n        return closest_vowel\n    end\n    return ''\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ min_distance = math.huge\n    for i = 1, #word do\n        local char = word:sub(i,\
    \ i)\n        if not is_vowel(char) then\n            for j = i + 1, #word do\n\
    \                local char2 = word:sub(j, j)\n                if is_vowel(char2)\
    \ then\n                    local distance = j - i\n                    if distance\
    \ < min_distance then\n                        min_distance = distance\n     \
    \                   result = char2\n                    end\n                end\n\
    \            end\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = -1\n    local closest_vowel_distance = -1\n    for i = 1, #word do\n     \
    \   local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            local distance = #word - i\n            if closest_vowel_distance\
    \ == -1 or distance < closest_vowel_distance then\n                closest_vowel\
    \ = char\n                closest_vowel_index = i\n                closest_vowel_distance\
    \ = distance\n            end\n        end\n    end\n    if closest_vowel_index\
    \ == 1 or closest_vowel_index == #word then\n        return ''\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ result = ''\n    local index = #word\n    while index > 0 do\n        local\
    \ char = word:sub(index, index)\n        if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n            result = char\n     \
    \       break\n        end\n        index = index - 1\n    end\n    return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ table.indexof(vowels, char) then\n            last_vowel = char\n          \
    \  break\n        end\n    end\n    return last_vowel\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for i = #word, 1,\
    \ -1 do\n        if vowels[word:sub(i, i)] then\n            last_vowel = word:sub(i,\
    \ i)\n            break\n        end\n    end\n    return last_vowel\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    for i = #word, 1, -1\
    \ do\n        if table.contains(vowels, word:sub(i, i)) then\n            vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = vowel_index, 1, -1\
    \ do\n        if not table.contains(vowels, word:sub(i, i)) then\n           \
    \ consonant_index = i\n            break\n        end\n    end\n    if vowel_index\
    \ > consonant_index then\n        closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local closest_vowel = ''\n    for i = #word, 1, -1 do\n     \
    \   if table.contains(vowels, word:sub(i, i)) then\n            closest_vowel\
    \ = word:sub(i, i)\n            break\n        end\n    end\n    return closest_vowel\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal result = ''\n\tlocal\
    \ last_consonant = ''\n\tlocal first_consonant = ''\n\tfor i = #word, 1, -1 do\n\
    \t\tlocal letter = word:sub(i, i)\n\t\tif not table.contains(vowels, letter) then\n\
    \t\t\tlast_consonant = letter\n\t\telse\n\t\t\tif first_consonant ~= '' then\n\
    \t\t\t\tresult = letter\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif last_consonant\
    \ ~= '' and first_consonant == '' then\n\t\t\tfirst_consonant = letter\n\t\tend\n\
    \tend\n\treturn result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    for i = #word, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            for j = i - 1, 1, -1 do\n                if\
    \ table.contains(vowels, word:sub(j, j)) then\n                    result = word:sub(j,\
    \ j)\n                    break\n                end\n            end\n      \
    \      break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local last_consonant\
    \ = ''\n    for i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n \
    \       if table.contains(vowels, letter) then\n            last_vowel = letter\n\
    \        else\n            if last_vowel ~= '' then\n                return last_vowel\n\
    \            end\n            last_consonant = letter\n        end\n    end\n\
    \    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 then\n        return ''\n    end\n    local prev_char = word:sub(closest_vowel_index\
    \ - 1, closest_vowel_index - 1)\n    local next_char = word:sub(closest_vowel_index\
    \ + 1, closest_vowel_index + 1)\n    if not table.contains(vowels, prev_char)\
    \ and not table.contains(vowels, next_char) then\n        return closest_vowel\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local index = #word\n    while index > 0 do\n    \
    \    local char = word:sub(index, index)\n        if char == 'a' or char == 'e'\
    \ or char == 'i' or char == 'o' or char == 'u' then\n            result = char\n\
    \            break\n        end\n        index = index - 1\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_distance = 0\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if not table.contains(vowels, char) then\n  \
    \          for j = i - 1, 1, -1 do\n                local prev_char = word:sub(j,\
    \ j)\n                if table.contains(vowels, prev_char) then\n            \
    \        local distance = i - j\n                    if closest_distance == 0\
    \ or distance < closest_distance then\n                        closest_distance\
    \ = distance\n                        closest_vowel = prev_char\n            \
    \        end\n                end\n            end\n        end\n    end\n   \
    \ return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowel_index = 0\n    local vowel_distance = 0\n    local word_length\
    \ = #word\n    for i = 1, word_length do\n        local char = word:sub(i, i)\n\
    \        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n            vowel_index = i\n            vowel_distance = word_length\
    \ - vowel_index\n            break\n        end\n    end\n    for i = word_length,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if char == 'a' or char\
    \ == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            local\
    \ distance = word_length - i\n            if distance < vowel_distance then\n\
    \                vowel_index = i\n                vowel_distance = distance\n\
    \            end\n        end\n    end\n    if vowel_index == 0 then\n       \
    \ return ''\n    else\n        return word:sub(vowel_index, vowel_index)\n   \
    \ end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result =\
    \ ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            result = word:sub(i, i)\n            break\n        end\n\
    \    end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local vowels_set = {}\n    for _, v in ipairs(vowels) do\n        vowels_set[v]\
    \ = true\n    end\n    local prev_is_vowel = false\n    for i = #word, 1, -1 do\n\
    \        local c = word:sub(i, i)\n        if vowels_set[c] then\n           \
    \ if not prev_is_vowel then\n                return c\n            end\n     \
    \   else\n            prev_is_vowel = false\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local distance = 0\n    for i = #word, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            for j = i - 1, 1, -1 do\n                if\
    \ table.contains(vowels, word:sub(j, j)) then\n                    if i - j <\
    \ distance or distance == 0 then\n                        distance = i - j\n \
    \                       closest_vowel = word:sub(j, j)\n                    end\n\
    \                end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    -- write your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local len = string.len(word)\n    for i = len, 1,\
    \ -1 do\n        if i == len then\n            if word[i] == 'a' or word[i] ==\
    \ 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n           \
    \     result = word[i]\n            end\n        else\n            if word[i]\
    \ == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u'\
    \ then\n                if word[i+1] ~= 'a' and word[i+1] ~= 'e' and word[i+1]\
    \ ~= 'i' and word[i+1] ~= 'o' and word[i+1] ~= 'u' then\n                    result\
    \ = word[i]\n                    break\n                end\n            end\n\
    \        end\n    end\n    return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel = ''\n\
    \    local closest_distance = 0\n    for i = 1, #word do\n        local char =\
    \ word:sub(i, i)\n        if table.contains(vowels, char) then\n            vowel_index\
    \ = i\n        elseif table.contains(consonants, char) then\n            consonant_index\
    \ = i\n        end\n        if vowel_index > 0 and consonant_index > 0 then\n\
    \            local distance = consonant_index - vowel_index\n            if closest_distance\
    \ == 0 or distance < closest_distance then\n                closest_distance =\
    \ distance\n                closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = ''\n  local closest_vowel\
    \ = ''\n  for i = #word, 1, -1 do\n    local letter = word:sub(i, i)\n    if not\
    \ table.contains(vowels, letter) then\n      last_consonant = letter\n    elseif\
    \ last_consonant ~= '' then\n      closest_vowel = letter\n      break\n    end\n\
    \  end\n  return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_distance = 0\n    local distance = 0\n    for i = 1,\
    \ #word do\n        local letter = word:sub(i, i)\n        if table.contains(vowels,\
    \ letter) then\n            for j = i, #word do\n                local letter2\
    \ = word:sub(j, j)\n                if table.contains(consonants, letter2) then\n\
    \                    distance = j - i\n                    if distance > closest_distance\
    \ then\n                        closest_distance = distance\n                \
    \        closest_vowel = letter\n                    end\n                end\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = #word\n    local vowel_pos\
    \ = 0\n    for i = word_len, 1, -1 do\n        if word:sub(i, i) == 'a' or word:sub(i,\
    \ i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i)\
    \ == 'u' then\n            vowel_pos = i\n            break\n        end\n   \
    \ end\n    if vowel_pos == 0 then\n        return ''\n    end\n    local prev_char\
    \ = word:sub(vowel_pos - 1, vowel_pos - 1)\n    local next_char = word:sub(vowel_pos\
    \ + 1, vowel_pos + 1)\n    if prev_char == 'a' or prev_char == 'e' or prev_char\
    \ == 'i' or prev_char == 'o' or prev_char == 'u' then\n        return ''\n   \
    \ end\n    if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char\
    \ == 'o' or next_char == 'u' then\n        return ''\n    end\n    return word:sub(vowel_pos,\
    \ vowel_pos)\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result\
    \ = ''\n    for i = #word, 1, -1 do\n        if word:sub(i, i) == 'a' or word:sub(i,\
    \ i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i)\
    \ == 'u' then\n            result = word:sub(i, i)\n            break\n      \
    \  end\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local result = ''\n    local last_vowel = ''\n    for i = #word,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if table.index_of(vowels,\
    \ char) then\n            last_vowel = char\n        elseif last_vowel ~= '' then\n\
    \            result = last_vowel\n            break\n        end\n    end\n  \
    \  return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local letter = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ letter) then\n            local vowel_index = i\n            for j = i, word_length\
    \ do\n                local letter_2 = string.sub(word, j, j)\n              \
    \  if table.contains(consonants, letter_2) then\n                    local consonant_index\
    \ = j\n                    for k = j, word_length do\n                       \
    \ local letter_3 = string.sub(word, k, k)\n                        if table.contains(consonants,\
    \ letter_3) then\n                            local consonant_index_2 = k\n  \
    \                          if consonant_index_2 - vowel_index > closest_consonant_index_2\
    \ - closest_vowel_index then\n                                closest_vowel =\
    \ letter\n                                closest_vowel_index = vowel_index\n\
    \                                closest_consonant_index = consonant_index\n \
    \                               closest_consonant_index_2 = consonant_index_2\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local closest_consonant_index_3 = 0\n    for i = 1, #word do\n    \
    \    for j = 1, #vowels do\n            if word[i] == vowels[j] then\n       \
    \         closest_vowel_index = i\n                closest_vowel = word[i]\n \
    \           end\n        end\n        for k = 1, #consonants do\n            if\
    \ word[i] == consonants[k] then\n                closest_consonant_index = i\n\
    \            end\n        end\n        if closest_vowel_index > closest_consonant_index\
    \ then\n            for l = 1, #consonants do\n                if word[i] == consonants[l]\
    \ then\n                    closest_consonant_index_2 = i\n                end\n\
    \            end\n            if closest_vowel_index > closest_consonant_index_2\
    \ then\n                for m = 1, #consonants do\n                    if word[i]\
    \ == consonants[m] then\n                        closest_consonant_index_3 = i\n\
    \                    end\n                end\n                if closest_vowel_index\
    \ > closest_consonant_index_3 then\n                    closest_vowel = ''\n \
    \               end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n\
    \  local closest_vowel_index = 0\n  for i = #word, 1, -1 do\n    for _, v in ipairs(vowels)\
    \ do\n      if word:sub(i, i) == v then\n        closest_vowel = v\n        closest_vowel_index\
    \ = i\n        break\n      end\n    end\n    if closest_vowel_index ~= 0 then\n\
    \      break\n    end\n  end\n  if closest_vowel_index == 0 then\n    return ''\n\
    \  end\n  for i = closest_vowel_index, 1, -1 do\n    for _, v in ipairs(vowels)\
    \ do\n      if word:sub(i, i) == v then\n        return ''\n      end\n    end\n\
    \  end\n  return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local vowel_index = 0\n    local consonant_index = 0\n    local index\
    \ = 0\n    for i = #word, 1, -1 do\n        index = i\n        if (table.contains(vowels,\
    \ word:sub(i, i))) then\n            vowel_index = i\n            break\n    \
    \    end\n    end\n    for i = index, 1, -1 do\n        if (table.contains(consonants,\
    \ word:sub(i, i))) then\n            consonant_index = i\n            break\n\
    \        end\n    end\n    if (vowel_index > consonant_index) then\n        closest_vowel\
    \ = word:sub(vowel_index, vowel_index)\n    end\n    return closest_vowel\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n  \
    \  local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        for j =\
    \ 1, #vowels do\n            if word[i] == vowels[j] then\n                closest_vowel\
    \ = word[i]\n                closest_vowel_index = i\n                break\n\
    \            end\n        end\n        if closest_vowel_index ~= 0 then\n    \
    \        break\n        end\n    end\n    if closest_vowel_index == 0 then\n \
    \       return ''\n    end\n    for i = closest_vowel_index - 1, 1, -1 do\n  \
    \      for j = 1, #vowels do\n            if word[i] == vowels[j] then\n     \
    \           return ''\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "  -- your code here\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    local closest_consonant_index_2 = 0\n    for i = 1, #word do\n        for\
    \ j = 1, #vowels do\n            if word[i] == vowels[j] then\n              \
    \  for k = i, #word do\n                    for l = 1, #consonants do\n      \
    \                  if word[k] == consonants[l] then\n                        \
    \    closest_consonant_index = k\n                            break\n        \
    \                end\n                    end\n                    if closest_consonant_index\
    \ ~= 0 then\n                        break\n                    end\n        \
    \        end\n                for k = i, 1, -1 do\n                    for l =\
    \ 1, #consonants do\n                        if word[k] == consonants[l] then\n\
    \                            closest_consonant_index_2 = k\n                 \
    \           break\n                        end\n                    end\n    \
    \                if closest_consonant_index_2 ~= 0 then\n                    \
    \    break\n                    end\n                end\n                if closest_consonant_index_2\
    \ ~= 0 and closest_consonant_index ~= 0 then\n                    if closest_consonant_index\
    \ - i < i - closest_consonant_index_2 then\n                        closest_vowel\
    \ = word[i]\n                        closest_vowel_index = i\n               \
    \     end\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    for i = 1, #word do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_index = i\n        elseif table.contains(consonants,\
    \ word:sub(i, i)) then\n            consonant_index = i\n        end\n       \
    \ if vowel_index > 0 and consonant_index > 0 then\n            return word:sub(vowel_index,\
    \ vowel_index)\n        end\n    end\n    return ''\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = -1\n    local closest_consonant_index\
    \ = -1\n    local closest_consonant = ''\n    local closest_consonant_index_2\
    \ = -1\n    local closest_consonant_2 = ''\n    local index = 0\n    local index_2\
    \ = 0\n    for i = #word, 1, -1 do\n        for j = 1, #vowels do\n          \
    \  if word:sub(i, i) == vowels[j] then\n                index = i\n          \
    \      break\n            end\n        end\n        if index ~= 0 then\n     \
    \       closest_vowel = word:sub(index, index)\n            closest_vowel_index\
    \ = index\n            break\n        end\n    end\n    for i = closest_vowel_index,\
    \ 1, -1 do\n        for j = 1, #consonants do\n            if word:sub(i, i) ==\
    \ consonants[j] then\n                index = i\n                break\n     \
    \       end\n        end\n        if index ~= 0 then\n            closest_consonant\
    \ = word:sub(index, index)\n            closest_consonant_index = index\n    \
    \        break\n        end\n    end\n    for i = closest_vowel_index, #word do\n\
    \        for j = 1, #consonants do\n            if word:sub(i, i) == consonants[j]\
    \ then\n                index_2 = i\n                break\n            end\n\
    \        end\n        if index_2 ~= 0 then\n            closest_consonant_2 =\
    \ word:sub(index_2, index_2)\n            closest_consonant_index_2 = index_2\n\
    \            break\n        end\n    end\n    if closest_v", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local vowel_index = 0\n    local consonant_index = 0\n    for i = 1, #word\
    \ do\n        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n\
    \                vowel_index = i\n            end\n        end\n        for j\
    \ = 1, #consonants do\n            if word[i] == consonants[j] then\n        \
    \        consonant_index = i\n            end\n        end\n    end\n    if vowel_index\
    \ == 0 or consonant_index == 0 then\n        return ''\n    elseif vowel_index\
    \ > consonant_index then\n        return ''\n    else\n        return word[vowel_index]\n\
    \    end\nend", "    -- TODO: implement this function\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for i = #word, 1, -1\
    \ do\n        if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i,\
    \ i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then\n         \
    \   result = word:sub(i, i)\n            break\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index\
    \ = 0\n    for i = #word, 1, -1 do\n        for j = 1, #vowels do\n          \
    \  if word[i] == vowels[j] then\n                vowel_index = i\n           \
    \     break\n            end\n        end\n        if vowel_index ~= 0 then\n\
    \            break\n        end\n    end\n    if vowel_index == 0 then\n     \
    \   return ''\n    end\n    local consonant_index = 0\n    for i = vowel_index,\
    \ 1, -1 do\n        local is_consonant = true\n        for j = 1, #vowels do\n\
    \            if word[i] == vowels[j] then\n                is_consonant = false\n\
    \                break\n            end\n        end\n        if is_consonant\
    \ then\n            consonant_index = i\n            break\n        end\n    end\n\
    \    if consonant_index == 0 then\n        return ''\n    end\n    return word[vowel_index]\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_vowel = ''\n\
    \    local prev_consonant = ''\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if table.contains(vowels, char) then\n           \
    \ prev_vowel = char\n        else\n            if prev_vowel ~= '' then\n    \
    \            return prev_vowel\n            end\n            prev_consonant =\
    \ char\n        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ result = ''\n    local vowel_index = 0\n    local consonant_index = 0\n    local\
    \ vowel_found = false\n    local consonant_found = false\n    for i = #word, 1,\
    \ -1 do\n        for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j]\
    \ then\n                vowel_index = i\n                vowel_found = true\n\
    \                break\n            end\n        end\n        if vowel_found then\n\
    \            break\n        end\n    end\n    for i = vowel_index, 1, -1 do\n\
    \        for j = 1, #consonants do\n            if word:sub(i, i) == consonants[j]\
    \ then\n                consonant_index = i\n                consonant_found =\
    \ true\n                break\n            end\n        end\n        if consonant_found\
    \ then\n            break\n        end\n    end\n    if consonant_found and vowel_found\
    \ then\n        result = word:sub(vowel_index, vowel_index)\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local index\
    \ = #word\n    while index > 0 do\n        local char = word:sub(index, index)\n\
    \        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char ==\
    \ 'u' then\n            if index > 1 and index < #word then\n                local\
    \ prev = word:sub(index - 1, index - 1)\n                local next = word:sub(index\
    \ + 1, index + 1)\n                if prev ~= 'a' and prev ~= 'e' and prev ~=\
    \ 'i' and prev ~= 'o' and prev ~= 'u' and\n                    next ~= 'a' and\
    \ next ~= 'e' and next ~= 'i' and next ~= 'o' and next ~= 'u' then\n         \
    \           return char\n                end\n            end\n        end\n \
    \       index = index - 1\n    end\n    return ''\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n    \
    \    if table.contains(vowels, char) then\n            closest_vowel = char\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = closest_vowel_index - 1, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if not table.contains(vowels, char) then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local last_vowel = ''\n    local last_consonant = ''\n    for\
    \ i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n        if table.indexof(vowels,\
    \ letter) then\n            last_vowel = letter\n        else\n            last_consonant\
    \ = letter\n            break\n        end\n    end\n    if last_vowel ~= '' and\
    \ last_consonant ~= '' then\n        return last_vowel\n    else\n        return\
    \ ''\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local closest_consonant_index_3 = 0\n    local closest_consonant_index_4\
    \ = 0\n    local closest_consonant_index_5 = 0\n    local closest_consonant_index_6\
    \ = 0\n    local closest_consonant_index_7 = 0\n    local closest_consonant_index_8\
    \ = 0\n    local closest_consonant_index_9 = 0\n    local closest_consonant_index_10\
    \ = 0\n    local closest_consonant_index_11 = 0\n    local closest_consonant_index_12\
    \ = 0\n    local closest_consonant_index_13 = 0\n    local closest_consonant_index_14\
    \ = 0\n    local closest_consonant_index_15 = 0\n    local closest_consonant_index_16\
    \ = 0\n    local closest_consonant_index_17 = 0\n    local closest_consonant_index_18\
    \ = 0\n    local closest_consonant_index_19 = 0\n    local closest_consonant_index_20\
    \ = 0\n    local closest_consonant_index_21 = 0\n    local closest_consonant_index_22\
    \ = 0\n    local closest_consonant_index_23 = 0\n    local closest_consonant_index_24\
    \ = 0\n    local closest_consonant_index_25 = 0\n    local closest_consonant_index_26\
    \ = 0\n    local closest_consonant_index_27 = 0\n    local closest_consonant_index_28\
    \ = 0\n    local closest_cons", "    -- TODO: implement this function\nend", " \
    \ -- TODO: implement this function\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local result = ''\n  local last_consonant = ''\n  local last_vowel =\
    \ ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      last_vowel = char\n    else\n      if last_vowel ~= '' then\n\
    \        result = last_vowel\n        break\n      end\n      last_consonant =\
    \ char\n    end\n  end\n  return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n        end\n        if table.contains(consonants, char) then\n       \
    \     closest_consonant_index = i\n        end\n        if closest_vowel_index\
    \ > closest_consonant_index then\n            return closest_vowel\n        end\n\
    \    end\n    return ''\nend", "  -- TODO: implement this function\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_distance = 0\n\
    \    local distance = 0\n    for i = 1, #word do\n        if word[i] == 'a' or\
    \ word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\
    \            for j = i, #word do\n                if word[j] == 'b' or word[j]\
    \ == 'c' or word[j] == 'd' or word[j] == 'f' or word[j] == 'g' or word[j] == 'h'\
    \ or word[j] == 'j' or word[j] == 'k' or word[j] == 'l' or word[j] == 'm' or word[j]\
    \ == 'n' or word[j] == 'p' or word[j] == 'q' or word[j] == 'r' or word[j] == 's'\
    \ or word[j] == 't' or word[j] == 'v' or word[j] == 'w' or word[j] == 'x' or word[j]\
    \ == 'y' or word[j] == 'z' then\n                    distance = j - i\n      \
    \              if distance > closest_distance then\n                        closest_distance\
    \ = distance\n                        closest_vowel = word[i]\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ vowel_index = 0\n    local vowel_found = false\n    for i = #word, 1, -1 do\n\
    \        for j = 1, #vowels do\n            if word[i] == vowels[j] then\n   \
    \             vowel_index = i\n                vowel_found = true\n          \
    \      break\n            end\n        end\n        if vowel_found then\n    \
    \        break\n        end\n    end\n    if vowel_found then\n        local consonant_found\
    \ = false\n        for i = vowel_index - 1, 1, -1 do\n            for j = 1, #vowels\
    \ do\n                if word[i] == vowels[j] then\n                    consonant_found\
    \ = false\n                    break\n                else\n                 \
    \   consonant_found = true\n                end\n            end\n           \
    \ if consonant_found then\n                break\n            end\n        end\n\
    \        if consonant_found then\n            return word[vowel_index]\n     \
    \   else\n            return ''\n        end\n    else\n        return ''\n  \
    \  end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result\
    \ = ''\n    local prev_char = ''\n    local next_char = ''\n    for i = #word,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if i == #word then\n\
    \            next_char = ''\n        else\n            next_char = word:sub(i\
    \ + 1, i + 1)\n        end\n        if i == 1 then\n            prev_char = ''\n\
    \        else\n            prev_char = word:sub(i - 1, i - 1)\n        end\n \
    \       if not table.contains(vowels, char) and table.contains(vowels, prev_char)\
    \ and not table.contains(vowels, next_char) then\n            result = prev_char\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local prev_is_vowel\
    \ = false\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n\
    \        if not prev_is_vowel then\n            for _, v in ipairs(vowels) do\n\
    \                if char == v then\n                    result = char\n      \
    \              prev_is_vowel = true\n                    break\n             \
    \   end\n            end\n        else\n            for _, v in ipairs(vowels)\
    \ do\n                if char == v then\n                    return result\n \
    \               end\n            end\n            prev_is_vowel = false\n    \
    \    end\n    end\n    return result\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local closest_vowel\
    \ = ''\n  local closest_vowel_index = 0\n  local closest_consonant_index = 0\n\
    \  local closest_consonant_index_2 = 0\n  local word_length = string.len(word)\n\
    \  for i = 1, word_length do\n    local char = string.sub(word, i, i)\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        if i > closest_vowel_index\
    \ then\n          closest_vowel_index = i\n          closest_vowel = char\n  \
    \      end\n      end\n    end\n    for j = 1, #consonants do\n      if char ==\
    \ consonants[j] then\n        if i > closest_consonant_index then\n          closest_consonant_index\
    \ = i\n        end\n      end\n    end\n  end\n  for i = 1, word_length do\n \
    \   local char = string.sub(word, i, i)\n    for j = 1, #consonants do\n     \
    \ if char == consonants[j] then\n        if i > closest_consonant_index_2 and\
    \ i < closest_vowel_index then\n          closest_consonant_index_2 = i\n    \
    \    end\n      end\n    end\n  end\n  if closest_consonant_index_2 == 0 then\n\
    \    return ''\n  else\n    return closest_vowel\n  end\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index = #word\n\
    \    while index > 0 do\n        local char = word:sub(index, index)\n       \
    \ if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\
    \            result = char\n            break\n        end\n        index = index\
    \ - 1\n    end\n    return result\nend", "    -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_pos = {}\n\
    \    local word_len = #word\n    for i = 1, word_len do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_pos[#vowel_pos + 1] = i\n        end\n\
    \    end\n    if #vowel_pos == 0 then\n        return ''\n    end\n    local closest_vowel\
    \ = ''\n    local closest_vowel_pos = 0\n    for i = 1, #vowel_pos do\n      \
    \  local vowel_pos_i = vowel_pos[i]\n        if vowel_pos_i == 1 then\n      \
    \      closest_vowel = word:sub(vowel_pos_i, vowel_pos_i)\n            closest_vowel_pos\
    \ = vowel_pos_i\n            break\n        elseif vowel_pos_i == word_len then\n\
    \            closest_vowel = word:sub(vowel_pos_i, vowel_pos_i)\n            closest_vowel_pos\
    \ = vowel_pos_i\n            break\n        elseif not table.contains(vowels,\
    \ word:sub(vowel_pos_i - 1, vowel_pos_i - 1)) and\n               not table.contains(vowels,\
    \ word:sub(vowel_pos_i + 1, vowel_pos_i + 1)) then\n            closest_vowel\
    \ = word:sub(vowel_pos_i, vowel_pos_i)\n            closest_vowel_pos = vowel_pos_i\n\
    \            break\n        end\n    end\n    if closest_vowel_pos == 0 then\n\
    \        return ''\n    end\n    return closest_vowel\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \  local closest_vowel = ''\n  local closest_vowel_index = 0\n  local closest_consonant_index\
    \ = 0\n  local closest_consonant_index_2 = 0\n  local closest_consonant_index_2_found\
    \ = false\n  for i = 1, #word do\n    local letter = word:sub(i, i)\n    if table.contains(vowels,\
    \ letter) then\n      closest_vowel = letter\n      closest_vowel_index = i\n\
    \    end\n    if table.contains(consonants, letter) then\n      if closest_consonant_index\
    \ == 0 then\n        closest_consonant_index = i\n      elseif closest_consonant_index_2_found\
    \ == false then\n        closest_consonant_index_2 = i\n        closest_consonant_index_2_found\
    \ = true\n      end\n    end\n  end\n  if closest_vowel_index > closest_consonant_index\
    \ and closest_vowel_index < closest_consonant_index_2 then\n    return closest_vowel\n\
    \  else\n    return ''\n  end\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local closest_consonant_index_2 = 0\n    local word_length = string.len(word)\n\
    \    for i = 1, word_length do\n        local letter = string.sub(word, i, i)\n\
    \        if table.index_of(vowels, letter) ~= -1 then\n            closest_vowel\
    \ = letter\n            closest_vowel_index = i\n            break\n        end\n\
    \    end\n    for i = closest_vowel_index, word_length do\n        local letter\
    \ = string.sub(word, i, i)\n        if table.index_of(consonants, letter) ~= -1\
    \ then\n            closest_consonant_index = i\n            break\n        end\n\
    \    end\n    for i = closest_consonant_index, word_length do\n        local letter\
    \ = string.sub(word, i, i)\n        if table.index_of(consonants, letter) ~= -1\
    \ then\n            closest_consonant_index_2 = i\n            break\n       \
    \ end\n    end\n    if closest_consonant_index_2 == 0 then\n        return ''\n\
    \    end\n    if closest_vowel_index > closest_consonant_index then\n        return\
    \ ''\n    end\n    if closest_vowel_index < closest_consonant_index_2 then\n \
    \       return ''\n    end\n    return closest_vowel\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local closest_distance\
    \ = 0\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      closest_vowel = char\n      closest_distance = #word - i\n\
    \      break\n    end\n  end\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if table.contains(vowels, char) then\n      local distance = #word -\
    \ i\n      if distance > closest_distance then\n        closest_vowel = char\n\
    \        closest_distance = distance\n      end\n    end\n  end\n  return closest_vowel\n\
    end", "    -- TODO: implement this function\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local current_char = string.sub(word, i, i)\n        if current_char\
    \ == 'a' or current_char == 'e' or current_char == 'i' or current_char == 'o'\
    \ or current_char == 'u' then\n            if i > closest_vowel_index then\n \
    \               closest_vowel = current_char\n                closest_vowel_index\
    \ = i\n            end\n        end\n    end\n    return closest_vowel\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local\
    \ closest_vowel = ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) ~= nil then\n            vowel_index = i\n            closest_vowel\
    \ = word:sub(i, i)\n            break\n        end\n    end\n    if vowel_index\
    \ == 0 then\n        return ''\n    end\n    for i = vowel_index - 1, 1, -1 do\n\
    \        if table.indexof(vowels, word:sub(i, i)) == nil then\n            return\
    \ closest_vowel\n        end\n    end\n    return ''\nend", "    -- TODO: implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ word_length = string.len(word)\n    local i = word_length\n    while i > 0 do\n\
    \        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            break\n        end\n\
    \        i = i - 1\n    end\n    return closest_vowel\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n    \
    \    if table.indexof(vowels, char) then\n            closest_vowel = char\n \
    \           closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = closest_vowel_index, 1, -1 do\n        local char = word:sub(i, i)\n\
    \        if table.indexof(consonants, char) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 or closest_consonant_index == 0 then\n        return ''\n    end\n    if closest_vowel_index\
    \ - closest_consonant_index == 1 then\n        return ''\n    end\n    return\
    \ closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n    for i =\
    \ #word, 1, -1 do\n        for j = 1, #vowels do\n            if word[i] == vowels[j]\
    \ then\n                for k = 1, #consonants do\n                    if word[i-1]\
    \ == consonants[k] and word[i+1] == consonants[k] then\n                     \
    \   result = word[i]\n                        return result\n                \
    \    end\n                end\n            end\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index\
    \ = 0\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    if vowel_index == 0 then\n        return ''\n    end\n    for i = vowel_index\
    \ - 1, 1, -1 do\n        if not table.indexof(vowels, word:sub(i, i)) then\n \
    \           return word:sub(vowel_index, vowel_index)\n        end\n    end\n\
    \    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    for i = 1, #word do\n\
    \        local letter = word:sub(i, i)\n        if table.contains(vowels, letter)\
    \ then\n            vowel_index = i\n        elseif table.contains(consonants,\
    \ letter) then\n            consonant_index = i\n        end\n        if vowel_index\
    \ > 0 and consonant_index > 0 then\n            if vowel_index > consonant_index\
    \ then\n                closest_vowel = word:sub(vowel_index, vowel_index)\n \
    \               break\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n \
    \   for i = #word, 1, -1 do\n        if not table.contains(vowels, word:sub(i,\
    \ i)) then\n            result = word:sub(i + 1, i + 1)\n            break\n \
    \       end\n    end\n    return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_index = 0\n\
    \    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i))\
    \ then\n            closest_vowel = word:sub(i, i)\n            closest_index\
    \ = i\n            break\n        end\n    end\n    if closest_index == 1 then\n\
    \        return ''\n    end\n    for i = closest_index - 1, 1, -1 do\n       \
    \ if not table.indexof(vowels, word:sub(i, i)) then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\
    \            closest_vowel = char\n            closest_vowel_index = i\n     \
    \       break\n        end\n    end\n    if closest_vowel_index == 1 then\n  \
    \      return ''\n    end\n    for i = closest_vowel_index - 1, 1, -1 do\n   \
    \     local char = word:sub(i, i)\n        if char ~= 'a' and char ~= 'e' and\
    \ char ~= 'i' and char ~= 'o' and char ~= 'u' then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local result = ''\n    local last_vowel = ''\n    local last_consonant\
    \ = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n      \
    \  if table.contains(vowels, c) then\n            last_vowel = c\n        else\n\
    \            last_consonant = c\n        end\n        if last_vowel ~= '' and\
    \ last_consonant ~= '' then\n            result = last_vowel\n            break\n\
    \        end\n    end\n    return result\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local\
    \ vowel_index = 0\n    local consonant_index = 0\n    for i = 1, #word do\n  \
    \      if vowels:find(word:sub(i, i)) then\n            vowel_index = i\n    \
    \    elseif consonants:find(word:sub(i, i)) then\n            consonant_index\
    \ = i\n            if vowel_index ~= 0 then\n                break\n         \
    \   end\n        end\n    end\n    if vowel_index == 0 or consonant_index == 0\
    \ then\n        return ''\n    end\n    return word:sub(vowel_index, vowel_index)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = #word\n\
    \    local vowel_pos = 0\n    local vowel_idx = 0\n    for i = word_len, 1, -1\
    \ do\n        local char = word:sub(i, i)\n        if char == 'a' or char == 'e'\
    \ or char == 'i' or char == 'o' or char == 'u' then\n            vowel_pos = i\n\
    \            vowel_idx = table.indexof(vowels, char)\n            break\n    \
    \    end\n    end\n    if vowel_pos == 0 then\n        return ''\n    end\n  \
    \  for i = vowel_pos, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and char ~= 'u'\
    \ then\n            return vowels[vowel_idx]\n        end\n    end\n    return\
    \ ''\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal closest_vowel\
    \ = ''\n\tlocal closest_vowel_index = 0\n\tlocal word_length = #word\n\tfor i\
    \ = word_length, 1, -1 do\n\t\tlocal current_char = word:sub(i, i)\n\t\tif table.contains(vowels,\
    \ current_char) then\n\t\t\tclosest_vowel = current_char\n\t\t\tclosest_vowel_index\
    \ = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif closest_vowel_index == 0 then\n\t\treturn\
    \ ''\n\tend\n\tfor i = closest_vowel_index - 1, 1, -1 do\n\t\tlocal current_char\
    \ = word:sub(i, i)\n\t\tif not table.contains(vowels, current_char) then\n\t\t\
    \treturn closest_vowel\n\t\tend\n\tend\n\treturn ''\nend", "  -- your code here\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local vowel_pos = 0\n    local consonant_pos = 0\n\
    \    local closest_vowel = ''\n    local closest_vowel_pos = 0\n    local closest_consonant_pos\
    \ = 0\n    for i = 1, #word do\n        for j = 1, #vowels do\n            if\
    \ word:sub(i, i) == vowels[j] then\n                vowel_pos = i\n          \
    \      break\n            end\n        end\n        for j = 1, #consonants do\n\
    \            if word:sub(i, i) == consonants[j] then\n                consonant_pos\
    \ = i\n                break\n            end\n        end\n        if vowel_pos\
    \ > consonant_pos and vowel_pos - consonant_pos < closest_vowel_pos - closest_consonant_pos\
    \ then\n            closest_vowel = word:sub(vowel_pos, vowel_pos)\n         \
    \   closest_vowel_pos = vowel_pos\n            closest_consonant_pos = consonant_pos\n\
    \        end\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ result = ''\n    local vowel_index = 0\n    local consonant_index = 0\n    local\
    \ vowel_found = false\n    local consonant_found = false\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if not vowel_found then\n\
    \            for j = 1, #vowels do\n                if char == vowels[j] then\n\
    \                    vowel_index = i\n                    vowel_found = true\n\
    \                    break\n                end\n            end\n        end\n\
    \        if not consonant_found then\n            for j = 1, #consonants do\n\
    \                if char == consonants[j] then\n                    consonant_index\
    \ = i\n                    consonant_found = true\n                    break\n\
    \                end\n            end\n        end\n        if vowel_found and\
    \ consonant_found then\n            break\n        end\n    end\n    if vowel_found\
    \ and consonant_found and vowel_index > consonant_index then\n        result =\
    \ word:sub(vowel_index, vowel_index)\n    end\n    return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_is_vowel = false\n    local\
    \ prev_is_consonant = false\n    local closest_vowel = ''\n    for i = #word,\
    \ 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexof(vowels,\
    \ c) then\n            if prev_is_consonant then\n                closest_vowel\
    \ = c\n                break\n            end\n            prev_is_vowel = true\n\
    \        else\n            prev_is_consonant = true\n        end\n    end\n  \
    \  return closest_vowel\nend", "    -- your code here\n    return ''\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for\
    \ i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local vowel_index\
    \ = 0\n    local consonant_index = 0\n    for i = 1, #word do\n        for j =\
    \ 1, #vowels do\n            if word[i] == vowels[j] then\n                vowel_index\
    \ = i\n            end\n        end\n        for j = 1, #consonants do\n     \
    \       if word[i] == consonants[j] then\n                consonant_index = i\n\
    \            end\n        end\n    end\n    if vowel_index == 0 or consonant_index\
    \ == 0 then\n        return ''\n    elseif vowel_index < consonant_index then\n\
    \        return word[vowel_index]\n    else\n        return ''\n    end\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    for\
    \ i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            vowel_index = i\n            break\n        end\n    end\n    if\
    \ vowel_index == 0 then\n        return ''\n    end\n    local prev_char = word:sub(vowel_index\
    \ - 1, vowel_index - 1)\n    local next_char = word:sub(vowel_index + 1, vowel_index\
    \ + 1)\n    if prev_char and next_char and not table.indexof(vowels, prev_char)\
    \ and not table.indexof(vowels, next_char) then\n        return word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local result = ''\n    local index = #word\n    while index >\
    \ 0 do\n        if table.contains(vowels, word:sub(index, index)) then\n     \
    \       result = word:sub(index, index)\n            break\n        end\n    \
    \    index = index - 1\n    end\n    return result\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local last_consonant\
    \ = ''\n    for i = 1, #word do\n        local char = word:sub(i, i)\n       \
    \ if table.contains(vowels, char) then\n            last_vowel = char\n      \
    \  else\n            last_consonant = char\n        end\n        if last_vowel\
    \ ~= '' and last_consonant ~= '' then\n            return last_vowel\n       \
    \ end\n    end\n    return ''\nend", "    -- your code here\n    return ''\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local\
    \ last_consonant = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            last_vowel = char\n\
    \        else\n            last_consonant = char\n            break\n        end\n\
    \    end\n    if last_vowel == '' or last_consonant == '' then\n        return\
    \ ''\n    end\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n\
    \        if table.contains(vowels, char) then\n            return char\n     \
    \   end\n        if char == last_consonant then\n            return last_vowel\n\
    \        end\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local result = ''\n    local last_consonant = ''\n    local last_vowel = ''\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = c\n        else\n\
    \            last_vowel = c\n            break\n        end\n    end\n    if last_consonant\
    \ ~= '' and last_vowel ~= '' then\n        result = last_vowel\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result\
    \ = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      last_vowel = char\n        elseif last_vowel ~= '' then\n            result\
    \ = last_vowel\n            break\n        end\n    end\n    return result\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = {}\n    for\
    \ i = 1, #word do\n        for j = 1, #vowels do\n            if word[i] == vowels[j]\
    \ then\n                vowel_index[#vowel_index + 1] = i\n            end\n \
    \       end\n    end\n    if #vowel_index == 0 then\n        return ''\n    end\n\
    \    local closest_vowel = ''\n    local closest_distance = #word\n    for i =\
    \ 1, #vowel_index do\n        if vowel_index[i] > 1 and vowel_index[i] < #word\
    \ then\n            if vowel_index[i] - 1 > 0 and vowel_index[i] + 1 <= #word\
    \ then\n                if not is_vowel(word[vowel_index[i] - 1]) and not is_vowel(word[vowel_index[i]\
    \ + 1]) then\n                    if closest_distance > vowel_index[i] then\n\
    \                        closest_distance = vowel_index[i]\n                 \
    \       closest_vowel = word[vowel_index[i]]\n                    end\n      \
    \          end\n            end\n        end\n    end\n    return closest_vowel\n\
    end", "    -- TODO: implement this function\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local letter = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ letter) then\n            if i > closest_vowel_index then\n                closest_vowel\
    \ = letter\n                closest_vowel_index = i\n            end\n       \
    \ end\n    end\n    return closest_vowel\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local result = ''\n    local index = #word\n    local prev_is_consonant\
    \ = false\n    while index > 0 do\n        local char = word:sub(index, index)\n\
    \        if prev_is_consonant then\n            for _, vowel in ipairs(vowels)\
    \ do\n                if char == vowel then\n                    result = char\n\
    \                    break\n                end\n            end\n           \
    \ if result ~= '' then\n                break\n            end\n        end\n\
    \        prev_is_consonant = true\n        for _, vowel in ipairs(vowels) do\n\
    \            if char == vowel then\n                prev_is_consonant = false\n\
    \                break\n            end\n        end\n        index = index -\
    \ 1\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local vowel_pos = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_pos = i\n            break\n       \
    \ end\n    end\n    if vowel_pos == 0 then\n        return ''\n    end\n    local\
    \ prev_pos = vowel_pos - 1\n    local next_pos = vowel_pos + 1\n    while prev_pos\
    \ > 0 and next_pos <= #word do\n        if table.contains(vowels, word:sub(prev_pos,\
    \ prev_pos)) then\n            next_pos = next_pos + 1\n        elseif table.contains(vowels,\
    \ word:sub(next_pos, next_pos)) then\n            prev_pos = prev_pos - 1\n  \
    \      else\n            return word:sub(vowel_pos, vowel_pos)\n        end\n\
    \    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local index = #word\n    while index > 0 do\n    \
    \    local char = word:sub(index, index)\n        if char == 'a' or char == 'e'\
    \ or char == 'i' or char == 'o' or char == 'u' then\n            result = char\n\
    \            break\n        end\n        index = index - 1\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_set\
    \ = {}\n    for _, v in ipairs(vowels) do\n        vowels_set[v] = true\n    end\n\
    \    local last_consonant = nil\n    for i = #word, 1, -1 do\n        local c\
    \ = word:sub(i, i)\n        if vowels_set[c] then\n            if last_consonant\
    \ then\n                return c\n            end\n        else\n            last_consonant\
    \ = c\n        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local last_vowel = nil\n    for i = #word, 1, -1 do\n  \
    \      local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            last_vowel = char\n        elseif last_vowel then\n            return\
    \ last_vowel\n        end\n    end\n    return ''\nend", "    -- your code here\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ index = 0\n    for i = #word, 1, -1 do\n        if word:sub(i, i) == 'a' or\
    \ word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i,\
    \ i) == 'u' then\n            result = word:sub(i, i)\n            index = i\n\
    \            break\n        end\n    end\n    if index == 1 then\n        return\
    \ ''\n    end\n    for i = index - 1, 1, -1 do\n        if word:sub(i, i) ~= 'a'\
    \ and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o'\
    \ and word:sub(i, i) ~= 'u' then\n            return result\n        end\n   \
    \ end\n    return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n  \
    \  local result = ''\n    local min_distance = math.huge\n    for i = 1, #word\
    \ do\n        local c = word:sub(i, i)\n        if c:find('[aeiou]') then\n  \
    \          local distance = #word - i\n            if distance < min_distance\
    \ then\n                min_distance = distance\n                result = c\n\
    \            end\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n    \
    \    if table.contains(vowels, char) then\n            closest_vowel = char\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = closest_vowel_index - 1, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if not table.contains(vowels, char) then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n\
    \    local word_length = string.len(word)\n    for i = 1, word_length do\n   \
    \     local current_char = string.sub(word, i, i)\n        if current_char ==\
    \ 'a' or current_char == 'e' or current_char == 'i' or current_char == 'o' or\
    \ current_char == 'u' then\n            local prev_char = string.sub(word, i -\
    \ 1, i - 1)\n            local next_char = string.sub(word, i + 1, i + 1)\n  \
    \          if prev_char ~= 'a' and prev_char ~= 'e' and prev_char ~= 'i' and prev_char\
    \ ~= 'o' and prev_char ~= 'u' and next_char ~= 'a' and next_char ~= 'e' and next_char\
    \ ~= 'i' and next_char ~= 'o' and next_char ~= 'u' then\n                if i\
    \ > closest_vowel_index then\n                    closest_vowel = current_char\n\
    \                    closest_vowel_index = i\n                end\n          \
    \  end\n        end\n    end\n    return closest_vowel\nend", "    -- your code\
    \ here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n\
    \    local last_consonant = ''\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if table.indexof(vowels, char) then\n            last_vowel\
    \ = char\n        else\n            last_consonant = char\n        end\n     \
    \   if last_vowel ~= '' and last_consonant ~= '' then\n            return last_vowel\n\
    \        end\n    end\n    return ''\nend", "    -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  local char = word:sub(i, i)\n        if table.indexof(vowels, char) then\n\
    \            closest_vowel = char\n            closest_vowel_index = i\n     \
    \   elseif table.indexof(consonants, char) then\n            if closest_vowel_index\
    \ > closest_consonant_index then\n                return closest_vowel\n     \
    \       end\n            closest_consonant_index = i\n        end\n    end\n \
    \   return ''\nend", "    -- your code here\n    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local vowels_set = {}\n    for _, v in ipairs(vowels) do\n  \
    \      vowels_set[v] = true\n    end\n    local last_vowel = ''\n    for i = #word,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if vowels_set[char] then\n\
    \            last_vowel = char\n        elseif last_vowel ~= '' then\n       \
    \     return last_vowel\n        end\n    end\n    return ''\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local min_distance\
    \ = math.huge\n    for i = 1, #word do\n        if word:sub(i, i) == 'a' or word:sub(i,\
    \ i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i)\
    \ == 'u' then\n            local distance = 0\n            for j = i, #word do\n\
    \                if word:sub(j, j) == 'a' or word:sub(j, j) == 'e' or word:sub(j,\
    \ j) == 'i' or word:sub(j, j) == 'o' or word:sub(j, j) == 'u' then\n         \
    \           break\n                end\n                distance = distance +\
    \ 1\n            end\n            if distance < min_distance then\n          \
    \      min_distance = distance\n                result = word:sub(i, i)\n    \
    \        end\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index = #word\n\
    \    while index > 0 do\n        if not table.contains(vowels, word:sub(index,\
    \ index)) then\n            for i = index - 1, 1, -1 do\n                if table.contains(vowels,\
    \ word:sub(i, i)) then\n                    result = word:sub(i, i)\n        \
    \            break\n                end\n            end\n            break\n\
    \        end\n        index = index - 1\n    end\n    return result\nend", " \
    \   -- TODO: implement this function\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result\
    \ = ''\n    local index = 0\n    local vowel_index = 0\n    local consonant_index\
    \ = 0\n    for i = 1, #word do\n        for j = 1, #vowels do\n            if\
    \ word[i] == vowels[j] then\n                vowel_index = i\n               \
    \ break\n            end\n        end\n        for j = 1, #consonants do\n   \
    \         if word[i] == consonants[j] then\n                consonant_index =\
    \ i\n                break\n            end\n        end\n        if vowel_index\
    \ > consonant_index and vowel_index - consonant_index > index then\n         \
    \   index = vowel_index - consonant_index\n            result = word[vowel_index]\n\
    \        end\n    end\n    return result\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local vowel_index = 0\n    for i = #word, 1, -1 do\n   \
    \     if table.indexof(vowels, word:sub(i, i)) ~= -1 then\n            vowel_index\
    \ = i\n            break\n        end\n    end\n    if vowel_index == 0 then\n\
    \        return ''\n    end\n    for i = vowel_index - 1, 1, -1 do\n        if\
    \ table.indexof(vowels, word:sub(i, i)) == -1 then\n            return word:sub(vowel_index,\
    \ vowel_index)\n        end\n    end\n    return ''\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_idx\
    \ = 0\n    local closest_vowel_distance = 0\n    for i = 1, #word do\n       \
    \ local c = word:sub(i, i)\n        if table.contains(vowels, c) then\n      \
    \      local vowel_idx = i\n            local vowel_distance = #word - i\n   \
    \         if vowel_distance > closest_vowel_distance then\n                closest_vowel\
    \ = c\n                closest_vowel_idx = vowel_idx\n                closest_vowel_distance\
    \ = vowel_distance\n            end\n        end\n    end\n    if closest_vowel_idx\
    \ > 1 and closest_vowel_idx < #word then\n        return closest_vowel\n    else\n\
    \        return ''\n    end\nend", "    -- TODO: implement this function\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_len = string.len(word)\n    local vowel_pos =\
    \ 0\n    local consonant_pos = 0\n    local vowel_pos_list = {}\n    local consonant_pos_list\
    \ = {}\n    for i = 1, word_len do\n        local char = string.sub(word, i, i)\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          vowel_pos = i\n                table.insert(vowel_pos_list, vowel_pos)\n\
    \            end\n        end\n        for k = 1, #consonants do\n           \
    \ if char == consonants[k] then\n                consonant_pos = i\n         \
    \       table.insert(consonant_pos_list, consonant_pos)\n            end\n   \
    \     end\n    end\n    local vowel_pos_len = #vowel_pos_list\n    local consonant_pos_len\
    \ = #consonant_pos_list\n    local vowel_pos_list_sorted = {}\n    local consonant_pos_list_sorted\
    \ = {}\n    for i = 1, vowel_pos_len do\n        local min = vowel_pos_list[1]\n\
    \        local min_pos = 1\n        for j = 1, vowel_pos_len do\n            if\
    \ vowel_pos_list[j] < min then\n                min = vowel_pos_list[j]\n    \
    \            min_pos = j\n            end\n        end\n        table.insert(vowel_pos_list_sorted,\
    \ min)\n        table.remove(vowel_pos_list, min_pos)\n    end\n    for i = 1,\
    \ consonant_pos_len do\n        local min = consonant_pos_list[1]\n        local\
    \ min_pos = 1\n        for j", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local word_len = #word\n    local i = word_len\n    local prev_is_vowel =\
    \ false\n    local next_is_vowel = false\n    while i > 0 do\n        local c\
    \ = word:sub(i, i)\n        if prev_is_vowel then\n            if not next_is_vowel\
    \ then\n                return c\n            end\n        else\n            if\
    \ next_is_vowel then\n                return c\n            end\n        end\n\
    \        prev_is_vowel = false\n        next_is_vowel = false\n        for _,\
    \ v in ipairs(vowels) do\n            if c == v then\n                prev_is_vowel\
    \ = true\n                break\n            end\n        end\n        i = i -\
    \ 1\n        if i > 0 then\n            local c = word:sub(i, i)\n           \
    \ for _, v in ipairs(vowels) do\n                if c == v then\n            \
    \        next_is_vowel = true\n                    break\n                end\n\
    \            end\n        end\n    end\n    return ''\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = #word\n    local vowel_pos\
    \ = 0\n    local vowel = ''\n    for i = word_len, 1, -1 do\n        for j = 1,\
    \ #vowels do\n            if word:sub(i, i) == vowels[j] then\n              \
    \  vowel_pos = i\n                vowel = vowels[j]\n                break\n \
    \           end\n        end\n        if vowel_pos ~= 0 then\n            if vowel_pos\
    \ == 1 then\n                return ''\n            elseif vowel_pos == word_len\
    \ then\n                return ''\n            elseif word:sub(vowel_pos - 1,\
    \ vowel_pos - 1) == 'a' or\n                   word:sub(vowel_pos - 1, vowel_pos\
    \ - 1) == 'e' or\n                   word:sub(vowel_pos - 1, vowel_pos - 1) ==\
    \ 'i' or\n                   word:sub(vowel_pos - 1, vowel_pos - 1) == 'o' or\n\
    \                   word:sub(vowel_pos - 1, vowel_pos - 1) == 'u' then\n     \
    \           return ''\n            elseif word:sub(vowel_pos + 1, vowel_pos +\
    \ 1) == 'a' or\n                   word:sub(vowel_pos + 1, vowel_pos + 1) == 'e'\
    \ or\n                   word:sub(vowel_pos + 1, vowel_pos + 1) == 'i' or\n  \
    \                 word:sub(vowel_pos + 1, vowel_pos + 1) == 'o' or\n         \
    \          word:sub(vowel_pos + 1, vowel_pos + 1) == 'u' then\n              \
    \  return ''\n            else\n                return vowel\n            end\n\
    \        end\n    end\n    return ''\nend", "    local vowels = 'aeiouAEIOU'\n\
    \    local consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if vowels:find(char) then\n\
    \            closest_vowel = char\n            closest_vowel_index = i\n     \
    \       break\n        end\n    end\n    for i = closest_vowel_index, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if consonants:find(char) then\n\
    \            return closest_vowel\n        end\n    end\n    return ''\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    local\
    \ last_consonant = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            last_vowel = char\n\
    \        else\n            last_consonant = char\n            break\n        end\n\
    \    end\n    if last_vowel == '' or last_consonant == '' then\n        return\
    \ ''\n    end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local result = ''\n    local index = #word\n    local is_consonant\
    \ = false\n    while index > 0 do\n        local letter = word:sub(index, index)\n\
    \        if is_consonant and table.contains(vowels, letter) then\n           \
    \ result = letter\n            break\n        end\n        is_consonant = not\
    \ table.contains(vowels, letter)\n        index = index - 1\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    local last_consonant = ''\n    for i = 1, #word do\n        local\
    \ char = word:sub(i, i)\n        if table.indexof(vowels, char) then\n       \
    \     last_vowel = char\n        else\n            last_consonant = char\n   \
    \     end\n        if last_vowel ~= '' and last_consonant ~= '' then\n       \
    \     return last_vowel\n        end\n    end\n    return ''\nend", "    -- TODO:\
    \ implement this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    local word_len = string.len(word)\n    for i = word_len,\
    \ 1, -1 do\n        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            result = char\n            break\n        end\n    end\n\
    \    return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    local word_length\
    \ = #word\n    for i = word_length, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 then\n        return ''\n    end\n    for i = closest_vowel_index, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if char ~= 'a' and char ~= 'e' and\
    \ char ~= 'i' and char ~= 'o' and char ~= 'u' then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend", "    -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_char = ''\n\
    \    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if prev_char == '' then\n            prev_char = char\n\
    \        else\n            if table.contains(vowels, prev_char) then\n       \
    \         closest_vowel = prev_char\n            elseif table.contains(vowels,\
    \ char) then\n                closest_vowel = char\n            end\n        \
    \    prev_char = char\n        end\n    end\n    return closest_vowel\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    for\
    \ i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i, i)) then\n\
    \            vowel_index = i\n            break\n        end\n    end\n    if\
    \ vowel_index == 0 then\n        return ''\n    end\n    local prev_char = word:sub(vowel_index\
    \ - 1, vowel_index - 1)\n    local next_char = word:sub(vowel_index + 1, vowel_index\
    \ + 1)\n    if prev_char and next_char and not table.contains(vowels, prev_char)\
    \ and not table.contains(vowels, next_char) then\n        return word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return ''\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local word_length = string.len(word)\n    for i = 1, word_length do\n\
    \        local current_char = string.sub(word, i, i)\n        if table.indexof(vowels,\
    \ current_char) then\n            closest_vowel = current_char\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = word_length, 1, -1\
    \ do\n        local current_char = string.sub(word, i, i)\n        if table.indexof(consonants,\
    \ current_char) then\n            closest_consonant_index = i\n            break\n\
    \        end\n    end\n    if closest_vowel_index > closest_consonant_index then\n\
    \        return ''\n    else\n        return closest_vowel\n    end\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = string.len(word)\n\
    \    local prev_char = ''\n    local prev_vowel = ''\n    for i = word_len, 1,\
    \ -1 do\n        local char = string.sub(word, i, i)\n        if table.indexof(vowels,\
    \ char) then\n            if prev_char ~= '' and prev_char ~= char then\n    \
    \            return char\n            end\n            prev_vowel = char\n   \
    \     else\n            prev_char = char\n        end\n    end\n    return ''\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local found = false\n    local result = ''\n    for\
    \ i = #word, 1, -1 do\n        for j = 1, #vowels do\n            if word[i] ==\
    \ vowels[j] then\n                found = true\n                result = word[i]\n\
    \                break\n            end\n        end\n        if found then\n\
    \            break\n        end\n    end\n    if not found then\n        return\
    \ ''\n    end\n    for i = #word, 1, -1 do\n        for j = 1, #consonants do\n\
    \            if word[i] == consonants[j] then\n                if word[i+1] ==\
    \ result then\n                    return result\n                end\n      \
    \      end\n        end\n    end\n    return ''\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local word_len = string.len(word)\n    local vowel_pos\
    \ = 0\n    local vowel_found = false\n    for i = word_len, 1, -1 do\n       \
    \ local char = string.sub(word, i, i)\n        if vowel_found then\n         \
    \   if not is_vowel(char) then\n                return string.sub(word, vowel_pos,\
    \ vowel_pos)\n            end\n        else\n            if is_vowel(char) then\n\
    \                vowel_pos = i\n                vowel_found = true\n         \
    \   end\n        end\n    end\n    return ''\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i,\
    \ i)) then\n            closest_vowel = word:sub(i, i)\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 then\n        return ''\n    end\n    for i = closest_vowel_index - 1, 1,\
    \ -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n        \
    \    return closest_vowel\n        end\n    end\n    return ''\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local vowel_distance\
    \ = 0\n    local distance = 0\n    local word_length = string.len(word)\n    for\
    \ i = word_length, 1, -1 do\n        if table.indexof(vowels, string.sub(word,\
    \ i, i)) then\n            vowel_index = i\n            vowel_distance = word_length\
    \ - vowel_index\n            break\n        end\n    end\n    if vowel_index >\
    \ 0 then\n        for i = vowel_index, 1, -1 do\n            if not table.indexof(vowels,\
    \ string.sub(word, i, i)) then\n                distance = vowel_index - i\n \
    \               if distance > 0 then\n                    return string.sub(word,\
    \ vowel_index, vowel_index)\n                end\n            end\n        end\n\
    \    end\n    return ''\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \ local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_index = 0\n  local\
    \ consonant_index = 0\n  local closest_vowel = ''\n  for i = #word, 1, -1 do\n\
    \    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j] then\n      \
    \  vowel_index = i\n        break\n      end\n    end\n    for j = 1, #consonants\
    \ do\n      if word:sub(i, i) == consonants[j] then\n        consonant_index =\
    \ i\n        break\n      end\n    end\n    if vowel_index ~= 0 and consonant_index\
    \ ~= 0 then\n      if vowel_index > consonant_index then\n        closest_vowel\
    \ = word:sub(vowel_index, vowel_index)\n        break\n      end\n    end\n  end\n\
    \  return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) then\n            last_vowel = word:sub(i, i)\n            break\n\
    \        end\n    end\n    return last_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n    local word_length = #word\n\
    \    for i = word_length, 1, -1 do\n        if table.contains(vowels, word:sub(i,\
    \ i)) then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    if vowel_index == 0 then\n        return ''\n    end\n    for i = vowel_index,\
    \ 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n     \
    \       return word:sub(vowel_index, vowel_index)\n        end\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result =\
    \ ''\n    local prev_is_consonant = false\n    for i = #word, 1, -1 do\n     \
    \   local char = word:sub(i, i)\n        if prev_is_consonant then\n         \
    \   for _, v in ipairs(vowels) do\n                if char == v then\n       \
    \             result = char\n                    break\n                end\n\
    \            end\n            if result ~= '' then\n                break\n  \
    \          end\n        end\n        prev_is_consonant = true\n        for _,\
    \ v in ipairs(vowels) do\n            if char == v then\n                prev_is_consonant\
    \ = false\n                break\n            end\n        end\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local word_length = #word\n   \
    \ for i = 1, word_length do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            local is_vowel_between_consonants = false\n        \
    \    if i > 1 and i < word_length then\n                local prev_char = word:sub(i\
    \ - 1, i - 1)\n                local next_char = word:sub(i + 1, i + 1)\n    \
    \            if not table.contains(vowels, prev_char) and not table.contains(vowels,\
    \ next_char) then\n                    is_vowel_between_consonants = true\n  \
    \              end\n            end\n            if is_vowel_between_consonants\
    \ then\n                if closest_vowel_index == 0 then\n                   \
    \ closest_vowel = char\n                    closest_vowel_index = i\n        \
    \        elseif i > closest_vowel_index then\n                    closest_vowel\
    \ = char\n                    closest_vowel_index = i\n                end\n \
    \           end\n        end\n    end\n    return closest_vowel\nend", "  -- TODO:\
    \ implement this function\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_index = 0\n\
    \  local consonant_index = 0\n  local closest_vowel = ''\n  local closest_vowel_index\
    \ = 0\n  local closest_consonant_index = 0\n  local closest_distance = 0\n  for\
    \ i = 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j]\
    \ then\n        vowel_index = i\n        for k = 1, #consonants do\n         \
    \ if word:sub(i - 1, i - 1) == consonants[k] then\n            consonant_index\
    \ = i - 1\n            if closest_vowel_index == 0 then\n              closest_vowel_index\
    \ = vowel_index\n              closest_consonant_index = consonant_index\n   \
    \           closest_vowel = word:sub(vowel_index, vowel_index)\n             \
    \ closest_distance = vowel_index - consonant_index\n            elseif vowel_index\
    \ - consonant_index < closest_distance then\n              closest_vowel_index\
    \ = vowel_index\n              closest_consonant_index = consonant_index\n   \
    \           closest_vowel = word:sub(vowel_index, vowel_index)\n             \
    \ closest_distance = vowel_index - consonant_index\n            end\n        \
    \  end\n        end\n      end\n    end\n  end\n  return closest_vowel\nend",
  "  -- TODO: implement this function\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local word_len =\
    \ string.len(word)\n    local vowel_index = 0\n    local consonant_index = 0\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    for i = 1, word_len do\n        local char = string.sub(word, i, i)\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          vowel_index = i\n                break\n            end\n        end\n\
    \        for j = 1, #consonants do\n            if char == consonants[j] then\n\
    \                consonant_index = i\n                break\n            end\n\
    \        end\n        if vowel_index ~= 0 and consonant_index ~= 0 then\n    \
    \        if closest_vowel_index == 0 or closest_vowel_index > consonant_index\
    \ - vowel_index then\n                closest_vowel_index = consonant_index -\
    \ vowel_index\n                closest_vowel = char\n                closest_consonant_index\
    \ = consonant_index\n            end\n        end\n        vowel_index = 0\n \
    \       consonant_index = 0\n    end\n    if closest_vowel_index == 0 then\n \
    \       return ''\n    else\n        return closest_vowel\n    end\nend", "  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_vowel_index = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            last_vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = last_vowel_index,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            result = char\n            break\n        end\n    end\n\
    \    return result\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ word_len = #word\n  for i = word_len, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n      if i == word_len then\n        return ''\n      else\n  \
    \      local next_char = word:sub(i + 1, i + 1)\n        if next_char ~= 'a' and\
    \ next_char ~= 'e' and next_char ~= 'i' and next_char ~= 'o' and next_char ~=\
    \ 'u' then\n          return char\n        end\n      end\n    end\n  end\n  return\
    \ ''\nend", "    -- TODO: implement this function\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    local word_length = string.len(word)\n\
    \    for i = 1, word_length do\n        local letter = string.sub(word, i, i)\n\
    \        if table.contains(vowels, letter) then\n            closest_vowel = letter\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    for i = word_length, 1, -1 do\n        local letter = string.sub(word, i,\
    \ i)\n        if table.contains(consonants, letter) then\n            closest_consonant_index\
    \ = i\n            break\n        end\n    end\n    for i = closest_vowel_index,\
    \ 1, -1 do\n        local letter = string.sub(word, i, i)\n        if table.contains(consonants,\
    \ letter) then\n            closest_consonant_index_2 = i\n            break\n\
    \        end\n    end\n    if closest_vowel_index == 0 or closest_consonant_index\
    \ == 0 or closest_consonant_index_2 == 0 then\n        return ''\n    elseif closest_vowel_index\
    \ > closest_consonant_index then\n        return ''\n    elseif closest_vowel_index\
    \ < closest_consonant_index_2 then\n        return ''\n    else\n        return\
    \ closest_vowel\n    end\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = ''\n    for i = #word, 1, -1 do\n        if word:sub(i, i)\
    \ == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i) ==\
    \ 'o' or word:sub(i, i) == 'u' then\n            result = word:sub(i, i)\n   \
    \         break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel\
    \ = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index =\
    \ 0\n    local closest_distance = 0\n    local distance = 0\n    for i = 1, #word\
    \ do\n        for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j]\
    \ then\n                vowel_index = i\n                break\n            end\n\
    \        end\n        for j = 1, #consonants do\n            if word:sub(i, i)\
    \ == consonants[j] then\n                consonant_index = i\n               \
    \ break\n            end\n        end\n        if vowel_index ~= 0 and consonant_index\
    \ ~= 0 then\n            distance = consonant_index - vowel_index\n          \
    \  if distance > 0 and distance < closest_distance then\n                closest_vowel\
    \ = word:sub(vowel_index, vowel_index)\n                closest_vowel_index =\
    \ vowel_index\n                closest_consonant_index = consonant_index\n   \
    \             closest_distance = distance\n            end\n        end\n    end\n\
    \    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    local closest_consonant_index_2 = 0\n    local closest_vowel_index_2 = 0\n\
    \    local closest_consonant_index_3 = 0\n    local closest_vowel_index_3 = 0\n\
    \    local closest_consonant_index_4 = 0\n    local closest_vowel_index_4 = 0\n\
    \    local closest_consonant_index_5 = 0\n    local closest_vowel_index_5 = 0\n\
    \    local closest_consonant_index_6 = 0\n    local closest_vowel_index_6 = 0\n\
    \    local closest_consonant_index_7 = 0\n    local closest_vowel_index_7 = 0\n\
    \    local closest_consonant_index_8 = 0\n    local closest_vowel_index_8 = 0\n\
    \    local closest_consonant_index_9 = 0\n    local closest_vowel_index_9 = 0\n\
    \    local closest_consonant_index_10 = 0\n    local closest_vowel_index_10 =\
    \ 0\n    local closest_consonant_index_11 = 0\n    local closest_vowel_index_11\
    \ = 0\n    local closest_consonant_index_12 = 0\n    local closest_vowel_index_12\
    \ = 0\n    local closest_consonant_index_13 = 0\n    local closest_vowel_index_13\
    \ = 0\n    local closest_consonant_index_14 = 0\n    local closest_vowel_index_14\
    \ = 0\n    local closest_consonant_index_15 = 0\n    local closest_v", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local index =\
    \ #word\n    local found = false\n    while index > 0 do\n        local char =\
    \ word:sub(index, index)\n        if not found then\n            for _, v in ipairs(vowels)\
    \ do\n                if v == char then\n                    result = char\n \
    \                   found = true\n                    break\n                end\n\
    \            end\n        else\n            for _, v in ipairs(vowels) do\n  \
    \              if v == char then\n                    return result\n        \
    \        end\n            end\n            found = false\n        end\n      \
    \  index = index - 1\n    end\n    return result\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local result = ''\n    local last_vowel_pos = 0\n \
    \   for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            last_vowel_pos = i\n            break\n        end\n\
    \    end\n    for i = last_vowel_pos, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            result = char\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local\
    \ closest_consonant_index = 0\n    local closest_consonant_index_2 = 0\n    for\
    \ i = 1, #word do\n        for j = 1, #vowels do\n            if word[i] == vowels[j]\
    \ then\n                closest_vowel_index = i\n                closest_vowel\
    \ = word[i]\n            end\n        end\n        for k = 1, #consonants do\n\
    \            if word[i] == consonants[k] then\n                closest_consonant_index\
    \ = i\n            end\n        end\n        if closest_vowel_index > closest_consonant_index\
    \ then\n            closest_consonant_index_2 = closest_consonant_index\n    \
    \    end\n    end\n    if closest_vowel_index > closest_consonant_index_2 then\n\
    \        return closest_vowel\n    else\n        return ''\n    end\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_pos = {}\n    for\
    \ i = 1, #word do\n        for j = 1, #vowels do\n            if word:sub(i, i)\
    \ == vowels[j] then\n                vowel_pos[#vowel_pos + 1] = i\n         \
    \   end\n        end\n    end\n    local closest_vowel = ''\n    local closest_vowel_pos\
    \ = 0\n    for i = 1, #vowel_pos do\n        if vowel_pos[i] > closest_vowel_pos\
    \ and vowel_pos[i] < #word then\n            closest_vowel = word:sub(vowel_pos[i],\
    \ vowel_pos[i])\n            closest_vowel_pos = vowel_pos[i]\n        end\n \
    \   end\n    return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local result = ''\n    local last_consonant = ''\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n   \
    \     if not table.contains(vowels, char) then\n            last_consonant = char\n\
    \        else\n            last_vowel = char\n            break\n        end\n\
    \    end\n    if last_consonant ~= '' and last_vowel ~= '' then\n        result\
    \ = last_vowel\n    end\n    return result\nend", "  -- TODO: implement this function\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n       \
    \ for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n   \
    \             closest_vowel = word:sub(i, i)\n                closest_vowel_index\
    \ = i\n                break\n            end\n        end\n        if closest_vowel_index\
    \ ~= 0 then\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 1 or closest_vowel_index == #word then\n        return ''\n    end\n    for\
    \ i = closest_vowel_index - 1, 1, -1 do\n        for j = 1, #vowels do\n     \
    \       if word:sub(i, i) == vowels[j] then\n                return ''\n     \
    \       end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n    local\
    \ closest_distance = math.huge\n    for i = 1, #word do\n        local char =\
    \ word:sub(i, i)\n        if table.contains(vowels, char) then\n            local\
    \ distance = #word - i\n            if distance < closest_distance then\n    \
    \            closest_distance = distance\n                closest_vowel = char\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for i = #word,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        for _, v in ipairs(vowels)\
    \ do\n            if char == v then\n                last_vowel = char\n     \
    \           break\n            end\n        end\n        if last_vowel ~= '' then\n\
    \            break\n        end\n    end\n    return last_vowel\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for i = #word, 1,\
    \ -1 do\n    if table.indexof(vowels, word:sub(i, i)) then\n      result = word:sub(i,\
    \ i)\n      break\n    end\n  end\n  return result\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local index = #word\n    while index > 0 do\n\
    \        if table.contains(vowels, word:sub(index, index)) then\n            return\
    \ word:sub(index, index)\n        end\n        index = index - 1\n    end\n  \
    \  return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n    local vowel_index\
    \ = 0\n    local consonant_index = 0\n    for i = 1, #word do\n        for j =\
    \ 1, #vowels do\n            if word[i] == vowels[j] then\n                vowel_index\
    \ = i\n                break\n            end\n        end\n        for j = 1,\
    \ #consonants do\n            if word[i] == consonants[j] then\n             \
    \   consonant_index = i\n                break\n            end\n        end\n\
    \        if vowel_index ~= 0 and consonant_index ~= 0 then\n            if vowel_index\
    \ > consonant_index then\n                result = word[vowel_index]\n       \
    \         break\n            end\n        end\n    end\n    return result\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n  \
    \  local closest_vowel_index = -1\n    local word_length = string.len(word)\n\
    \    for i = word_length, 1, -1 do\n        local current_char = string.sub(word,\
    \ i, i)\n        for _, vowel in ipairs(vowels) do\n            if current_char\
    \ == vowel then\n                if i < word_length and i > 1 then\n         \
    \           if closest_vowel_index == -1 then\n                        closest_vowel\
    \ = current_char\n                        closest_vowel_index = i\n          \
    \          elseif i > closest_vowel_index then\n                        closest_vowel\
    \ = current_char\n                        closest_vowel_index = i\n          \
    \          end\n                end\n            end\n        end\n    end\n \
    \   return closest_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) then\n            last_vowel = word:sub(i, i)\n            break\n\
    \        end\n    end\n    return last_vowel\nend", "    -- TODO: implement this\
    \ function\nend", "    -- TODO: implement this function\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local vowel = ''\n    local consonant = ''\n    local result = ''\n    for\
    \ i = 1, #word do\n        if word[i] == 'a' or word[i] == 'e' or word[i] == 'i'\
    \ or word[i] == 'o' or word[i] == 'u' then\n            vowel = word[i]\n    \
    \    elseif word[i] == 'b' or word[i] == 'c' or word[i] == 'd' or word[i] == 'f'\
    \ or word[i] == 'g' or word[i] == 'h' or word[i] == 'j' or word[i] == 'k' or word[i]\
    \ == 'l' or word[i] == 'm' or word[i] == 'n' or word[i] == 'p' or word[i] == 'q'\
    \ or word[i] == 'r' or word[i] == 's' or word[i] == 't' or word[i] == 'v' or word[i]\
    \ == 'w' or word[i] == 'x' or word[i] == 'y' or word[i] == 'z' then\n        \
    \    consonant = word[i]\n        end\n        if vowel ~= '' and consonant ~=\
    \ '' then\n            result = vowel\n            break\n        end\n    end\n\
    \    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
