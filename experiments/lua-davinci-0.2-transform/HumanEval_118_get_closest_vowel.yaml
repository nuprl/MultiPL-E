name: HumanEval_118_get_closest_vowel
language: lua
prompt: "-- You are given a word. Your task is to find the closest vowel that stands\
  \ between \n-- two consonants from the right side of the word (case sensitive).\n\
  -- Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n-- find any vowel met the above condition. \n-- You may assume that the\
  \ given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
  -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
  -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
  \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
  \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
  \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
  \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
  \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
  \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
  \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            last_vowel = word:sub(i, i)\n            break\n     \
    \   end\n    end\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) then\n            if last_vowel ~= word:sub(i, i) then\n   \
    \             return word:sub(i, i)\n            end\n        end\n    end\n \
    \   return ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_distance = 0\n    local vowel_index = 0\n    local consonant_index =\
    \ 0\n    local distance = 0\n    for i = 1, #word do\n        local letter = word:sub(i,\
    \ i)\n        if table.contains(vowels, letter) then\n            vowel_index\
    \ = i\n            for j = i, 1, -1 do\n                local letter = word:sub(j,\
    \ j)\n                if table.contains(consonants, letter) then\n           \
    \         consonant_index = j\n                    break\n                end\n\
    \            end\n            distance = vowel_index - consonant_index\n     \
    \       if closest_distance == 0 or distance < closest_distance then\n       \
    \         closest_distance = distance\n                closest_vowel = letter\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local vowel_index = 0\n    local consonant_index = 0\n    local closest_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        if table.contains(vowels, word:sub(i,\
    \ i)) then\n            vowel_index = i\n            break\n        end\n    end\n\
    \    for i = vowel_index, 1, -1 do\n        if table.contains(consonants, word:sub(i,\
    \ i)) then\n            consonant_index = i\n            break\n        end\n\
    \    end\n    if consonant_index > 0 then\n        closest_vowel = word:sub(vowel_index,\
    \ vowel_index)\n    end\n    return closest_vowel\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local i = #word\n    while i > 0 do\n        if not\
    \ table.contains(vowels, word:sub(i, i)) then\n            i = i - 1\n       \
    \ else\n            return word:sub(i, i)\n        end\n    end\n    return ''\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n \
    \ for i = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.indexof(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end", "    local vowel = {'a', 'e', 'i', 'o', 'u'}\n    local index = #word\n\
    \    local result = ''\n    while index > 1 do\n        local char = word:sub(index,\
    \ index)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u' then\n            if word:sub(index - 1, index - 1) ~= 'a' and\
    \ word:sub(index - 1, index - 1) ~= 'e' and word:sub(index - 1, index - 1) ~=\
    \ 'i' and word:sub(index - 1, index - 1) ~= 'o' and word:sub(index - 1, index\
    \ - 1) ~= 'u' then\n                result = char\n                break\n   \
    \         end\n        end\n        index = index - 1\n    end\n    return result\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n \
    \ for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.indexof(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n    local word_len = #word\n    local i = word_len\n  \
    \  local found = false\n    local vowel = ''\n    while i > 0 do\n        local\
    \ c = word:sub(i, i)\n        if not found then\n            for _, v in ipairs(vowels)\
    \ do\n                if c == v then\n                    vowel = c\n        \
    \            found = true\n                    break\n                end\n  \
    \          end\n        else\n            for _, v in ipairs(consonants) do\n\
    \                if c == v then\n                    return vowel\n          \
    \      end\n            end\n        end\n        i = i - 1\n    end\n    return\
    \ ''\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel\
    \ = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n      \
    \  if table.contains(vowels, c) then\n            last_vowel = c\n           \
    \ break\n        end\n    end\n    return last_vowel\nend", "    -- TODO: implement\
    \ this function\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_vowel_index = 0\n    local closest_consonant_index = 0\n    local closest_consonant_index_2\
    \ = 0\n    local word_length = string.len(word)\n    local word_table = {}\n \
    \   for i = 1, word_length do\n        word_table[i] = string.sub(word, i, i)\n\
    \    end\n    for i = 1, word_length do\n        for j = 1, #vowels do\n     \
    \       if word_table[i] == vowels[j] then\n                for k = i, word_length\
    \ do\n                    for l = 1, #consonants do\n                        if\
    \ word_table[k] == consonants[l] then\n                            if k - i >\
    \ closest_consonant_index - closest_vowel_index then\n                       \
    \         closest_vowel = word_table[i]\n                                closest_vowel_index\
    \ = i\n                                closest_consonant_index = k\n         \
    \                   end\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    for i = 1, word_length\
    \ do\n        for j = 1, #consonants do\n            if word_table[i] == consonants[j]\
    \ then\n                for k = i, word_length do\n                    for l =\
    \ 1, #vowels do\n                        if word_table[k] == vowels[l] then\n\
    \                            if k - i > closest_consonant_index_2 - closest_vowel_index\
    \ then\n                                closest_vowel = word_table[k]\n      \
    \                          closest_vowel_index = k\n                         \
    \       closest_consonant_index_2 = i\n                            end\n     \
    \                   end\n", "    -- TODO: implement this function\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n    for\
    \ i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local result = ''\n \
    \   local vowel_index = 0\n    local consonant_index = 0\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if vowel_index == 0 and\
    \ consonant_index == 0 then\n            for _, v in ipairs(vowels) do\n     \
    \           if char == v then\n                    vowel_index = i\n         \
    \       end\n            end\n            for _, v in ipairs(consonants) do\n\
    \                if char == v then\n                    consonant_index = i\n\
    \                end\n            end\n        elseif vowel_index ~= 0 and consonant_index\
    \ == 0 then\n            for _, v in ipairs(consonants) do\n                if\
    \ char == v then\n                    consonant_index = i\n                end\n\
    \            end\n        end\n        if vowel_index ~= 0 and consonant_index\
    \ ~= 0 then\n            result = word:sub(vowel_index, vowel_index)\n       \
    \     break\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    local index = 0\n    local\
    \ index_2 = 0\n    local index_3 = 0\n    for i = 1, #word do\n        for j =\
    \ 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n           \
    \     index = i\n                break\n            end\n        end\n       \
    \ for k = 1, #consonants do\n            if word:sub(i, i) == consonants[k] then\n\
    \                index_2 = i\n                break\n            end\n       \
    \ end\n        if index_2 > index and index_2 > closest_consonant_index then\n\
    \            closest_consonant_index = index_2\n        end\n        if index\
    \ > closest_vowel_index then\n            closest_vowel_index = index\n      \
    \      closest_vowel = word:sub(index, index)\n        end\n    end\n    if closest_vowel_index\
    \ > closest_consonant_index then\n        return ''\n    end\n    for i = 1, #word\
    \ do\n        for k = 1, #consonants do\n            if word:sub(i, i) == consonants[k]\
    \ then\n                index_3 = i\n                break\n            end\n\
    \        end\n        if index_3 > closest_vowel_index and index_3 < closest_consonant_index\
    \ then\n            closest_consonant_index_2 = index_3\n        end\n    end\n\
    \    if closest_consonant_index_2 > closest_vowel_index then\n        return ''\n\
    \    end\n    return closest_vow", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel =\
    \ ''\n    local closest_vowel_index = 0\n    local closest_consonant_index = 0\n\
    \    for i = 1, #word do\n        if table.contains(vowels, word:sub(i, i)) then\n\
    \            for j = i, #word do\n                if table.contains(consonants,\
    \ word:sub(j, j)) then\n                    if j - i > closest_consonant_index\
    \ - closest_vowel_index then\n                        closest_vowel = word:sub(i,\
    \ i)\n                        closest_vowel_index = i\n                      \
    \  closest_consonant_index = j\n                    end\n                end\n\
    \            end\n        end\n    end\n    return closest_vowel\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'}\n    local word_len = string.len(word)\n    local vowel_index = 0\n   \
    \ local consonant_index = 0\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_vowel_distance = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_distance = 0\n    for i = 1, word_len do\n\
    \        local char = string.sub(word, i, i)\n        if table.contains(vowels,\
    \ char) then\n            vowel_index = i\n            if closest_vowel_index\
    \ == 0 then\n                closest_vowel_index = vowel_index\n             \
    \   closest_vowel = char\n            end\n            if closest_consonant_index\
    \ ~= 0 then\n                if vowel_index - closest_consonant_index < closest_vowel_distance\
    \ then\n                    closest_vowel_distance = vowel_index - closest_consonant_index\n\
    \                    closest_vowel_index = vowel_index\n                    closest_vowel\
    \ = char\n                end\n            end\n        elseif table.contains(consonants,\
    \ char) then\n            consonant_index = i\n            if closest_consonant_index\
    \ == 0 then\n                closest_consonant_index = consonant_index\n     \
    \       end\n            if closest_vowel_index ~= 0 then\n                if\
    \ consonant_index - closest_vowel_index < closest_consonant_distance then\n  \
    \                  closest_consonant_distance = consonant_index - closest_vowel_index\n\
    \                    closest_consonant_index = consonant_index\n             \
    \   end\n            end\n        end\n    end\n    return closest_vowel\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  local vowel_distance\
    \ = 0\n  local word_length = string.len(word)\n  for i = 1, word_length do\n \
    \   local char = string.sub(word, i, i)\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        local distance = word_length - i\n        if vowel_distance\
    \ == 0 or distance < vowel_distance then\n          vowel_distance = distance\n\
    \          vowel_index = i\n        end\n      end\n    end\n  end\n  if vowel_index\
    \ == 0 then\n    return ''\n  else\n    return string.sub(word, vowel_index, vowel_index)\n\
    \  end\nend", "    -- your code here\n    return ''\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n\
    \    local closest_vowel = ''\n    local closest_vowel_index = 0\n    local closest_consonant_index\
    \ = 0\n    local closest_consonant_index_2 = 0\n    local i = #word\n    while\
    \ i > 0 do\n        local char = word:sub(i, i)\n        if table.contains(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n            break\n        end\n        i = i - 1\n    end\n    if closest_vowel_index\
    \ == 0 then\n        return ''\n    end\n    i = closest_vowel_index\n    while\
    \ i > 0 do\n        local char = word:sub(i, i)\n        if table.contains(consonants,\
    \ char) then\n            closest_consonant_index = i\n            break\n   \
    \     end\n        i = i - 1\n    end\n    if closest_consonant_index == 0 then\n\
    \        return ''\n    end\n    i = closest_vowel_index\n    while i <= #word\
    \ do\n        local char = word:sub(i, i)\n        if table.contains(consonants,\
    \ char) then\n            closest_consonant_index_2 = i\n            break\n \
    \       end\n        i = i + 1\n    end\n    if closest_consonant_index_2 == 0\
    \ then\n        return ''\n    end\n    if closest_consonant_index_2 - closest_vowel_index\
    \ < closest_vowel_index - closest_consonant_index then\n        return ''\n  \
    \  end\n    return closest_vowel\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
