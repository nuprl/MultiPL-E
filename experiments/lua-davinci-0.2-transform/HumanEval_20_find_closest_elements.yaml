name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n\
  -- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n--\
  \ {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local min_diff = math.huge\n    local min_diff_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers - 1 do\n        local diff = math.abs(numbers[i]\
    \ - numbers[i + 1])\n        if diff < min_diff then\n            min_diff = diff\n\
    \            min_diff_elements = {numbers[i], numbers[i + 1]}\n        end\n \
    \   end\n    return min_diff_elements\nend", "    local min_diff = math.huge\n\
    \    local min_diff_elements = {numbers[1], numbers[2]}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend", "    local\
    \ min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n        \
    \    local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ then\n                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end", "    local min_diff = math.huge\n    local min_diff_elements = {numbers[1],\
    \ numbers[2]}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local diff = math.abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff then\n                min_diff = diff\n                min_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_diff_elements\nend", "    local min_distance = math.huge\n    local min_distance_elements\
    \ = {0, 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < min_distance then\n                min_distance = distance\n    \
    \            min_distance_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return min_distance_elements\nend", "    local smallest_difference\
    \ = math.huge\n    local smallest_difference_elements = {0, 0}\n    for i = 1,\
    \ #numbers - 1 do\n        for j = i + 1, #numbers do\n            local difference\
    \ = math.abs(numbers[i] - numbers[j])\n            if difference < smallest_difference\
    \ then\n                smallest_difference = difference\n                smallest_difference_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ smallest_difference_elements\nend", "  local min_diff = math.huge\n  local min_diff_elements\
    \ = {numbers[1], numbers[2]}\n  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      local diff = math.abs(numbers[i] - numbers[j])\n      if diff < min_diff\
    \ then\n        min_diff = diff\n        min_diff_elements = {numbers[i], numbers[j]}\n\
    \      end\n    end\n  end\n  return min_diff_elements\nend", "    local min_diff\
    \ = math.huge\n    local min_diff_numbers = {math.huge, math.huge}\n    for i\
    \ = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_numbers = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_numbers\n\
    end", "    local min_diff = math.huge\n    local min_elements = {math.huge, math.huge}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_elements\n\
    end", "    local closest_pair = {numbers[1], numbers[2]}\n    local closest_distance\
    \ = math.abs(numbers[1] - numbers[2])\n    for i = 1, #numbers - 1 do\n      \
    \  for j = i + 1, #numbers do\n            local distance = math.abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance then\n           \
    \     closest_distance = distance\n                closest_pair = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return closest_pair\n\
    end", "    local min_diff = math.huge\n    local min_diff_elements = {math.huge,\
    \ math.huge}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers\
    \ do\n            local diff = math.abs(numbers[i] - numbers[j])\n           \
    \ if diff < min_diff then\n                min_diff = diff\n                min_diff_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ min_diff_elements\nend", "    local min_distance = math.huge\n    local min_distance_elements\
    \ = {0, 0}\n    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < min_distance then\n                min_distance = distance\n    \
    \            min_distance_elements = {numbers[i], numbers[j]}\n            end\n\
    \        end\n    end\n    return min_distance_elements\nend", "  local closest_elements\
    \ = {numbers[1], numbers[2]}\n  local closest_distance = math.abs(numbers[1] -\
    \ numbers[2])\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n    \
    \  local distance = math.abs(numbers[i] - numbers[j])\n      if distance < closest_distance\
    \ then\n        closest_distance = distance\n        closest_elements = {numbers[i],\
    \ numbers[j]}\n      end\n    end\n  end\n  return closest_elements\nend", " \
    \   local min_diff = math.huge\n    local min_diff_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n\
    \                min_diff = diff\n                min_diff_elements = {numbers[i],\
    \ numbers[j]}\n            end\n        end\n    end\n    return min_diff_elements\n\
    end", "    local smallest_difference = math.huge\n    local smallest_difference_elements\
    \ = {0, 0}\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n \
    \           local difference = math.abs(numbers[i] - numbers[j])\n           \
    \ if difference < smallest_difference then\n                smallest_difference\
    \ = difference\n                smallest_difference_elements = {numbers[i], numbers[j]}\n\
    \            end\n        end\n    end\n    return smallest_difference_elements\n\
    end", "  local min_diff = math.huge\n  local min_diff_elements = {}\n  for i =\
    \ 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local diff = math.abs(numbers[i]\
    \ - numbers[j])\n      if diff < min_diff then\n        min_diff = diff\n    \
    \    min_diff_elements = {numbers[i], numbers[j]}\n      end\n    end\n  end\n\
    \  return min_diff_elements\nend", "    local min_diff = math.huge\n    local\
    \ min_diff_pair = {0, 0}\n    for i = 1, #numbers - 1 do\n        for j = i +\
    \ 1, #numbers do\n            local diff = math.abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff then\n                min_diff = diff\n      \
    \          min_diff_pair = {numbers[i], numbers[j]}\n            end\n       \
    \ end\n    end\n    return min_diff_pair\nend", "    local min_diff = math.huge\n\
    \    local min_diff_elements = {numbers[1], numbers[2]}\n    for i = 1, #numbers\
    \ - 1 do\n        for j = i + 1, #numbers do\n            local diff = math.abs(numbers[i]\
    \ - numbers[j])\n            if diff < min_diff then\n                min_diff\
    \ = diff\n                min_diff_elements = {numbers[i], numbers[j]}\n     \
    \       end\n        end\n    end\n    return min_diff_elements\nend", "    local\
    \ closest_diff = math.huge\n    local closest_elements = {numbers[1], numbers[2]}\n\
    \    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            local\
    \ diff = math.abs(numbers[i] - numbers[j])\n            if diff < closest_diff\
    \ then\n                closest_diff = diff\n                closest_elements\
    \ = {numbers[i], numbers[j]}\n            end\n        end\n    end\n    return\
    \ closest_elements\nend", "  local min_diff = math.huge\n  local min_diff_pair\
    \ = {0, 0}\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n   \
    \   local diff = math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n\
    \        min_diff = diff\n        min_diff_pair = {numbers[i], numbers[j]}\n \
    \     end\n    end\n  end\n  return min_diff_pair\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
