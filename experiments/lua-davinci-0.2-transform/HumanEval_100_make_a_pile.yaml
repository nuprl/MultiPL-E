name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a list, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- {3, 5, 7}\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pile = {}\n  for i = 1, n do\n    pile[i] = n + 2 * i - 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n + 2 * i - 1\n  end\n  return pile\nend", "    local result = {}\n    for\
    \ i = 1, n do\n        if i % 2 == 0 then\n            table.insert(result, i\
    \ + 1)\n        else\n            table.insert(result, i + 2)\n        end\n \
    \   end\n    return result\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = i * 2 - 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n\
    \ do\n    pile[i] = n + 2 * i - 1\n  end\n  return pile\nend", "  local pile =\
    \ {}\n  for i = 1, n do\n    pile[i] = n + 2 * i - 1\n  end\n  return pile\nend",
  "  local result = {}\n  for i = 1, n do\n    result[i] = n + 2 * i - 1\n  end\n\
    \  return result\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\
    \ * 2 - 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = n + 2 * i - 1\n  end\n  return pile\nend", "  local result = {}\n\
    \  for i = 1, n do\n    result[i] = n + 2 * i - 1\n  end\n  return result\nend",
  "  local pile = {}\n  for i = 1, n do\n    pile[i] = n + 2 * i - 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n + 2 * i -\
    \ 1\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while n\
    \ > 0 do\n    pile[i] = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n\
    \      n = n + 2\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = n + 2 * i - 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n + 2 * i - 1\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while n > 0 do\n  \
    \  pile[i] = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n\
    \ + 2\n    end\n    i = i + 1\n  end\n  return pile\nend", "    local pile = {}\n\
    \    for i = 1, n do\n        pile[i] = n + 2 * i - 1\n    end\n    return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i * 2 - 1\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n +\
    \ 2 * i - 1\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n \
    \ while n > 0 do\n    pile[i] = n\n    if n % 2 == 0 then\n      n = n + 1\n \
    \   else\n      n = n + 2\n    end\n    i = i + 1\n  end\n  return pile\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
