name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n--\
  \ >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5\
    \ + 1]\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n\
    \      c = c:lower()\n    else\n      c = c:upper()\n    end\n    for j = 1, #vowels\
    \ do\n      if c == vowels[j] then\n        c = vowels[(j + 2) % #vowels + 1]\n\
    \        break\n      end\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n     \
    \   end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n      encoded = encoded .. next_vowel\n    else\n      encoded\
    \ = encoded .. char:lower()\n    end\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            if index == #vowels then\n\
    \                char = vowels[1]\n            else\n                char = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c == c:upper() then\n            c = c:lower()\n        else\n\
    \            c = c:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local letter = message:sub(i, i)\n\
    \        if letter == letter:upper() then\n            letter = letter:lower()\n\
    \        else\n            letter = letter:upper()\n        end\n        if table.contains(vowels,\
    \ letter) then\n            local index = table.indexof(vowels, letter)\n    \
    \        if index == #vowels then\n                index = 1\n            else\n\
    \                index = index + 1\n            end\n            letter = vowels[index]\n\
    \        end\n        encoded = encoded .. letter\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ lower = char:lower()\n        if lower == char then\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, lower) then\n            local\
    \ index = table.indexof(vowels, lower)\n            char = vowels[(index + 2)\
    \ % #vowels + 1]\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded\
    \ .. vowels[index]\n        else\n            if char == char:upper() then\n \
    \               encoded = encoded .. char:lower()\n            else\n        \
    \        encoded = encoded .. char:upper()\n            end\n        end\n   \
    \ end\n    return encoded\nend", "    local result = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if char == 'a' then\n            char = 'c'\n        elseif\
    \ char == 'e' then\n            char = 'g'\n        elseif char == 'i' then\n\
    \            char = 'k'\n        elseif char == 'o' then\n            char = 'q'\n\
    \        elseif char == 'u' then\n            char = 'y'\n        end\n      \
    \  result = result .. char\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local result = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ result = result .. char:lower()\n        else\n            result = result ..\
    \ char:upper()\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels + 1]\n                    break\n                end\n      \
    \      end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor\
    \ i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel =\
    \ false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\t\
    local index = (string.find(vowels, char) + 2) % #vowels\n\t\t\tif index == 0 then\n\
    \t\t\t\tindex = #vowels\n\t\t\tend\n\t\t\tchar = vowels[index]\n\t\tend\n\t\t\
    if char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar\
    \ = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\n\
    end", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    local is_vowel = vowels:find(lower)\n\
    \    if is_vowel then\n      local index = alphabet:find(lower)\n      local new_index\
    \ = index + 2\n      if new_index > #alphabet then\n        new_index = new_index\
    \ - #alphabet\n      end\n      char = alphabet:sub(new_index, new_index)\n  \
    \  end\n    if char == char:lower() then\n      char = char:upper()\n    else\n\
    \      char = char:lower()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 26 + 1\n        \
    \    char = string.char(index + 96)\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local nextVowel = vowels[j + 2]\n      \
    \      if not nextVowel then\n                nextVowel = vowels[1]\n        \
    \    end\n            char = nextVowel\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            local index =\
    \ table.indexof(vowels, char)\n            local next_index = index + 2\n    \
    \        if next_index > #vowels then\n                next_index = next_index\
    \ - #vowels\n            end\n            char = vowels[next_index]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % #vowels]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            char = vowels[(index + 2) %\
    \ #vowels + 1]\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j % #vowels) + 1]\n            encoded = encoded .. next_vowel\n \
    \       else\n            if char == char:upper() then\n                encoded\
    \ = encoded .. char:lower()\n            else\n                encoded = encoded\
    \ .. char:upper()\n            end\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        if c\
    \ == c:upper() then\n            c = c:lower()\n        else\n            c =\
    \ c:upper()\n        end\n        if table.indexOf(vowels, c) then\n         \
    \   local index = table.indexOf(vowels, c)\n            if index == #vowels then\n\
    \                c = vowels[1]\n            else\n                c = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. c\n    end\n\
    \    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        local index = alphabet:find(lower)\n        if index then\n         \
    \   local is_vowel = vowels:find(lower)\n            if is_vowel then\n      \
    \          index = index + 2\n                if index > #alphabet then\n    \
    \                index = index - #alphabet\n                end\n            end\n\
    \            local new_char = alphabet:sub(index, index)\n            if char\
    \ == char:upper() then\n                new_char = new_char:upper()\n        \
    \    end\n            encoded = encoded .. new_char\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded[#encoded + 1] = char\n\
    \    end\n    return table.concat(encoded)\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j + 2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char:upper()\n    end\n    return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded_message = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local is_vowel = false\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n\
    \        break\n      end\n    end\n    if is_vowel then\n      local next_char\
    \ = message:sub(i + 1, i + 1)\n      local next_next_char = message:sub(i + 2,\
    \ i + 2)\n      if next_char == nil then\n        next_char = ''\n      end\n\
    \      if next_next_char == nil then\n        next_next_char = ''\n      end\n\
    \      encoded_message = encoded_message .. next_next_char .. next_char\n    else\n\
    \      encoded_message = encoded_message .. char\n    end\n  end\n  return encoded_message\n\
    end", "    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        if char == 'a' then\n            char = 'c'\n        elseif char == 'e'\
    \ then\n            char = 'g'\n        elseif char == 'i' then\n            char\
    \ = 'k'\n        elseif char == 'o' then\n            char = 'q'\n        elseif\
    \ char == 'u' then\n            char = 'y'\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[j + 2]\n            if next_vowel\
    \ == nil then\n                next_vowel = vowels[1]\n            end\n     \
    \       encoded = encoded .. next_vowel\n        else\n            if char ==\
    \ char:upper() then\n                encoded = encoded .. char:lower()\n     \
    \       else\n                encoded = encoded .. char:upper()\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local is_vowel = false\n        for\
    \ j = 1, #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            if char == char:upper()\
    \ then\n                encoded = encoded .. char:lower()\n            else\n\
    \                encoded = encoded .. char:upper()\n            end\n        end\n\
    \    end\n    return encoded\nend", "    -- TODO: implement\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = 0\n            for j = 1,\
    \ #alphabet do\n                if char == alphabet[j] then\n                \
    \    index = j\n                    break\n                end\n            end\n\
    \            local new_index = index + 2\n            if new_index > #alphabet\
    \ then\n                new_index = new_index - #alphabet\n            end\n \
    \           char = alphabet[new_index]\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    index = index + 2\n            if index > #vowels then\n                index\
    \ = index - #vowels\n            end\n            char = vowels[index]\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "    local encoded = ''\n    for i =\
    \ 1, #message do\n        local char = message:sub(i, i)\n        if char:match('[a-z]')\
    \ then\n            encoded = encoded .. char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            encoded = encoded .. char:lower()\n        else\n        \
    \    encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local upper\
    \ = char:upper() == char\n        char = char:lower()\n        if upper then\n\
    \            char = char:upper()\n        end\n        if char == 'z' then\n \
    \           char = 'b'\n        elseif char == 'Z' then\n            char = 'B'\n\
    \        elseif char == ' ' then\n            char = ' '\n        elseif char\
    \ == '.' then\n            char = '.'\n        elseif char == ',' then\n     \
    \       char = ','\n        elseif char == '!' then\n            char = '!'\n\
    \        elseif char == '?' then\n            char = '?'\n        elseif char\
    \ == '\\'' then\n            char = '\\''\n        elseif char == '\"' then\n\
    \            char = '\"'\n        elseif char == '-' then\n            char =\
    \ '-'\n        elseif char == ':' then\n            char = ':'\n        elseif\
    \ char == ';' then\n            char = ';'\n        elseif char == '(' then\n\
    \            char = '('\n        elseif char == ')' then\n            char = ')'\n\
    \        elseif char == '[' then\n            char = '['\n        elseif char\
    \ == ']' then\n            char = ']'\n        elseif char == '{' then\n     \
    \       char = '{'\n        elseif char == '}' then\n            char = '}'\n\
    \        elseif char == '<' then\n            char = '<'\n        elseif char\
    \ == '>' then\n            char = '>'\n        elseif char == '=' then\n     \
    \       char = '='\n        elseif char == '+' then\n            char = '+'\n\
    \        elseif char == '-' then\n            char = '-'\n        elseif char\
    \ == '*' then\n            char = '*'\n        elseif char == '/' then\n     \
    \       char = '/'\n        elseif char == '\\\\' then\n            char = '\\\
    \\'\n        elseif char == '|' then\n            char =", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j % #vowels) + 1]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local char_lower\
    \ = char:lower()\n        if char_lower == char then\n            char = char:upper()\n\
    \        end\n        if table.index_of(vowels, char_lower) then\n           \
    \ char = vowels[(table.index_of(vowels, char_lower) + 2) % 5 + 1]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local index = (string.byte(char) - 96) %\
    \ 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n      \
    \      if string.byte(char) >= 97 and string.byte(char) <= 122 then\n        \
    \        encoded = encoded .. string.char(string.byte(char) - 32)\n          \
    \  elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n         \
    \       encoded = encoded .. string.char(string.byte(char) + 32)\n           \
    \ else\n                encoded = encoded .. char\n            end\n        end\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    local next_index = (index + 2) % #vowels\n            char = vowels[next_index]\n\
    \        end\n        table.insert(encoded, char)\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        if c\
    \ == c:upper() then\n            c = c:lower()\n        else\n            c =\
    \ c:upper()\n        end\n        if table.indexOf(vowels, c) then\n         \
    \   local index = table.indexOf(vowels, c)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 2\n            end\n            c = vowels[index]\n        end\n        table.insert(encoded,\
    \ c)\n    end\n    return table.concat(encoded)\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  -- TODO: implement this function\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for _, vowel in ipairs(vowels) do\n            if char == vowel then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = string.find(vowels,\
    \ char)\n            if index == #vowels then\n                index = 1\n   \
    \         else\n                index = index + 1\n            end\n         \
    \   char = vowels[index]\n        end\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", end, "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            result = result .. vowels[index]\n        else\n\
    \            result = result .. char\n        end\n    end\n    return result\n\
    end", "  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if char == 'a' then\n      char = 'c'\n\
    \    elseif char == 'e' then\n      char = 'g'\n    elseif char == 'i' then\n\
    \      char = 'k'\n    elseif char == 'o' then\n      char = 'q'\n    elseif char\
    \ == 'u' then\n      char = 'y'\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\
    \t\tlocal isVowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j]\
    \ then\n\t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel\
    \ then\n\t\t\tlocal index = (string.find(vowels, char) + 2) % 5\n\t\t\tif index\
    \ == 0 then index = 5 end\n\t\t\tencoded = encoded .. vowels[index]\n\t\telse\n\
    \t\t\tencoded = encoded .. char:upper()\n\t\tend\n\tend\n\treturn encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        local found = false\n        for\
    \ j = 1, #vowels do\n            if char == vowels[j] then\n                found\
    \ = true\n                char = vowels[(j + 2) % #vowels]\n            end\n\
    \        end\n        if not found then\n            char = char\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  -- TODO:\
    \ implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    if index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = 0\n            for j = 1,\
    \ #alphabet do\n                if char == alphabet[j] then\n                \
    \    index = j\n                    break\n                end\n            end\n\
    \            if index + 2 > #alphabet then\n                index = index + 2\
    \ - #alphabet\n            else\n                index = index + 2\n         \
    \   end\n            char = alphabet[index]\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local function\
    \ encode_letter(letter)\n        if letter == ' ' then\n            return ' '\n\
    \        end\n        local letter_index = string.find(alphabet, letter)\n   \
    \     if letter_index == nil then\n            return letter\n        end\n  \
    \      local encoded_letter_index = letter_index + 2\n        if encoded_letter_index\
    \ > #alphabet then\n            encoded_letter_index = encoded_letter_index -\
    \ #alphabet\n        end\n        return string.sub(alphabet, encoded_letter_index,\
    \ encoded_letter_index)\n    end\n    local encoded_message = ''\n    for i =\
    \ 1, #message do\n        local letter = string.sub(message, i, i)\n        encoded_message\
    \ = encoded_message .. encode_letter(letter)\n    end\n    return encoded_message\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c == c:upper() then\n            c = c:lower()\n        else\n\
    \            c = c:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j % #vowels) + 1]\n            encoded = encoded .. next_vowel\n \
    \       else\n            encoded = encoded .. char:upper()\n        end\n   \
    \ end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            index = index + 2\n       \
    \     if index > #vowels then\n                index = index - #vowels\n     \
    \       end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local result = {}\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local lower = char:lower()\n  \
    \      local upper = char:upper()\n        if lower == upper then\n          \
    \  table.insert(result, char)\n        elseif lower == char then\n           \
    \ if lower == 'z' then\n                table.insert(result, 'A')\n          \
    \  elseif lower == 'y' then\n                table.insert(result, 'B')\n     \
    \       else\n                local next = message:sub(i + 1, i + 1)\n       \
    \         local next_lower = next:lower()\n                local next_upper =\
    \ next:upper()\n                if next_lower == next_upper then\n           \
    \         table.insert(result, upper)\n                elseif next_lower == next\
    \ then\n                    table.insert(result, next_upper)\n               \
    \ else\n                    table.insert(result, next_lower)\n               \
    \ end\n            end\n        else\n            if lower == 'a' then\n     \
    \           table.insert(result, 'C')\n            elseif lower == 'b' then\n\
    \                table.insert(result, 'D')\n            else\n               \
    \ local next = message:sub(i + 1, i + 1)\n                local next_lower = next:lower()\n\
    \                local next_upper = next:upper()\n                if next_lower\
    \ == next_upper then\n                    table.insert(result, lower)\n      \
    \          elseif next_lower == next then\n                    table.insert(result,\
    \ next_upper)\n                else\n                    table.insert(result,\
    \ next_lower)\n                end\n            end\n        end\n    end\n  \
    \  return table.concat(result)\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char == char:upper() then\n            char\
    \ = char:lower()\n        else\n            char = char:upper()\n        end\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          char = vowels[(j + 2) % 5 + 1]\n                break\n           \
    \ end\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local is_vowel = false\n \
    \           for j = 1, #vowels do\n                if char == vowels:sub(j, j)\
    \ then\n                    is_vowel = true\n                    break\n     \
    \           end\n            end\n            if is_vowel then\n             \
    \   local index = alphabet:find(char)\n                local new_index = index\
    \ + 2\n                if new_index > #alphabet then\n                    new_index\
    \ = new_index - #alphabet\n                end\n                char = alphabet:sub(new_index,\
    \ new_index)\n            end\n            if char:match('%l') then\n        \
    \        char = char:upper()\n            else\n                char = char:lower()\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n\
    \        end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for _, vowel in ipairs(vowels) do\n            if char ==\
    \ vowel then\n                char = vowels[((vowels[vowel] or 0) + 2) % 5 + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local letter = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if letter == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(letter)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if letter == letter:upper() then\n                encoded = encoded\
    \ .. letter:lower()\n            else\n                encoded = encoded .. letter:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (j + 2) % #vowels\n\
    \            if index == 0 then\n                index = #vowels\n           \
    \ end\n            char = vowels[index]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ letter = message:sub(i, i)\n        local is_vowel = false\n        for j =\
    \ 1, #vowels do\n            if letter == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[j + 2]\n            if next_vowel\
    \ == nil then\n                next_vowel = vowels[1]\n            end\n     \
    \       encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. letter:upper()\n        end\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        char = vowels[(j + 2) %\
    \ #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    local\
    \ is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local index = (string.find(vowels, char) + 2) % #vowels\n      if index\
    \ == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    encoded = encoded .. char:upper()\n  end\n  return encoded\nend",
  "    -- TODO: implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[j + 2]\n            if next_vowel == nil then\n\
    \                next_vowel = vowels[1]\n            end\n            encoded\
    \ = encoded .. next_vowel\n        else\n            encoded = encoded .. char:upper()\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[j + 2]\n                break\n            end\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local encoded = ''\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexof(vowels, char) then\n            char = vowels[(table.indexof(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ encoded = ''\n\tfor i = 1, #message do\n\t\tlocal c = message:sub(i, i)\n\t\t\
    if c == c:upper() then\n\t\t\tc = c:lower()\n\t\telse\n\t\t\tc = c:upper()\n\t\
    \tend\n\t\tfor j = 1, #vowels do\n\t\t\tif c == vowels[j] then\n\t\t\t\tc = vowels[(j\
    \ + 2) % #vowels]\n\t\t\tend\n\t\tend\n\t\tencoded = encoded .. c\n\tend\n\treturn\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local is_vowel =\
    \ false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ next_vowel = vowels[(j % #vowels) + 1]\n      encoded = encoded .. next_vowel\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded:upper()\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local letter = message:sub(i, i)\n      \
    \  if letter == letter:upper() then\n            letter = letter:lower()\n   \
    \     else\n            letter = letter:upper()\n        end\n        for j =\
    \ 1, #vowels do\n            if letter == vowels[j] then\n                letter\
    \ = vowels[(j + 2) % #vowels]\n            end\n        end\n        encoded =\
    \ encoded .. letter\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j % #vowels + 1]\n\
    \            local next_vowel_index = message:find(next_vowel, i)\n          \
    \  if next_vowel_index then\n                local next_vowel_index_2 = message:find(next_vowel,\
    \ next_vowel_index + 1)\n                if next_vowel_index_2 then\n        \
    \            char = message:sub(next_vowel_index_2, next_vowel_index_2)\n    \
    \            end\n            end\n        end\n        encoded = encoded .. char:upper()\n\
    \    end\n    return encoded\nend", "    local encoded = ''\n    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = alphabet:find(char)\n            char\
    \ = alphabet:sub(index + 2, index + 2)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ c = message:sub(i, i)\n        if c:match('%a') then\n            if c:match('%l')\
    \ then\n                c = c:upper()\n            else\n                c = c:lower()\n\
    \            end\n            for j = 1, #vowels do\n                if c == vowels[j]\
    \ then\n                    c = vowels[(j + 2) % #vowels + 1]\n              \
    \      break\n                end\n            end\n        end\n        encoded\
    \ = encoded .. c\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local index = (string.find(vowels, char) + 2) % #vowels\n\
    \      if index == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    encoded[i] = char:upper()\n  end\n  return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ isVowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                isVowel = true\n                break\n            end\n\
    \        end\n        if isVowel then\n            local nextVowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. nextVowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded:upper()\n\
    end", "  -- TODO\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local c = message:sub(i, i)\n    local is_vowel\
    \ = false\n    for j = 1, #vowels do\n      if c == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, c) + 2) % #vowels\n      if index == 0 then\n \
    \       index = #vowels\n      end\n      encoded = encoded .. vowels[index]\n\
    \    else\n      encoded = encoded .. c\n    end\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            if char == char:upper() then\n    \
    \            encoded = encoded .. char:lower()\n            else\n           \
    \     encoded = encoded .. char:upper()\n            end\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            local index =\
    \ table.indexof(vowels, char)\n            if index == #vowels then\n        \
    \        index = 1\n            else\n                index = index + 1\n    \
    \        end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local function encode_char(char)\n\
    \        local char_code = string.byte(char)\n        local is_upper = char_code\
    \ >= 65 and char_code <= 90\n        local is_lower = char_code >= 97 and char_code\
    \ <= 122\n        local is_vowel = char == 'a' or char == 'e' or char == 'i' or\
    \ char == 'o' or char == 'u'\n        local is_vowel_upper = char == 'A' or char\
    \ == 'E' or char == 'I' or char == 'O' or char == 'U'\n        if is_upper then\n\
    \            if is_vowel_upper then\n                return string.char(char_code\
    \ + 2)\n            else\n                return string.char(char_code + 32)\n\
    \            end\n        elseif is_lower then\n            if is_vowel then\n\
    \                return string.char(char_code - 22)\n            else\n      \
    \          return string.char(char_code - 32)\n            end\n        else\n\
    \            return char\n        end\n    end\n    local encoded_message = ''\n\
    \    for i = 1, #message do\n        encoded_message = encoded_message .. encode_char(message:sub(i,\
    \ i))\n    end\n    return encoded_message\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  local char\n  for i = 1, #message do\n\
    \    char = message:sub(i, i)\n    if char == char:upper() then\n      char =\
    \ char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        char = vowels[(j % #vowels) + 1]\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    if vowels:find(char) then\n      local\
    \ index = vowels:find(char)\n      char = vowels:sub(index + 2, index + 2)\n \
    \   end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:find('%a') then\n    \
    \        if c:find('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels + 1]\n                    break\n                end\n      \
    \      end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "    -- TODO: Implement this function\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char\
    \ = message:sub(i, i)\n    local isVowel = false\n    for j = 1, #vowels do\n\
    \      if char == vowels[j] then\n        isVowel = true\n        break\n    \
    \  end\n    end\n    if isVowel then\n      local nextVowel = vowels[(j % #vowels)\
    \ + 1]\n      encoded = encoded .. nextVowel\n    else\n      local ascii = string.byte(char)\n\
    \      if ascii >= 65 and ascii <= 90 then\n        encoded = encoded .. string.char(ascii\
    \ + 32)\n      elseif ascii >= 97 and ascii <= 122 then\n        encoded = encoded\
    \ .. string.char(ascii - 32)\n      else\n        encoded = encoded .. char\n\
    \      end\n    end\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local new_char = string.char(string.byte(char)\
    \ + 2)\n            encoded = encoded .. new_char\n        else\n            if\
    \ char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels[j] then\n          \
    \      is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (string.byte(char) - 96)\
    \ % 5 + 1\n            char = vowels[index]\n        end\n        if char:match('%a')\
    \ then\n            if char == char:upper() then\n                char = char:lower()\n\
    \            else\n                char = char:upper()\n            end\n    \
    \    end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[j\
    \ + 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local upper = char:upper()\
    \ == char\n        local lower = char:lower() == char\n        if upper then\n\
    \            char = char:lower()\n        end\n        if lower then\n       \
    \     char = char:upper()\n        end\n        for j = 1, #vowels do\n      \
    \      if char == vowels[j] then\n                char = vowels[(j % #vowels)\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local upper\
    \ = char:upper()\n        local lower = char:lower()\n        if upper == lower\
    \ then\n            encoded = encoded .. char\n        elseif upper == char then\n\
    \            encoded = encoded .. lower\n        else\n            encoded = encoded\
    \ .. upper\n        end\n    end\n    return encoded\nend", "    -- TODO: implement\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for\
    \ i = 1, #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n\
    \      result = result .. c:lower()\n    else\n      result = result .. c:upper()\n\
    \    end\n    for j = 1, #vowels do\n      if c == vowels[j] then\n        result\
    \ = result .. vowels[(j + 2) % 5 + 1]\n      end\n    end\n  end\n  return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local isVowel =\
    \ false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel\
    \ = true\n        break\n      end\n    end\n    if isVowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      encoded = encoded .. vowels[index]\n\
    \    else\n      if char == char:upper() then\n        encoded = encoded .. char:lower()\n\
    \      else\n        encoded = encoded .. char:upper()\n      end\n    end\n \
    \ end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char:match('[a-z]')\
    \ then\n      char = char:upper()\n    elseif char:match('[A-Z]') then\n     \
    \ char = char:lower()\n    end\n    if char:match('[aeiou]') then\n      local\
    \ index = string.find('aeiou', char)\n      char = 'aeiou':sub(index + 2, index\
    \ + 2)\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % 5 + 1]\n                break\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j+2]\n                break\n          \
    \  end\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char:match('[a-z]') then\n            if char\
    \ == char:upper() then\n                char = char:lower()\n            else\n\
    \                char = char:upper()\n            end\n            if char ==\
    \ 'a' then\n                char = 'c'\n            elseif char == 'e' then\n\
    \                char = 'g'\n            elseif char == 'i' then\n           \
    \     char = 'k'\n            elseif char == 'o' then\n                char =\
    \ 'q'\n            elseif char == 'u' then\n                char = 'y'\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n    \
    \    if c == c:upper() then\n            c = c:lower()\n        else\n       \
    \     c = c:upper()\n        end\n        if table.contains(vowels, c) then\n\
    \            local index = table.indexof(vowels, c)\n            c = vowels[(index\
    \ + 2) % #vowels + 1]\n        end\n        encoded = encoded .. c\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char\n       \
    \ end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) + 2) - string.byte('a')\n\
    \            encoded = encoded .. string.char(string.byte('a') + index % 26)\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            char = next_vowel:upper()\n\
    \        else\n            char = char:lower()\n        end\n        encoded[#encoded\
    \ + 1] = char\n    end\n    return table.concat(encoded)\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    if char == char:upper() then\n      char\
    \ = char:lower()\n    else\n      char = char:upper()\n    end\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        char = vowels[(j + 2) %\
    \ #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j % #vowels) + 1]\n            encoded = encoded .. next_vowel\n \
    \       else\n            encoded = encoded .. char\n        end\n    end\n  \
    \  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    local is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        is_vowel = true\n        break\n      end\n    end\n    if is_vowel\
    \ then\n      local index = (string.find(vowels, char) + 2) % #vowels\n      if\
    \ index == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    local\
    \ is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local index = (string.find(vowels, char) + 2) % #vowels\n      if index\
    \ == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    encoded = encoded .. char:upper()\n  end\n  return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local letter = message:sub(i, i)\n    local isVowel = false\n\
    \    for j = 1, #vowels do\n      if letter == vowels[j] then\n        isVowel\
    \ = true\n        break\n      end\n    end\n    if isVowel then\n      local\
    \ nextVowel = vowels[((j + 2) % #vowels) + 1]\n      encoded = encoded .. nextVowel\n\
    \    else\n      encoded = encoded .. letter:upper()\n    end\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n\
    \        end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  -- TODO: implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('%a') then\n  \
    \          local is_vowel = false\n            for j = 1, #vowels do\n       \
    \         if char == vowels:sub(j, j) then\n                    is_vowel = true\n\
    \                    break\n                end\n            end\n           \
    \ if is_vowel then\n                local index = alphabet:find(char)\n      \
    \          local new_index = index + 2\n                if new_index > #alphabet\
    \ then\n                    new_index = new_index - #alphabet\n              \
    \  end\n                char = alphabet:sub(new_index, new_index)\n          \
    \  end\n            if char:match('%l') then\n                char = char:upper()\n\
    \            else\n                char = char:lower()\n            end\n    \
    \    end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local letter = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if letter == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[j +\
    \ 2]\n            if next_vowel == nil then\n                next_vowel = vowels[1]\n\
    \            end\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. letter:lower()\n        end\n    end\n    return\
    \ encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local\
    \ vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n     \
    \   local char = message:sub(i, i)\n        if char:match('%a') then\n       \
    \     local is_upper = char:match('%u')\n            local is_vowel = vowels:find(char:lower())\n\
    \            local index = alphabet:find(char:lower())\n            if is_vowel\
    \ then\n                index = index + 2\n                if index > #alphabet\
    \ then\n                    index = index - #alphabet\n                end\n \
    \           end\n            if is_upper then\n                encoded = encoded\
    \ .. alphabet:sub(index, index):upper()\n            else\n                encoded\
    \ = encoded .. alphabet:sub(index, index)\n            end\n        else\n   \
    \         encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "  -- TODO: implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n\tlocal encoded = {}\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i,\
    \ i)\n\t\tlocal isVowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j]\
    \ then\n\t\t\t\tisVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel\
    \ then\n\t\t\tlocal index = (string.find('aeiou', char) + 2) % 5\n\t\t\tif index\
    \ == 0 then index = 5 end\n\t\t\tchar = vowels[index]\n\t\tend\n\t\tif char ==\
    \ char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar = char:upper()\n\
    \t\tend\n\t\ttable.insert(encoded, char)\n\tend\n\treturn table.concat(encoded)\n\
    end", "  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    if lower:find('[aeiou]') then\n    \
    \  local index = lower:byte() - 97\n      local next = (index + 2) % 26\n    \
    \  char = string.char(next + 97)\n    end\n    if char:find('[a-z]') then\n  \
    \    char = char:upper()\n    else\n      char = char:lower()\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "  local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local letter\
    \ = message:sub(i, i)\n    if letter == letter:upper() then\n      letter = letter:lower()\n\
    \    else\n      letter = letter:upper()\n    end\n    local found = false\n \
    \   for j = 1, #vowels do\n      if letter == vowels[j] then\n        letter =\
    \ vowels[(j + 2) % 5 + 1]\n        found = true\n        break\n      end\n  \
    \  end\n    if not found then\n      letter = letter\n    end\n    encoded = encoded\
    \ .. letter\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % 5 + 1]\n                break\n     \
    \       end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            if char == char:upper()\
    \ then\n                encoded = encoded .. char:lower()\n            else\n\
    \                encoded = encoded .. char:upper()\n            end\n        end\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            encoded = encoded\
    \ .. next_vowel\n        else\n            encoded = encoded .. char:lower()\n\
    \        end\n    end\n    return encoded:upper()\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        local char_index = alphabet:find(char_lower)\n        if char_index then\n\
    \            local new_char_index = char_index + 2\n            if new_char_index\
    \ > #alphabet then\n                new_char_index = new_char_index - #alphabet\n\
    \            end\n            local new_char = alphabet:sub(new_char_index, new_char_index)\n\
    \            if vowels:find(new_char) then\n                encoded = encoded\
    \ .. new_char:upper()\n            else\n                encoded = encoded ..\
    \ new_char:lower()\n            end\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels[j] then\n          \
    \      is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (string.byte(char) - 96)\
    \ % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n    \
    \        encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", end, "    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char:match('[a-z]') then\n            encoded\
    \ = encoded .. char:upper()\n        elseif char:match('[A-Z]') then\n       \
    \     encoded = encoded .. char:lower()\n        elseif char:match('[aeiou]')\
    \ then\n            local index = string.find('aeiou', char)\n            encoded\
    \ = encoded .. 'aeiou':sub(index + 2, index + 2)\n        else\n            encoded\
    \ = encoded .. char\n        end\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char == char:upper() then\n \
    \     char = char:lower()\n    else\n      char = char:upper()\n    end\n    for\
    \ j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('[a-z]') then\n\
    \            encoded = encoded .. char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            encoded = encoded .. char:lower()\n        else\n        \
    \    encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for _, v in ipairs(vowels) do\n            if char == v then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[((i\
    \ % #vowels) + 1)]\n            encoded = encoded .. next_vowel:upper()\n    \
    \    else\n            encoded = encoded .. char:lower()\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % #vowels]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local new_message = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        new_message = new_message\
    \ .. char\n    end\n    return new_message\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n      c = c:lower()\n\
    \    else\n      c = c:upper()\n    end\n    for _, v in ipairs(vowels) do\n \
    \     if c == v then\n        c = vowels[((vowels[v] or 0) + 2) % #vowels + 1]\n\
    \        break\n      end\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n \
    \   for i = 1, #message do\n        local c = message:sub(i, i)\n        if c:lower()\
    \ == c then\n            c = c:upper()\n        else\n            c = c:lower()\n\
    \        end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels + 1]\n                break\n  \
    \          end\n        end\n        result = result .. c\n    end\n    return\
    \ result\nend", "  -- TODO: implement this function\nend", "    local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local char_lower = char:lower()\n        local char_upper = char:upper()\n\
    \        if char_lower == char_upper then\n            encoded = encoded .. char\n\
    \        elseif char_lower == char then\n            encoded = encoded .. char_upper\n\
    \        else\n            encoded = encoded .. char_lower\n        end\n    \
    \    if vowels:find(char_lower) then\n            local index = vowels:find(char_lower)\n\
    \            if index == #vowels then\n                index = 1\n           \
    \ else\n                index = index + 2\n            end\n            encoded\
    \ = encoded .. alphabet:sub(index, index)\n        end\n    end\n    return encoded\n\
    end", "  -- TODO: Implement\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if char ==\
    \ 'z' then\n            char = 'b'\n        elseif char == 'y' then\n        \
    \    char = 'a'\n        elseif char == 'x' then\n            char = 'z'\n   \
    \     else\n            char = string.char(string.byte(char) + 2)\n        end\n\
    \        for _,vowel in ipairs(vowels) do\n            if char == vowel then\n\
    \                char = 'i'\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            local index =\
    \ table.indexof(vowels, char)\n            if index == #vowels then\n        \
    \        index = 1\n            else\n                index = index + 1\n    \
    \        end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j + 2]\n      \
    \      if not next_vowel then\n                next_vowel = vowels[1]\n      \
    \      end\n            encoded = encoded .. next_vowel\n        else\n      \
    \      encoded = encoded .. char:upper()\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[j + 2]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels do\n \
    \     if char == vowels[j] then\n        is_vowel = true\n        break\n    \
    \  end\n    end\n    if is_vowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      char = vowels[index]\n    end\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    encoded = encoded .. char\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[((j + 2) % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local is_vowel =\
    \ false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n      if index == 0 then\n\
    \        index = #vowels\n      end\n      char = vowels[index]\n    end\n   \
    \ encoded = encoded .. char:upper()\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (string.byte(char) - 96)\
    \ % 5 + 1\n            char = vowels[index]\n        end\n        if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n            char = string.char(string.byte(char)\
    \ - 32)\n        elseif string.byte(char) >= 65 and string.byte(char) <= 90 then\n\
    \            char = string.char(string.byte(char) + 32)\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local c = message:sub(i, i)\n    if c == c:upper() then\n      c = c:lower()\n\
    \    else\n      c = c:upper()\n    end\n    for j = 1, #vowels do\n      if c\
    \ == vowels[j] then\n        c = vowels[(j + 2) % #vowels]\n      end\n    end\n\
    \    encoded = encoded .. c\n  end\n  return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (string.byte(char) - 96)\
    \ % 5 + 1\n            char = vowels[index]\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if c == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (c:byte() -\
    \ 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            encoded = encoded .. c:lower()\n        end\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        local lower = c:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_c = alphabet:sub(index,\
    \ index)\n            if c == c:upper() then\n                new_c = new_c:upper()\n\
    \            end\n            encoded = encoded .. new_c\n        else\n     \
    \       encoded = encoded .. c\n        end\n    end\n    return encoded\nend",
  "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local lower = char:lower()\n        local index = alphabet:find(lower)\n\
    \        if index then\n            local is_vowel = vowels:find(lower)\n    \
    \        if is_vowel then\n                index = index + 2\n               \
    \ if index > #alphabet then\n                    index = index - #alphabet\n \
    \               end\n            end\n            local new_char = alphabet:sub(index,\
    \ index)\n            if char == char:upper() then\n                new_char =\
    \ new_char:upper()\n            end\n            encoded = encoded .. new_char\n\
    \        else\n            encoded = encoded .. char\n        end\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded[#encoded + 1] = char\n  end\n  return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
