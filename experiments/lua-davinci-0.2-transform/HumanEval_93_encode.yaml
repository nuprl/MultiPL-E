name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n--\
  \ >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5\
    \ + 1]\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local c = message:sub(i, i)\n    if c == c:upper() then\n\
    \      c = c:lower()\n    else\n      c = c:upper()\n    end\n    for j = 1, #vowels\
    \ do\n      if c == vowels[j] then\n        c = vowels[(j + 2) % #vowels + 1]\n\
    \        break\n      end\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n     \
    \   end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n      encoded = encoded .. next_vowel\n    else\n      encoded\
    \ = encoded .. char:lower()\n    end\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            if index == #vowels then\n\
    \                char = vowels[1]\n            else\n                char = vowels[index\
    \ + 1]\n            end\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i,\
    \ i)\n        if c == c:upper() then\n            c = c:lower()\n        else\n\
    \            c = c:upper()\n        end\n        for j = 1, #vowels do\n     \
    \       if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local letter = message:sub(i, i)\n\
    \        if letter == letter:upper() then\n            letter = letter:lower()\n\
    \        else\n            letter = letter:upper()\n        end\n        if table.contains(vowels,\
    \ letter) then\n            local index = table.indexof(vowels, letter)\n    \
    \        if index == #vowels then\n                index = 1\n            else\n\
    \                index = index + 1\n            end\n            letter = vowels[index]\n\
    \        end\n        encoded = encoded .. letter\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ lower = char:lower()\n        if lower == char then\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, lower) then\n            local\
    \ index = table.indexof(vowels, lower)\n            char = vowels[(index + 2)\
    \ % #vowels + 1]\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded\
    \ .. vowels[index]\n        else\n            if char == char:upper() then\n \
    \               encoded = encoded .. char:lower()\n            else\n        \
    \        encoded = encoded .. char:upper()\n            end\n        end\n   \
    \ end\n    return encoded\nend", "    local result = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if char == 'a' then\n            char = 'c'\n        elseif\
    \ char == 'e' then\n            char = 'g'\n        elseif char == 'i' then\n\
    \            char = 'k'\n        elseif char == 'o' then\n            char = 'q'\n\
    \        elseif char == 'u' then\n            char = 'y'\n        end\n      \
    \  result = result .. char\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local result = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ result = result .. char:lower()\n        else\n            result = result ..\
    \ char:upper()\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            for j = 1, #vowels\
    \ do\n                if c == vowels[j] then\n                    c = vowels[(j\
    \ + 2) % #vowels + 1]\n                    break\n                end\n      \
    \      end\n        end\n        encoded = encoded .. c\n    end\n    return encoded\n\
    end", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor\
    \ i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\t\tlocal isVowel =\
    \ false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    isVowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isVowel then\n\t\t\t\
    local index = (string.find(vowels, char) + 2) % #vowels\n\t\t\tif index == 0 then\n\
    \t\t\t\tindex = #vowels\n\t\t\tend\n\t\t\tchar = vowels[index]\n\t\tend\n\t\t\
    if char == char:upper() then\n\t\t\tchar = char:lower()\n\t\telse\n\t\t\tchar\
    \ = char:upper()\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\n\
    end", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local lower = char:lower()\n    local is_vowel = vowels:find(lower)\n\
    \    if is_vowel then\n      local index = alphabet:find(lower)\n      local new_index\
    \ = index + 2\n      if new_index > #alphabet then\n        new_index = new_index\
    \ - #alphabet\n      end\n      char = alphabet:sub(new_index, new_index)\n  \
    \  end\n    if char == char:lower() then\n      char = char:upper()\n    else\n\
    \      char = char:lower()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 26 + 1\n        \
    \    char = string.char(index + 96)\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local nextVowel = vowels[j + 2]\n      \
    \      if not nextVowel then\n                nextVowel = vowels[1]\n        \
    \    end\n            char = nextVowel\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.contains(vowels, char) then\n            local index =\
    \ table.indexof(vowels, char)\n            local next_index = index + 2\n    \
    \        if next_index > #vowels then\n                next_index = next_index\
    \ - #vowels\n            end\n            char = vowels[next_index]\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % #vowels]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
