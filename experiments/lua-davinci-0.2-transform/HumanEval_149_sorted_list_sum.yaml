name: HumanEval_149_sorted_list_sum
language: lua
prompt: "-- Write a function that accepts a list of strings as a parameter,\n-- deletes\
  \ the strings that have odd lengths from it,\n-- and returns the resulted list with\
  \ a sorted order,\n-- The list is always a list of strings and never an array of\
  \ numbers,\n-- and it may contain duplicates.\n-- The order of the list should be\
  \ ascending by length of each word, and you\n-- should return the list sorted by\
  \ that rule.\n-- If two words have the same length, sort the list alphabetically.\n\
  -- The function should return a list of strings in sorted order.\n-- You may assume\
  \ that all words will have the same length.\n-- For example:\n-- >>> list_sort({'aa',\
  \ 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})\n-- {'ab',\
  \ 'cd'}\nlocal function sorted_list_sum(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
  \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
  \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
  \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
  \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai',\
  \ 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n \
  \   lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa',\
  \ 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n \
    \   sum = sum + v\n  end\n  return sum\nend", "    local sum = 0\n    for _, v\
    \ in ipairs(lst) do\n        sum = sum + v\n    end\n    return sum\nend", " \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n  end\n  return\
    \ sum\nend", "    local sum = 0\n    for _, v in ipairs(lst) do\n        sum =\
    \ sum + v\n    end\n    return sum\nend", "    local sum = 0\n    for _, v in\
    \ ipairs(lst) do\n        sum = sum + v\n    end\n    return sum\nend", "    local\
    \ sum = 0\n    table.sort(lst)\n    for _, v in ipairs(lst) do\n        sum =\
    \ sum + v\n    end\n    return sum\nend", "    local sum = 0\n    for _, v in\
    \ ipairs(lst) do\n        sum = sum + v\n    end\n    return sum\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n    end\n  \
    \  return sum\nend", "    local sum = 0\n    for _, v in ipairs(lst) do\n    \
    \    sum = sum + v\n    end\n    return sum\nend", "    local sum = 0\n    for\
    \ _, v in ipairs(lst) do\n        sum = sum + v\n    end\n    return sum\nend",
  "    local sum = 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n    end\n\
    \    return sum\nend", "    local sorted_list = {}\n    for _, v in ipairs(lst)\
    \ do\n        if #v % 2 == 0 then\n            table.insert(sorted_list, v)\n\
    \        end\n    end\n    table.sort(sorted_list, function(a, b)\n        if\
    \ #a == #b then\n            return a < b\n        else\n            return #a\
    \ < #b\n        end\n    end)\n    return sorted_list\nend", "    local sum =\
    \ 0\n    for _, v in ipairs(lst) do\n        sum = sum + v\n    end\n    return\
    \ sum\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v\n\
    \  end\n  return sum\nend", "    local sum = 0\n    local sorted_lst = {}\n  \
    \  for _, v in ipairs(lst) do\n        table.insert(sorted_lst, v)\n    end\n\
    \    table.sort(sorted_lst)\n    for _, v in ipairs(sorted_lst) do\n        sum\
    \ = sum + v\n    end\n    return sum\nend", "    local sum = 0\n    for _, v in\
    \ ipairs(lst) do\n        sum = sum + v\n    end\n    return sum\nend", "    local\
    \ res = {}\n    for _, v in ipairs(lst) do\n        if #v % 2 == 0 then\n    \
    \        table.insert(res, v)\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if #a == #b then\n            return a < b\n        else\n     \
    \       return #a < #b\n        end\n    end)\n    return res\nend", "    local\
    \ sum = 0\n    local sorted_list = {}\n    for _, v in ipairs(lst) do\n      \
    \  if #v % 2 == 0 then\n            table.insert(sorted_list, v)\n        end\n\
    \    end\n    table.sort(sorted_list, function(a, b)\n        if #a == #b then\n\
    \            return a < b\n        else\n            return #a < #b\n        end\n\
    \    end)\n    return sorted_list\nend", "  local sum = 0\n  local sorted_list\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list, v)\n  end\n\
    \  table.sort(sorted_list)\n  for _, v in ipairs(sorted_list) do\n    sum = sum\
    \ + v\n  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
