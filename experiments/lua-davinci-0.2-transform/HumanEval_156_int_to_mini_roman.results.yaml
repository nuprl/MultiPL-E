language: lua
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, numeral\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. numeral\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local roman_numerals = {\n        {1000, 'm'},\n  \
    \      {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n        {100,\
    \ 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n      \
    \  {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n   \
    \     {1, 'i'}\n    }\n    for _, numeral in ipairs(roman_numerals) do\n     \
    \   local value, symbol = numeral[1], numeral[2]\n        while number >= value\
    \ do\n            roman = roman .. symbol\n            number = number - value\n\
    \        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, v in ipairs(roman_numerals) do\n  \
    \  local num, roman = v[1], v[2]\n    while number >= num do\n      result = result\
    \ .. roman\n      number = number - num\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n \
    \     result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = ''\n  local num = number\n  local numeral\n  local count\n  for\
    \ _, numeral in ipairs(mini_roman_numerals) do\n    count = math.floor(num / numeral.value)\n\
    \    num = num - count * numeral.value\n    roman = roman .. numeral.symbol:rep(count)\n\
    \  end\n  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffqxcmr7.lua:16:\
    \ bad argument #1 to 'ipairs' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpffqxcmr7.lua:16: in function 'candidate'\n\t/tmp/tmpffqxcmr7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local value, numeral\
    \ = table.unpack(pair)\n        while number >= value do\n            result =\
    \ result .. numeral\n            number = number - value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc1b6heq.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpfc1b6heq.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpfc1b6heq.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, symbol = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. symbol\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_numeral = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local div = math.floor(number / pair[1])\n    if div > 0 then\n    \
    \  roman_numeral = roman_numeral .. string.rep(pair[2], div)\n      number = number\
    \ - div * pair[1]\n    end\n  end\n  return roman_numeral\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local numeral = {\n        {1000, 'm'},\n        {900,\
    \ 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n   \
    \     {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n\
    \        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n\
    \    }\n    for i = 1, #numeral do\n        while number >= numeral[i][1] do\n\
    \            roman = roman .. numeral[i][2]\n            number = number - numeral[i][1]\n\
    \        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        if digit == 9 then\n            roman = mini_roman_numerals[i]\
    \ .. mini_roman_numerals[i + 1] .. roman\n        elseif digit == 4 then\n   \
    \         roman = mini_roman_numerals[i] .. mini_roman_numerals[i + 1] .. roman\n\
    \        else\n            if digit >= 5 then\n                roman = mini_roman_numerals[i\
    \ + 1] .. roman\n                digit = digit - 5\n            end\n        \
    \    for j = 1, digit do\n                roman = mini_roman_numerals[i] .. roman\n\
    \            end\n        end\n        number = (number - digit) / 10\n      \
    \  i = i + 2\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxgl60bn.lua:17:\
    \ attempt to index global 'mini_roman_numerals' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpkxgl60bn.lua:17: in function 'candidate'\n\t/tmp/tmpkxgl60bn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local roman_numerals = {\n        {'m', 1000},\n \
    \       {'cm', 900},\n        {'d', 500},\n        {'cd', 400},\n        {'c',\
    \ 100},\n        {'xc', 90},\n        {'l', 50},\n        {'xl', 40},\n      \
    \  {'x', 10},\n        {'ix', 9},\n        {'v', 5},\n        {'iv', 4},\n   \
    \     {'i', 1}\n    }\n    for i = 1, #roman_numerals do\n        local roman_numeral\
    \ = roman_numerals[i]\n        local roman_numeral_letter = roman_numeral[1]\n\
    \        local roman_numeral_value = roman_numeral[2]\n        while number >=\
    \ roman_numeral_value do\n            result = result .. roman_numeral_letter\n\
    \            number = number - roman_numeral_value\n        end\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, symbol = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. symbol\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = \"\"\n    local num = number\n    local numeral = {\n    \
    \    {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #numeral\
    \ do\n        while num >= numeral[i][1] do\n            result = result .. numeral[i][2]\n\
    \            num = num - numeral[i][1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    if number < 1 or number > 1000 then\n        error(\"Number out of range\"\
    )\n    end\n    local result = \"\"\n    local numeral_map = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for _, numeral in\
    \ ipairs(numeral_map) do\n        local value, letter = numeral[1], numeral[2]\n\
    \        while number >= value do\n            number = number - value\n     \
    \       result = result .. letter\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        number = (number - digit) / 10\n        local roman_digit\
    \ = mini_roman_digits[i][digit]\n        roman = roman_digit .. roman\n      \
    \  i = i + 1\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhzgfz_z.lua:17:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmpzhzgfz_z.lua:17: in local 'candidate'\n\t/tmp/tmpzhzgfz_z.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    for i = 1, #mini_roman_numerals do\n        local numeral\
    \ = mini_roman_numerals[i]\n        local value = mini_roman_values[i]\n     \
    \   while number >= value do\n            roman = roman .. numeral\n         \
    \   number = number - value\n        end\n    end\n    return roman\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1uqyhva.lua:13:\
    \ attempt to get length of a nil value (global 'mini_roman_numerals')\nstack traceback:\n\
    \t/tmp/tmpn1uqyhva.lua:13: in local 'candidate'\n\t/tmp/tmpn1uqyhva.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = table.unpack(pair)\n    while number >= arabic do\n\
    \      result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local numbers = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1}\n    local numerals = {'m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}\n    for i, v in ipairs(numbers) do\n\
    \        while number >= v do\n            roman = roman .. numerals[i]\n    \
    \        number = number - v\n        end\n    end\n    return roman\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    while number >= numeral[1] do\n      result = result .. numeral[2]\n    \
    \  number = number - numeral[1]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for i = 1, #roman_numerals do\n    local arabic,\
    \ roman = table.unpack(roman_numerals[i])\n    while number >= arabic do\n   \
    \   result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local numeral_value,\
    \ numeral_string = numeral[1], numeral[2]\n        while number >= numeral_value\
    \ do\n            result = result .. numeral_string\n            number = number\
    \ - numeral_value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'m', 1000},\n        {'d', 500},\n   \
    \     {'c', 100},\n        {'l', 50},\n        {'x', 10},\n        {'v', 5},\n\
    \        {'i', 1}\n    }\n    local roman_numeral = ''\n    for _, numeral in\
    \ ipairs(roman_numerals) do\n        local letter, value = numeral[1], numeral[2]\n\
    \        while number >= value do\n            roman_numeral = roman_numeral ..\
    \ letter\n            number = number - value\n        end\n    end\n    return\
    \ roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcarj1nwq.lua:35:\
    \ expected: \"xix\"\nactual: \"xviiii\"\nstack traceback:\n\t/tmp/tmpcarj1nwq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    local numeral = {\n      \
    \  {1000, 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n\
    \        {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n\
    \        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n\
    \        {1, 'i'}\n    }\n    for i = 1, #numeral do\n        while num >= numeral[i][1]\
    \ do\n            result = result .. numeral[i][2]\n            num = num - numeral[i][1]\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = \"\"\n  local num = number\n  while num > 0 do\n    if num >=\
    \ 1000 then\n      roman = roman .. \"m\"\n      num = num - 1000\n    elseif\
    \ num >= 900 then\n      roman = roman .. \"cm\"\n      num = num - 900\n    elseif\
    \ num >= 500 then\n      roman = roman .. \"d\"\n      num = num - 500\n    elseif\
    \ num >= 400 then\n      roman = roman .. \"cd\"\n      num = num - 400\n    elseif\
    \ num >= 100 then\n      roman = roman .. \"c\"\n      num = num - 100\n    elseif\
    \ num >= 90 then\n      roman = roman .. \"xc\"\n      num = num - 90\n    elseif\
    \ num >= 50 then\n      roman = roman .. \"l\"\n      num = num - 50\n    elseif\
    \ num >= 40 then\n      roman = roman .. \"xl\"\n      num = num - 40\n    elseif\
    \ num >= 10 then\n      roman = roman .. \"x\"\n      num = num - 10\n    elseif\
    \ num >= 9 then\n      roman = roman .. \"ix\"\n      num = num - 9\n    elseif\
    \ num >= 5 then\n      roman = roman .. \"v\"\n      num = num - 5\n    elseif\
    \ num >= 4 then\n      roman = roman .. \"iv\"\n      num = num - 4\n    elseif\
    \ num >= 1 then\n      roman = roman .. \"i\"\n      num = num - 1\n    end\n\
    \  end\n  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for i = 1, #roman_numerals do\n        local arabic, roman = roman_numerals[i][1],\
    \ roman_numerals[i][2]\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local romans = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500,\
    \ 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n    \
    \    {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, v in ipairs(romans) do\n        local div, mod = math.modf(number\
    \ / v[1])\n        if div > 0 then\n            result = result .. v[2]:rep(div)\n\
    \            number = mod * v[1]\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojmhxiw_.lua:43:\
    \ expected: \"ccli\"\nactual: \"ccl\"\nstack traceback:\n\t/tmp/tmpojmhxiw_.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        number = (number - digit) / 10\n        if digit\
    \ == 9 then\n            roman = mini_roman_digits[i + 1] .. mini_roman_digits[i]\
    \ .. roman\n        elseif digit >= 5 then\n            roman = mini_roman_digits[i]\
    \ .. string.rep(mini_roman_digits[i + 1], digit - 5) .. roman\n        elseif\
    \ digit == 4 then\n            roman = mini_roman_digits[i + 1] .. mini_roman_digits[i]\
    \ .. roman\n        else\n            roman = string.rep(mini_roman_digits[i +\
    \ 1], digit) .. roman\n        end\n        i = i + 2\n    end\n    return roman\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgcwnv60x.lua:18:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmpgcwnv60x.lua:18: in local 'candidate'\n\t/tmp/tmpgcwnv60x.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_string = ''\n  for _, numeral in ipairs(roman_numerals)\
    \ do\n    local value, symbol = numeral[1], numeral[2]\n    while number >= value\
    \ do\n      roman_string = roman_string .. symbol\n      number = number - value\n\
    \    end\n  end\n  return roman_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, numeral\
    \ = table.unpack(pair)\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. numeral\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numeral = \"\"\n  local numeral_table = {\n    {1000, \"m\"},\n\
    \    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100, \"c\"},\n\
    \    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"x\"},\n  \
    \  {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"}\n  }\n  for\
    \ _, numeral in ipairs(numeral_table) do\n    local value, letter = numeral[1],\
    \ numeral[2]\n    while number >= value do\n      roman_numeral = roman_numeral\
    \ .. letter\n      number = number - value\n    end\n  end\n  return roman_numeral\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letters = numeral[1], numeral[2]\n        while number >= value do\n       \
    \     result = result .. letters\n            number = number - value\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letters = unpack(numeral)\n        while number >= value do\n            result\
    \ = result .. letters\n            number = number - value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyuoodz1.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoyuoodz1.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpoyuoodz1.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local numeral = {'m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}\n    local value = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i = 1, #value do\n        while number\
    \ >= value[i] do\n            number = number - value[i]\n            result =\
    \ result .. numeral[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = \"\"\n  local num = number\n  while num >= 1000 do\n    roman\
    \ = roman .. \"m\"\n    num = num - 1000\n  end\n  while num >= 900 do\n    roman\
    \ = roman .. \"cm\"\n    num = num - 900\n  end\n  while num >= 500 do\n    roman\
    \ = roman .. \"d\"\n    num = num - 500\n  end\n  while num >= 400 do\n    roman\
    \ = roman .. \"cd\"\n    num = num - 400\n  end\n  while num >= 100 do\n    roman\
    \ = roman .. \"c\"\n    num = num - 100\n  end\n  while num >= 90 do\n    roman\
    \ = roman .. \"xc\"\n    num = num - 90\n  end\n  while num >= 50 do\n    roman\
    \ = roman .. \"l\"\n    num = num - 50\n  end\n  while num >= 40 do\n    roman\
    \ = roman .. \"xl\"\n    num = num - 40\n  end\n  while num >= 10 do\n    roman\
    \ = roman .. \"x\"\n    num = num - 10\n  end\n  while num >= 9 do\n    roman\
    \ = roman .. \"ix\"\n    num = num - 9\n  end\n  while num >= 5 do\n    roman\
    \ = roman .. \"v\"\n    num = num - 5\n  end\n  while num >= 4 do\n    roman =\
    \ roman .. \"iv\"\n    num = num - 4\n  end\n  while num >= 1 do\n    roman =\
    \ roman .. \"i\"\n    num = num - 1\n  end\n  return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local numeral = {\n        {'m', 1000},\n        {'d',\
    \ 500},\n        {'c', 100},\n        {'l', 50},\n        {'x', 10},\n       \
    \ {'v', 5},\n        {'i', 1}\n    }\n    for i = 1, #numeral do\n        local\
    \ value = numeral[i][2]\n        local letter = numeral[i][1]\n        local quotient\
    \ = math.floor(number / value)\n        if quotient > 0 then\n            for\
    \ j = 1, quotient do\n                roman = roman .. letter\n            end\n\
    \            number = number - quotient * value\n        end\n    end\n    return\
    \ roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa9_akcv.lua:39:\
    \ expected: \"xix\"\nactual: \"xviiii\"\nstack traceback:\n\t/tmp/tmpoa9_akcv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for i = 1, #roman_numerals do\n        local arabic, roman = table.unpack(roman_numerals[i])\n\
    \        while number >= arabic do\n            result = result .. roman\n   \
    \         number = number - arabic\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n \
    \     result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    while number >= numeral[1] do\n      result = result .. numeral[2]\n    \
    \  number = number - numeral[1]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = unpack(numeral)\n        while number >= value do\n            result\
    \ = result .. letter\n            number = number - value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2r7i5mt6.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2r7i5mt6.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp2r7i5mt6.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        { 1000, 'm' },\n        { 900, 'cm' },\n\
    \        { 500, 'd' },\n        { 400, 'cd' },\n        { 100, 'c' },\n      \
    \  { 90, 'xc' },\n        { 50, 'l' },\n        { 40, 'xl' },\n        { 10, 'x'\
    \ },\n        { 9, 'ix' },\n        { 5, 'v' },\n        { 4, 'iv' },\n      \
    \  { 1, 'i' }\n    }\n    local roman_numeral = ''\n    for _, pair in ipairs(roman_numerals)\
    \ do\n        local div = math.floor(number / pair[1])\n        if div > 0 then\n\
    \            roman_numeral = roman_numeral .. string.rep(pair[2], div)\n     \
    \       number = number - div * pair[1]\n        end\n    end\n    return roman_numeral\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'i', 'v'},\n        {'x', 'l'},\n    \
    \    {'c', 'd'},\n        {'m'}\n    }\n    local roman_numeral = ''\n    local\
    \ digit = 0\n    while number > 0 do\n        local digit_value = number % 10\n\
    \        local digit_numeral = ''\n        if digit_value == 9 then\n        \
    \    digit_numeral = roman_numerals[digit + 1][1] .. roman_numerals[digit + 2][1]\n\
    \        elseif digit_value >= 5 then\n            digit_numeral = roman_numerals[digit\
    \ + 1][2]\n            for i = 6, digit_value do\n                digit_numeral\
    \ = digit_numeral .. roman_numerals[digit + 1][1]\n            end\n        elseif\
    \ digit_value == 4 then\n            digit_numeral = roman_numerals[digit + 1][1]\
    \ .. roman_numerals[digit + 1][2]\n        else\n            for i = 1, digit_value\
    \ do\n                digit_numeral = digit_numeral .. roman_numerals[digit +\
    \ 1][1]\n            end\n        end\n        roman_numeral = digit_numeral ..\
    \ roman_numeral\n        digit = digit + 1\n        number = math.floor(number\
    \ / 10)\n    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local romans = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500,\
    \ 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n    \
    \    {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(romans) do\n        local value, numeral = pair[1],\
    \ pair[2]\n        while number >= value do\n            result = result .. numeral\n\
    \            number = number - value\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_numeral = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local arabic, numeral = table.unpack(pair)\n    while number >= arabic\
    \ do\n      roman_numeral = roman_numeral .. numeral\n      number = number -\
    \ arabic\n    end\n  end\n  return roman_numeral\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'i', 'v'},\n        {'x', 'l'},\n    \
    \    {'c', 'd'},\n        {'m'}\n    }\n    local result = ''\n    local digit\
    \ = 1\n    while number > 0 do\n        local digit_value = number % 10\n    \
    \    if digit_value > 0 then\n            result = mini_roman_digit(digit_value,\
    \ roman_numerals[digit]) .. result\n        end\n        digit = digit + 1\n \
    \       number = math.floor(number / 10)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpceube_5t.lua:23:\
    \ attempt to call a nil value (global 'mini_roman_digit')\nstack traceback:\n\t\
    /tmp/tmpceube_5t.lua:23: in local 'candidate'\n\t/tmp/tmpceube_5t.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        number = (number - digit) / 10\n        local roman_digit\
    \ = mini_roman_digits[i][digit]\n        roman = roman_digit .. roman\n      \
    \  i = i + 1\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhzgfz_z.lua:17:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmpzhzgfz_z.lua:17: in local 'candidate'\n\t/tmp/tmpzhzgfz_z.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_string\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            roman_string = roman_string .. numeral[2]\n  \
    \          number = number - numeral[1]\n        end\n    end\n    return roman_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, letter = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. letter\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = ''\n  local numbers = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1}\n  local romans = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'}\n  for i = 1, #numbers do\n    while number >= numbers[i]\
    \ do\n      result = result .. romans[i]\n      number = number - numbers[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'m', 1000},\n        {'cm', 900},\n  \
    \      {'d', 500},\n        {'cd', 400},\n        {'c', 100},\n        {'xc',\
    \ 90},\n        {'l', 50},\n        {'xl', 40},\n        {'x', 10},\n        {'ix',\
    \ 9},\n        {'v', 5},\n        {'iv', 4},\n        {'i', 1}\n    }\n    local\
    \ result = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local\
    \ roman, value = numeral[1], numeral[2]\n        while number >= value do\n  \
    \          result = result .. roman\n            number = number - value\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, roman_numeral in ipairs(roman_numerals) do\n        local arabic,\
    \ roman = roman_numeral[1], roman_numeral[2]\n        while number >= arabic do\n\
    \            result = result .. roman\n            number = number - arabic\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = ''\n  local num = number\n  local numeral_map = {\n    {1000,\
    \ 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n\
    \    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n\
    \    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'},\n  }\n  for _, pair in ipairs(numeral_map)\
    \ do\n    local arabic, roman = table.unpack(pair)\n    while num >= arabic do\n\
    \      result = result .. roman\n      num = num - arabic\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n \
    \     result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = ''\n  local num = number\n  local roman_numerals = {\n    {1000,\
    \ 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n\
    \    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n\
    \    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'}\n  }\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local arabic, roman = table.unpack(pair)\n    while num >= arabic do\n\
    \      result = result .. roman\n      num = num - arabic\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        [1] = \"i\",\n        [2] = \"ii\",\n \
    \       [3] = \"iii\",\n        [4] = \"iv\",\n        [5] = \"v\",\n        [6]\
    \ = \"vi\",\n        [7] = \"vii\",\n        [8] = \"viii\",\n        [9] = \"\
    ix\",\n        [10] = \"x\",\n        [20] = \"xx\",\n        [30] = \"xxx\",\n\
    \        [40] = \"xl\",\n        [50] = \"l\",\n        [60] = \"lx\",\n     \
    \   [70] = \"lxx\",\n        [80] = \"lxxx\",\n        [90] = \"xc\",\n      \
    \  [100] = \"c\",\n        [200] = \"cc\",\n        [300] = \"ccc\",\n       \
    \ [400] = \"cd\",\n        [500] = \"d\",\n        [600] = \"dc\",\n        [700]\
    \ = \"dcc\",\n        [800] = \"dccc\",\n        [900] = \"cm\",\n        [1000]\
    \ = \"m\",\n    }\n    local roman_numeral = \"\"\n    local number_string = tostring(number)\n\
    \    local number_length = string.len(number_string)\n    local number_index =\
    \ 1\n    while number_index <= number_length do\n        local digit = tonumber(string.sub(number_string,\
    \ number_index, number_index))\n        local digit_place = 10 ^ (number_length\
    \ - number_index)\n        local digit_value = digit * digit_place\n        local\
    \ roman_numeral_digit = roman_numerals[digit_value]\n        if roman_numeral_digit\
    \ == nil then\n            roman_numeral_digit = \"\"\n            local digit_place_index\
    \ = 1\n            while digit_place_index <= digit do\n                roman_numeral_digit\
    \ = roman_numeral_digit .. roman_numerals[digit_place]\n                digit_place_index\
    \ = digit_place_index + 1\n            end\n        end\n        roman_numeral\
    \ = r\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv83twth2.lua:80: ''end'' expected (to close ''while'' at line
    46) near <eof>

    '
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for i = 1, #roman_numerals do\n        local arabic, roman = table.unpack(roman_numerals[i])\n\
    \        while number >= arabic do\n            result = result .. roman\n   \
    \         number = number - arabic\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        if digit == 9 then\n            roman = mini_roman_digits[i]\
    \ .. mini_roman_digits[i + 2] .. roman\n        elseif digit >= 5 then\n     \
    \       roman = mini_roman_digits[i + 1] .. string.rep(mini_roman_digits[i], digit\
    \ - 5) .. roman\n        elseif digit == 4 then\n            roman = mini_roman_digits[i]\
    \ .. mini_roman_digits[i + 1] .. roman\n        else\n            roman = string.rep(mini_roman_digits[i],\
    \ digit) .. roman\n        end\n        number = (number - digit) / 10\n     \
    \   i = i + 2\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdbeedf_.lua:17:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmpsdbeedf_.lua:17: in local 'candidate'\n\t/tmp/tmpsdbeedf_.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = ''\n  local num = number\n  while num > 0 do\n    if num >= 1000\
    \ then\n      roman = roman .. 'm'\n      num = num - 1000\n    elseif num >=\
    \ 900 then\n      roman = roman .. 'cm'\n      num = num - 900\n    elseif num\
    \ >= 500 then\n      roman = roman .. 'd'\n      num = num - 500\n    elseif num\
    \ >= 400 then\n      roman = roman .. 'cd'\n      num = num - 400\n    elseif\
    \ num >= 100 then\n      roman = roman .. 'c'\n      num = num - 100\n    elseif\
    \ num >= 90 then\n      roman = roman .. 'xc'\n      num = num - 90\n    elseif\
    \ num >= 50 then\n      roman = roman .. 'l'\n      num = num - 50\n    elseif\
    \ num >= 40 then\n      roman = roman .. 'xl'\n      num = num - 40\n    elseif\
    \ num >= 10 then\n      roman = roman .. 'x'\n      num = num - 10\n    elseif\
    \ num >= 9 then\n      roman = roman .. 'ix'\n      num = num - 9\n    elseif\
    \ num >= 5 then\n      roman = roman .. 'v'\n      num = num - 5\n    elseif num\
    \ >= 4 then\n      roman = roman .. 'iv'\n      num = num - 4\n    elseif num\
    \ >= 1 then\n      roman = roman .. 'i'\n      num = num - 1\n    end\n  end\n\
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        { 'm', 1000 },\n        { 'cm', 900 },\n\
    \        { 'd', 500 },\n        { 'cd', 400 },\n        { 'c', 100 },\n      \
    \  { 'xc', 90 },\n        { 'l', 50 },\n        { 'xl', 40 },\n        { 'x',\
    \ 10 },\n        { 'ix', 9 },\n        { 'v', 5 },\n        { 'iv', 4 },\n   \
    \     { 'i', 1 }\n    }\n    local result = ''\n    for _, numeral in ipairs(roman_numerals)\
    \ do\n        local symbol, value = numeral[1], numeral[2]\n        while number\
    \ >= value do\n            result = result .. symbol\n            number = number\
    \ - value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        { \"m\", 1000 },\n        { \"cm\", 900\
    \ },\n        { \"d\", 500 },\n        { \"cd\", 400 },\n        { \"c\", 100\
    \ },\n        { \"xc\", 90 },\n        { \"l\", 50 },\n        { \"xl\", 40 },\n\
    \        { \"x\", 10 },\n        { \"ix\", 9 },\n        { \"v\", 5 },\n     \
    \   { \"iv\", 4 },\n        { \"i\", 1 }\n    }\n    local result = \"\"\n   \
    \ for _, numeral in ipairs(roman_numerals) do\n        local numeral_string, numeral_value\
    \ = numeral[1], numeral[2]\n        while number >= numeral_value do\n       \
    \     result = result .. numeral_string\n            number = number - numeral_value\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local value, numeral\
    \ = table.unpack(pair)\n        while number >= value do\n            roman_numeral\
    \ = roman_numeral .. numeral\n            number = number - value\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numeral = \"\"\n    local roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #roman_numerals\
    \ do\n        local arabic, roman = unpack(roman_numerals[i])\n        while number\
    \ >= arabic do\n            roman_numeral = roman_numeral .. roman\n         \
    \   number = number - arabic\n        end\n    end\n    return roman_numeral\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zmj8icl.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8zmj8icl.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp8zmj8icl.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        [1] = 'i',\n        [5] = 'v',\n      \
    \  [10] = 'x',\n        [50] = 'l',\n        [100] = 'c',\n        [500] = 'd',\n\
    \        [1000] = 'm'\n    }\n    local result = ''\n    local num = number\n\
    \    local digit = 0\n    local digit_value = 0\n    local digit_value_next =\
    \ 0\n    local digit_value_next_next = 0\n    local digit_value_prev = 0\n   \
    \ local digit_value_prev_prev = 0\n    local digit_value_prev_prev_prev = 0\n\
    \    local digit_value_prev_prev_prev_prev = 0\n    local digit_value_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev_prev = 0\n   \
    \ local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local\
    \ digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local\
    \ digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n   \
    \ local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\n    local digit_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcg7_trkw.lua:63: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = ''\n  local numeral = {\n    {1000, 'm'},\n    {900, 'cm'},\n\
    \    {500, 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50,\
    \ 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4,\
    \ 'iv'},\n    {1, 'i'}\n  }\n  for _, v in ipairs(numeral) do\n    while number\
    \ >= v[1] do\n      result = result .. v[2]\n      number = number - v[1]\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1, 'i'},\n        {5, 'v'},\n        {10,\
    \ 'x'},\n        {50, 'l'},\n        {100, 'c'},\n        {500, 'd'},\n      \
    \  {1000, 'm'}\n    }\n    local result = ''\n    local index = #roman_numerals\n\
    \    while number > 0 do\n        local numeral = roman_numerals[index]\n    \
    \    local value = numeral[1]\n        local symbol = numeral[2]\n        if number\
    \ >= value then\n            result = result .. symbol\n            number = number\
    \ - value\n        else\n            index = index - 1\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3475qo6i.lua:40:\
    \ expected: \"xix\"\nactual: \"xviiii\"\nstack traceback:\n\t/tmp/tmp3475qo6i.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local numeral_map = {\n        {1000, \"m\"},\n \
    \       {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n      \
    \  {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"\
    xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n    \
    \    {4, \"iv\"},\n        {1, \"i\"},\n    }\n    for _, pair in ipairs(numeral_map)\
    \ do\n        local arabic, roman_string = pair[1], pair[2]\n        while number\
    \ >= arabic do\n            roman = roman .. roman_string\n            number\
    \ = number - arabic\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = \"\"\n    local num = number\n    while num > 0 do\n     \
    \   if num >= 1000 then\n            result = result .. \"m\"\n            num\
    \ = num - 1000\n        elseif num >= 900 then\n            result = result ..\
    \ \"cm\"\n            num = num - 900\n        elseif num >= 500 then\n      \
    \      result = result .. \"d\"\n            num = num - 500\n        elseif num\
    \ >= 400 then\n            result = result .. \"cd\"\n            num = num -\
    \ 400\n        elseif num >= 100 then\n            result = result .. \"c\"\n\
    \            num = num - 100\n        elseif num >= 90 then\n            result\
    \ = result .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n\
    \            result = result .. \"l\"\n            num = num - 50\n        elseif\
    \ num >= 40 then\n            result = result .. \"xl\"\n            num = num\
    \ - 40\n        elseif num >= 10 then\n            result = result .. \"x\"\n\
    \            num = num - 10\n        elseif num >= 9 then\n            result\
    \ = result .. \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n\
    \            result = result .. \"v\"\n            num = num - 5\n        elseif\
    \ num >= 4 then\n            result = result .. \"iv\"\n            num = num\
    \ - 4\n        elseif num >= 1 then\n            result = result .. \"i\"\n  \
    \          num = num - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local numbers = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1}\n    local romans = {\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    for i, num\
    \ in ipairs(numbers) do\n        while number >= num do\n            roman = roman\
    \ .. romans[i]\n            number = number - num\n        end\n    end\n    return\
    \ roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numeral = \"\"\n  local roman_numerals = {\n    {1000, \"m\"},\n\
    \    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100, \"c\"},\n\
    \    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"x\"},\n  \
    \  {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"}\n  }\n  for\
    \ _, pair in ipairs(roman_numerals) do\n    local arabic, roman = pair[1], pair[2]\n\
    \    while number >= arabic do\n      roman_numeral = roman_numeral .. roman\n\
    \      number = number - arabic\n    end\n  end\n  return roman_numeral\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500,\
    \ 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n    \
    \    {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman) do\n        local value, letters = pair[1],\
    \ pair[2]\n        while number >= value do\n            result = result .. letters\n\
    \            number = number - value\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numeral = \"\"\n    local num = number\n    while num > 0 do\n\
    \        if num >= 1000 then\n            roman_numeral = roman_numeral .. \"\
    m\"\n            num = num - 1000\n        elseif num >= 900 then\n          \
    \  roman_numeral = roman_numeral .. \"cm\"\n            num = num - 900\n    \
    \    elseif num >= 500 then\n            roman_numeral = roman_numeral .. \"d\"\
    \n            num = num - 500\n        elseif num >= 400 then\n            roman_numeral\
    \ = roman_numeral .. \"cd\"\n            num = num - 400\n        elseif num >=\
    \ 100 then\n            roman_numeral = roman_numeral .. \"c\"\n            num\
    \ = num - 100\n        elseif num >= 90 then\n            roman_numeral = roman_numeral\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman_numeral = roman_numeral .. \"l\"\n            num = num - 50\n \
    \       elseif num >= 40 then\n            roman_numeral = roman_numeral .. \"\
    xl\"\n            num = num - 40\n        elseif num >= 10 then\n            roman_numeral\
    \ = roman_numeral .. \"x\"\n            num = num - 10\n        elseif num >=\
    \ 9 then\n            roman_numeral = roman_numeral .. \"ix\"\n            num\
    \ = num - 9\n        elseif num >= 5 then\n            roman_numeral = roman_numeral\
    \ .. \"v\"\n            num = num - 5\n        elseif num >= 4 then\n        \
    \    roman_numeral = roman_numeral .. \"iv\"\n            num = num - 4\n    \
    \    elseif num >= 1 then\n            roman_numeral = roman_numeral .. \"i\"\n\
    \            num = num - 1\n        end\n    end\n    return roman_numeral\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local numeral_map = {\n        {1000, 'm'},\n    \
    \    {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n\
    \        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n\
    \        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'},\n\
    \    }\n    for _, numeral in ipairs(numeral_map) do\n        while number >=\
    \ numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    if number < 1 or number > 1000 then\n        error(\"Number out of range\"\
    )\n    end\n    local roman_numeral = \"\"\n    for _, numeral in ipairs(mini_roman_numerals)\
    \ do\n        while number >= numeral.value do\n            roman_numeral = roman_numeral\
    \ .. numeral.symbol\n            number = number - numeral.value\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        local roman_digit = mini_roman_digits[i][digit]\n\
    \        if roman_digit then\n            roman = roman_digit .. roman\n     \
    \   end\n        number = math.floor(number / 10)\n        i = i + 1\n    end\n\
    \    return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogge47f3.lua:16:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmpogge47f3.lua:16: in local 'candidate'\n\t/tmp/tmpogge47f3.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n \
    \     result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_numeral = ''\n  for _, numeral in ipairs(roman_numerals)\
    \ do\n    while number >= numeral[1] do\n      roman_numeral = roman_numeral ..\
    \ numeral[2]\n      number = number - numeral[1]\n    end\n  end\n  return roman_numeral\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    local numeral = {\n     \
    \   {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #numeral\
    \ do\n        local n = numeral[i][1]\n        local s = numeral[i][2]\n     \
    \   while num >= n do\n            roman = roman .. s\n            num = num -\
    \ n\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, v in ipairs(roman_numerals) do\n  \
    \  while number >= v[1] do\n      result = result .. v[2]\n      number = number\
    \ - v[1]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = \"\"\n  local num = number\n  local numeral_map = {\n    {1000,\
    \ \"m\"},\n    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100,\
    \ \"c\"},\n    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"\
    x\"},\n    {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"}\n \
    \ }\n  for _, numeral in ipairs(numeral_map) do\n    local value, letter = numeral[1],\
    \ numeral[2]\n    while num >= value do\n      result = result .. letter\n   \
    \   num = num - value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        [1] = 'i',\n        [5] = 'v',\n      \
    \  [10] = 'x',\n        [50] = 'l',\n        [100] = 'c',\n        [500] = 'd',\n\
    \        [1000] = 'm'\n    }\n    local roman_number = ''\n    local number_of_digits\
    \ = math.floor(math.log10(number)) + 1\n    local digit_value\n    local digit_place\n\
    \    local digit_place_value\n    local digit_place_value_roman\n    local digit_place_value_roman_5\n\
    \    local digit_place_value_roman_10\n    local digit_place_value_roman_50\n\
    \    local digit_place_value_roman_100\n    local digit_place_value_roman_500\n\
    \    local digit_place_value_roman_1000\n    for i = 1, number_of_digits do\n\
    \        digit_place = number_of_digits - i + 1\n        digit_place_value = 10\
    \ ^ digit_place\n        digit_value = math.floor(number / digit_place_value)\n\
    \        digit_place_value_roman = roman_numerals[digit_place_value]\n       \
    \ digit_place_value_roman_5 = roman_numerals[digit_place_value * 5]\n        digit_place_value_roman_10\
    \ = roman_numerals[digit_place_value * 10]\n        digit_place_value_roman_50\
    \ = roman_numerals[digit_place_value * 50]\n        digit_place_value_roman_100\
    \ = roman_numerals[digit_place_value * 100]\n        digit_place_value_roman_500\
    \ = roman_numerals[digit_place_value * 500]\n        digit_place_value_roman_1000\
    \ = roman_numerals[digit_place_value * 1000]\n        if digit_value == 9 then\n\
    \            roman_number = roman_number .. digit_place_value_roman .. digit_place_value_roman_10\n\
    \        elseif digit_value == 4 then\n            roman_number =\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkjjp_h32.lua:48: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, numeral\
    \ = table.unpack(pair)\n        while number >= arabic do\n            roman_numeral\
    \ = roman_numeral .. numeral\n            number = number - arabic\n        end\n\
    \    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local arabic,\
    \ roman = numeral[1], numeral[2]\n        while number >= arabic do\n        \
    \    result = result .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local i = 1\n    while number > 0 do\n        local\
    \ digit = number % 10\n        if digit == 4 then\n            roman = mini_roman_digits[i]\
    \ .. mini_roman_digits[i + 1] .. roman\n        elseif digit == 9 then\n     \
    \       roman = mini_roman_digits[i] .. mini_roman_digits[i + 2] .. roman\n  \
    \      else\n            local roman_digit = mini_roman_digits[i]\n          \
    \  if digit >= 5 then\n                roman_digit = mini_roman_digits[i + 1]\n\
    \                digit = digit - 5\n            end\n            roman = roman_digit:rep(digit)\
    \ .. roman\n        end\n        number = (number - digit) / 10\n        i = i\
    \ + 2\n    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jti_v82.lua:19:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmp5jti_v82.lua:19: in local 'candidate'\n\t/tmp/tmp5jti_v82.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'m', 1000},\n        {'cm', 900},\n  \
    \      {'d', 500},\n        {'cd', 400},\n        {'c', 100},\n        {'xc',\
    \ 90},\n        {'l', 50},\n        {'xl', 40},\n        {'x', 10},\n        {'ix',\
    \ 9},\n        {'v', 5},\n        {'iv', 4},\n        {'i', 1}\n    }\n    local\
    \ result = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local\
    \ letter, value = numeral[1], numeral[2]\n        while number >= value do\n \
    \           result = result .. letter\n            number = number - value\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_string\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    roman_string = roman_string .. symbol\n            number = number - value\n\
    \        end\n    end\n    return roman_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local num = number\n    while num > 0 do\n        if\
    \ num >= 1000 then\n            roman = roman .. 'm'\n            num = num -\
    \ 1000\n        elseif num >= 900 then\n            roman = roman .. 'cm'\n  \
    \          num = num - 900\n        elseif num >= 500 then\n            roman\
    \ = roman .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            roman = roman .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            roman = roman .. 'c'\n            num = num - 100\n\
    \        elseif num >= 90 then\n            roman = roman .. 'xc'\n          \
    \  num = num - 90\n        elseif num >= 50 then\n            roman = roman ..\
    \ 'l'\n            num = num - 50\n        elseif num >= 40 then\n           \
    \ roman = roman .. 'xl'\n            num = num - 40\n        elseif num >= 10\
    \ then\n            roman = roman .. 'x'\n            num = num - 10\n       \
    \ elseif num >= 9 then\n            roman = roman .. 'ix'\n            num = num\
    \ - 9\n        elseif num >= 5 then\n            roman = roman .. 'v'\n      \
    \      num = num - 5\n        elseif num >= 4 then\n            roman = roman\
    \ .. 'iv'\n            num = num - 4\n        elseif num >= 1 then\n         \
    \   roman = roman .. 'i'\n            num = num - 1\n        end\n    end\n  \
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local numeral_value,\
    \ numeral_string = numeral[1], numeral[2]\n        while number >= numeral_value\
    \ do\n            result = result .. numeral_string\n            number = number\
    \ - numeral_value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local arabic,\
    \ roman = numeral[1], numeral[2]\n        while number >= arabic do\n        \
    \    result = result .. roman\n            number = number - arabic\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numeral = \"\"\n  local numeral_table = {\n    {1000, \"m\"},\n\
    \    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100, \"c\"},\n\
    \    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"x\"},\n  \
    \  {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"}\n  }\n  for\
    \ i = 1, #numeral_table do\n    while number >= numeral_table[i][1] do\n     \
    \ roman_numeral = roman_numeral .. numeral_table[i][2]\n      number = number\
    \ - numeral_table[i][1]\n    end\n  end\n  return roman_numeral\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = unpack(numeral)\n        while number >= value do\n            result\
    \ = result .. symbol\n            number = number - value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9zd4nqw8.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9zd4nqw8.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp9zd4nqw8.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    local numeral = {\n     \
    \   {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #numeral\
    \ do\n        while num >= numeral[i][1] do\n            roman = roman .. numeral[i][2]\n\
    \            num = num - numeral[i][1]\n        end\n    end\n    return roman\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_string = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local arabic, roman = table.unpack(pair)\n    while number >= arabic\
    \ do\n      roman_string = roman_string .. roman\n      number = number - arabic\n\
    \    end\n  end\n  return roman_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = ''\n    local numeral_map = {\n        {1000, 'm'},\n     \
    \   {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n\
    \        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n\
    \        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'},\n\
    \    }\n    for _, pair in ipairs(numeral_map) do\n        local value, numeral\
    \ = pair[1], pair[2]\n        while number >= value do\n            roman = roman\
    \ .. numeral\n            number = number - value\n        end\n    end\n    return\
    \ roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, symbol = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. symbol\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, letter = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. letter\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local num = number\n    while num > 0 do\n       \
    \ if num >= 1000 then\n            result = result .. 'm'\n            num = num\
    \ - 1000\n        elseif num >= 900 then\n            result = result .. 'cm'\n\
    \            num = num - 900\n        elseif num >= 500 then\n            result\
    \ = result .. 'd'\n            num = num - 500\n        elseif num >= 400 then\n\
    \            result = result .. 'cd'\n            num = num - 400\n        elseif\
    \ num >= 100 then\n            result = result .. 'c'\n            num = num -\
    \ 100\n        elseif num >= 90 then\n            result = result .. 'xc'\n  \
    \          num = num - 90\n        elseif num >= 50 then\n            result =\
    \ result .. 'l'\n            num = num - 50\n        elseif num >= 40 then\n \
    \           result = result .. 'xl'\n            num = num - 40\n        elseif\
    \ num >= 10 then\n            result = result .. 'x'\n            num = num -\
    \ 10\n        elseif num >= 9 then\n            result = result .. 'ix'\n    \
    \        num = num - 9\n        elseif num >= 5 then\n            result = result\
    \ .. 'v'\n            num = num - 5\n        elseif num >= 4 then\n          \
    \  result = result .. 'iv'\n            num = num - 4\n        elseif num >= 1\
    \ then\n            result = result .. 'i'\n            num = num - 1\n      \
    \  end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local value, letter = numeral[1], numeral[2]\n    while number >= value do\n\
    \      result = result .. letter\n      number = number - value\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = unpack(numeral)\n        while number >= value do\n            result\
    \ = result .. symbol\n            number = number - value\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9zd4nqw8.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9zd4nqw8.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp9zd4nqw8.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local roman_numeral = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local arabic, numeral = table.unpack(pair)\n    while number >= arabic\
    \ do\n      roman_numeral = roman_numeral .. numeral\n      number = number -\
    \ arabic\n    end\n  end\n  return roman_numeral\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = \"\"\n  local num = number\n  local numeral = {\n    {1000, \"\
    m\"},\n    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n    {100, \"\
    c\"},\n    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n    {10, \"x\"\
    },\n    {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1, \"i\"}\n  }\n\
    \  for i = 1, #numeral do\n    while num >= numeral[i][1] do\n      roman = roman\
    \ .. numeral[i][2]\n      num = num - numeral[i][1]\n    end\n  end\n  return\
    \ roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    local roman_numerals = {\n\
    \        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n     \
    \   {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for\
    \ i = 1, #roman_numerals do\n        local arabic, roman_numeral = unpack(roman_numerals[i])\n\
    \        while num >= arabic do\n            roman = roman .. roman_numeral\n\
    \            num = num - arabic\n        end\n    end\n    return roman\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2g20qv6.lua:30:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps2g20qv6.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmps2g20qv6.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = \"\"\n    local num = number\n    local numeral = {\n    \
    \    {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400,\
    \ \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n\
    \        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5,\
    \ \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i = 1, #numeral\
    \ do\n        while num >= numeral[i][1] do\n            result = result .. numeral[i][2]\n\
    \            num = num - numeral[i][1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    local numeral_map = {\n \
    \       {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n      \
    \  {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    }\n    for\
    \ i, v in ipairs(numeral_map) do\n        local value = v[1]\n        local numeral\
    \ = v[2]\n        while num >= value do\n            roman = roman .. numeral\n\
    \            num = num - value\n        end\n    end\n    return roman\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numeral = \"\"\n    local numeral_table = {\n        {1000, \"\
    m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n\
    \        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40,\
    \ \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n\
    \        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for _, numeral in ipairs(numeral_table)\
    \ do\n        local value, letters = numeral[1], numeral[2]\n        while number\
    \ >= value do\n            roman_numeral = roman_numeral .. letters\n        \
    \    number = number - value\n        end\n    end\n    return roman_numeral\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local decimal, roman\
    \ = table.unpack(pair)\n        while number >= decimal do\n            result\
    \ = result .. roman\n            number = number - decimal\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'i', 'v'},\n        {'x', 'l'},\n    \
    \    {'c', 'd'},\n        {'m'}\n    }\n    local result = ''\n    local digit\
    \ = 1\n    while number > 0 do\n        local digit_value = number % 10\n    \
    \    if digit_value > 0 then\n            local roman_numeral = roman_numerals[digit]\n\
    \            if digit_value == 9 then\n                result = roman_numeral[1]\
    \ .. roman_numerals[digit + 1][1] .. result\n            elseif digit_value >=\
    \ 5 then\n                result = roman_numeral[2] .. roman_numeral[1]:rep(digit_value\
    \ - 5) .. result\n            elseif digit_value == 4 then\n                result\
    \ = roman_numeral[1] .. roman_numeral[2] .. result\n            else\n       \
    \         result = roman_numeral[1]:rep(digit_value) .. result\n            end\n\
    \        end\n        number = math.floor(number / 10)\n        digit = digit\
    \ + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local numeral_value,\
    \ numeral_string = numeral[1], numeral[2]\n        while number >= numeral_value\
    \ do\n            result = result .. numeral_string\n            number = number\
    \ - numeral_value\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local result = \"\"\n  local num = number\n  local roman_numerals = {\n   \
    \ {1000, \"m\"},\n    {900, \"cm\"},\n    {500, \"d\"},\n    {400, \"cd\"},\n\
    \    {100, \"c\"},\n    {90, \"xc\"},\n    {50, \"l\"},\n    {40, \"xl\"},\n \
    \   {10, \"x\"},\n    {9, \"ix\"},\n    {5, \"v\"},\n    {4, \"iv\"},\n    {1,\
    \ \"i\"}\n  }\n  for i = 1, #roman_numerals do\n    local arabic, roman = table.unpack(roman_numerals[i])\n\
    \    while num >= arabic do\n      result = result .. roman\n      num = num -\
    \ arabic\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals) do\n\
    \    local arabic, roman = numeral[1], numeral[2]\n    while number >= arabic\
    \ do\n      result = result .. roman\n      number = number - arabic\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = \"\"\n  local i = 1\n  while number > 0 do\n    local digit =\
    \ number % 10\n    if digit == 9 then\n      roman = mini_roman_digits[i][9] ..\
    \ roman\n    elseif digit == 4 then\n      roman = mini_roman_digits[i][4] ..\
    \ roman\n    else\n      if digit >= 5 then\n        roman = mini_roman_digits[i][5]\
    \ .. roman\n        digit = digit - 5\n      end\n      roman = string.rep(mini_roman_digits[i][1],\
    \ digit) .. roman\n    end\n    number = math.floor(number / 10)\n    i = i +\
    \ 1\n  end\n  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50itrf9c.lua:17:\
    \ attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\
    \t/tmp/tmp50itrf9c.lua:17: in local 'candidate'\n\t/tmp/tmp50itrf9c.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for i = 1, #roman_numerals do\n        local arabic, roman = table.unpack(roman_numerals[i])\n\
    \        while number >= arabic do\n            result = result .. roman\n   \
    \         number = number - arabic\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
    \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = pair[1], pair[2]\n        while number >= arabic do\n            result =\
    \ result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ letter = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. letter\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = ''\n  local num = number\n  while num > 0 do\n    if num >= 1000\
    \ then\n      roman = roman .. 'm'\n      num = num - 1000\n    elseif num >=\
    \ 900 then\n      roman = roman .. 'cm'\n      num = num - 900\n    elseif num\
    \ >= 500 then\n      roman = roman .. 'd'\n      num = num - 500\n    elseif num\
    \ >= 400 then\n      roman = roman .. 'cd'\n      num = num - 400\n    elseif\
    \ num >= 100 then\n      roman = roman .. 'c'\n      num = num - 100\n    elseif\
    \ num >= 90 then\n      roman = roman .. 'xc'\n      num = num - 90\n    elseif\
    \ num >= 50 then\n      roman = roman .. 'l'\n      num = num - 50\n    elseif\
    \ num >= 40 then\n      roman = roman .. 'xl'\n      num = num - 40\n    elseif\
    \ num >= 10 then\n      roman = roman .. 'x'\n      num = num - 10\n    elseif\
    \ num >= 9 then\n      roman = roman .. 'ix'\n      num = num - 9\n    elseif\
    \ num >= 5 then\n      roman = roman .. 'v'\n      num = num - 5\n    elseif num\
    \ >= 4 then\n      roman = roman .. 'iv'\n      num = num - 4\n    elseif num\
    \ >= 1 then\n      roman = roman .. 'i'\n      num = num - 1\n    end\n  end\n\
    \  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'m', 1000},\n        {'cm', 900},\n  \
    \      {'d', 500},\n        {'cd', 400},\n        {'c', 100},\n        {'xc',\
    \ 90},\n        {'l', 50},\n        {'xl', 40},\n        {'x', 10},\n        {'ix',\
    \ 9},\n        {'v', 5},\n        {'iv', 4},\n        {'i', 1}\n    }\n    local\
    \ roman_numeral = ''\n    for _, pair in ipairs(roman_numerals) do\n        local\
    \ numeral, value = pair[1], pair[2]\n        while number >= value do\n      \
    \      roman_numeral = roman_numeral .. numeral\n            number = number -\
    \ value\n        end\n    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = table.unpack(pair)\n    while number >= arabic do\n\
    \      result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local arabic,\
    \ roman = unpack(numeral)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kdurd05.lua:29:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0kdurd05.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp0kdurd05.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n\
    \    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40,\
    \ 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1,\
    \ 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals) do\n\
    \    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n \
    \     result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = ''\n    local symbols = {'m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}\n    local values = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    for i = 1, #values do\n        while number\
    \ >= values[i] do\n            result = result .. symbols[i]\n            number\
    \ = number - values[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {'m', 1000},\n        {'cm', 900},\n  \
    \      {'d', 500},\n        {'cd', 400},\n        {'c', 100},\n        {'xc',\
    \ 90},\n        {'l', 50},\n        {'xl', 40},\n        {'x', 10},\n        {'ix',\
    \ 9},\n        {'v', 5},\n        {'iv', 4},\n        {'i', 1}\n    }\n    local\
    \ result = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local\
    \ letter, value = numeral[1], numeral[2]\n        local count = math.floor(number\
    \ / value)\n        result = result .. letter:rep(count)\n        number = number\
    \ - count * value\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    if number < 1 or number > 1000 then\n        return nil\n    end\n    local\
    \ roman = ''\n    local numeral_map = {\n        {1000, 'm'},\n        {900, 'cm'},\n\
    \        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90,\
    \ 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n      \
    \  {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'},\n    }\n\
    \    for _, numeral in ipairs(numeral_map) do\n        local arabic, roman_numeral\
    \ = numeral[1], numeral[2]\n        while number >= arabic do\n            roman\
    \ = roman .. roman_numeral\n            number = number - arabic\n        end\n\
    \    end\n    return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        while number\
    \ >= numeral[1] do\n            result = result .. numeral[2]\n            number\
    \ = number - numeral[1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_string\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local decimal, roman\
    \ = pair[1], pair[2]\n        while number >= decimal do\n            roman_string\
    \ = roman_string .. roman\n            number = number - decimal\n        end\n\
    \    end\n    return roman_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman = ''\n  local num = number\n  local numeral_map = {\n    {1000,\
    \ 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n\
    \    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n\
    \    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'}\n  }\n  for _, pair in ipairs(numeral_map)\
    \ do\n    local arabic, roman_string = pair[1], pair[2]\n    while num >= arabic\
    \ do\n      roman = roman .. roman_string\n      num = num - arabic\n    end\n\
    \  end\n  return roman\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman = \"\"\n    local num = number\n    while num > 0 do\n      \
    \  if num >= 1000 then\n            roman = roman .. \"m\"\n            num =\
    \ num - 1000\n        elseif num >= 900 then\n            roman = roman .. \"\
    cm\"\n            num = num - 900\n        elseif num >= 500 then\n          \
    \  roman = roman .. \"d\"\n            num = num - 500\n        elseif num >=\
    \ 400 then\n            roman = roman .. \"cd\"\n            num = num - 400\n\
    \        elseif num >= 100 then\n            roman = roman .. \"c\"\n        \
    \    num = num - 100\n        elseif num >= 90 then\n            roman = roman\
    \ .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n     \
    \       roman = roman .. \"l\"\n            num = num - 50\n        elseif num\
    \ >= 40 then\n            roman = roman .. \"xl\"\n            num = num - 40\n\
    \        elseif num >= 10 then\n            roman = roman .. \"x\"\n         \
    \   num = num - 10\n        elseif num >= 9 then\n            roman = roman ..\
    \ \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n          \
    \  roman = roman .. \"v\"\n            num = num - 5\n        elseif num >= 4\
    \ then\n            roman = roman .. \"iv\"\n            num = num - 4\n     \
    \   elseif num >= 1 then\n            roman = roman .. \"i\"\n            num\
    \ = num - 1\n        end\n    end\n    return roman\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),\
    \ 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750526
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \  local roman_numerals = {\n    {'i', 'v'},\n    {'x', 'l'},\n    {'c', 'd'},\n\
    \    {'m'}\n  }\n  local result = ''\n  local num = number\n  local digit = 0\n\
    \  while num > 0 do\n    local remainder = num % 10\n    local roman_digit = ''\n\
    \    if remainder == 9 then\n      roman_digit = roman_numerals[digit + 1][1]\
    \ .. roman_numerals[digit + 2][1]\n    elseif remainder >= 5 then\n      roman_digit\
    \ = roman_numerals[digit + 1][2]\n      for i = 1, remainder - 5 do\n        roman_digit\
    \ = roman_digit .. roman_numerals[digit + 1][1]\n      end\n    elseif remainder\
    \ == 4 then\n      roman_digit = roman_numerals[digit + 1][1] .. roman_numerals[digit\
    \ + 1][2]\n    else\n      for i = 1, remainder do\n        roman_digit = roman_digit\
    \ .. roman_numerals[digit + 1][1]\n      end\n    end\n    result = roman_digit\
    \ .. result\n    num = math.floor(num / 10)\n    digit = digit + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
    \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
    \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
    \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
    \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
    \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
    \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
    \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numeral = \"\"\n    local roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for i, v in ipairs(roman_numerals)\
    \ do\n        while number >= v[1] do\n            roman_numeral = roman_numeral\
    \ .. v[2]\n            number = number - v[1]\n        end\n    end\n    return\
    \ roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n \
    \   lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 0
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local result = \"\"\n    local num = number\n    local roman_numerals = {\n\
    \        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n     \
    \   {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    }\n    for\
    \ _, v in ipairs(roman_numerals) do\n        while num >= v[1] do\n          \
    \  result = result .. v[2]\n            num = num - v[1]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659805770
- exit_code: 1
  program: "-- Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n\
    -- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n\
    -- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\
    \    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n  \
    \      {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, pair in ipairs(roman_numerals) do\n        local arabic, roman\
    \ = table.unpack(pair)\n        while number >= arabic do\n            result\
    \ = result .. roman\n            number = number - arabic\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n\
    \    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),\
    \ 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),\
    \ 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),\
    \ 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),\
    \ 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),\
    \ 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),\
    \ 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1642el_.lua:29:\
    \ attempt to call field 'unpack' (a nil value)\nstack traceback:\n\t/tmp/tmpq1642el_.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpq1642el_.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750526
