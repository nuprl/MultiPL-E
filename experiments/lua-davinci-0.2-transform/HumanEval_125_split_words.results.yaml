language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkbi8fo8.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpwkbi8fo8.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpwkbi8fo8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c >= 'a' and c <=\
    \ 'z' and (i % 2) == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxr20raq.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpaxr20raq.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = ord(c)\n\
    \        if o >= ord('a') and o <= ord('z') then\n            if o % 2 == 1 then\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4deth119.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4deth119.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for c in\
    \ txt:gmatch('.') do\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \        if c:lower() == string.char(97 + count) then\n            count = count\
    \ + 1\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy3zgkow.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpzy3zgkow.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            if c:lower()\
    \ == c and (i % 2) == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9oa2drs4.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp9oa2drs4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local w = ''\n    for c in txt:gmatch('.') do\n   \
    \     if c:match('%s') then\n            if w ~= '' then\n                table.insert(words,\
    \ w)\n                w = ''\n            end\n        elseif c:match(',') then\n\
    \            if w ~= '' then\n                table.insert(words, w)\n       \
    \         w = ''\n            end\n        else\n            w = w .. c\n    \
    \    end\n    end\n    if w ~= '' then\n        table.insert(words, w)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte('a')\n            if o % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr85qo52l.lua:52:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpr85qo52l.lua:52: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in string.gmatch(txt, \"[^%s]+\") do\n   \
    \     table.insert(words, word)\n    end\n    if #words == 0 then\n        for\
    \ word in string.gmatch(txt, \"[^,]+\") do\n            table.insert(words, word)\n\
    \        end\n    end\n    if #words == 0 then\n        local count = 0\n    \
    \    for i = 1, #txt do\n            local c = string.byte(txt, i)\n         \
    \   if c >= 97 and c <= 122 and i % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm9rgzmq.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpxm9rgzmq.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words > 0 then\n\
    \        return words\n    end\n    local odd_count = 0\n    for c in txt:gmatch('.')\
    \ do\n        if string.byte(c) % 2 == 1 then\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lzhi6td.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0lzhi6td.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslaw9g63.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpslaw9g63.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        if string.sub(txt, i, i) == ' ' then\n       \
    \     words[j] = string.sub(txt, 1, i - 1)\n            txt = string.sub(txt,\
    \ i + 1, len)\n            i = 1\n            j = j + 1\n        elseif string.sub(txt,\
    \ i, i) == ',' then\n            words[j] = string.sub(txt, 1, i - 1)\n      \
    \      txt = string.sub(txt, i + 1, len)\n            i = 1\n            j = j\
    \ + 1\n        else\n            i = i + 1\n        end\n    end\n    if j > 1\
    \ then\n        words[j] = txt\n        return words\n    else\n        local\
    \ count = 0\n        for i = 1, len do\n            if string.byte(txt, i) % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl18llh9.lua:50:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgl18llh9.lua:50: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:byte() % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c311lj3.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0c311lj3.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp0c311lj3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        if string.sub(txt, i, i) == ' ' then\n       \
    \     words[j] = string.sub(txt, i, i)\n            j = j + 1\n            i =\
    \ i + 1\n        elseif string.sub(txt, i, i) == ',' then\n            words[j]\
    \ = string.sub(txt, i, i)\n            j = j + 1\n            i = i + 1\n    \
    \    else\n            local k = i\n            while k <= len and string.sub(txt,\
    \ k, k) ~= ' ' and string.sub(txt, k, k) ~= ',' do\n                k = k + 1\n\
    \            end\n            words[j] = string.sub(txt, i, k - 1)\n         \
    \   j = j + 1\n            i = k\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hu2z_21.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \" \", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmp_hu2z_21.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11p0kasb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp11p0kasb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c >= 'a' and c <=\
    \ 'z' and i % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ugrrt0c.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp_ugrrt0c.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    while i <= #txt do\n\
    \        if txt:sub(i, i) == ' ' then\n            words[#words + 1] = txt:sub(j,\
    \ i - 1)\n            j = i + 1\n        elseif txt:sub(i, i) == ',' then\n  \
    \          words[#words + 1] = txt:sub(j, i - 1)\n            j = i + 1\n    \
    \    end\n        i = i + 1\n    end\n    if #words == 0 then\n        local count\
    \ = 0\n        for i = 1, #txt do\n            if txt:sub(i, i) >= 'a' and txt:sub(i,\
    \ i) <= 'z' and i % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    words[#words + 1] = txt:sub(j,\
    \ #txt)\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5g93hx1.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpp5g93hx1.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and c:byte() % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6uylam2.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpm6uylam2.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpm6uylam2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local ch = txt:sub(i, i)\n        if ch == ' ' or ch == ','\
    \ then\n            if word ~= '' then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. ch\n        end\n    end\n    if word ~= '' then\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n\
    \            local ch = txt:sub(i, i)\n            if ch:byte() >= 97 and ch:byte()\
    \ <= 122 and (ch:byte() - 96) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyygzr9tz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpyygzr9tz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
