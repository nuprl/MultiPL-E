language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkbi8fo8.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpwkbi8fo8.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpwkbi8fo8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c >= 'a' and c <=\
    \ 'z' and (i % 2) == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxr20raq.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpaxr20raq.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = ord(c)\n\
    \        if o >= ord('a') and o <= ord('z') then\n            if o % 2 == 1 then\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4deth119.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4deth119.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for c in\
    \ txt:gmatch('.') do\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \        if c:lower() == string.char(97 + count) then\n            count = count\
    \ + 1\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy3zgkow.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpzy3zgkow.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            if c:lower()\
    \ == c and (i % 2) == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9oa2drs4.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp9oa2drs4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local w = ''\n    for c in txt:gmatch('.') do\n   \
    \     if c:match('%s') then\n            if w ~= '' then\n                table.insert(words,\
    \ w)\n                w = ''\n            end\n        elseif c:match(',') then\n\
    \            if w ~= '' then\n                table.insert(words, w)\n       \
    \         w = ''\n            end\n        else\n            w = w .. c\n    \
    \    end\n    end\n    if w ~= '' then\n        table.insert(words, w)\n    end\n\
    \    if #words > 0 then\n        return words\n    else\n        local count =\
    \ 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n       \
    \     local o = string.byte(c) - string.byte('a')\n            if o % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr85qo52l.lua:52:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpr85qo52l.lua:52: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in string.gmatch(txt, \"[^%s]+\") do\n   \
    \     table.insert(words, word)\n    end\n    if #words == 0 then\n        for\
    \ word in string.gmatch(txt, \"[^,]+\") do\n            table.insert(words, word)\n\
    \        end\n    end\n    if #words == 0 then\n        local count = 0\n    \
    \    for i = 1, #txt do\n            local c = string.byte(txt, i)\n         \
    \   if c >= 97 and c <= 122 and i % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm9rgzmq.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpxm9rgzmq.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words > 0 then\n\
    \        return words\n    end\n    local odd_count = 0\n    for c in txt:gmatch('.')\
    \ do\n        if string.byte(c) % 2 == 1 then\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return odd_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lzhi6td.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0lzhi6td.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslaw9g63.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpslaw9g63.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        if string.sub(txt, i, i) == ' ' then\n       \
    \     words[j] = string.sub(txt, 1, i - 1)\n            txt = string.sub(txt,\
    \ i + 1, len)\n            i = 1\n            j = j + 1\n        elseif string.sub(txt,\
    \ i, i) == ',' then\n            words[j] = string.sub(txt, 1, i - 1)\n      \
    \      txt = string.sub(txt, i + 1, len)\n            i = 1\n            j = j\
    \ + 1\n        else\n            i = i + 1\n        end\n    end\n    if j > 1\
    \ then\n        words[j] = txt\n        return words\n    else\n        local\
    \ count = 0\n        for i = 1, len do\n            if string.byte(txt, i) % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl18llh9.lua:50:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgl18llh9.lua:50: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:byte() % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c311lj3.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0c311lj3.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp0c311lj3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        if string.sub(txt, i, i) == ' ' then\n       \
    \     words[j] = string.sub(txt, i, i)\n            j = j + 1\n            i =\
    \ i + 1\n        elseif string.sub(txt, i, i) == ',' then\n            words[j]\
    \ = string.sub(txt, i, i)\n            j = j + 1\n            i = i + 1\n    \
    \    else\n            local k = i\n            while k <= len and string.sub(txt,\
    \ k, k) ~= ' ' and string.sub(txt, k, k) ~= ',' do\n                k = k + 1\n\
    \            end\n            words[j] = string.sub(txt, i, k - 1)\n         \
    \   j = j + 1\n            i = k\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hu2z_21.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \" \", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmp_hu2z_21.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11p0kasb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp11p0kasb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c >= 'a' and c <=\
    \ 'z' and i % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ugrrt0c.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp_ugrrt0c.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    while i <= #txt do\n\
    \        if txt:sub(i, i) == ' ' then\n            words[#words + 1] = txt:sub(j,\
    \ i - 1)\n            j = i + 1\n        elseif txt:sub(i, i) == ',' then\n  \
    \          words[#words + 1] = txt:sub(j, i - 1)\n            j = i + 1\n    \
    \    end\n        i = i + 1\n    end\n    if #words == 0 then\n        local count\
    \ = 0\n        for i = 1, #txt do\n            if txt:sub(i, i) >= 'a' and txt:sub(i,\
    \ i) <= 'z' and i % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    words[#words + 1] = txt:sub(j,\
    \ #txt)\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5g93hx1.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpp5g93hx1.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and c:byte() % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6uylam2.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpm6uylam2.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpm6uylam2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local ch = txt:sub(i, i)\n        if ch == ' ' or ch == ','\
    \ then\n            if word ~= '' then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. ch\n        end\n    end\n    if word ~= '' then\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n\
    \            local ch = txt:sub(i, i)\n            if ch:byte() >= 97 and ch:byte()\
    \ <= 122 and (ch:byte() - 96) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyygzr9tz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpyygzr9tz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local ord = string.byte(c)\
    \ - string.byte('a')\n        if ord % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoco6wpwy.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpoco6wpwy.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if word\
    \ ~= '' then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfob__3dg.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfob__3dg.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"\
    %S+\") do\n        words[i] = word\n        i = i + 1\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = string.byte(txt, i)\n            if c >= 97 and c <= 122 and i % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg_hp46l.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpdg_hp46l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    local\
    \ letters = {}\n    for letter in txt:gmatch('%a') do\n        table.insert(letters,\
    \ letter)\n    end\n    if #letters > 0 then\n        local count = 0\n      \
    \  for i, letter in ipairs(letters) do\n            if i % 2 == 1 then\n     \
    \           count = count + letter:byte() - 97\n            end\n        end\n\
    \        return count\n    end\n    return txt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vigf3e5.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp7vigf3e5.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmh5r9r4.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvmh5r9r4.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9_q0lo.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpva9_q0lo.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bdx7b5i.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1bdx7b5i.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    if txt:find(' ') then\n        for word in txt:gmatch('%S+')\
    \ do\n            table.insert(words, word)\n        end\n    elseif txt:find(',')\
    \ then\n        for word in txt:gmatch('[^,]+') do\n            table.insert(words,\
    \ word)\n        end\n    else\n        local count = 0\n        for i = 1, #txt\
    \ do\n            local c = txt:sub(i, i)\n            if c:byte() >= 97 and c:byte()\
    \ <= 122 and i % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtjj_tto.lua:42:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmphtjj_tto.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local odd_count = 0\n     \
    \   for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if c:lower()\
    \ == c and c:byte() % 2 == 1 then\n                odd_count = odd_count + 1\n\
    \            end\n        end\n        return odd_count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihtdyg93.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpihtdyg93.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    -- TODO: Implement\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzauq3xsp.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpzauq3xsp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \  local words = {}\n  local word = ''\n  local count = 0\n  for i = 1, #txt do\n\
    \    local c = txt:sub(i, i)\n    if c == ' ' or c == ',' then\n      if #word\
    \ > 0 then\n        words[#words + 1] = word\n        word = ''\n      end\n \
    \   else\n      word = word .. c\n    end\n  end\n  if #word > 0 then\n    words[#words\
    \ + 1] = word\n  end\n  if #words > 0 then\n    return words\n  else\n    for\
    \ i = 1, #txt do\n      local c = txt:sub(i, i)\n      if c >= 'a' and c <= 'z'\
    \ and i % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8x3hs22.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpt8x3hs22.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local letters = {}\n    for letter in txt:gmatch('%a') do\n        letters[#letters\
    \ + 1] = letter\n    end\n    if #letters > 0 then\n        local count = 0\n\
    \        for i = 1, #letters do\n            if (string.byte(letters[i]) - 96)\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_vrca_x.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpr_vrca_x.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == string.char(97 + count) then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    if #word >\
    \ 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiabilyt6.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpiabilyt6.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and i % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaoie5by.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkaoie5by.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ n = string.byte(c) - string.byte('a')\n            if n % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7z4wsg8.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpj7z4wsg8.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and (i % 2) == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuknhac_l.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpuknhac_l.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, #txt do\n            if txt:byte(i)\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h4eljqm.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2h4eljqm.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if word ~= '' then\n                table.insert(words, word)\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if i % 2 == 1 then\n                odd_count = odd_count\
    \ + 1\n            end\n        end\n    end\n    if word ~= '' then\n       \
    \ table.insert(words, word)\n    end\n    if #words > 0 then\n        return words\n\
    \    else\n        return odd_count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8iz88i4.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpw8iz88i4.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = c:byte()\
    \ - ord('a')\n        if o % 2 == 1 then\n            odd = odd + 1\n        end\n\
    \    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yemdf0q.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp1yemdf0q.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ ord = string.byte(c) - string.byte('a')\n            if ord % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10euv4cf.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp10euv4cf.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:lower() == c then\n\
    \            local ord = string.byte(c) - string.byte('a')\n            if ord\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0zcpa38.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpx0zcpa38.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkbi8fo8.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpwkbi8fo8.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpwkbi8fo8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = {}\n    local odd_letters = 0\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c ==\
    \ ',' then\n            if #word > 0 then\n                words[#words + 1] =\
    \ table.concat(word)\n                word = {}\n            end\n        else\n\
    \            word[#word + 1] = c\n        end\n    end\n    if #word > 0 then\n\
    \        words[#words + 1] = table.concat(word)\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        for i = 1, #txt do\n            local\
    \ c = txt:sub(i, i)\n            local o = c:byte() - string.byte('a')\n     \
    \       if o % 2 == 1 then\n                odd_letters = odd_letters + 1\n  \
    \          end\n        end\n        return odd_letters\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8dmld4t.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmph8dmld4t.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dm0fklp.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp5dm0fklp.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:byte() % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c311lj3.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp0c311lj3.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp0c311lj3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local odd_count = 0\n\
    \        for i = 1, #txt do\n            if (txt:byte(i) - ord('a')) % 2 == 1\
    \ then\n                odd_count = odd_count + 1\n            end\n        end\n\
    \        return odd_count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dxxw7ud.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp5dxxw7ud.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = ord(c)\n            if o\
    \ >= ord('a') and o <= ord('z') and o % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0apy4ozb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0apy4ozb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local count = 0\n\
    \        for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqki2sbir.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpqki2sbir.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqki2sbir.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local len = #txt\n    local i\
    \ = 1\n    while i <= len do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' or c == ',' then\n            if word ~= '' then\n                words[#words\
    \ + 1] = word\n                word = ''\n            end\n        else\n    \
    \        word = word .. c\n        end\n        i = i + 1\n    end\n    if word\
    \ ~= '' then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, len do\n            local c = txt:sub(i,\
    \ i)\n            local o = c:byte() - ord('a')\n            if o % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2_jrte6.lua:50:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpx2_jrte6.lua:50: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_2vlih6.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpo_2vlih6.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == string.char(97 + count) then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    if word ~=\
    \ '' then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvk72kkx.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgvk72kkx.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            if c:match('%l')\
    \ and i % 2 == 1 then\n                count = count + 1\n            end\n  \
    \      end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h9x07u3.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1h9x07u3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if #word > 0 then\n                table.insert(words, word)\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            local ord = string.byte(c) - string.byte('a')\n     \
    \       if ord % 2 == 1 then\n                odd_count = odd_count + 1\n    \
    \        end\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     return odd_count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku6easm6.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpku6easm6.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == string.char(ord('a') + count) then\n     \
    \           count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpba4h8hqi.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpba4h8hqi.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpba4h8hqi.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local odd_count = 0\n     \
    \   for i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n           \
    \     odd_count = odd_count + 1\n            end\n        end\n        return\
    \ odd_count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62iw58c5.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp62iw58c5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslaw9g63.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpslaw9g63.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if txt:byte(i) - ord('a') % 2 == 1 then\n      \
    \          count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwodc8f7p.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpwodc8f7p.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ n = string.byte(c) - string.byte('a')\n            if n % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7z4wsg8.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpj7z4wsg8.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ n = string.byte(c) - string.byte('a')\n            if n % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7z4wsg8.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpj7z4wsg8.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte('a')\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xfl94_b.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2xfl94_b.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if #word > 0 then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if c:lower() == c then\n                local ord = c:byte()\
    \ - ord('a')\n                if ord % 2 == 1 then\n                    odd_count\
    \ = odd_count + 1\n                end\n            end\n        end\n    end\n\
    \    if #word > 0 then\n        words[#words + 1] = word\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        return odd_count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvg1dk7n.lua:25:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpkvg1dk7n.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpkvg1dk7n.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and (ord(c) - ord('a')) % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \  end\n    if word ~= '' then\n        words[#words + 1] = word\n    end\n  \
    \  if #words == 0 then\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3ssw3_1.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpc3ssw3_1.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpc3ssw3_1.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if #word > 0 then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if c:lower() == c and c:upper() == c then\n         \
    \       odd_count = odd_count + 1\n            end\n        end\n    end\n   \
    \ if #word > 0 then\n        words[#words + 1] = word\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        return odd_count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb2r2hxp.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvb2r2hxp.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if ord(c) % 2 == 1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvddghwmz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvddghwmz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp231my8e9.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp231my8e9.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gnofhtq.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2gnofhtq.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in string.gmatch(txt, \"[^%s]+\") do\n   \
    \     table.insert(words, word)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            if (string.byte(txt, i) -\
    \ string.byte('a')) % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhyk6sfk.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpvhyk6sfk.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if word ~= '' then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if i % 2 == 1 then\n                odd_count = odd_count\
    \ + 1\n            end\n        end\n    end\n    if word ~= '' then\n       \
    \ words[#words + 1] = word\n    end\n    if #words > 0 then\n        return words\n\
    \    else\n        return odd_count\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbstyuq43.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpbstyuq43.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if ord(c) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n    end\n    if #word > 0 then\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    else\n\
    \        return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcodb6im.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmprcodb6im.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmprcodb6im.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local ord =\
    \ string.byte(c) - string.byte('a')\n        if ord % 2 == 1 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddevxudi.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpddevxudi.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if ord(c) % 2 == 1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvddghwmz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvddghwmz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local n = 0\n    for word in txt:gmatch('%S+') do\n\
    \        words[#words + 1] = word\n    end\n    if #words == 0 then\n        for\
    \ c in txt:gmatch('.') do\n            if c:match('%l') then\n               \
    \ n = n + 1\n            end\n        end\n        return n\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh7rh3to.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpmh7rh3to.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bdx7b5i.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1bdx7b5i.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:lower() == c then\n\
    \            if i % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4r4crir.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpk4r4crir.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte('a')\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xfl94_b.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2xfl94_b.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_p_0i92.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpe_p_0i92.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local char = txt:sub(i, i)\n        if char == ' ' or char\
    \ == ',' then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = ''\n            end\n        else\n          \
    \  word = word .. char\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local char = txt:sub(i, i)\n           \
    \ local ord = string.byte(char) - string.byte('a')\n            if ord % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtjh26j4.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpmtjh26j4.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i, c in ipairs(txt:lower()) do\n       \
    \     if i % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvptgjci0.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvptgjci0.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_p_0i92.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpe_p_0i92.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        local odd_count = 0\n        for c in txt:gmatch('.') do\n          \
    \  if string.byte(c) % 2 == 1 then\n                odd_count = odd_count + 1\n\
    \            end\n        end\n        return odd_count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtd1pmm8.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpqtd1pmm8.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11p0kasb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp11p0kasb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if txt:byte(i) - 96 % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dnt1ptj.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp_dnt1ptj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in string.gmatch(txt, \"%S+\") do\n      \
    \  table.insert(words, word)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            if (string.byte(txt, i) -\
    \ string.byte('a')) % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48ppmrpt.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp48ppmrpt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n         \
    \       count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tytj5fh.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5tytj5fh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5tytj5fh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if i % 2 == 1 then\n                count = count + (ord(c)\
    \ - ord('a'))\n            end\n        end\n    end\n    if #word > 0 then\n\
    \        words[#words + 1] = word\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmhdv_rc.lua:25:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpvmhdv_rc.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpvmhdv_rc.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local chars = {}\n    for char in txt:gmatch('%a') do\n        chars[#chars\
    \ + 1] = char\n    end\n    if #chars > 0 then\n        local count = 0\n    \
    \    for i, char in ipairs(chars) do\n            if i % 2 == 1 then\n       \
    \         count = count + (char:byte() - string.byte('a'))\n            end\n\
    \        end\n        return count\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp478o1q4y.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp478o1q4y.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9_q0lo.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpva9_q0lo.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if txt:sub(i, i):byte() % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkfxiaz4.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkkfxiaz4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpkkfxiaz4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmh5r9r4.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvmh5r9r4.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc2zrkp6.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkc2zrkp6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local char = txt:sub(i, i)\n        if char == ' ' or char\
    \ == ',' then\n            if #word > 0 then\n                words[#words + 1]\
    \ = word\n                word = ''\n            end\n        else\n         \
    \   word = word .. char\n            if char:lower() == char:sub(1, 1) and i %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    if #word > 0 then\n        words[#words + 1] = word\n    end\n \
    \   if #words > 0 then\n        return words\n    else\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbbhmhug.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmphbbhmhug.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local n = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            n = n + 1\n    \
    \    end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqx78dp6.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkqx78dp6.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            local ord = string.byte(c) - string.byte('a')\n          \
    \  if ord % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    if word ~= '' then\n        words[#words + 1] = word\n\
    \    end\n    if #words == 0 then\n        return count\n    else\n        return\
    \ words\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo73z_xf.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpuo73z_xf.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \tlocal words = {}\n\tlocal word = ''\n\tlocal count = 0\n\tfor i = 1, #txt do\n\
    \t\tlocal c = txt:sub(i, i)\n\t\tif c == ' ' or c == ',' then\n\t\t\tif #word\
    \ > 0 then\n\t\t\t\twords[#words + 1] = word\n\t\t\t\tword = ''\n\t\t\tend\n\t\
    \telse\n\t\t\tword = word .. c\n\t\t\tif c:lower() == string.char(97 + i - 1)\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tif #word > 0 then\n\
    \t\twords[#words + 1] = word\n\tend\n\tif #words > 0 then\n\t\treturn words\n\t\
    else\n\t\treturn count\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovk9_whd.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpovk9_whd.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and (ord(c) - ord('a')) % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \  end\n    if word ~= '' then\n        words[#words + 1] = word\n    end\n  \
    \  if #words > 0 then\n        return words\n    else\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwc00g_z9.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpwc00g_z9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpwc00g_z9.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"\
    [^%s]+\") do\n        words[i] = word\n        i = i + 1\n    end\n    if #words\
    \ == 0 then\n        words = {}\n        i = 1\n        for word in string.gmatch(txt,\
    \ \"[^,]+\") do\n            words[i] = word\n            i = i + 1\n        end\n\
    \        if #words == 0 then\n            local count = 0\n            for i =\
    \ 1, #txt do\n                local c = string.byte(txt, i)\n                if\
    \ c >= 97 and c <= 122 and i % 2 == 1 then\n                    count = count\
    \ + 1\n                end\n            end\n            return count\n      \
    \  end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w9diy7s.lua:43:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp9w9diy7s.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ ord = string.byte(c) - string.byte('a')\n            if ord % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10euv4cf.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp10euv4cf.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte('a')\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xfl94_b.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2xfl94_b.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if txt:byte(i) >= 97 and txt:byte(i) <=\
    \ 122 and i % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw_9zf4t.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmprw_9zf4t.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c then\n                local o = string.byte(c) - string.byte('a')\n\
    \                if o % 2 == 1 then\n                    count = count + 1\n \
    \               end\n            end\n        end\n        return count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhzmoptn.lua:50:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpdhzmoptn.lua:50: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if #word > 0 then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if (i - 1) % 2 == 0 then\n                odd_count =\
    \ odd_count + 1\n            end\n        end\n    end\n    if #word > 0 then\n\
    \        words[#words + 1] = word\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        return odd_count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4crebe3r.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4crebe3r.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if txt:byte(i) - ord('a') % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprglduly7.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmprglduly7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = \"\"\n    for i = 1, #txt do\n       \
    \ local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if\
    \ word ~= \"\" then\n                table.insert(words, word)\n             \
    \   word = \"\"\n            end\n        else\n            word = word .. c\n\
    \        end\n    end\n    if word ~= \"\" then\n        table.insert(words, word)\n\
    \    end\n    if #words == 0 then\n        local count = 0\n        for i = 1,\
    \ #txt do\n            local c = txt:sub(i, i)\n            local o = string.byte(c)\
    \ - string.byte('a')\n            if o % 2 == 1 then\n                count =\
    \ count + 1\n            end\n        end\n        return count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v41lv0j.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0v41lv0j.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local ord = string.byte(c) - string.byte('a')\n\
    \            if ord % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgzpromj.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmptgzpromj.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local odd_chars = 0\n    for char in txt:gmatch('.') do\n        if char:lower()\
    \ == char and char:byte() % 2 == 1 then\n            odd_chars = odd_chars + 1\n\
    \        end\n    end\n    return odd_chars\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkni1olwq.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkni1olwq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local ord = string.byte(c) -\
    \ string.byte('a')\n            if ord % 2 == 1 then\n                count =\
    \ count + 1\n            end\n        end\n        return count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcge_0y9o.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpcge_0y9o.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkc2zrkp6.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkc2zrkp6.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local ord =\
    \ string.byte(c) - string.byte('a')\n        if ord % 2 == 1 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddevxudi.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpddevxudi.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    -- TODO: implement this function\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl77jiz60.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpl77jiz60.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if #word > 0 then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if c:lower() == c then\n                local ord = string.byte(c)\
    \ - string.byte('a')\n                if ord % 2 == 1 then\n                 \
    \   odd_count = odd_count + 1\n                end\n            end\n        end\n\
    \    end\n    if #word > 0 then\n        words[#words + 1] = word\n    end\n \
    \   if #words > 0 then\n        return words\n    else\n        return odd_count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd2h26p_.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmptd2h26p_.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local n = 0\n    for w in txt:gmatch('%S+') do\n  \
    \      words[#words + 1] = w\n    end\n    if #words == 0 then\n        for c\
    \ in txt:gmatch('.') do\n            if c:lower() == c and c:byte() - ord('a')\
    \ % 2 == 1 then\n                n = n + 1\n            end\n        end\n   \
    \ end\n    return #words > 0 and words or n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g2xgz_o.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp7g2xgz_o.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and c:byte() % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6uylam2.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpm6uylam2.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpm6uylam2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if (txt:byte(i) - 97) % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49w2cpsf.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp49w2cpsf.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:lower() ==\
    \ c then\n            local o = c:byte() - string.byte('a')\n            if o\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo2kedur.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpyo2kedur.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gnofhtq.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2gnofhtq.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local n = #txt\n\
    \    local c\n    local count = 0\n    while i <= n do\n        c = txt:sub(i,\
    \ i)\n        if c == ' ' or c == ',' then\n            if i > j then\n      \
    \          words[#words + 1] = txt:sub(j, i - 1)\n            end\n          \
    \  j = i + 1\n        elseif c >= 'a' and c <= 'z' then\n            if (c:byte()\
    \ - ord('a')) % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        i = i + 1\n    end\n    if i > j then\n        words[#words\
    \ + 1] = txt:sub(j, i - 1)\n    end\n    if #words > 0 then\n        return words\n\
    \    else\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnmppk1d9.lua:26:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpnmppk1d9.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpnmppk1d9.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local i = 1\n    local odd_count\
    \ = 0\n    local c\n    while i <= #txt do\n        c = txt:sub(i, i)\n      \
    \  if c == ' ' or c == ',' then\n            if #word > 0 then\n             \
    \   words[#words + 1] = word\n                word = ''\n            end\n   \
    \     else\n            word = word .. c\n            if c:lower() == c and c:upper()\
    \ == c then\n                odd_count = odd_count + 1\n            end\n    \
    \    end\n        i = i + 1\n    end\n    if #word > 0 then\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    else\n\
    \        return odd_count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3rfb6zf.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpw3rfb6zf.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    local i =\
    \ 1\n    while i <= #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' or c == ',' then\n            if #word > 0 then\n                words[#words\
    \ + 1] = word\n                word = ''\n            end\n        else\n    \
    \        word = word .. c\n        end\n        i = i + 1\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        for i = 1, #txt do\n            local\
    \ c = txt:sub(i, i)\n            if c >= 'a' and c <= 'z' then\n             \
    \   if i % 2 == 1 then\n                    count = count + 1\n              \
    \  end\n            end\n        end\n        return count\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnou6k1n.lua:51:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgnou6k1n.lua:51: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            table.insert(words, word)\n            word = ''\n        else\n\
    \            word = word .. c\n        end\n    end\n    if #word > 0 then\n \
    \       table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if c >= 'a' and c <= 'z' and i % 2 == 1 then\n             \
    \   count = count + 1\n            end\n        end\n        return count\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hrs7748.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp7hrs7748.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9_q0lo.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpva9_q0lo.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"\
    %S+\") do\n        words[i] = word\n        i = i + 1\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = string.byte(txt, i)\n            if c >= 97 and c <= 122 and i % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg_hp46l.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpdg_hp46l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:byte() >= 97 and\
    \ c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi693m_e_.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpi693m_e_.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local char = txt:sub(i, i)\n        if char == ' ' or\
    \ char == ',' then\n            if #word > 0 then\n                table.insert(words,\
    \ word)\n                word = ''\n            end\n        else\n          \
    \  word = word .. char\n            if i % 2 == 1 then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    if #word > 0 then\n\
    \        table.insert(words, word)\n    end\n    if #words > 0 then\n        return\
    \ words\n    else\n        return odd_count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbggjf9u5.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpbggjf9u5.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if word ~= '' then\n                table.insert(words, word)\n\
    \                word = ''\n            end\n        else\n            word =\
    \ word .. c\n            if (c:byte() - ord('a')) % 2 == 1 then\n            \
    \    odd_count = odd_count + 1\n            end\n        end\n    end\n    if\
    \ word ~= '' then\n        table.insert(words, word)\n    end\n    if #words ==\
    \ 0 then\n        return odd_count\n    else\n        return words\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpch2eby81.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpch2eby81.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpch2eby81.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local count = 0\n    for word in txt:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    if #words == 0 then\n  \
    \      for i = 1, #txt do\n            if i % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy1b3b_r.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpwy1b3b_r.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in string.gmatch(txt, \"%S+\") do\n      \
    \  table.insert(words, word)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            if (string.byte(txt, i) -\
    \ string.byte('a')) % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48ppmrpt.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp48ppmrpt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp231my8e9.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp231my8e9.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte('a')\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xfl94_b.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2xfl94_b.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11p0kasb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp11p0kasb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    local\
    \ is_word = false\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n \
    \       if c == ' ' or c == ',' then\n            if is_word then\n          \
    \      words[#words + 1] = word\n                word = ''\n                is_word\
    \ = false\n            end\n        else\n            is_word = true\n       \
    \     word = word .. c\n            if (c:byte() - ord('a')) % 2 == 1 then\n \
    \               odd_count = odd_count + 1\n            end\n        end\n    end\n\
    \    if is_word then\n        words[#words + 1] = word\n    end\n    if #words\
    \ > 0 then\n        return words\n    else\n        return odd_count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ttgo65g.lua:27:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmp_ttgo65g.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp_ttgo65g.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    else\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ o = string.byte(c) - string.byte('a')\n            if o % 2 == 1 then\n    \
    \            count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b2pjrke.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6b2pjrke.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and (i % 2) == 1 then\n                count = count + 1\n  \
    \          end\n        end\n        return count\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuknhac_l.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpuknhac_l.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local n = 0\n    for c in txt:gmatch('.')\
    \ do\n        if c == ' ' or c == ',' then\n            if word ~= '' then\n \
    \               words[#words + 1] = word\n                word = ''\n        \
    \    end\n        else\n            word = word .. c\n        end\n        if\
    \ c:match('[a-z]') then\n            n = n + (c:byte() - ord('a')) % 2\n     \
    \   end\n    end\n    if word ~= '' then\n        words[#words + 1] = word\n \
    \   end\n    if #words > 0 then\n        return words\n    else\n        return\
    \ n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgi4ix4pz.lua:25:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpgi4ix4pz.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpgi4ix4pz.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = c:byte()\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            odd = odd + 1\n\
    \        end\n    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0a_95j2.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpc0a_95j2.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c >= 'a' and c <=\
    \ 'z' and i % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ugrrt0c.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp_ugrrt0c.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = c:byte()\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            odd = odd + 1\n\
    \        end\n    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0a_95j2.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpc0a_95j2.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and i % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaoie5by.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkaoie5by.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    local i =\
    \ 1\n    while i <= #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' or c == ',' then\n            if #word > 0 then\n                words[#words\
    \ + 1] = word\n                word = ''\n            end\n        else\n    \
    \        word = word .. c\n            if i % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        i = i + 1\n    end\n    if\
    \ #word > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0\
    \ then\n        return words\n    else\n        return count\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v8l37vd.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp5v8l37vd.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        for word in txt:gmatch('[^,]+')\
    \ do\n            words[#words + 1] = word\n        end\n    end\n    if #words\
    \ == 0 then\n        local count = 0\n        for i = 1, #txt do\n           \
    \ local c = txt:sub(i, i)\n            if c:lower() == c and c:byte() % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\n    return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cw6sfuk.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp0cw6sfuk.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    -- your code here\n    local t = {}\n    local i = 0\n    local j = 0\n \
    \   local k = 0\n    local count = 0\n    local flag = 0\n    local flag1 = 0\n\
    \    local flag2 = 0\n    local flag3 = 0\n    for i = 1, #txt do\n        if\
    \ txt:sub(i, i) == ' ' then\n            flag = 1\n        end\n        if txt:sub(i,\
    \ i) == ',' then\n            flag1 = 1\n        end\n        if txt:sub(i, i)\
    \ == 'a' or txt:sub(i, i) == 'c' or txt:sub(i, i) == 'e' or txt:sub(i, i) == 'g'\
    \ or txt:sub(i, i) == 'i' or txt:sub(i, i) == 'k' or txt:sub(i, i) == 'm' or txt:sub(i,\
    \ i) == 'o' or txt:sub(i, i) == 'q' or txt:sub(i, i) == 's' or txt:sub(i, i) ==\
    \ 'u' or txt:sub(i, i) == 'w' or txt:sub(i, i) == 'y' then\n            flag2\
    \ = 1\n        end\n        if txt:sub(i, i) == 'b' or txt:sub(i, i) == 'd' or\
    \ txt:sub(i, i) == 'f' or txt:sub(i, i) == 'h' or txt:sub(i, i) == 'j' or txt:sub(i,\
    \ i) == 'l' or txt:sub(i, i) == 'n' or txt:sub(i, i) == 'p' or txt:sub(i, i) ==\
    \ 'r' or txt:sub(i, i) == 't' or txt:sub(i, i) == 'v' or txt:sub(i, i) == 'x'\
    \ or txt:sub(i, i) == 'z' then\n            flag3 = 1\n        end\n   \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0304eils.lua:50: ''end'' expected (to close ''for'' at line
    22) near <eof>

    '
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    else\n  \
    \      for i = 1, #txt do\n            local c = txt:sub(i, i)\n            local\
    \ n = string.byte(c) - string.byte('a')\n            if n % 2 == 1 then\n    \
    \            odd = odd + 1\n            end\n        end\n        return odd\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x1hszxn.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp3x1hszxn.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    local i =\
    \ 1\n    while i <= #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' or c == ',' then\n            if word ~= '' then\n                table.insert(words,\
    \ word)\n                word = ''\n            end\n        else\n          \
    \  word = word .. c\n            if i % 2 == 1 then\n                local n =\
    \ string.byte(c) - string.byte('a')\n                if n % 2 == 1 then\n    \
    \                count = count + 1\n                end\n            end\n   \
    \     end\n        i = i + 1\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        return count\n    else\n  \
    \      return words\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrv5l_gq.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpnrv5l_gq.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dm0fklp.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp5dm0fklp.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:lower() == c then\n\
    \            local o = c:byte() - string.byte('a')\n            if o % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouqhpjgy.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpouqhpjgy.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if ord(c) % 2 == 1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvddghwmz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvddghwmz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            local c = txt:sub(i, i)\n            if\
    \ c:lower() == c and c:byte() % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6uylam2.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpm6uylam2.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpm6uylam2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if c:lower() == c then\n\
    \            local pos = c:byte() - 97\n            if pos % 2 == 1 then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf_tzuwu.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpdf_tzuwu.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local odd_count = 0\n    for i\
    \ = 1, #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ','\
    \ then\n            if word ~= '' then\n                words[#words + 1] = word\n\
    \                word = ''\n            end\n        else\n            local ord\
    \ = string.byte(c) - string.byte('a')\n            if ord % 2 == 1 then\n    \
    \            odd_count = odd_count + 1\n            end\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        words[#words + 1]\
    \ = word\n    end\n    if #words == 0 then\n        return odd_count\n    else\n\
    \        return words\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h896zft.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4h896zft.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if word\
    \ ~= '' then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfob__3dg.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfob__3dg.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr1bc4td.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpkr1bc4td.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == string.char(97 + count) then\n           \
    \     count = count + 1\n            end\n        end\n    end\n    if #word >\
    \ 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiabilyt6.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpiabilyt6.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local count = 0\n    for word in string.gmatch(txt,\
    \ \"%S+\") do\n        table.insert(words, word)\n    end\n    if #words == 0\
    \ then\n        for i = 1, #txt do\n            if string.byte(txt, i) - string.byte('a')\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyf_s7lox.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpyf_s7lox.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11p0kasb.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp11p0kasb.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            odd = odd + 1\n\
    \        end\n    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj666tzav.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpj666tzav.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o8d9zcy.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp6o8d9zcy.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local odd = 0\n  \
    \  for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            odd = odd + 1\n\
    \        end\n    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj666tzav.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpj666tzav.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local o = string.byte(c) - string.byte('a')\n\
    \            if o % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp633xfffa.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp633xfffa.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    local i =\
    \ 1\n    while i <= #txt do\n        local c = txt:sub(i, i)\n        if c ==\
    \ ' ' or c == ',' then\n            if #word > 0 then\n                words[#words\
    \ + 1] = word\n                word = ''\n            end\n        else\n    \
    \        word = word .. c\n        end\n        i = i + 1\n    end\n    if #word\
    \ > 0 then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        for i = 1, #txt do\n            local\
    \ c = txt:sub(i, i)\n            if c >= 'a' and c <= 'z' then\n             \
    \   if i % 2 == 1 then\n                    count = count + 1\n              \
    \  end\n            end\n        end\n        return count\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnou6k1n.lua:51:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpgnou6k1n.lua:51: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if #word\
    \ > 0 then\n                table.insert(words, word)\n                word =\
    \ ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    local count = 0\n\
    \    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva9_q0lo.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpva9_q0lo.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and (ord(c) - ord('a')) % 2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \  end\n    if word ~= '' then\n        words[#words + 1] = word\n    end\n  \
    \  if #words > 0 then\n        return words\n    else\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwc00g_z9.lua:24:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpwc00g_z9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpwc00g_z9.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \  local words = {}\n  local word = ''\n  local count = 0\n  for i = 1, #txt do\n\
    \    local c = txt:sub(i, i)\n    if c == ' ' or c == ',' then\n      if #word\
    \ > 0 then\n        words[#words + 1] = word\n        word = ''\n      end\n \
    \   else\n      word = word .. c\n    end\n  end\n  if #word > 0 then\n    words[#words\
    \ + 1] = word\n  end\n  if #words > 0 then\n    return words\n  else\n    for\
    \ i = 1, #txt do\n      local c = txt:sub(i, i)\n      if c >= 'a' and c <= 'z'\
    \ and i % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8x3hs22.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpt8x3hs22.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local w = ''\n    for c in txt:gmatch('.') do\n   \
    \     if c == ' ' or c == ',' then\n            if w ~= '' then\n            \
    \    table.insert(words, w)\n                w = ''\n            end\n       \
    \ else\n            w = w .. c\n        end\n    end\n    if w ~= '' then\n  \
    \      table.insert(words, w)\n    end\n    if #words == 0 then\n        local\
    \ count = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n\
    \            local o = string.byte(c) - string.byte('a')\n            if o % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0e_hzqn.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmps0e_hzqn.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if (txt:byte(i) - 97) % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49w2cpsf.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp49w2cpsf.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local idx = 1\n    local word = ''\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[idx] = word\n          \
    \      idx = idx + 1\n                word = ''\n            end\n        else\n\
    \            word = word .. c\n        end\n    end\n    if #word > 0 then\n \
    \       words[idx] = word\n    end\n    if #words > 0 then\n        return words\n\
    \    end\n    local count = 0\n    for i = 1, #txt do\n        local c = txt:sub(i,\
    \ i)\n        local o = string.byte(c) - string.byte('a')\n        if o % 2 ==\
    \ 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo6mvemk.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpoo6mvemk.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                table.insert(words, word)\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkta8kiak.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpkta8kiak.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local len = string.len(txt)\n\
    \    while i <= len do\n        if string.sub(txt, i, i) == ' ' then\n       \
    \     words[j] = string.sub(txt, 1, i - 1)\n            j = j + 1\n          \
    \  txt = string.sub(txt, i + 1, len)\n            i = 1\n            len = string.len(txt)\n\
    \        elseif string.sub(txt, i, i) == ',' then\n            words[j] = string.sub(txt,\
    \ 1, i - 1)\n            j = j + 1\n            txt = string.sub(txt, i + 1, len)\n\
    \            i = 1\n            len = string.len(txt)\n        else\n        \
    \    i = i + 1\n        end\n    end\n    if len > 0 then\n        words[j] =\
    \ txt\n    end\n    if #words == 0 then\n        local count = 0\n        for\
    \ i = 1, len do\n            if string.byte(txt, i) % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeke8cgw7.lua:53:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpeke8cgw7.lua:53: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words > 0 then\n        return words\n    end\n    for\
    \ i = 1, #txt do\n        local c = txt:sub(i, i)\n        if ord(c) % 2 == 1\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvddghwmz.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpvddghwmz.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                table.insert(words, word)\n \
    \               word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if word ~= '' then\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for i = 1, #txt do\n      \
    \      local c = txt:sub(i, i)\n            local n = string.byte(c) - string.byte('a')\n\
    \            if n % 2 == 1 then\n                count = count + 1\n         \
    \   end\n        end\n        return count\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p_ypq2r.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp8p_ypq2r.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:sub(1, 1) and i % 2 == 1 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    if word\
    \ ~= '' then\n        words[#words + 1] = word\n    end\n    if #words > 0 then\n\
    \        return words\n    else\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfob__3dg.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpfob__3dg.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for c in txt:gmatch('.') do\n\
    \        if c == ' ' or c == ',' then\n            if word ~= '' then\n      \
    \          table.insert(words, word)\n                word = ''\n            end\n\
    \        else\n            word = word .. c\n        end\n    end\n    if word\
    \ ~= '' then\n        table.insert(words, word)\n    end\n    if #words == 0 then\n\
    \        local count = 0\n        for i = 1, #txt do\n            if (txt:byte(i)\
    \ - 97) % 2 == 1 then\n                count = count + 1\n            end\n  \
    \      end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2b8uc1y.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpq2b8uc1y.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local ord = string.byte(c) -\
    \ string.byte('a')\n            if ord % 2 == 1 then\n                count =\
    \ count + 1\n            end\n        end\n        return count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcge_0y9o.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpcge_0y9o.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o = string.byte(c)\
    \ - string.byte('a')\n        if o % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dm0fklp.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp5dm0fklp.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local i = 1\n    local j = 1\n    local n = 0\n   \
    \ while true do\n        j = txt:find(' ', i)\n        if j then\n           \
    \ words[#words + 1] = txt:sub(i, j - 1)\n            i = j + 1\n        else\n\
    \            j = txt:find(',', i)\n            if j then\n                words[#words\
    \ + 1] = txt:sub(i, j - 1)\n                i = j + 1\n            else\n    \
    \            break\n            end\n        end\n    end\n    if #words == 0\
    \ then\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n    \
    \        if c:byte() >= 97 and c:byte() <= 122 then\n                if i % 2\
    \ == 1 then\n                    n = n + 1\n                end\n            end\n\
    \        end\n        return n\n    else\n        return words\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlawbi4y.lua:49:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmprlawbi4y.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    for word in txt:gmatch('%S+') do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        local odd_count = 0\n     \
    \   for i = 1, #txt do\n            if txt:byte(i) % 2 == 1 then\n           \
    \     odd_count = odd_count + 1\n            end\n        end\n        return\
    \ odd_count\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62iw58c5.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp62iw58c5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    for i = 1, #txt do\n        local\
    \ c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n            if word\
    \ ~= '' then\n                table.insert(words, word)\n                word\
    \ = ''\n            end\n        else\n            word = word .. c\n        end\n\
    \    end\n    if word ~= '' then\n        table.insert(words, word)\n    end\n\
    \    if #words == 0 then\n        local odd_count = 0\n        for i = 1, #txt\
    \ do\n            local c = txt:sub(i, i)\n            local o = ord(c)\n    \
    \        if o >= ord('a') and o <= ord('z') then\n                if (o - ord('a'))\
    \ % 2 == 1 then\n                    odd_count = odd_count + 1\n             \
    \   end\n            end\n        end\n        return odd_count\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6gufz4p.lua:49:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpn6gufz4p.lua:49: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if #word > 0 then\n                words[#words + 1] = word\n   \
    \             word = ''\n            end\n        else\n            word = word\
    \ .. c\n        end\n    end\n    if #word > 0 then\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local n = string.byte(c)\
    \ - string.byte('a')\n        if n % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gnofhtq.lua:47:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp2gnofhtq.lua:47: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799908
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    if txt:find(' ') then\n        return txt:split(' ')\n    elseif txt:find(',')\
    \ then\n        return txt:split(',')\n    else\n        local count = 0\n   \
    \     for i = 1, #txt do\n            if (txt:byte(i) - 96) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        return\
    \ count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkbi8fo8.lua:13:\
    \ attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpwkbi8fo8.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpwkbi8fo8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750466
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c:upper() then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    if word ~= '' then\n       \
    \ words[#words + 1] = word\n    end\n    if #words > 0 then\n        return words\n\
    \    else\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokn274le.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpokn274le.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659799909
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
    -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n\
    \    local words = {}\n    local word = ''\n    local count = 0\n    for i = 1,\
    \ #txt do\n        local c = txt:sub(i, i)\n        if c == ' ' or c == ',' then\n\
    \            if word ~= '' then\n                words[#words + 1] = word\n  \
    \              word = ''\n            end\n        else\n            word = word\
    \ .. c\n            if c:lower() == c and c:upper() == c then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if word ~= ''\
    \ then\n        words[#words + 1] = word\n    end\n    if #words == 0 then\n \
    \       return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yk8cd5b.lua:43:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0yk8cd5b.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750466
