name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest_palindrome = find_longest_palindrome(string)\n  \
    \  local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "  local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #palindrome_suffix)\n  return string\
    \ .. prefix:reverse()\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local function reverse(string)\n        local reversed = {}\n     \
    \   for i = #string, 1, -1 do\n            table.insert(reversed, string:sub(i,\
    \ i))\n        end\n        return table.concat(reversed)\n    end", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ len = #string\n    local prefix = string:sub(1, len - 1)\n    local suffix =\
    \ string:sub(len)\n    local prefix_len = len - 1\n    local suffix_len = len\n\
    \    local palindrome_len = 0\n    local palindrome_index = 0\n    local i = 1\n\
    \    while i <= prefix_len do\n        if prefix:sub(prefix_len - i + 1, prefix_len\
    \ - i + 1) == suffix:sub(i, i) then\n            palindrome_len = palindrome_len\
    \ + 1\n            palindrome_index = i\n        else\n            palindrome_len\
    \ = 0\n            palindrome_index = 0\n        end\n        i = i + 1\n    end\n\
    \    local prefix_palindrome = prefix:sub(1, palindrome_index - 1)\n    local\
    \ suffix_palindrome = prefix:sub(palindrome_index, palindrome_index + palindrome_len\
    \ - 1)\n    local prefix_palindrome_len = #prefix_palindrome\n    local suffix_palindrome_len\
    \ = #suffix_palindrome\n    local prefix_palindrome_reversed = ''\n    local i\
    \ = 1\n    while i <= prefix_palindrome_len do\n        prefix_palindrome_reversed\
    \ = prefix_palindrome_reversed .. prefix_palindrome:sub(prefix_palindrome_len\
    \ - i + 1, prefix_palindrome_len - i + 1)\n        i = i + 1\n    end\n    return\
    \ string .. prefix_palindrome_reversed\nend", "    local prefix = string:sub(1,\
    \ math.floor(#string / 2))\n    local suffix = string:sub(math.ceil(#string /\
    \ 2) + 1)\n    local suffix_palindrome = longest_palindrome(suffix)\n    local\
    \ prefix_palindrome = prefix:reverse():sub(1, #suffix - #suffix_palindrome)\n\
    \    return string .. prefix_palindrome\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = find_longest_palindromic_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local reversed = string:reverse()\n    local palindrome_suffix = longest_common_suffix(string,\
    \ reversed)\n    local prefix = string:sub(1, #string - #palindrome_suffix)\n\
    \    return string .. prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local function reverse(string)\n\
    \        local result = ''\n        for i = #string, 1, -1 do\n            result\
    \ = result .. string:sub(i, i)\n        end\n        return result\n    end",
  "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local palindrome_prefix\
    \ = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))\n    return\
    \ string .. palindrome_prefix\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. prefix:reverse()\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string.sub(string, 1, #string -\
    \ #palindrome_suffix))\n    return string .. palindrome_prefix\nend", "  local\
    \ palindrome_suffix = find_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #palindrome_suffix)\n  return string .. prefix:reverse()\nend", " \
    \   local palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string)\
    \ - string.len(palindrome_suffix)))\n    return string .. palindrome_prefix\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "  local string_length = #string\n\
    \  local palindrome_length = 0\n  local palindrome_start = 0\n  local palindrome_end\
    \ = 0\n  local palindrome_length_table = {}\n  local palindrome_start_table =\
    \ {}\n  local palindrome_end_table = {}\n  local i = 0\n  local j = 0\n  local\
    \ k = 0\n  local l = 0\n  local m = 0\n  local n = 0\n  local o = 0\n  local p\
    \ = 0\n  local q = 0\n  local r = 0\n  local s = 0\n  local t = 0\n  local u =\
    \ 0\n  local v = 0\n  local w = 0\n  local x = 0\n  local y = 0\n  local z = 0\n\
    \  local aa = 0\n  local ab = 0\n  local ac = 0\n  local ad = 0\n  local ae =\
    \ 0\n  local af = 0\n  local ag = 0\n  local ah = 0\n  local ai = 0\n  local aj\
    \ = 0\n  local ak = 0\n  local al = 0\n  local am = 0\n  local an = 0\n  local\
    \ ao = 0\n  local ap = 0\n  local aq = 0\n  local ar = 0\n  local as = 0\n  local\
    \ at = 0\n  local au = 0\n  local av = 0\n  local aw = 0\n  local ax = 0\n  local\
    \ ay = 0\n  local az = 0\n  local ba = 0\n  local bb = 0\n  local bc = 0\n  local\
    \ bd = 0\n  local be = 0\n  local bf = 0\n  local bg = 0\n  local bh = 0\n  local\
    \ bi = 0\n  local bj = 0\n  local bk = 0\n  local bl = 0\n  local bm = 0\n  local\
    \ bn = 0\n  local bo = 0\n  local bp = 0\n  local bq = 0\n  local br = 0\n  local\
    \ bs = 0\n  local bt = 0\n  local bu = 0\n  local bv = 0\n  local bw = 0\n  local\
    \ bx = 0\n  local by = 0\n", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local i = 1\n     \
    \       local j = #string\n            while i < j do\n                if string:sub(i,\
    \ i) ~= string:sub(j, j) then\n                    return false\n            \
    \    end\n                i = i + 1\n                j = j - 1\n            end\n\
    \            return true\n        end\n        local i = #string\n        while\
    \ i > 0 do\n            if is_palindrome(string:sub(i)) then\n               \
    \ return string:sub(i)\n            end\n            i = i - 1\n        end\n\
    \        return ''\n    end\n    local function reverse(string)\n        local\
    \ reversed = ''\n        for i = #string, 1, -1 do\n            reversed = reversed\
    \ .. string:sub(i, i)\n        end\n        return reversed\n    end\n    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. reverse(prefix)\nend", "  local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  local prefix = string:sub(1, string:len()\
    \ - longest_palindrome_suffix:len())\n  return string .. string.reverse(prefix)\n\
    end", "    local function reverse(string)\n        local reversed = ''\n     \
    \   for i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i,\
    \ i)\n        end\n        return reversed\n    end", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string\
    \ - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "  local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n  return string .. prefix:reverse()\n\
    end", "    local function find_palindrome_suffix(string)\n        local function\
    \ is_palindrome(string)\n            local len = #string\n            for i =\
    \ 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len - i + 1,\
    \ len - i + 1) then\n                    return false\n                end\n \
    \           end\n            return true\n        end\n        local len = #string\n\
    \        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i, len))\
    \ then\n                return string:sub(i, len)\n            end\n        end\n\
    \        return ''\n    end\n    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string:sub(1, #string - #palindrome_suffix)\n \
    \   return string .. palindrome_prefix:reverse()\nend", "  local function find_longest_palindrome_suffix(string)\n\
    \    local function is_palindrome(string)\n      local i = 1\n      local j =\
    \ #string\n      while i < j do\n        if string:sub(i, i) ~= string:sub(j,\
    \ j) then\n          return false\n        end\n        i = i + 1\n        j =\
    \ j - 1\n      end\n      return true\n    end\n    local function find_longest_palindrome_suffix_rec(string,\
    \ i)\n      if i == 0 then\n        return ''\n      end\n      if is_palindrome(string:sub(i))\
    \ then\n        return string:sub(i)\n      end\n      return find_longest_palindrome_suffix_rec(string,\
    \ i - 1)\n    end\n    return find_longest_palindrome_suffix_rec(string, #string)\n\
    \  end\n  local function reverse(string)\n    local reversed = ''\n    for i =\
    \ #string, 1, -1 do\n      reversed = reversed .. string:sub(i, i)\n    end\n\
    \    return reversed\n  end\n  local suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local function reverse(s)\n        local\
    \ r = ''\n        for i = #s, 1, -1 do\n            r = r .. s:sub(i, i)\n   \
    \     end\n        return r\n    end", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local function is_palindrome_helper(string,\
    \ start, finish)\n                if start >= finish then\n                  \
    \  return true\n                end\n                if string:sub(start, start)\
    \ ~= string:sub(finish, finish) then\n                    return false\n     \
    \           end\n                return is_palindrome_helper(string, start + 1,\
    \ finish - 1)\n            end\n            return is_palindrome_helper(string,\
    \ 1, string:len())\n        end\n        local function find_longest_palindrome_suffix_helper(string,\
    \ start, finish)\n            if start > finish then\n                return ''\n\
    \            end\n            if is_palindrome(string:sub(start, finish)) then\n\
    \                return string:sub(start, finish)\n            end\n         \
    \   return find_longest_palindrome_suffix_helper(string, start, finish - 1)\n\
    \        end\n        return find_longest_palindrome_suffix_helper(string, 1,\
    \ string:len())\n    end\n    local function reverse(string)\n        local function\
    \ reverse_helper(string, start, finish)\n            if start >= finish then\n\
    \                return string\n            end\n            local temp = string:sub(start,\
    \ start)\n            string = string:sub(1, start - 1) .. string:sub(finish,\
    \ finish) .. string:sub(start + 1, finish - 1)\n            string = string:sub(1,\
    \ finish - 1) .. temp .. string:sub(finish + 1, string:len())\n            return\
    \ reverse_helper(string, start + 1, finish - 1)\n        end\n        return reverse_helper(string,\
    \ 1, string:len())\n    end\n    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - palindrome_suffix:len())\n  \
    \  return string .. reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, string:len() - palindrome_suffix:len())\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "  local suffix_length = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - suffix_length)\n  return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    local reversed_prefix\
    \ = prefix:reverse()\n    return string .. reversed_prefix\nend", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string.sub(string, 1,\
    \ string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local longest_palindrome = find_longest_palindrome(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string\
    \ - 1)\n    local suffix = string:sub(#string)\n    local palindrome = string\n\
    \    while not is_palindrome(palindrome) do\n        palindrome = prefix .. suffix\
    \ .. prefix:reverse()\n        prefix = prefix:sub(1, #prefix - 1)\n        suffix\
    \ = suffix .. string:sub(#prefix + 1, #prefix + 1)\n    end\n    return palindrome\n\
    end", "  local suffix = longest_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #suffix)\n  return string .. prefix:reverse()\nend", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #suffix)\n    return string .. prefix:reverse()\nend", "    local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n    local prefix = string:sub(1, #string -\
    \ #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome_suffix)\n    return string ..\
    \ string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = #string\n\
    \            for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string:sub(1, #string - #palindrome_suffix)\n \
    \   return string .. palindrome_prefix:reverse()\nend", "    local longest_palindrome\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome)\n    return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome_suffix)\n    return string ..\
    \ string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local i = 1\n     \
    \       local j = #string\n            while i < j do\n                if string:sub(i,\
    \ i) ~= string:sub(j, j) then\n                    return false\n            \
    \    end\n                i = i + 1\n                j = j - 1\n            end\n\
    \            return true\n        end\n        local i = #string\n        while\
    \ i > 0 do\n            if is_palindrome(string:sub(i)) then\n               \
    \ return string:sub(i)\n            end\n            i = i - 1\n        end\n\
    \        return ''\n    end\n    local function reverse(string)\n        local\
    \ result = ''\n        for i = #string, 1, -1 do\n            result = result\
    \ .. string:sub(i, i)\n        end\n        return result\n    end\n    local\
    \ palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \   local longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())\n   \
    \ return string .. string:reverse():sub(1, prefix:len())\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ string:len() - suffix:len())\n    return string .. prefix:reverse()\nend", " \
    \   local function longest_palindrome_suffix(string)\n        local function is_palindrome(string)\n\
    \            local len = #string\n            for i = 1, len / 2 do\n        \
    \        if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then\n  \
    \                  return false\n                end\n            end\n      \
    \      return true\n        end\n        local len = #string\n        for i =\
    \ len, 1, -1 do\n            if is_palindrome(string:sub(i, len)) then\n     \
    \           return string:sub(i, len)\n            end\n        end\n        return\
    \ ''\n    end\n    local function reverse(string)\n        local len = #string\n\
    \        local reversed = ''\n        for i = len, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end\n\
    \    local palindrome_suffix = longest_palindrome_suffix(string)\n    local palindrome_prefix\
    \ = reverse(string:sub(1, #string - #palindrome_suffix))\n    return string ..\
    \ palindrome_prefix\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local function find_longest_palindrome_suffix(string)\n        local\
    \ function is_palindrome(string)\n            local len = #string\n          \
    \  for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome = find_longest_palindrome(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    return string ..\
    \ string.reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n    local prefix = string:sub(1, #string -\
    \ #palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n    return\
    \ string .. reversed_prefix\nend", "    local suffix = find_longest_palindromic_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local function reverse(string)\n\
    \        local reversed = {}\n        for i = #string, 1, -1 do\n            table.insert(reversed,\
    \ string:sub(i, i))\n        end\n        return table.concat(reversed)\n    end",
  "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ function reverse(string)\n        local result = ''\n        for i = #string,\
    \ 1, -1 do\n            result = result .. string:sub(i, i)\n        end\n   \
    \     return result\n    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, math.floor(#string\
    \ / 2))\n    local suffix = string:sub(math.ceil(#string / 2) + 1)\n    local\
    \ prefix_rev = string_reverse(prefix)\n    local suffix_rev = string_reverse(suffix)\n\
    \    local suffix_palindrome = longest_palindrome(suffix)\n    local prefix_palindrome\
    \ = longest_palindrome(prefix_rev)\n    if #suffix_palindrome > #prefix_palindrome\
    \ then\n        return string .. suffix_rev:sub(#suffix_palindrome + 1)\n    else\n\
    \        return string .. prefix_rev:sub(#prefix_palindrome + 1)\n    end\nend",
  "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local len = string:len()\n    local prefix = string:sub(1,\
    \ len - 1)\n    local postfix = string:sub(len, len)\n    local postfix_len =\
    \ postfix:len()\n    local prefix_len = prefix:len()\n    local prefix_rev = prefix:reverse()\n\
    \    local postfix_rev = postfix:reverse()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len = postfix_rev:len()\n\
    \    local prefix_rev_len = prefix_rev:len()\n    local postfix_rev_len =", " \
    \   local function reverse(string)\n        local result = ''\n        for i =\
    \ #string, 1, -1 do\n            result = result .. string:sub(i, i)\n       \
    \ end\n        return result\n    end", "    local prefix = string:sub(1, #string\
    \ - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local function longest_palindrome_suffix(string)\n        local function\
    \ is_palindrome(string)\n            local i = 1\n            local j = #string\n\
    \            while i < j do\n                if string:sub(i, i) ~= string:sub(j,\
    \ j) then\n                    return false\n                end\n           \
    \     i = i + 1\n                j = j - 1\n            end\n            return\
    \ true\n        end\n        local i = #string\n        while i > 0 do\n     \
    \       if is_palindrome(string:sub(i)) then\n                return string:sub(i)\n\
    \            end\n            i = i - 1\n        end\n        return ''\n    end\n\
    \    local function reverse(string)\n        local reversed = ''\n        for\
    \ i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n\
    \        end\n        return reversed\n    end\n    local palindrome_suffix =\
    \ longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. reverse(prefix)\nend", "  local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n  local prefix\
    \ = string:sub(1, #string - #longest_palindrome_suffix)\n  return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local string_length =\
    \ #string\n    local longest_palindrome_length = 0\n    local longest_palindrome_start\
    \ = 0\n    local longest_palindrome_end = 0\n    local i = 1\n    while i <= string_length\
    \ do\n        local j = string_length\n        while j >= i do\n            if\
    \ string:sub(i, j) == string:sub(i, j):reverse() then\n                local palindrome_length\
    \ = j - i + 1\n                if palindrome_length > longest_palindrome_length\
    \ then\n                    longest_palindrome_length = palindrome_length\n  \
    \                  longest_palindrome_start = i\n                    longest_palindrome_end\
    \ = j\n                end\n            end\n            j = j - 1\n        end\n\
    \        i = i + 1\n    end\n    return string:sub(1, longest_palindrome_start\
    \ - 1) .. string:sub(longest_palindrome_end + 1, string_length) .. string:sub(longest_palindrome_start,\
    \ longest_palindrome_end):reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "    local length = string:len()\n\
    \    local suffix = string:sub(length - 1, length)\n    local prefix = string:sub(1,\
    \ length - 2)\n    local reversed_prefix = prefix:reverse()\n    local palindrome\
    \ = string .. reversed_prefix\n    return palindrome\nend", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string.sub(string, 1,\
    \ #string - #suffix)\n    return string .. string.reverse(prefix)\nend", "   \
    \ local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local reversed_prefix = reversed:sub(1, #reversed - 1)\n    local reversed_suffix\
    \ = reversed:sub(#reversed)\n    local longest_suffix = reversed_suffix\n    local\
    \ longest_suffix_length = 0\n    for i = 1, #prefix do\n        local suffix_candidate\
    \ = reversed_prefix:sub(i)\n        if suffix_candidate == suffix then\n     \
    \       local suffix_candidate_length = #suffix_candidate\n            if suffix_candidate_length\
    \ > longest_suffix_length then\n                longest_suffix = suffix_candidate\n\
    \                longest_suffix_length = suffix_candidate_length\n           \
    \ end\n        end\n    end\n    return string .. reversed_prefix:sub(1, #reversed_prefix\
    \ - longest_suffix_length)\nend", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local string_length = #string\n    local\
    \ prefix_length = 0\n    local suffix_length = 0\n    local suffix_start = 0\n\
    \    local suffix_end = 0\n    local prefix_start = 0\n    local prefix_end =\
    \ 0\n    local palindrome_length = 0\n    local palindrome_start = 0\n    local\
    \ palindrome_end = 0\n    local palindrome_length_max = 0\n    local palindrome_start_max\
    \ = 0\n    local palindrome_end_max = 0\n    local palindrome_length_min = string_length\n\
    \    local palindrome_start_min = 0\n    local palindrome_end_min = 0\n    local\
    \ palindrome_length_min_max = 0\n    local palindrome_start_min_max = 0\n    local\
    \ palindrome_end_min_max = 0\n    local palindrome_length_max_max = 0\n    local\
    \ palindrome_start_max_max = 0\n    local palindrome_end_max_max = 0\n    local\
    \ palindrome_length_min_min = string_length\n    local palindrome_start_min_min\
    \ = 0\n    local palindrome_end_min_min = 0\n    local palindrome_length_max_min\
    \ = 0\n    local palindrome_start_max_min = 0\n    local palindrome_end_max_min\
    \ = 0\n    local palindrome_length_min_min_max = 0\n    local palindrome_start_min_min_max\
    \ = 0\n    local palindrome_end_min_min_max = 0\n    local palindrome_length_max_min_max\
    \ = 0\n    local palindrome_start_max_min_max = 0\n    local palindrome_end_max_min_max\
    \ = 0\n    local palindrome_length_min_max_max = 0\n    local palindrome_start_min_max_max\
    \ = 0\n    local palindrome_end_min_max_max = 0\n    local palindrome_length_max_max_max\
    \ = 0\n    local palindrome_start_max_max_max = 0\n    local palind", "    local\
    \ function is_palindrome(string)\n        local len = string:len()\n        for\
    \ i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len - i + 1,\
    \ len - i + 1) then\n                return false\n            end\n        end\n\
    \        return true\n    end", "    local string_len = string.len(string)\n \
    \   local prefix_len = 0\n    local suffix_len = 0\n    local prefix = ''\n  \
    \  local suffix = ''\n    local palindrome = ''", "    local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. reverse(prefix)\nend", "    local\
    \ palindrome_suffix = find_longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "  local palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n  return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    local\
    \ reversed_prefix = prefix:reverse()\n    return string .. reversed_prefix\nend",
  "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n    local\
    \ palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string)\
    \ - string.len(palindrome_suffix)))\n    return string .. palindrome_prefix\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local function reverse(string)\n\
    \        local reversed = {}\n        for i = #string, 1, -1 do\n            table.insert(reversed,\
    \ string:sub(i, i))\n        end\n        return table.concat(reversed)\n    end",
  "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "  local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = #string\n\
    \            for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local function reverse(string)\n  \
    \      local len = #string\n        local reversed = ''\n        for i = len,\
    \ 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n        end\n\
    \        return reversed\n    end\n    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = reverse(string:sub(1, #string - #palindrome_suffix))\n\
    \    return string .. palindrome_prefix\nend", "    local palindrome_suffix =\
    \ longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. string:reverse():sub(1, #prefix)\n\
    end", "    local function is_palindrome(string)\n        local len = string:len()\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local string_length = #string\n\
    \    local longest_palindrome_suffix_length = 0\n    local longest_palindrome_suffix_index\
    \ = 0\n    local longest_palindrome_suffix_length_at_index = {}\n    for i = 1,\
    \ string_length do\n        longest_palindrome_suffix_length_at_index[i] = 0\n\
    \    end\n    for i = 1, string_length do\n        local j = i\n        local\
    \ k = 1\n        while j <= string_length and string:sub(j, j) == string:sub(k,\
    \ k) do\n            longest_palindrome_suffix_length_at_index[i] = longest_palindrome_suffix_length_at_index[i]\
    \ + 1\n            j = j + 1\n            k = k + 1\n        end\n        if longest_palindrome_suffix_length_at_index[i]\
    \ > longest_palindrome_suffix_length then\n            longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix_length_at_index[i]\n            longest_palindrome_suffix_index\
    \ = i\n        end\n    end\n    local prefix = string:sub(1, longest_palindrome_suffix_index\
    \ - 1)\n    local reversed_prefix = prefix:reverse()\n    return string .. reversed_prefix\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "  local suffix_length = longest_palindromic_suffix(string)\n  local prefix\
    \ = string:sub(1, #string - suffix_length)\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local function reverse(s)\n    local r = ''\n    for i = #s, 1, -1 do\n\
    \      r = r .. s:sub(i, i)\n    end\n    return r\n  end", "    local function\
    \ longest_palindrome_suffix(string)\n        local function is_palindrome(string)\n\
    \            local len = #string\n            for i = 1, len do\n            \
    \    if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then\n      \
    \              return false\n                end\n            end\n          \
    \  return true\n        end\n        local len = #string\n        for i = len,\
    \ 1, -1 do\n            if is_palindrome(string:sub(i, len)) then\n          \
    \      return string:sub(i, len)\n            end\n        end\n        return\
    \ ''\n    end\n    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local function is_palindrome(string)\n\
    \        local len = #string\n        for i = 1, len / 2 do\n            if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end", "    local function\
    \ reverse(string)\n        local reversed = ''\n        for i = #string, 1, -1\
    \ do\n            reversed = reversed .. string:sub(i, i)\n        end\n     \
    \   return reversed\n    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())\n\
    \    return string .. prefix:reverse()\nend", "    local postfix = find_longest_palindromic_postfix(string)\n\
    \    local prefix = string:sub(1, #string - #postfix)\n    return string .. prefix:reverse()\n\
    end", "    local function find_longest_palindrome_suffix(string)\n        local\
    \ function is_palindrome(string)\n            return string == string:reverse()\n\
    \        end\n        local function find_longest_palindrome_suffix_rec(string,\
    \ suffix)\n            if is_palindrome(string) then\n                return suffix\n\
    \            else\n                return find_longest_palindrome_suffix_rec(string:sub(1,\
    \ -2), string:sub(-1) .. suffix)\n            end\n        end\n        return\
    \ find_longest_palindrome_suffix_rec(string, '')\n    end\n    local function\
    \ append_reverse_prefix(string, suffix)\n        return string .. suffix:reverse()\n\
    \    end\n    return append_reverse_prefix(string, find_longest_palindrome_suffix(string))\n\
    end", "    local function reverse(s)\n        return s:reverse()\n    end", " \
    \   local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ suffix_length = longest_palindromic_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - suffix_length)\n    return string .. prefix:reverse()\nend", "   \
    \ local suffix = longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, #string - #suffix)\n    return string .. string.reverse(prefix)\nend", " \
    \   local longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    local reversed_prefix\
    \ = prefix:reverse()\n    return string .. reversed_prefix\nend", "    local palindrome_suffix\
    \ = find_palindrome_suffix(string)\n    local prefix = string:sub(1, #string -\
    \ #palindrome_suffix)\n    return string .. string.reverse(prefix)\nend", "  \
    \  local palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "  local longest_palindrome_suffix =\
    \ longest_palindrome_suffix(string)\n  local prefix = string:sub(1, #string -\
    \ #longest_palindrome_suffix)\n  return string .. string:reverse():sub(1, #prefix)\n\
    end", "    local longest_palindrome = find_longest_palindrome(string)\n    local\
    \ prefix = string.sub(string, 1, string.len(string) - string.len(longest_palindrome))\n\
    \    return string.format('%s%s%s', prefix, longest_palindrome, string.reverse(prefix))\n\
    end", "  local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. prefix:reverse()\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "  local length = #string\n  local suffix = find_longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, length - suffix)\n  return string .. prefix:reverse()\n\
    end", "    local function reverse(string)\n        local reversed = ''\n     \
    \   for i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i,\
    \ i)\n        end\n        return reversed\n    end", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "  local function\
    \ reverse(string)\n    local reversed = {}\n    for i = #string, 1, -1 do\n  \
    \    table.insert(reversed, string:sub(i, i))\n    end\n    return table.concat(reversed)\n\
    \  end", "  local longest_palindrome = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n  return string .. prefix:reverse()\n\
    end", "    local n = #string\n    local suffix = string:sub(n, n)\n    local prefix\
    \ = string:sub(1, 1)\n    local i = 1\n    while i < n do\n        if string:sub(i,\
    \ n) == string:sub(1, n - i + 1):reverse() then\n            suffix = string:sub(i,\
    \ n)\n            prefix = string:sub(1, i - 1)\n        end\n        i = i +\
    \ 1\n    end\n    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \ local longest_palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())\n  return\
    \ string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local prefix_length = 0\n    local suffix_length\
    \ = 0\n    local string_length = string:len()\n    local string_reversed = string:reverse()\n\
    \    local string_length_half = math.floor(string_length / 2)"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
