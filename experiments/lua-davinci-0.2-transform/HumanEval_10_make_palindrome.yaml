name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest_palindrome = find_longest_palindrome(string)\n  \
    \  local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "  local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #palindrome_suffix)\n  return string\
    \ .. prefix:reverse()\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local function reverse(string)\n        local reversed = {}\n     \
    \   for i = #string, 1, -1 do\n            table.insert(reversed, string:sub(i,\
    \ i))\n        end\n        return table.concat(reversed)\n    end", "    local\
    \ suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ len = #string\n    local prefix = string:sub(1, len - 1)\n    local suffix =\
    \ string:sub(len)\n    local prefix_len = len - 1\n    local suffix_len = len\n\
    \    local palindrome_len = 0\n    local palindrome_index = 0\n    local i = 1\n\
    \    while i <= prefix_len do\n        if prefix:sub(prefix_len - i + 1, prefix_len\
    \ - i + 1) == suffix:sub(i, i) then\n            palindrome_len = palindrome_len\
    \ + 1\n            palindrome_index = i\n        else\n            palindrome_len\
    \ = 0\n            palindrome_index = 0\n        end\n        i = i + 1\n    end\n\
    \    local prefix_palindrome = prefix:sub(1, palindrome_index - 1)\n    local\
    \ suffix_palindrome = prefix:sub(palindrome_index, palindrome_index + palindrome_len\
    \ - 1)\n    local prefix_palindrome_len = #prefix_palindrome\n    local suffix_palindrome_len\
    \ = #suffix_palindrome\n    local prefix_palindrome_reversed = ''\n    local i\
    \ = 1\n    while i <= prefix_palindrome_len do\n        prefix_palindrome_reversed\
    \ = prefix_palindrome_reversed .. prefix_palindrome:sub(prefix_palindrome_len\
    \ - i + 1, prefix_palindrome_len - i + 1)\n        i = i + 1\n    end\n    return\
    \ string .. prefix_palindrome_reversed\nend", "    local prefix = string:sub(1,\
    \ math.floor(#string / 2))\n    local suffix = string:sub(math.ceil(#string /\
    \ 2) + 1)\n    local suffix_palindrome = longest_palindrome(suffix)\n    local\
    \ prefix_palindrome = prefix:reverse():sub(1, #suffix - #suffix_palindrome)\n\
    \    return string .. prefix_palindrome\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = find_longest_palindromic_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
