name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n\
  -- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--\
  \ 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local r = 1\n  while n > 0 do\n    if n % 2 == 1 then\n      r =\
    \ (r * 2) % p\n    end\n    n = math.floor(n / 2)\n  end\n  return r\nend", " \
    \   local r = 1\n    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n\
    \            r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n   \
    \     b = (b * b) % p\n    end\n    return r\nend", "    local r = 1\n    while\
    \ n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n        end\n\
    \        n = math.floor(n / 2)\n    end\n    return r\nend", "  -- TODO: use a\
    \ better algorithm\n  local result = 1\n  for i = 1, n do\n    result = (result\
    \ * 2) % p\n  end\n  return result\nend", "    local res = 1\n    for i = 1, n\
    \ do\n        res = (res * 2) % p\n    end\n    return res\nend", "    if n ==\
    \ 0 then\n        return 1\n    elseif n == 1 then\n        return 2\n    elseif\
    \ n % 2 == 0 then\n        return (modp(n / 2, p) ^ 2 - 1) % p\n    else\n   \
    \     return (2 * modp((n - 1) / 2, p) ^ 2) % p\n    end\nend", "  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend", "    local res = 1\n    local\
    \ x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n            res =\
    \ (res * x) % p\n        end\n        n = math.floor(n / 2)\n        x = (x *\
    \ x) % p\n    end\n    return res\nend", "  local r = 1\n  local b = 2\n  while\
    \ n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) % p\n    end\n    n = math.floor(n\
    \ / 2)\n    b = (b * b) % p\n  end\n  return r\nend", "    local r = 1\n    while\
    \ n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n        end\n\
    \        n = math.floor(n / 2)\n    end\n    return r\nend", "  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend", "    local r = 1\n    while\
    \ n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n        end\n\
    \        n = math.floor(n / 2)\n    end\n    return r\nend", "  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend", "  local res = 1\n  local\
    \ a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a) % p\n\
    \    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return res\n\
    end", "  local res = 1\n  local x = n % p\n  while n > 0 do\n    if n % 2 == 1\
    \ then\n      res = (res * x) % p\n    end\n    n = math.floor(n / 2)\n    x =\
    \ (x * x) % p\n  end\n  return res\nend", "  local res = 1\n  local x = n % p\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * x) % p\n    end\n\
    \    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n  return res\nend", " \
    \   local r = 1\n    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n\
    \            r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n   \
    \     b = (b * b) % p\n    end\n    return r\nend", "    local res = 1\n    while\
    \ n > 0 do\n        if n % 2 == 1 then\n            res = (res * 2) % p\n    \
    \    end\n        n = math.floor(n / 2)\n    end\n    return res\nend", "  local\
    \ res = 1\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n\
    \    end\n    n = math.floor(n / 2)\n  end\n  return res\nend", "    local res\
    \ = 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res\
    \ * 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
