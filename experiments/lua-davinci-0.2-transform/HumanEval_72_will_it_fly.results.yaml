language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n  local\
    \ len = #q\n  for i = 1, len / 2 do\n    if q[i] ~= q[len - i + 1] then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local i =\
    \ 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n  for i\
    \ = 1, #q do\n    if q[i] ~= q[#q - i + 1] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n  local\
    \ i = 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local i = 1\n    local j = #q\n    while i < j do\n        if q[i]\
    \ ~= q[j] then\n            return false\n        end\n        i = i + 1\n   \
    \     j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n  \
    \      sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local is_palindrome = true\n    for i = 1, #q / 2 do\n        if\
    \ q[i] ~= q[#q - i + 1] then\n            is_palindrome = false\n            break\n\
    \        end\n    end\n    return is_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  for i = 1,\
    \ #q do\n    if q[i] ~= q[#q - i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n  \
    \      sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local i = 1\n    local j = #q\n    while i < j do\n        if q[i]\
    \ ~= q[j] then\n            return false\n        end\n        i = i + 1\n   \
    \     j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local i =\
    \ 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for i, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n      \
    \      return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  for i = 1,\
    \ #q do\n    if q[i] ~= q[#q - i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n  \
    \      sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local i = 1\n    local j = #q\n    while i < j do\n        if q[i]\
    \ ~= q[j] then\n            return false\n        end\n        i = i + 1\n   \
    \     j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if #q == 0 then return false end\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then return false end\n  local i = 1\n  local j = #q\n  while i < j do\n   \
    \ if q[i] ~= q[j] then return false end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local i = 1\n    local j = #q\n    while i < j do\n        if q[i]\
    \ ~= q[j] then\n            return false\n        end\n        i = i + 1\n   \
    \     j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local i =\
    \ 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local i =\
    \ 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n  \
    \      sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local i = 1\n    local j = #q\n    while i < j do\n        if q[i]\
    \ ~= q[j] then\n            return false\n        end\n        i = i + 1\n   \
    \     j = j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i, v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n  local\
    \ i = 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for _, v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n  local\
    \ i, j = 1, #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local i =\
    \ 1\n  local j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
