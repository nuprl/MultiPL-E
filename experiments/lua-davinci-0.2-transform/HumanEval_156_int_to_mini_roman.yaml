name: HumanEval_156_int_to_mini_roman
language: lua
prompt: "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  -- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n\
  -- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n\
  -- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n\
  \    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152),\
  \ 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426),\
  \ 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1),\
  \ 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43),\
  \ 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94),\
  \ 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900),\
  \ 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000),\
  \ 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n\
    \        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90,\
    \ 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n      \
    \  {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n\
    \    local result = ''\n    for _, pair in ipairs(roman_numerals) do\n       \
    \ local arabic, roman = pair[1], pair[2]\n        while number >= arabic do\n\
    \            result = result .. roman\n            number = number - arabic\n\
    \        end\n    end\n    return result\nend", "    local roman_numerals = {\n\
    \        {1000, 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n        {400,\
    \ 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n     \
    \   {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n \
    \       {4, 'iv'},\n        {1, 'i'}\n    }\n    local roman_numeral = ''\n  \
    \  for _, pair in ipairs(roman_numerals) do\n        local arabic, numeral = pair[1],\
    \ pair[2]\n        while number >= arabic do\n            roman_numeral = roman_numeral\
    \ .. numeral\n            number = number - arabic\n        end\n    end\n   \
    \ return roman_numeral\nend", "    local roman = ''\n    local roman_numerals\
    \ = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n     \
    \   {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n\
    \        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n\
    \        {4, 'iv'},\n        {1, 'i'}\n    }\n    for _, numeral in ipairs(roman_numerals)\
    \ do\n        local value, symbol = numeral[1], numeral[2]\n        while number\
    \ >= value do\n            roman = roman .. symbol\n            number = number\
    \ - value\n        end\n    end\n    return roman\nend", "    local result = ''\n\
    \    local num = number\n    while num > 0 do\n        if num >= 1000 then\n \
    \           result = result .. 'm'\n            num = num - 1000\n        elseif\
    \ num >= 900 then\n            result = result .. 'cm'\n            num = num\
    \ - 900\n        elseif num >= 500 then\n            result = result .. 'd'\n\
    \            num = num - 500\n        elseif num >= 400 then\n            result\
    \ = result .. 'cd'\n            num = num - 400\n        elseif num >= 100 then\n\
    \            result = result .. 'c'\n            num = num - 100\n        elseif\
    \ num >= 90 then\n            result = result .. 'xc'\n            num = num -\
    \ 90\n        elseif num >= 50 then\n            result = result .. 'l'\n    \
    \        num = num - 50\n        elseif num >= 40 then\n            result = result\
    \ .. 'xl'\n            num = num - 40\n        elseif num >= 10 then\n       \
    \     result = result .. 'x'\n            num = num - 10\n        elseif num >=\
    \ 9 then\n            result = result .. 'ix'\n            num = num - 9\n   \
    \     elseif num >= 5 then\n            result = result .. 'v'\n            num\
    \ = num - 5\n        elseif num >= 4 then\n            result = result .. 'iv'\n\
    \            num = num - 4\n        elseif num >= 1 then\n            result =\
    \ result .. 'i'\n            num = num - 1\n        end\n    end\n    return result\n\
    end", "  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500,\
    \ 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n\
    \    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n\
    \    {1, 'i'}\n  }\n  local result = ''\n  for _, v in ipairs(roman_numerals)\
    \ do\n    local num, roman = v[1], v[2]\n    while number >= num do\n      result\
    \ = result .. roman\n      number = number - num\n    end\n  end\n  return result\n\
    end", "  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500,\
    \ 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n\
    \    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n\
    \    {1, 'i'}\n  }\n  local result = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local arabic, roman = pair[1], pair[2]\n    while number >= arabic do\n\
    \      result = result .. roman\n      number = number - arabic\n    end\n  end\n\
    \  return result\nend", "  local roman = ''\n  local num = number\n  local numeral\n\
    \  local count\n  for _, numeral in ipairs(mini_roman_numerals) do\n    count\
    \ = math.floor(num / numeral.value)\n    num = num - count * numeral.value\n \
    \   roman = roman .. numeral.symbol:rep(count)\n  end\n  return roman\nend", " \
    \   local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n   \
    \     {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n\
    \        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n\
    \        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result\
    \ = ''\n    for _, numeral in ipairs(roman_numerals) do\n        local value,\
    \ symbol = numeral[1], numeral[2]\n        while number >= value do\n        \
    \    result = result .. symbol\n            number = number - value\n        end\n\
    \    end\n    return result\nend", "    local roman_numerals = {\n        {1000,\
    \ 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n   \
    \     {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n\
    \        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n\
    \        {1, 'i'}\n    }\n    local result = ''\n    for _, pair in ipairs(roman_numerals)\
    \ do\n        local value, numeral = table.unpack(pair)\n        while number\
    \ >= value do\n            result = result .. numeral\n            number = number\
    \ - value\n        end\n    end\n    return result\nend", "    local roman_numerals\
    \ = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n     \
    \   {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n\
    \        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n\
    \        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result = ''\n    for _,\
    \ pair in ipairs(roman_numerals) do\n        local arabic, roman = table.unpack(pair)\n\
    \        while number >= arabic do\n            result = result .. roman\n   \
    \         number = number - arabic\n        end\n    end\n    return result\n\
    end", "    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n\
    \        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90,\
    \ 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n      \
    \  {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n\
    \    local result = ''\n    for _, pair in ipairs(roman_numerals) do\n       \
    \ local arabic, roman = pair[1], pair[2]\n        while number >= arabic do\n\
    \            result = result .. roman\n            number = number - arabic\n\
    \        end\n    end\n    return result\nend", "  local roman_numerals = {\n\
    \    {1000, 'm'},\n    {900, 'cm'},\n    {500, 'd'},\n    {400, 'cd'},\n    {100,\
    \ 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n  \
    \  {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n    {1, 'i'}\n  }\n  local result\
    \ = ''\n  for _, numeral in ipairs(roman_numerals) do\n    local value, symbol\
    \ = numeral[1], numeral[2]\n    while number >= value do\n      result = result\
    \ .. symbol\n      number = number - value\n    end\n  end\n  return result\n\
    end", "    local roman_numerals = {\n        {1000, 'm'},\n        {900, 'cm'},\n\
    \        {500, 'd'},\n        {400, 'cd'},\n        {100, 'c'},\n        {90,\
    \ 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n        {10, 'x'},\n      \
    \  {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n        {1, 'i'}\n    }\n\
    \    local result = ''\n    for _, numeral in ipairs(roman_numerals) do\n    \
    \    while number >= numeral[1] do\n            result = result .. numeral[2]\n\
    \            number = number - numeral[1]\n        end\n    end\n    return result\n\
    end", "  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n    {500,\
    \ 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50, 'l'},\n\
    \    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4, 'iv'},\n\
    \    {1, 'i'}\n  }\n  local roman_numeral = ''\n  for _, pair in ipairs(roman_numerals)\
    \ do\n    local div = math.floor(number / pair[1])\n    if div > 0 then\n    \
    \  roman_numeral = roman_numeral .. string.rep(pair[2], div)\n      number = number\
    \ - div * pair[1]\n    end\n  end\n  return roman_numeral\nend", "    local roman_numerals\
    \ = {\n        {1000, 'm'},\n        {900, 'cm'},\n        {500, 'd'},\n     \
    \   {400, 'cd'},\n        {100, 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n\
    \        {40, 'xl'},\n        {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n\
    \        {4, 'iv'},\n        {1, 'i'}\n    }\n    local result = ''\n    for _,\
    \ numeral in ipairs(roman_numerals) do\n        local value, letter = numeral[1],\
    \ numeral[2]\n        while number >= value do\n            result = result ..\
    \ letter\n            number = number - value\n        end\n    end\n    return\
    \ result\nend", "    local roman = ''\n    local numeral = {\n        {1000, 'm'},\n\
    \        {900, 'cm'},\n        {500, 'd'},\n        {400, 'cd'},\n        {100,\
    \ 'c'},\n        {90, 'xc'},\n        {50, 'l'},\n        {40, 'xl'},\n      \
    \  {10, 'x'},\n        {9, 'ix'},\n        {5, 'v'},\n        {4, 'iv'},\n   \
    \     {1, 'i'}\n    }\n    for i = 1, #numeral do\n        while number >= numeral[i][1]\
    \ do\n            roman = roman .. numeral[i][2]\n            number = number\
    \ - numeral[i][1]\n        end\n    end\n    return roman\nend", "    local roman\
    \ = ''\n    local i = 1\n    while number > 0 do\n        local digit = number\
    \ % 10\n        if digit == 9 then\n            roman = mini_roman_numerals[i]\
    \ .. mini_roman_numerals[i + 1] .. roman\n        elseif digit == 4 then\n   \
    \         roman = mini_roman_numerals[i] .. mini_roman_numerals[i + 1] .. roman\n\
    \        else\n            if digit >= 5 then\n                roman = mini_roman_numerals[i\
    \ + 1] .. roman\n                digit = digit - 5\n            end\n        \
    \    for j = 1, digit do\n                roman = mini_roman_numerals[i] .. roman\n\
    \            end\n        end\n        number = (number - digit) / 10\n      \
    \  i = i + 2\n    end\n    return roman\nend", "    local result = ''\n    local\
    \ roman_numerals = {\n        {'m', 1000},\n        {'cm', 900},\n        {'d',\
    \ 500},\n        {'cd', 400},\n        {'c', 100},\n        {'xc', 90},\n    \
    \    {'l', 50},\n        {'xl', 40},\n        {'x', 10},\n        {'ix', 9},\n\
    \        {'v', 5},\n        {'iv', 4},\n        {'i', 1}\n    }\n    for i = 1,\
    \ #roman_numerals do\n        local roman_numeral = roman_numerals[i]\n      \
    \  local roman_numeral_letter = roman_numeral[1]\n        local roman_numeral_value\
    \ = roman_numeral[2]\n        while number >= roman_numeral_value do\n       \
    \     result = result .. roman_numeral_letter\n            number = number - roman_numeral_value\n\
    \        end\n    end\n    return result\nend", "    local roman = \"\"\n    local\
    \ num = number\n    while num > 0 do\n        if num >= 1000 then\n          \
    \  roman = roman .. \"m\"\n            num = num - 1000\n        elseif num >=\
    \ 900 then\n            roman = roman .. \"cm\"\n            num = num - 900\n\
    \        elseif num >= 500 then\n            roman = roman .. \"d\"\n        \
    \    num = num - 500\n        elseif num >= 400 then\n            roman = roman\
    \ .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n   \
    \         roman = roman .. \"c\"\n            num = num - 100\n        elseif\
    \ num >= 90 then\n            roman = roman .. \"xc\"\n            num = num -\
    \ 90\n        elseif num >= 50 then\n            roman = roman .. \"l\"\n    \
    \        num = num - 50\n        elseif num >= 40 then\n            roman = roman\
    \ .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n     \
    \       roman = roman .. \"x\"\n            num = num - 10\n        elseif num\
    \ >= 9 then\n            roman = roman .. \"ix\"\n            num = num - 9\n\
    \        elseif num >= 5 then\n            roman = roman .. \"v\"\n          \
    \  num = num - 5\n        elseif num >= 4 then\n            roman = roman .. \"\
    iv\"\n            num = num - 4\n        elseif num >= 1 then\n            roman\
    \ = roman .. \"i\"\n            num = num - 1\n        end\n    end\n    return\
    \ roman\nend", "  local roman_numerals = {\n    {1000, 'm'},\n    {900, 'cm'},\n\
    \    {500, 'd'},\n    {400, 'cd'},\n    {100, 'c'},\n    {90, 'xc'},\n    {50,\
    \ 'l'},\n    {40, 'xl'},\n    {10, 'x'},\n    {9, 'ix'},\n    {5, 'v'},\n    {4,\
    \ 'iv'},\n    {1, 'i'}\n  }\n  local result = ''\n  for _, numeral in ipairs(roman_numerals)\
    \ do\n    local value, symbol = numeral[1], numeral[2]\n    while number >= value\
    \ do\n      result = result .. symbol\n      number = number - value\n    end\n\
    \  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
