name: HumanEval_154_cycpattern_check
language: lua
prompt: "-- You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n-- >>> cycpattern_check('abcd',\
  \ 'abd')\n-- false\n-- >>> cycpattern_check('hello', 'ell')\n-- true\n-- >>> cycpattern_check('whassup',\
  \ 'psus')\n-- false\n-- >>> cycpattern_check('abab', 'baa')\n-- true\n-- >>> cycpattern_check('efef',\
  \ 'eeff')\n-- false\n-- >>> cycpattern_check('himenss', 'simen')\n-- true\nlocal\
  \ function cycpattern_check(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n\
  \    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello',\
  \ 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef',\
  \ 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt',\
  \ 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local len_a = #a\n    local len_b = #b\n    if len_a < len_b then\n\
    \        return false\n    end\n    local b_rot = b\n    for i = 1, len_b do\n\
    \        if string.find(a, b_rot) then\n            return true\n        end\n\
    \        b_rot = b_rot:sub(2) .. b_rot:sub(1, 1)\n    end\n    return false\n\
    end", "    local len = #b\n    for i = 1, len do\n        if string.sub(a, i,\
    \ i + len - 1) == b then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    if #a < #b then\n        return false\n    end\n    local\
    \ b_len = #b\n    local a_len = #a\n    local b_first_char = b:sub(1, 1)\n   \
    \ local b_last_char = b:sub(b_len, b_len)\n    local a_first_char = a:sub(1, 1)\n\
    \    local a_last_char = a:sub(a_len, a_len)\n    if b_first_char == b_last_char\
    \ then\n        if a_first_char == a_last_char then\n            if a_first_char\
    \ == b_first_char then\n                local b_first_char_index = a:find(b_first_char)\n\
    \                local b_last_char_index = a:find(b_last_char, b_first_char_index\
    \ + 1)\n                if b_last_char_index then\n                    local a_substr\
    \ = a:sub(b_first_char_index, b_last_char_index)\n                    if a_substr:find(b)\
    \ then\n                        return true\n                    end\n       \
    \         end\n            end\n        end\n    end\n    local b_rotated = b:sub(2)\
    \ .. b:sub(1, 1)\n    while b_rotated ~= b do\n        if a:find(b_rotated) then\n\
    \            return true\n        end\n        b_rotated = b_rotated:sub(2) ..\
    \ b_rotated:sub(1, 1)\n    end\n    return false\nend", "    local len = #b\n\
    \    local bb = b .. b\n    return bb:find(a, 1, true) ~= nil\nend", "    local\
    \ len = #b\n    for i = 1, len do\n        if string.sub(a, 1, len) == b then\n\
    \            return true\n        end\n        b = string.sub(b, 2) .. string.sub(b,\
    \ 1, 1)\n    end\n    return false\nend", "    local len = #b\n    local b_rot\
    \ = b\n    for i = 1, len do\n        if string.find(a, b_rot) then\n        \
    \    return true\n        end\n        b_rot = string.sub(b_rot, 2) .. string.sub(b_rot,\
    \ 1, 1)\n    end\n    return false\nend", "  local len = string.len(b)\n  local\
    \ first = string.sub(b, 1, 1)\n  local last = string.sub(b, len, len)\n  local\
    \ first_pos = string.find(a, first)\n  local last_pos = string.find(a, last)\n\
    \  if first_pos == nil or last_pos == nil then\n    return false\n  end\n  if\
    \ first_pos > last_pos then\n    return false\n  end\n  local sub = string.sub(a,\
    \ first_pos, last_pos)\n  if string.find(sub, b) ~= nil then\n    return true\n\
    \  end\n  return false\nend", "    local len = #b\n    local b = b .. b\n    for\
    \ i = 1, len do\n        if string.find(a, string.sub(b, i, i + len - 1)) then\n\
    \            return true\n        end\n    end\n    return false\nend", "    local\
    \ a_len = #a\n    local b_len = #b\n    if a_len < b_len then\n        return\
    \ false\n    end\n    local a_sub = a:sub(1, b_len)\n    if a_sub == b then\n\
    \        return true\n    end\n    local a_sub_rot = a_sub:sub(2) .. a_sub:sub(1,\
    \ 1)\n    return cycpattern_check(a:sub(2), b) or cycpattern_check(a:sub(2), a_sub_rot)\n\
    end", "    local len = #b\n    local b = b .. b\n    local i = 1\n    while i\
    \ <= len do\n        if string.find(a, b:sub(i, i + len - 1)) then\n         \
    \   return true\n        end\n        i = i + 1\n    end\n    return false\nend",
  "  local len = #b\n  local a_len = #a\n  local b_len = #b\n  local b_rot = b\n \
    \ for i = 1, len do\n    if string.find(a, b_rot) then\n      return true\n  \
    \  end\n    b_rot = string.sub(b_rot, 2, b_len) .. string.sub(b_rot, 1, 1)\n \
    \ end\n  return false\nend", "  local len = #b\n  local b = b .. b\n  for i =\
    \ 1, len do\n    if b:sub(i, i + len - 1) == a then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local b_len = #b\n  local a_len = #a\n  local\
    \ b_rot = b\n  for i = 1, b_len do\n    if string.find(a, b_rot) then\n      return\
    \ true\n    end\n    b_rot = string.sub(b_rot, 2) .. string.sub(b_rot, 1, 1)\n\
    \  end\n  return false\nend", "  local len = #b\n  local b = b .. b\n  for i =\
    \ 1, len do\n    if string.find(a, string.sub(b, i, i + len - 1)) then\n     \
    \ return true\n    end\n  end\n  return false\nend", "  local len = #b\n  local\
    \ b = b .. b\n  for i = 1, len do\n    if b:sub(i, i + len - 1) == a then\n  \
    \    return true\n    end\n  end\n  return false\nend", "  local len = #b\n  local\
    \ a_len = #a\n  local b_len = #b\n  local b_first = b:sub(1, 1)\n  local b_last\
    \ = b:sub(len, len)\n  local b_mid = b:sub(2, len - 1)\n  local b_mid_rev = b_mid:reverse()\n\
    \  local b_rev = b_last .. b_mid_rev .. b_first\n  local b_rev_mid = b_mid_rev\
    \ .. b_first .. b_last\n  local b_rev_mid_rev = b_rev_mid:reverse()\n  local b_rev_last\
    \ = b_last .. b_mid .. b_first\n  local b_rev_last_rev = b_rev_last:reverse()\n\
    \  local b_rev_first = b_first .. b_mid .. b_last\n  local b_rev_first_rev = b_rev_first:reverse()\n\
    \  local b_rev_first_last = b_first .. b_mid_rev .. b_last\n  local b_rev_first_last_rev\
    \ = b_rev_first_last:reverse()\n  local b_rev_first_last_mid = b_mid_rev .. b_last\
    \ .. b_first\n  local b_rev_first_last_mid_rev = b_rev_first_last_mid:reverse()\n\
    \  local b_rev_first_last_mid_last = b_last .. b_first .. b_mid_rev\n  local b_rev_first_last_mid_last_rev\
    \ = b_rev_first_last_mid_last:reverse()\n  local b_rev_first_last_mid_first =\
    \ b_first .. b_mid_rev .. b_last\n  local b_rev_first_last_mid_first_rev = b_rev_first_last_mid_first:reverse()\n\
    \  local b_rev_first_last_mid_first_last = b_last .. b_first .. b_mid_rev\n  local\
    \ b_rev_first_last_mid_first_last_rev = b_rev_first_last_mid_first_last:reverse()\n\
    \  local", "  local a_len = #a\n  local b_len = #b\n  local b_rot = b\n  for i\
    \ = 1, b_len do\n    if a:find(b_rot) then\n      return true\n    end\n    b_rot\
    \ = b_rot:sub(2) .. b_rot:sub(1, 1)\n  end\n  return false\nend", "    local len\
    \ = #b\n    local b = b .. b\n    for i = 1, len do\n        if string.sub(b,\
    \ i, i + len - 1) == a then\n            return true\n        end\n    end\n \
    \   return false\nend", "    local len = #b\n    for i = 1, len do\n        if\
    \ string.sub(a, 1, len) == b then\n            return true\n        end\n    \
    \    b = string.sub(b, 2) .. string.sub(b, 1, 1)\n    end\n    return false\n\
    end", "  local b_len = #b\n  local a_len = #a\n  local b_rot = b\n  for i = 1,\
    \ b_len do\n    if a:find(b_rot) then\n      return true\n    end\n    b_rot =\
    \ b_rot:sub(2, b_len) .. b_rot:sub(1, 1)\n  end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
