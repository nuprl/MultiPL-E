language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = math.floor(v / 10)\n      \
    \  end\n        if not has_even then\n            table.insert(result, v)\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9euu0nm.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpr9euu0nm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if not\
    \ has_even_digit(x[i]) then\n            result[#result + 1] = x[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0fedfb61.lua:12:\
    \ attempt to call global 'has_even_digit' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp0fedfb61.lua:12: in function 'candidate'\n\t/tmp/tmp0fedfb61.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = math.floor(v / 10)\n      \
    \  end\n        if not has_even then\n            table.insert(result, v)\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9euu0nm.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpr9euu0nm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local digit = v\
    \ % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtdem8k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp0jtdem8k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        local\
    \ has_even = false\n        local n = x[i]\n        while n > 0 do\n         \
    \   if n % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(result, x[i])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    for d in tostring(v):gmatch('%d') do\n      if tonumber(d)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local function is_unique(n)\n    while n > 0 do\n      local\
    \ d = n % 10\n      if d % 2 == 0 then\n        return false\n      end\n    \
    \  n = (n - d) / 10\n    end\n    return true\n  end\n  local res = {}\n  for\
    \ _, v in ipairs(x) do\n    if is_unique(v) then\n      table.insert(res, v)\n\
    \    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local has_even\
    \ = false\n    for digit in tostring(x[i]):gmatch('%d') do\n      if tonumber(digit)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, x[i])\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local is_unique = true\n        for d in tostring(v):gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 0 then\n                is_unique = false\n    \
    \            break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local unique_digits = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even_digit = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if tonumber(d) % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even_digit then\n            table.insert(unique_digits, v)\n        end\n\
    \    end\n    table.sort(unique_digits)\n    return unique_digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i,v in ipairs(x) do\n     \
    \   local has_even = false\n        while v > 0 do\n            if (v % 10) %\
    \ 2 == 0 then\n                has_even = true\n                break\n      \
    \      end\n            v = math.floor(v / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local t = {}\n  for i,v in ipairs(x) do\n    local is_unique\
    \ = true\n    for j = 1, #tostring(v) do\n      if tonumber(tostring(v):sub(j,j))\
    \ % 2 == 0 then\n        is_unique = false\n        break\n      end\n    end\n\
    \    if is_unique then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, v in ipairs(x) do\n        if is_unique(v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        for d in tostring(x[i]):gmatch('%d') do\n            if tonumber(d)\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n        end\n        if not has_even then\n            table.insert(res,\
    \ x[i])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, v in ipairs(x) do\n        if is_unique(v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        local even\
    \ = false\n        local n = x[i]\n        while n > 0 do\n            if (n %\
    \ 10) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n            n = math.floor(n / 10)\n        end\n        if not\
    \ even then\n            table.insert(t, x[i])\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local has_even\
    \ = false\n    local num = x[i]\n    while num > 0 do\n      local digit = num\
    \ % 10\n      if digit % 2 == 0 then\n        has_even = true\n        break\n\
    \      end\n      num = math.floor(num / 10)\n    end\n    if not has_even then\n\
    \      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local digit = v\
    \ % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtdem8k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp0jtdem8k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    if not\
    \ has_even_digit(v) then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzf_fmbfc.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpzf_fmbfc.lua:12: in local 'candidate'\n\t/tmp/tmpzf_fmbfc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    while v > 0 do\n      local digit = v % 10\n      if digit\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n      v =\
    \ math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l9wvw2n.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4l9wvw2n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for i = 1, #tostring(v) do\n            if tonumber(tostring(v):sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, x[i])\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local digit = v\
    \ % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtdem8k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp0jtdem8k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, x[i])\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        local has_even = false\n        while num > 0 do\n         \
    \   if (num % 10) % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            num = math.floor(num / 10)\n       \
    \ end\n        if not has_even then\n            table.insert(res, x[i])\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        local n = v\n        while n > 0 do\n      \
    \      local d = n % 10\n            if d % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal result = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ has_even = false\n\t\twhile v > 0 do\n\t\t\tlocal digit = v % 10\n\t\t\tif digit\
    \ % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv =\
    \ math.floor(v / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(result,\
    \ _)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacdfhzli.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpacdfhzli.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        local\
    \ has_even = false\n        local num = x[i]\n        while num > 0 do\n     \
    \       if num % 2 == 0 then\n                has_even = true\n              \
    \  break\n            end\n            num = math.floor(num / 10)\n        end\n\
    \        if not has_even then\n            table.insert(result, x[i])\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n    local has_even\
    \ = false\n    while v > 0 do\n      local d = v % 10\n      if d % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n      v = math.floor(v / 10)\n\
    \    end\n    if not has_even then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxw8xy7r.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmptxw8xy7r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n    local even\
    \ = false\n    while v > 0 do\n      if (v % 10) % 2 == 0 then\n        even =\
    \ true\n        break\n      end\n      v = math.floor(v / 10)\n    end\n    if\
    \ not even then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0_v7k7a.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpb0_v7k7a.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        local\
    \ even = false\n        while v > 0 do\n            local d = v % 10\n       \
    \     if d % 2 == 0 then\n                even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not even then\n            table.insert(t, x[i])\n        end\n    end\n   \
    \ table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not string.find(tostring(v), \"[24680]\") then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        for j = 1, #tostring(x[i]) do\n            if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(res,\
    \ x[i])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        local has_even = false\n        while num > 0 do\n         \
    \   local digit = num % 10\n            if digit % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n            num =\
    \ math.floor(num / 10)\n        end\n        if not has_even then\n          \
    \  table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even\
    \ = false\n\t\twhile v > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d % 2 == 0 then\n\
    \t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\
    \t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(res, _)\n\t\tend\n\tend\n\
    \ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8umas5t.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmph8umas5t.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        local num = x[i]\n        while num > 0 do\n            local\
    \ digit = num % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            num = math.floor(num\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ x[i])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local ok = true\n        for c in tostring(v):gmatch(\"%d\") do\n          \
    \  if tonumber(c) % 2 == 0 then\n                ok = false\n                break\n\
    \            end\n        end\n        if ok then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n    local has_even\
    \ = false\n    for d in tostring(v):gmatch('%d') do\n      if tonumber(d) % 2\
    \ == 0 then\n        has_even = true\n        break\n      end\n    end\n    if\
    \ not has_even then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    while v > 0 do\n      local digit = v % 10\n      if digit\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n      v =\
    \ math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l9wvw2n.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4l9wvw2n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local is_unique = true\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                is_unique = false\n    \
    \            break\n            end\n            v = math.floor(v / 10)\n    \
    \    end\n        if is_unique then\n            table.insert(result, v)\n   \
    \     end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibtuxqan.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpibtuxqan.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local has_even =\
    \ false\n    local num = x[i]\n    while num > 0 do\n      if num % 2 == 0 then\n\
    \        has_even = true\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if not has_even then\n      table.insert(res, x[i])\n  \
    \  end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    if not\
    \ has_even_digit(v) then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzf_fmbfc.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpzf_fmbfc.lua:12: in local 'candidate'\n\t/tmp/tmpzf_fmbfc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local t = {}\n    for i = 1, #x do\n        if is_unique(x[i]) then\n   \
    \         t[#t + 1] = x[i]\n        end\n    end\n    table.sort(t)\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal result = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ has_even = false\n\t\twhile v > 0 do\n\t\t\tlocal digit = v % 10\n\t\t\tif digit\
    \ % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv =\
    \ math.floor(v / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(result,\
    \ _)\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q401x59.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmp_q401x59.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local num\
    \ = x[i]\n        local has_even = false\n        while num > 0 do\n         \
    \   local digit = num % 10\n            if digit % 2 == 0 then\n             \
    \   has_even = true\n                break\n            end\n            num =\
    \ math.floor(num / 10)\n        end\n        if not has_even then\n          \
    \  table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        local num = x[i]\n        while num > 0 do\n            local\
    \ digit = num % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            num = math.floor(num\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ x[i])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x) do\n    \
    \    local has_even = false\n        for j = 1, #tostring(v) do\n            if\
    \ tonumber(tostring(v):sub(j, j)) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x) do\n       \
    \ local has_even = false\n        for c in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(c) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    while v > 0 do\n      local d = v % 10\n      if d % 2\
    \ == 0 then\n        has_even = true\n        break\n      end\n      v = math.floor(v\
    \ / 10)\n    end\n    if not has_even then\n      table.insert(result, v)\n  \
    \  end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2rdjcrn.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpe2rdjcrn.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function has_even_digit(n)\n        while n > 0\
    \ do\n            if n % 2 == 0 then\n                return true\n          \
    \  end\n            n = math.floor(n / 10)\n        end\n        return false\n\
    \    end\n    local result = {}\n    for _, n in ipairs(x) do\n        if not\
    \ has_even_digit(n) then\n            table.insert(result, n)\n        end\n \
    \   end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local function is_unique(n)\n    while n > 0 do\n      if\
    \ n % 2 == 0 then\n        return false\n      end\n      n = math.floor(n / 10)\n\
    \    end\n    return true\n  end\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    if is_unique(v) then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even\
    \ = false\n\t\tfor d in tostring(v):gmatch('%d') do\n\t\t\tif tonumber(d) % 2\
    \ == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\
    if not has_even then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not string.find(tostring(v), '[24680]') then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, v in ipairs(x) do\n        if is_unique(v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, _)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_4dyc2x.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpu_4dyc2x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n    local is_odd\
    \ = true\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d) % 2\
    \ == 0 then\n        is_odd = false\n        break\n      end\n    end\n    if\
    \ is_odd then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local flag = true\n        for d in tostring(v):gmatch(\"%d\") do\n        \
    \    if tonumber(d) % 2 == 0 then\n                flag = false\n            \
    \    break\n            end\n        end\n        if flag then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local num = x[i]\n\
    \    local has_even = false\n    while num > 0 do\n      local digit = num % 10\n\
    \      if digit % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      num = math.floor(num / 10)\n    end\n    if not has_even then\n      table.insert(res,\
    \ x[i])\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        local\
    \ has_even = false\n        for j = 1, #tostring(x[i]) do\n            if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ if not has_even_digit(v) then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry46bsz3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpry46bsz3.lua:12: in local 'candidate'\n\t/tmp/tmpry46bsz3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        for d in tostring(v):gmatch('%d') do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even_digit = true\n\
    \                break\n            end\n        end\n        if not has_even_digit\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local is_unique = true\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                is_unique = false\n  \
    \              break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, v in ipairs(x) do\n        if is_unique(v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    while v > 0 do\n      local d = v % 10\n      if d % 2\
    \ == 0 then\n        has_even = true\n        break\n      end\n      v = math.floor(v\
    \ / 10)\n    end\n    if not has_even then\n      table.insert(result, v)\n  \
    \  end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2rdjcrn.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpe2rdjcrn.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for c in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(c) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local has_even\
    \ = false\n    local num = x[i]\n    while num > 0 do\n      local digit = num\
    \ % 10\n      if digit % 2 == 0 then\n        has_even = true\n        break\n\
    \      end\n      num = math.floor(num / 10)\n    end\n    if not has_even then\n\
    \      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            local d = n % 10\n            if d % 2 == 0 then\n              \
    \  return false\n            end\n            n = math.floor(n / 10)\n       \
    \ end\n        return true\n    end\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        if is_unique(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        for j = 1, #x[i] do\n            if x[i]:sub(j, j) % 2 == 0\
    \ then\n                has_even = true\n                break\n            end\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0dyu3be.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp_0dyu3be.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_0dyu3be.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local even = false\n        while v > 0 do\n            if (v % 10) % 2 == 0\
    \ then\n                even = true\n                break\n            end\n\
    \            v = math.floor(v / 10)\n        end\n        if not even then\n \
    \           table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglm7lzbv.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpglm7lzbv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if tonumber(d) % 2 == 0 then\n                has_even = true\n   \
    \             break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n        local\
    \ even = false\n        while v > 0 do\n            if (v % 10) % 2 == 0 then\n\
    \                even = true\n                break\n            end\n       \
    \     v = math.floor(v / 10)\n        end\n        if not even then\n        \
    \    table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx7fhxr_.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmplx7fhxr_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal result = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ has_even = false\n\t\tfor d in tostring(v):gmatch(\"%d\") do\n\t\t\tif tonumber(d)\
    \ % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    \tif not has_even then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = math.floor(v / 10)\n      \
    \  end\n        if not has_even then\n            table.insert(result, v)\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9euu0nm.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpr9euu0nm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if (n % 10) % 2 == 0 then\n                return false\n       \
    \     end\n            n = math.floor(n / 10)\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, v in ipairs(x) do\n        if is_unique(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local flag\
    \ = true\n        for j = 1, #x[i] do\n            if x[i]:sub(j, j) == '0' or\
    \ x[i]:sub(j, j) == '2' or x[i]:sub(j, j) == '4' or x[i]:sub(j, j) == '6' or x[i]:sub(j,\
    \ j) == '8' then\n                flag = false\n                break\n      \
    \      end\n        end\n        if flag then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqu85c9s.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpjqu85c9s.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjqu85c9s.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n    local flag\
    \ = true\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d) % 2\
    \ == 0 then\n        flag = false\n        break\n      end\n    end\n    if flag\
    \ then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, v in ipairs(x) do\n        if is_unique(v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpenschb4e.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpenschb4e.lua:12: in local 'candidate'\n\t/tmp/tmpenschb4e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even_digit then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjfct__9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpcjfct__9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    for c in tostring(v):gmatch(\".\") do\n      if tonumber(c)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, _)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_4dyc2x.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpu_4dyc2x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for c in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(c) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal flag = true\n\
    \t\tfor j = 1, #x[i] do\n\t\t\tif x[i]:sub(j, j) % 2 == 0 then\n\t\t\t\tflag =\
    \ false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(res,\
    \ x[i])\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg94i6zwy.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpg94i6zwy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpg94i6zwy.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function is_unique(n)\n        while n > 0 do\n\
    \            if n % 2 == 0 then\n                return false\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        return true\n    end\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n        if is_unique(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local digit = v\
    \ % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jtdem8k.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp0jtdem8k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    while v > 0 do\n      local digit = v % 10\n      if digit\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n      v =\
    \ math.floor(v / 10)\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l9wvw2n.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp4l9wvw2n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, _)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_4dyc2x.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpu_4dyc2x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ if not v:find('[02468]') then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtg_tc0x.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmphtg_tc0x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphtg_tc0x.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function has_even_digit(n)\n        while n > 0\
    \ do\n            if (n % 10) % 2 == 0 then\n                return true\n   \
    \         end\n            n = math.floor(n / 10)\n        end\n        return\
    \ false\n    end\n    local result = {}\n    for _, v in ipairs(x) do\n      \
    \  if not has_even_digit(v) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = math.floor(v / 10)\n      \
    \  end\n        if not has_even then\n            table.insert(result, v)\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9euu0nm.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpr9euu0nm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n\tlocal result = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal\
    \ has_even = false\n\t\twhile v > 0 do\n\t\t\tlocal digit = v % 10\n\t\t\tif digit\
    \ % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv =\
    \ math.floor(v / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(result,\
    \ x[i])\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        for j = 1, #x[i] do\n            if x[i]:sub(j, j) % 2 == 0\
    \ then\n                has_even = true\n                break\n            end\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2mdsdacq.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp2mdsdacq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp2mdsdacq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = (v - d) / 10\n        end\n\
    \        if not has_even then\n            table.insert(result, v)\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_lslkg9.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmpj_lslkg9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, _)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0u3xxfh.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpx0u3xxfh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlqcf3.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx9zlqcf3.lua:12: in local 'candidate'\n\t/tmp/tmpx9zlqcf3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local d = v %\
    \ 10\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n            v = math.floor(v / 10)\n      \
    \  end\n        if not has_even then\n            table.insert(result, v)\n  \
    \      end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9euu0nm.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpr9euu0nm.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = (v - d) / 10\n        end\n    \
    \    if not has_even then\n            table.insert(res, v)\n        end\n   \
    \ end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl3xxa8d.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmpyl3xxa8d.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x) do\n    if not\
    \ has_even_digit(v) then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzf_fmbfc.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpzf_fmbfc.lua:12: in local 'candidate'\n\t/tmp/tmpzf_fmbfc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, _)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_4dyc2x.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpu_4dyc2x.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey8fgzwa.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpey8fgzwa.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    if not string.find(tostring(v), \"[24680]\") then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n        local has_even\
    \ = false\n        local n = x[i]\n        while n > 0 do\n            local d\
    \ = n % 10\n            if d % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            n = math.floor(n / 10)\n\
    \        end\n        if not has_even then\n            res[#res + 1] = x[i]\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n   \
    \         if tonumber(d) % 2 == 0 then\n                has_even = true\n    \
    \            break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even_digit = false\n        for d in tostring(v):gmatch(\"%d\"\
    ) do\n            if tonumber(d) % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even_digit then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local unique = {}\n  for _, v in ipairs(x) do\n    local\
    \ has_even = false\n    for d in tostring(v):gmatch(\"%d\") do\n      if tonumber(d)\
    \ % 2 == 0 then\n        has_even = true\n        break\n      end\n    end\n\
    \    if not has_even then\n      table.insert(unique, v)\n    end\n  end\n  table.sort(unique)\n\
    \  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n  local unique_digits = {}\n  for i = 1, #x do\n    local\
    \ has_even_digit = false\n    for j = 1, #tostring(x[i]) do\n      if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n        has_even_digit = true\n        break\n      end\n\
    \    end\n    if not has_even_digit then\n      table.insert(unique_digits, x[i])\n\
    \    end\n  end\n  table.sort(unique_digits)\n  return unique_digits\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        while v > 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                has_even = true\n           \
    \     break\n            end\n            v = math.floor(v / 10)\n        end\n\
    \        if not has_even then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkibs749.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpgkibs749.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function has_even_digit(n)\n        while n > 0\
    \ do\n            if n % 2 == 0 then\n                return true\n          \
    \  end\n            n = math.floor(n / 10)\n        end\n        return false\n\
    \    end\n    local res = {}\n    for _, v in ipairs(x) do\n        if not has_even_digit(v)\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local even = false\n        while v > 0 do\n            if (v % 10) % 2 == 0\
    \ then\n                even = true\n                break\n            end\n\
    \            v = math.floor(v / 10)\n        end\n        if not even then\n \
    \           table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglm7lzbv.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpglm7lzbv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch(\"%d\") do\n\
    \            if tonumber(d) % 2 == 0 then\n                has_even = true\n \
    \               break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local has_even = false\n        for d in tostring(v):gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x) do\n       \
    \ local flag = true\n        for d in tostring(v):gmatch('%d') do\n          \
    \  if tonumber(d) % 2 == 0 then\n                flag = false\n              \
    \  break\n            end\n        end\n        if flag then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if tonumber(d) % 2 == 0 then\n                has_even = true\n   \
    \             break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
    -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
    \ unique_digits(x)\n    local function has_even_digit(n)\n        while n > 0\
    \ do\n            if n % 2 == 0 then\n                return true\n          \
    \  end\n            n = math.floor(n / 10)\n        end\n        return false\n\
    \    end\n    local result = {}\n    for _, v in ipairs(x) do\n        if not\
    \ has_even_digit(v) then\n            table.insert(result, v)\n        end\n \
    \   end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792871
