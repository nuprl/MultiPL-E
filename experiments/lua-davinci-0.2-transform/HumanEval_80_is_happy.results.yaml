language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n  for i = 1,\
    \ #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5udfk_ds.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5udfk_ds.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return false\n  end\n\
    \  for i = 1, n - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n\tlocal len = #s\n\tif len < 3 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, len - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local len = #s\n    if len < 3 then\n        return\
    \ false\n    end\n    local i = 1\n    while i < len do\n        if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then\n            return false\n        end\n  \
    \      i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m7owq73.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m7owq73.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    local len = #s\n    if len < 3 then\n        return\
    \ false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1') then\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopc48y7x.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpopc48y7x.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n  for i = 1,\
    \ #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5udfk_ds.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5udfk_ds.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n  for i = 1,\
    \ #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  local i = 1\n  while i <= len - 2 do\n    if s:sub(i, i + 2):match(\"\
    (.)%1%1\") then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_1yw61z.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv_1yw61z.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1') then\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopc48y7x.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpopc48y7x.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n  for i = 1,\
    \ #s - 2 do\n    if s:sub(i, i + 2):match('(.)%1%1') then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibz11tyj.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpibz11tyj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kbhrguz.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp0kbhrguz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0fka7lh.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn0fka7lh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n  local i =\
    \ 1\n  while i <= #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyyki3tv.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkyyki3tv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0fka7lh.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn0fka7lh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- your code here\n  local len = string.len(s)\n  if\
    \ len < 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31c65zbc.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp31c65zbc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxbgg1p8.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpkxbgg1p8.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750467
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n    if #s < 3 then\n        return false\n    end\n  \
    \  for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750467
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n\
    -- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n\
    -- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal\
    \ function is_happy(s)\n  local len = string.len(s)\n  if len < 3 then\n    return\
    \ false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i + 1] or s[i] == s[i\
    \ + 2] or s[i + 1] == s[i + 2] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkk9ap24.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzkk9ap24.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750467
