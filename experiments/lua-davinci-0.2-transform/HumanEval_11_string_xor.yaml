name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = \"\"\n  for i = 1, #a do\n    local x = a:sub(i, i)\n\
    \    local y = b:sub(i, i)\n    local z = xor(x, y)\n    result = result .. z\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #a do\n    result[i]\
    \ = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(result)\n\
    end", "  local result = ''\n  local n = math.max(#a, #b)\n  for i = 1, n do\n\
    \    local x = tonumber(a:sub(i, i)) or 0\n    local y = tonumber(b:sub(i, i))\
    \ or 0\n    result = result .. tostring(x ~ y)\n  end\n  return result\nend",
  "    local result = {}\n    for i = 1, #a do\n        result[i] = a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1'\n    end\n    return table.concat(result)\nend",
  "    local result = {}\n    for i = 1, #a do\n        local a_bit = a:sub(i, i)\n\
    \        local b_bit = b:sub(i, i)\n        if a_bit == b_bit then\n         \
    \   table.insert(result, '0')\n        else\n            table.insert(result,\
    \ '1')\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ result = ''\n    for i = 1, #a do\n        result = result .. (a:sub(i, i) ==\
    \ b:sub(i, i) and '0' or '1')\n    end\n    return result\nend", "    local r\
    \ = ''\n    for i = 1, math.max(#a, #b) do\n        local x, y = a:byte(i, i),\
    \ b:byte(i, i)\n        if x and y then\n            r = r .. string.char(x ~\
    \ y)\n        elseif x then\n            r = r .. string.char(x)\n        elseif\
    \ y then\n            r = r .. string.char(y)\n        end\n    end\n    return\
    \ r\nend", "    local result = ''\n    for i = 1, #a do\n        if a:sub(i, i)\
    \ == b:sub(i, i) then\n            result = result .. '0'\n        else\n    \
    \        result = result .. '1'\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for i = 1, #a do\n        local ai = tonumber(a:sub(i,\
    \ i))\n        local bi = tonumber(b:sub(i, i))\n        result[i] = (ai ~ bi)\
    \ and '1' or '0'\n    end\n    return table.concat(result)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n\
    \  return result\nend", "    local result = {}\n    for i = 1, #a do\n       \
    \ if a:sub(i, i) == b:sub(i, i) then\n            result[i] = '0'\n        else\n\
    \        result[i] = '1'\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #a do\n        local x = a:sub(i,\
    \ i)\n        local y = b:sub(i, i)\n        if x ~= y then\n            result[i]\
    \ = '1'\n        else\n            result[i] = '0'\n        end\n    end\n   \
    \ return table.concat(result)\nend", "    local result = ''\n    for i = 1, #a\
    \ do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return result\nend", "\tlocal result = ''\n\tfor i = 1, #a do\n\t\
    \tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result .. '0'\n\t\telse\n\
    \t\t\tresult = result .. '1'\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ result = {}\n  for i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i)\
    \ and '0' or '1'\n  end\n  return table.concat(result)\nend", "  local xor = {\n\
    \    ['00'] = '0',\n    ['01'] = '1',\n    ['10'] = '1',\n    ['11'] = '0'\n \
    \ }\n  local result = ''\n  for i = 1, #a do\n    result = result .. xor[a:sub(i,\
    \ i) .. b:sub(i, i)]\n  end\n  return result\nend", "    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend", "    local result = \"\"\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            result\
    \ = result .. \"0\"\n        else\n            result = result .. \"1\"\n    \
    \    end\n    end\n    return result\nend", "  local result = ''\n  for i = 1,\
    \ #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result .. '0'\n\
    \    else\n      result = result .. '1'\n    end\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, #a do\n    local a_bit = a:sub(i, i)\n    local\
    \ b_bit = b:sub(i, i)\n    if a_bit == b_bit then\n      result[i] = '0'\n   \
    \ else\n      result[i] = '1'\n    end\n  end\n  return table.concat(result)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
