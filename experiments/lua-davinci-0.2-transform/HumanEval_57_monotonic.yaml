name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local inc = true\n  local dec = true\n  for i = 2, #l do\n    inc\
    \ = inc and l[i] >= l[i-1]\n    dec = dec and l[i] <= l[i-1]\n  end\n  return\
    \ inc or dec\nend", "  local direction = nil\n  for i = 2, #l do\n    local d\
    \ = l[i] - l[i - 1]\n    if direction == nil then\n      direction = d\n    elseif\
    \ direction * d < 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    local d = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if d * (l[i\
    \ + 1] - l[i]) < 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    local last = l[1]\n    local increasing = true\n    for i\
    \ = 2, #l do\n        if l[i] < last then\n            increasing = false\n  \
    \          break\n        end\n        last = l[i]\n    end\n    if increasing\
    \ then\n        return true\n    end\n    last = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > last then\n            return false\n        end\n        last\
    \ = l[i]\n    end\n    return true\nend", "  local direction = nil\n  for i =\
    \ 2, #l do\n    local d = l[i] - l[i - 1]\n    if direction == nil then\n    \
    \  direction = d\n    elseif direction * d < 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local n = #l\n  if n < 2 then return true end\n\
    \  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then\
    \ return false end\n  end\n  return true\nend", "    local n = #l\n    if n <\
    \ 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n    for i\
    \ = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local inc = l[1] <= l[2]\n\
    \    for i = 2, #l - 1 do\n        if inc and l[i] > l[i + 1] then\n         \
    \   return false\n        elseif not inc and l[i] < l[i + 1] then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local inc =\
    \ true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1]\
    \ then\n            inc = false\n        elseif l[i] > l[i - 1] then\n       \
    \     dec = false\n        end\n    end\n    return inc or dec\nend", "    local\
    \ direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n \
    \       if direction == nil then\n            direction = d\n        elseif d\
    \ * direction < 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    local direction = 0\n    for i = 2, #l do\n        local\
    \ d = l[i] - l[i - 1]\n        if direction == 0 then\n            direction =\
    \ d\n        elseif direction * d < 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local n = #l\n    if n < 2 then\n\
    \        return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n\
    \        if inc ~= (l[i] > l[i - 1]) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local n = #l\n    if n < 2 then\n      \
    \  return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n  \
    \      if inc ~= (l[i] > l[i - 1]) then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local direction = nil\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i - 1]\n    if direction == nil then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n\
    \        if l[i] < l[i + 1] ~= inc then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local inc = l[1] <= l[2]\n    for i = 2,\
    \ #l - 1 do\n        if inc and l[i] > l[i + 1] then\n            return false\n\
    \        elseif not inc and l[i] < l[i + 1] then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local direction = 0\n    for\
    \ i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n  \
    \          return false\n        elseif direction == 0 then\n            direction\
    \ = d\n        elseif d * direction < 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend", "    local inc = true\n    local dec\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            inc\
    \ = false\n        elseif l[i] > l[i - 1] then\n            dec = false\n    \
    \    end\n    end\n    return inc or dec\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
