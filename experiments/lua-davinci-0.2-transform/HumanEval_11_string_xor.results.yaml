language: lua
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n   \
    \ local z = xor(x, y)\n    result = result .. z\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8oi6o45i.lua:10:\
    \ attempt to call global 'xor' (a nil value)\nstack traceback:\n\t/tmp/tmp8oi6o45i.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp8oi6o45i.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  local\
    \ n = math.max(#a, #b)\n  for i = 1, n do\n    local x = tonumber(a:sub(i, i))\
    \ or 0\n    local y = tonumber(b:sub(i, i)) or 0\n    result = result .. tostring(x\
    \ ~ y)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1emydj7z.lua:11: '')'' expected near ''~''

    '
  stdout: ''
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        if a_bit == b_bit then\n            table.insert(result,\
    \ '0')\n        else\n            table.insert(result, '1')\n        end\n   \
    \ end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local r = ''\n    for\
    \ i = 1, math.max(#a, #b) do\n        local x, y = a:byte(i, i), b:byte(i, i)\n\
    \        if x and y then\n            r = r .. string.char(x ~ y)\n        elseif\
    \ x then\n            r = r .. string.char(x)\n        elseif y then\n       \
    \     r = r .. string.char(y)\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwie_zi3f.lua:10: '')'' expected near ''~''

    '
  stdout: ''
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        result[i] = (ai ~ bi) and '1' or '0'\n \
    \   end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp04nw_mk8.lua:10: '')'' expected near ''~''

    '
  stdout: ''
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result[i] = '0'\n        else\n        result[i] = '1'\n        end\n    end\n\
    \    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result[i] = '1'\n        else\n    \
    \        result[i] = '0'\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result\
    \ .. '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor = {\n    ['00']\
    \ = '0',\n    ['01'] = '1',\n    ['10'] = '1',\n    ['11'] = '0'\n  }\n  local\
    \ result = ''\n  for i = 1, #a do\n    result = result .. xor[a:sub(i, i) .. b:sub(i,\
    \ i)]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. '0'\n    else\n      result = result .. '1'\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local a_bit = a:sub(i, i)\n    local b_bit = b:sub(i, i)\n\
    \    if a_bit == b_bit then\n      result[i] = '0'\n    else\n      result[i]\
    \ = '1'\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal xor = {}\n\tfor i\
    \ = 1, #a do\n\t\txor[i] = a:sub(i, i) ~= b:sub(i, i) and '1' or '0'\n\tend\n\t\
    return table.concat(xor)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        if a_bit == b_bit then\n            result = result ..\
    \ '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        local xor_bit = a_bit == b_bit and '0' or '1'\n       \
    \ table.insert(result, xor_bit)\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result = result .. '1'\n        else\n\
    \            result = result .. '0'\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result[i] = '1'\n        else\n    \
    \        result[i] = '0'\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local a_len = #a\n  \
    \  local b_len = #b\n    local max_len = math.max(a_len, b_len)\n    local result\
    \ = {}\n    for i = 1, max_len do\n        local a_bit = a:sub(a_len - i + 1,\
    \ a_len - i + 1)\n        local b_bit = b:sub(b_len - i + 1, b_len - i + 1)\n\
    \        local a_val = a_bit == '1' and 1 or 0\n        local b_val = b_bit ==\
    \ '1' and 1 or 0\n        local val = a_val ~ b_val\n        result[i] = val ==\
    \ 1 and '1' or '0'\n    end\n    return table.concat(result):reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = {}\n\tfor\
    \ i = 1, #a do\n\t\tresult[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\t\
    end\n\treturn table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local ai = tonumber(a:sub(i, i))\n    local bi = tonumber(b:sub(i,\
    \ i))\n    if ai == bi then\n      result[i] = '0'\n    else\n      result[i]\
    \ = '1'\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ local len = math.max(#a, #b)\n  for i = 1, len do\n    local x = tonumber(a:sub(len\
    \ - i + 1, len - i + 1)) or 0\n    local y = tonumber(b:sub(len - i + 1, len -\
    \ i + 1)) or 0\n    result = tostring(x ~ y) .. result\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        if a_bit == b_bit then\n            table.insert(result,\
    \ '0')\n        else\n            table.insert(result, '1')\n        end\n   \
    \ end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == '1' and 1 or 0\n        local y = b:sub(i, i) == '1' and 1 or 0\n    \
    \    local z = x ~ y\n        result[i] = z == 1 and '1' or '0'\n    end\n   \
    \ return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        if ai ~= bi then\n            table.insert(result,\
    \ '1')\n        else\n            table.insert(result, '0')\n        end\n   \
    \ end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. '0'\n    else\n      result = result .. '1'\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, math.max(#a, #b) do\n\t\tlocal x = tonumber(a:sub(i, i)) or 0\n\t\tlocal\
    \ y = tonumber(b:sub(i, i)) or 0\n\t\tresult = result .. tostring(x ~ y)\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = tonumber(a:sub(i, i))\n        local y\
    \ = tonumber(b:sub(i, i))\n        local z = x ~ y\n        table.insert(result,\
    \ z)\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result\
    \ .. '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   local length = math.max(a:len(), b:len())\n    for i = 1, length do\n    \
    \    local x = a:sub(i, i) == '1' and 1 or 0\n        local y = b:sub(i, i) ==\
    \ '1' and 1 or 0\n        local z = x ~ y\n        result = result .. (z == 1\
    \ and '1' or '0')\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        local xor_bit = a_bit ~= b_bit and '1' or '0'\n       \
    \ table.insert(result, xor_bit)\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = a:sub(i, i)\n        local bi = b:sub(i,\
    \ i)\n        local xor = ai ~= bi\n        table.insert(result, xor and '1' or\
    \ '0')\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\t\
    for i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result\
    \ .. \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = ''\n    for\
    \ i = 1, #a do\n        res = res .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        local xor_bit = a_bit == b_bit and '0' or '1'\n       \
    \ table.insert(result, xor_bit)\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = \"\"\n  \
    \  for i = 1, #a do\n        res = res .. (a:sub(i, i) == b:sub(i, i) and \"0\"\
    \ or \"1\")\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor = {}\n    for\
    \ i = 1, #a do\n        xor[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n \
    \   end\n    return table.concat(xor)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local x = tonumber(a:sub(i, i))\n    local y = tonumber(b:sub(i,\
    \ i))\n    if x == y then\n      result[i] = '0'\n    else\n      result[i] =\
    \ '1'\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local ai = a:sub(i, i)\n        local bi = b:sub(i,\
    \ i)\n        if ai == bi then\n            result = result .. '0'\n        else\n\
    \            result = result .. '1'\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n    local\
    \ z = x == y and '0' or '1'\n    table.insert(result, z)\n  end\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor = {}\n    for\
    \ i = 1, #a do\n        xor[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n \
    \   end\n    return table.concat(xor)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result = result .. '1'\n        else\n\
    \            result = result .. '0'\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        local xor_bit = a_bit ~= b_bit and '1' or '0'\n       \
    \ table.insert(result, xor_bit)\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i,\
    \ i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n        result = result\
    \ .. (x ~ y)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result\
    \ .. '0'\n\t\telse\n\t\t\tresult = result .. '1'\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result = result .. '1'\n        else\n\
    \            result = result .. '0'\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local a_len = #a\n  local\
    \ b_len = #b\n  local max_len = math.max(a_len, b_len)\n  local result = {}\n\
    \  for i = 1, max_len do\n    local a_bit = a:sub(a_len - i + 1, a_len - i + 1)\n\
    \    local b_bit = b:sub(b_len - i + 1, b_len - i + 1)\n    if a_bit == '1' and\
    \ b_bit == '1' then\n      result[i] = '0'\n    elseif a_bit == '0' and b_bit\
    \ == '0' then\n      result[i] = '0'\n    else\n      result[i] = '1'\n    end\n\
    \  end\n  return table.concat(result):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        if ai ~= bi then\n            table.insert(result,\
    \ '1')\n        else\n            table.insert(result, '0')\n        end\n   \
    \ end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local a_char = a:sub(i, i)\n        local b_char\
    \ = b:sub(i, i)\n        if a_char == b_char then\n            result = result\
    \ .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result[i] = '1'\n        else\n    \
    \        result[i] = '0'\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local a_bit = a:sub(i, i)\n    local b_bit = b:sub(i, i)\n\
    \    local xor_bit = (a_bit == b_bit) and '0' or '1'\n    table.insert(result,\
    \ xor_bit)\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == \"1\" and 1 or 0\n        local y = b:sub(i, i) == \"1\" and 1 or 0\n\
    \        if x ~= y then\n            result = result .. \"1\"\n        else\n\
    \            result = result .. \"0\"\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = {}\n\tfor\
    \ i = 1, #a do\n\t\tresult[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\t\
    end\n\treturn table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        if x ~= y then\n            result[i] = '1'\n        else\n    \
    \        result[i] = '0'\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, #a do\n\t\tresult = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local r = ''\n    for\
    \ i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n            r = r\
    \ .. '0'\n        else\n            r = r .. '1'\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\t\
    for i = 1, #a do\n\t\tresult = result .. (a:sub(i, i) == b:sub(i, i) and \"0\"\
    \ or \"1\")\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = {}\n    for\
    \ i = 1, #a do\n        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n \
    \   end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == \"1\" and 1 or 0\n        local y = b:sub(i, i) == \"1\" and 1 or 0\n\
    \        if x ~= y then\n            result = result .. \"1\"\n        else\n\
    \            result = result .. \"0\"\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor = {}\n  for i\
    \ = 1, #a do\n    xor[i] = (a:sub(i, i) == '1' and b:sub(i, i) == '0') or (a:sub(i,\
    \ i) == '0' and b:sub(i, i) == '1') and '1' or '0'\n  end\n  return table.concat(xor)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx5tnvkf0.lua:10:\
    \ invalid value (boolean) at index 2 in table for 'concat'\nstack traceback:\n\
    \t/tmp/tmpx5tnvkf0.lua:10: in local 'candidate'\n\t/tmp/tmpx5tnvkf0.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = {}\n    for\
    \ i = 1, #a do\n        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n \
    \   end\n    return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   local len = math.max(#a, #b)\n    for i = 1, len do\n        local a_bit =\
    \ a:sub(i, i) == '1'\n        local b_bit = b:sub(i, i) == '1'\n        result[i]\
    \ = (a_bit and not b_bit) or (not a_bit and b_bit) and '1' or '0'\n    end\n \
    \   return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps0v015oi.lua:13:\
    \ invalid value (boolean) at index 2 in table for 'concat'\nstack traceback:\n\
    \t/tmp/tmps0v015oi.lua:13: in local 'candidate'\n\t/tmp/tmps0v015oi.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  local\
    \ len = math.max(#a, #b)\n  for i = 1, len do\n    local x = a:sub(i, i) == '1'\
    \ and 1 or 0\n    local y = b:sub(i, i) == '1' and 1 or 0\n    if x ~= y then\n\
    \      table.insert(result, '1')\n    else\n      table.insert(result, '0')\n\
    \    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        result = result .. (a:sub(i, i) == b:sub(i, i) and\
    \ '0' or '1')\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n    if x\
    \ ~= y then\n      result[i] = '1'\n    else\n      result[i] = '0'\n    end\n\
    \  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i,\
    \ i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n        table.insert(result,\
    \ (x + y) % 2)\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local a_bit = a:sub(i, i)\n        local b_bit =\
    \ b:sub(i, i)\n        if a_bit == b_bit then\n            result = result ..\
    \ '0'\n        else\n            result = result .. '1'\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = a:sub(i,\
    \ i) == \"1\" and 1 or 0\n        local y = b:sub(i, i) == \"1\" and 1 or 0\n\
    \        if x ~= y then\n            result = result .. \"1\"\n        else\n\
    \            result = result .. \"0\"\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor = {}\n    for\
    \ i = 1, #a do\n        xor[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n \
    \   end\n    return table.concat(xor)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i,\
    \ i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n        result = result\
    \ .. tostring(x ~ y)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local x = a:sub(i, i)\n    local y = b:sub(i, i)\n   \
    \ if x ~= y then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local r = ''\n    for\
    \ i = 1, #a do\n        r = r .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        local xor = ai ~ bi\n        table.insert(result,\
    \ xor)\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      res = res .. \"\
    0\"\n    else\n      res = res .. \"1\"\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = {}\n  for i\
    \ = 1, #a do\n    res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n\
    \  return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local ai = tonumber(a:sub(i, i))\n        local\
    \ bi = tonumber(b:sub(i, i))\n        local ri = (ai + bi) % 2\n        table.insert(result,\
    \ ri)\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local a_bit = a:sub(i, i)\n    local b_bit = b:sub(i,\
    \ i)\n    if a_bit == b_bit then\n      result = result .. \"0\"\n    else\n \
    \     result = result .. \"1\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor\
    \ i = 1, #a do\n\t\tresult = result .. (a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1')\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result[i] = '0'\n        else\n        result[i] = '1'\n        end\n    end\n\
    \    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local bit_a = a:sub(i, i)\n        local bit_b =\
    \ b:sub(i, i)\n        if bit_a ~= bit_b then\n            table.insert(result,\
    \ '1')\n        else\n            table.insert(result, '0')\n        end\n   \
    \ end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = \"\"\n  \
    \  for i = 1, #a do\n        res = res .. (a:sub(i, i) == b:sub(i, i) and \"0\"\
    \ or \"1\")\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = {}\n  for\
    \ i = 1, #a do\n    local ai = a:sub(i, i)\n    local bi = b:sub(i, i)\n    if\
    \ ai == bi then\n      result[i] = '0'\n    else\n      result[i] = '1'\n    end\n\
    \  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or\
    \ '1'\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   local len = math.max(#a, #b)\n    for i = 1, len do\n        local x = tonumber(a:sub(i,\
    \ i)) or 0\n        local y = tonumber(b:sub(i, i)) or 0\n        local z = x\
    \ ~ y\n        result = result .. z\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n          \
    \  result = result .. \"0\"\n        else\n            result = result .. \"1\"\
    \n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        if a:sub(i, i) == b:sub(i, i) then\n           \
    \ result = result .. '0'\n        else\n            result = result .. '1'\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750218
- exit_code: 0
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local res = ''\n    for\
    \ i = 1, #a do\n        res = res .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659792930
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = {}\n \
    \   for i = 1, #a do\n        local x = a:sub(i, i)\n        local y = b:sub(i,\
    \ i)\n        local z = xor(x, y)\n        table.insert(result, z)\n    end\n\
    \    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcc6xfrgz.lua:10:\
    \ attempt to call a nil value (global 'xor')\nstack traceback:\n\t/tmp/tmpcc6xfrgz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcc6xfrgz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792930
