name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
  -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local digits = 0\n    local dot = 0\n    local ext = ''\n    for\
    \ i = 1, #file_name do\n        local c = file_name:sub(i, i)\n        if c ==\
    \ '.' then\n            dot = dot + 1\n        elseif c:match('%d') then\n   \
    \         digits = digits + 1\n        elseif dot == 0 then\n            if not\
    \ c:match('%a') then\n                return 'No'\n            end\n        else\n\
    \            ext = ext .. c\n        end\n    end\n    if digits > 3 or dot ~=\
    \ 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "    local dot_index = string.find(file_name,\
    \ '.')\n    local extension = string.sub(file_name, dot_index + 1)\n    local\
    \ digits_count = 0\n    local valid_extensions = {'txt', 'exe', 'dll'}\n    local\
    \ valid_extension = false\n    for i = 1, #valid_extensions do\n        if valid_extensions[i]\
    \ == extension then\n            valid_extension = true\n            break\n \
    \       end\n    end\n    for i = 1, #file_name do\n        local char = string.sub(file_name,\
    \ i, i)\n        if char >= '0' and char <= '9' then\n            digits_count\
    \ = digits_count + 1\n        end\n    end\n    if digits_count > 3 then\n   \
    \     return 'No'\n    end\n    if not valid_extension then\n        return 'No'\n\
    \    end\n    if string.sub(file_name, 1, dot_index - 1) == '' then\n        return\
    \ 'No'\n    end\n    local first_char = string.sub(file_name, 1, 1)\n    if not\
    \ (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char\
    \ <= 'Z') then\n        return 'No'\n    end\n    return 'Yes'\nend", "    local\
    \ dot_index = string.find(file_name, '.')\n    local prefix = string.sub(file_name,\
    \ 1, dot_index - 1)\n    local suffix = string.sub(file_name, dot_index + 1)\n\
    \    local digit_count = 0\n    for i = 1, string.len(prefix) do\n        if string.byte(prefix,\
    \ i) >= string.byte('0') and string.byte(prefix, i) <= string.byte('9') then\n\
    \            digit_count = digit_count + 1\n        end\n    end\n    if digit_count\
    \ > 3 then\n        return 'No'\n    end\n    if string.len(prefix) == 0 or (string.byte(prefix,\
    \ 1) < string.byte('a') or string.byte(prefix, 1) > string.byte('z')) and (string.byte(prefix,\
    \ 1) < string.byte('A') or string.byte(prefix, 1) > string.byte('Z')) then\n \
    \       return 'No'\n    end\n    if suffix ~= 'txt' and suffix ~= 'exe' and suffix\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend", "    local\
    \ dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n        return\
    \ 'No'\n    end\n    local prefix = string.sub(file_name, 1, dot_pos - 1)\n  \
    \  local suffix = string.sub(file_name, dot_pos + 1)\n    if string.len(prefix)\
    \ == 0 or string.find(prefix, '%d') == 1 then\n        return 'No'\n    end\n\
    \    local digit_count = 0\n    for i = 1, string.len(prefix) do\n        if string.find(prefix,\
    \ '%d', i) ~= nil then\n            digit_count = digit_count + 1\n        end\n\
    \    end\n    if digit_count > 3 then\n        return 'No'\n    end\n    if suffix\
    \ ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "  -- TODO: implement this function\nend", " \
    \ -- TODO: implement this function\nend", "    -- TODO: implement this function\n\
    end", "    local digits = 0\n    local dot = false\n    local ext = false\n  \
    \  local ext_list = {'txt', 'exe', 'dll'}\n    for i = 1, #file_name do\n    \
    \    local c = file_name:sub(i, i)\n        if c == '.' then\n            if dot\
    \ then\n                return 'No'\n            end\n            dot = true\n\
    \        elseif c:match('%d') then\n            digits = digits + 1\n        \
    \    if digits > 3 then\n                return 'No'\n            end\n      \
    \  elseif dot then\n            if not ext then\n                ext = true\n\
    \                for _, e in ipairs(ext_list) do\n                    if file_name:sub(i,\
    \ i + #e - 1) == e then\n                        return 'Yes'\n              \
    \      end\n                end\n                return 'No'\n            end\n\
    \        elseif not c:match('%a') then\n            return 'No'\n        end\n\
    \    end\n    return 'No'\nend", "    local dot_index = file_name:find('.')\n\
    \    if not dot_index then\n        return 'No'\n    end\n    local prefix = file_name:sub(1,\
    \ dot_index - 1)\n    local suffix = file_name:sub(dot_index + 1)\n    if #prefix\
    \ == 0 or #prefix > 8 or #suffix == 0 or #suffix > 3 then\n        return 'No'\n\
    \    end\n    if not prefix:match('^[a-zA-Z]') then\n        return 'No'\n   \
    \ end\n    if not suffix:match('^txt$') and not suffix:match('^exe$') and not\
    \ suffix:match('^dll$') then\n        return 'No'\n    end\n    if prefix:match('%d')\
    \ and prefix:match('%d') > 3 then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "    -- TODO: implement this function\nend", "    local dot_index = string.find(file_name,\
    \ '.')\n    local extension = string.sub(file_name, dot_index + 1)\n    local\
    \ name = string.sub(file_name, 1, dot_index - 1)\n    local digits = 0\n    for\
    \ i = 1, #name do\n        if string.find(name, '[0-9]') then\n            digits\
    \ = digits + 1\n        end\n    end\n    if digits > 3 then\n        return 'No'\n\
    \    end\n    if not string.find(name, '[a-zA-Z]') then\n        return 'No'\n\
    \    end\n    if not (extension == 'txt' or extension == 'exe' or extension ==\
    \ 'dll') then\n        return 'No'\n    end\n    return 'Yes'\nend", "  local\
    \ count = 0\n  local dot_count = 0\n  local dot_index = 0\n  local ext_index =\
    \ 0\n  local ext = ''\n  local ext_list = {'txt', 'exe', 'dll'}\n  local valid_ext\
    \ = false\n  local valid_name = false\n  local valid_extension = false\n  local\
    \ valid_file_name = false\n  for i = 1, #file_name do\n    if file_name:sub(i,\
    \ i) == '.' then\n      dot_count = dot_count + 1\n      dot_index = i\n    end\n\
    \    if file_name:sub(i, i):match('%d') then\n      count = count + 1\n    end\n\
    \  end\n  if count > 3 then\n    valid_name = false\n  else\n    valid_name =\
    \ true\n  end\n  if dot_count == 1 then\n    valid_extension = true\n  else\n\
    \    valid_extension = false\n  end\n  ext_index = dot_index + 1\n  ext = file_name:sub(ext_index,\
    \ #file_name)\n  for i = 1, #ext_list do\n    if ext == ext_list[i] then\n   \
    \   valid_ext = true\n    end\n  end\n  if valid_name and valid_extension and\
    \ valid_ext then\n    valid_file_name = true\n  else\n    valid_file_name = false\n\
    \  end\n  if valid_file_name then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "    local count = 0\n    local dot_count = 0\n    local sub_str\
    \ = ''\n    local sub_str_after_dot = ''\n    for i = 1, #file_name do\n     \
    \   if file_name:sub(i, i) == '.' then\n            dot_count = dot_count + 1\n\
    \        end\n        if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <=\
    \ '9' then\n            count = count + 1\n        end\n    end\n    if count\
    \ > 3 then\n        return 'No'\n    end\n    if dot_count ~= 1 then\n       \
    \ return 'No'\n    end\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            sub_str = file_name:sub(1, i - 1)\n            sub_str_after_dot\
    \ = file_name:sub(i + 1, #file_name)\n        end\n    end\n    if sub_str ==\
    \ '' then\n        return 'No'\n    end\n    if sub_str:sub(1, 1) < 'A' or sub_str:sub(1,\
    \ 1) > 'z' then\n        return 'No'\n    end\n    if sub_str_after_dot ~= 'txt'\
    \ and sub_str_after_dot ~= 'exe' and sub_str_after_dot ~= 'dll' then\n       \
    \ return 'No'\n    end\n    return 'Yes'\nend", "    local dot_index = file_name:find('.')\n\
    \    if not dot_index then\n        return 'No'\n    end\n    local prefix = file_name:sub(1,\
    \ dot_index - 1)\n    local suffix = file_name:sub(dot_index + 1)\n    if #prefix\
    \ == 0 or prefix:match('%d') or not prefix:match('%a') then\n        return 'No'\n\
    \    end\n    if #suffix == 0 or not suffix:match('^txt$') and not suffix:match('^exe$')\
    \ and not suffix:match('^dll$') then\n        return 'No'\n    end\n    if #prefix:gsub('%d',\
    \ '') > 3 then\n        return 'No'\n    end\n    return 'Yes'\nend", "    local\
    \ count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local ext =\
    \ \"\"\n    local ext_valid = false\n    local ext_list = {\"txt\", \"exe\", \"\
    dll\"}\n    local valid_ext = false\n    local valid_name = false\n    local valid_count\
    \ = false\n    local valid_ext_count = false\n    local valid_ext_start = false\n\
    \    local valid_ext_end = false\n    local valid_ext_start_char = false\n   \
    \ local valid_ext_end_char = false\n    local valid_ext_start_char_code = false\n\
    \    local valid_ext_end_char_code = false\n    local valid_ext_start_char_code_range\
    \ = false\n    local valid_ext_end_char_code_range = false\n    local valid_ext_start_char_code_range_lower\
    \ = false\n    local valid_ext_end_char_code_range_lower = false\n    local valid_ext_start_char_code_range_upper\
    \ = false\n    local valid_ext_end_char_code_range_upper = false\n    local valid_ext_start_char_code_range_upper_lower\
    \ = false\n    local valid_ext_end_char_code_range_upper_lower = false\n    local\
    \ valid_ext_start_char_code_range_upper_lower_lower = false\n    local valid_ext_end_char_code_range_upper_lower_lower\
    \ = false\n    local valid_ext_start_char_code_range_upper_lower_lower_lower =\
    \ false\n    local valid_ext_end_char_code_range_upper_lower_lower_lower = false\n\
    \    local valid_ext_start_char_code_range_upper_lower_lower_lower_lower = false\n\
    \    local valid_ext_end_char_code_range_upper_lower_lower_lower_lower = false\n\
    \    local valid_ext_start_char_code_range_upper_lower_lower_lower_lower_lower\
    \ = false\n    local valid_ext_end_char_code_range_upper_lower_lower_lower_lower_lower\
    \ = false\n    local valid_ext_start_char", "    -- TODO: implement the function\n\
    end", "  -- TODO: Implement this function.\nend", "    local digits = 0\n    local\
    \ dot_count = 0\n    local ext = ''\n    for i = 1, #file_name do\n        local\
    \ c = file_name:sub(i, i)\n        if c == '.' then\n            dot_count = dot_count\
    \ + 1\n        elseif c >= '0' and c <= '9' then\n            digits = digits\
    \ + 1\n        elseif dot_count == 0 then\n            if not (c >= 'a' and c\
    \ <= 'z' or c >= 'A' and c <= 'Z') then\n                return 'No'\n       \
    \     end\n        elseif dot_count == 1 then\n            ext = ext .. c\n  \
    \      end\n    end\n    if dot_count ~= 1 or digits > 3 or ext ~= 'txt' and ext\
    \ ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "    local digits = 0\n    local dot_count = 0\n    local after_dot = ''\n\
    \    local before_dot = ''\n    for i = 1, #file_name do\n        local char =\
    \ file_name:sub(i, i)\n        if char:match('%d') then\n            digits =\
    \ digits + 1\n        elseif char == '.' then\n            dot_count = dot_count\
    \ + 1\n        elseif dot_count == 0 then\n            before_dot = before_dot\
    \ .. char\n        else\n            after_dot = after_dot .. char\n        end\n\
    \    end\n    if digits > 3 or dot_count ~= 1 or #before_dot == 0 or not before_dot:match('^[a-zA-Z]')\
    \ or not (after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll') then\n\
    \        return 'No'\n    else\n        return 'Yes'\n    end\nend", "    local\
    \ count = 0\n    local dot_count = 0\n    local ext = ''\n    for i = 1, #file_name\
    \ do\n        local c = file_name:sub(i, i)\n        if c >= '0' and c <= '9'\
    \ then\n            count = count + 1\n        elseif c == '.' then\n        \
    \    dot_count = dot_count + 1\n        end\n    end\n    if count > 3 or dot_count\
    \ ~= 1 then\n        return 'No'\n    end\n    local dot_pos = file_name:find('.')\n\
    \    local ext = file_name:sub(dot_pos + 1)\n    if ext ~= 'txt' and ext ~= 'exe'\
    \ and ext ~= 'dll' then\n        return 'No'\n    end\n    local name = file_name:sub(1,\
    \ dot_pos - 1)\n    if #name == 0 then\n        return 'No'\n    end\n    local\
    \ c = name:sub(1, 1)\n    if (c < 'a' or c > 'z') and (c < 'A' or c > 'Z') then\n\
    \        return 'No'\n    end\n    return 'Yes'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
