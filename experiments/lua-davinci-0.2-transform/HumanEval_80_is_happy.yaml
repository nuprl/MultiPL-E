name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n\
    \    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local n = #s\n  if n < 3 then\n    return false\n\
    \  end\n  for i = 1, n - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tlocal len = #s\n\t\
    if len < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, len - 2 do\n\t\tif s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "    local len = #s\n    if len < 3 then\n        return false\n\
    \    end\n    local i = 1\n    while i < len do\n        if s:sub(i, i + 2) ==\
    \ s:sub(i + 1, i + 3) then\n            return false\n        end\n        i =\
    \ i + 1\n    end\n    return true\nend", "    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    if #s < 3 then\n        return false\n \
    \   end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1')\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  if #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i,\
    \ i + 2):match(\"(.)%1%1\") then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2\
    \ do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local len = #s\n  if len < 3 then\n \
    \   return false\n  end\n  local i = 1\n  while i <= len - 2 do\n    if s:sub(i,\
    \ i + 2):match(\"(.)%1%1\") then\n      return false\n    end\n    i = i + 1\n\
    \  end\n  return true\nend", "    if #s < 3 then\n        return false\n    end\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1') then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ #s < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i,\
    \ i + 2):match('(.)%1%1') then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- your code here\nend", "    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend",
  "  if #s < 3 then\n    return false\n  end\n  local i = 1\n  while i <= #s - 2 do\n\
    \    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n      return false\n    end\n\
    \    i = i + 1\n  end\n  return true\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"\
    (.)%1%1\") then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- your code here\n  local len = string.len(s)\n  if len < 3 then\n \
    \   return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if #s < 3 then\n        return false\n    end\n   \
    \ for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  --\
    \ your code here\nend", "    if #s < 3 then\n        return false\n    end\n \
    \   for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ len = string.len(s)\n  if len < 3 then\n    return false\n  end\n  for i = 1,\
    \ len - 2 do\n    if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2] then\n      return false\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
