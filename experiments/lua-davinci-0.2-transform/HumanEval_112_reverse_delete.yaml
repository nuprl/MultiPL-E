name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a tuple containing the result string and True/False\
  \ for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n\
  -- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba',\
  \ 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i,\
    \ i)\n        if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n\
    \    end\n    local res = table.concat(t)\n    return {res, res == res:reverse()}\n\
    end", "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n\
    \        if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n   \
    \ end\n    local s1 = table.concat(t)\n    local s2 = s1:reverse()\n    return\
    \ {s1, s1 == s2}\nend", "    local result = ''\n    for i = 1, #s do\n       \
    \ if not c:find(s:sub(i, i)) then\n            result = result .. s:sub(i, i)\n\
    \        end\n    end\n    local palindrome = true\n    for i = 1, #result / 2\
    \ do\n        if result:sub(i, i) ~= result:sub(#result - i + 1, #result - i +\
    \ 1) then\n            palindrome = false\n            break\n        end\n  \
    \  end\n    return {result, palindrome}\nend", "    local t = {}\n    for i =\
    \ 1, #s do\n        local ch = s:sub(i, i)\n        if not c:find(ch) then\n \
    \           t[#t + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n\
    \    local is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end", "  local t = {}\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    if\
    \ not c:find(char) then\n      table.insert(t, char)\n    end\n  end\n  local\
    \ result = table.concat(t)\n  local is_palindrome = result == string.reverse(result)\n\
    \  return {result, is_palindrome}\nend", "    local t = {}\n    for i = 1, #s\
    \ do\n        local ch = s:sub(i, i)\n        if not c:find(ch) then\n       \
    \     t[#t + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n\
    \    local is_palindrome = res == res:reverse()\n    return {res, is_palindrome}\n\
    end", "  local t = {}\n  for i = 1, #s do\n    local ch = s:sub(i, i)\n    if\
    \ not c:find(ch) then\n      t[#t + 1] = ch\n    end\n  end\n  local res = table.concat(t)\n\
    \  local is_palindrome = res == string.reverse(res)\n  return res, is_palindrome\n\
    end", "    -- your code here\nend", "    local t = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    table.insert(t, char)\n        end\n    end\n    local result = table.concat(t)\n\
    \    local is_palindrome = true\n    for i = 1, #result / 2 do\n        if result:sub(i,\
    \ i) ~= result:sub(#result - i + 1, #result - i + 1) then\n            is_palindrome\
    \ = false\n            break\n        end\n    end\n    return result, is_palindrome\n\
    end", "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n\
    \        if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n   \
    \ end\n    local str = table.concat(t)\n    local is_palindrome = true\n    for\
    \ i = 1, #str / 2 do\n        if str:sub(i, i) ~= str:sub(#str - i + 1, #str -\
    \ i + 1) then\n            is_palindrome = false\n            break\n        end\n\
    \    end\n    return str, is_palindrome\nend", "    local t = {}\n    for i =\
    \ 1, #s do\n        local ch = s:sub(i, i)\n        if not c:find(ch) then\n \
    \           t[#t + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n\
    \    local is_palindrome = true\n    for i = 1, #res / 2 do\n        if res:sub(i,\
    \ i) ~= res:sub(#res - i + 1, #res - i + 1) then\n            is_palindrome =\
    \ false\n            break\n        end\n    end\n    return res, is_palindrome\n\
    end", "  local t = {}\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    if\
    \ not c:find(char) then\n      table.insert(t, char)\n    end\n  end\n  local\
    \ result = table.concat(t)\n  return {result, result == result:reverse()}\nend",
  "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n      \
    \  if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n    end\n\
    \    local res = table.concat(t)\n    local palindrome = true\n    for i = 1,\
    \ #res / 2 do\n        if res:sub(i, i) ~= res:sub(#res - i + 1, #res - i + 1)\
    \ then\n            palindrome = false\n            break\n        end\n    end\n\
    \    return res, palindrome\nend", "    local t = {}\n    for i = 1, #s do\n \
    \       local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    local res = table.concat(t)\n    local\
    \ is_palindrome = res == string.reverse(res)\n    return {res, is_palindrome}\n\
    end", "  -- your code here\nend", "    local t = {}\n    for i = 1, #s do\n  \
    \      if not c:find(s:sub(i, i)) then\n            t[#t + 1] = s:sub(i, i)\n\
    \        end\n    end\n    local r = table.concat(t)\n    return {r, r == r:reverse()}\n\
    end", "    local t = {}\n    for i = 1, #s do\n        if not c:find(s:sub(i,\
    \ i)) then\n            t[#t + 1] = s:sub(i, i)\n        end\n    end\n    local\
    \ result = table.concat(t)\n    local is_palindrome = true\n    for i = 1, #result\
    \ / 2 do\n        if result:sub(i, i) ~= result:sub(#result - i + 1, #result -\
    \ i + 1) then\n            is_palindrome = false\n            break\n        end\n\
    \    end\n    return result, is_palindrome\nend", "  local t = {}\n  for i = 1,\
    \ #s do\n    local char = s:sub(i, i)\n    if not c:find(char) then\n      table.insert(t,\
    \ char)\n    end\n  end\n  local result = table.concat(t)\n  local is_palindrome\
    \ = result == string.reverse(result)\n  return {result, is_palindrome}\nend",
  "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n      \
    \  if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n    end\n\
    \    local r = table.concat(t)\n    local p = r == string.reverse(r)\n    return\
    \ {r, p}\nend", "    local t = {}\n    for i = 1, #s do\n        local ch = s:sub(i,\
    \ i)\n        if not c:find(ch) then\n            t[#t + 1] = ch\n        end\n\
    \    end\n    local s1 = table.concat(t)\n    local s2 = string.reverse(s1)\n\
    \    return {s1, s1 == s2}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
