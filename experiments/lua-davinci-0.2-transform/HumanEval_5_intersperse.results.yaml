language: lua
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        result[#result\
    \ + 1] = number\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  local n = #numbers\n  for i = 1, n - 1 do\n    result[#result\
    \ + 1] = numbers[i]\n    result[#result + 1] = delimeter\n  end\n  if n > 0 then\n\
    \    result[#result + 1] = numbers[n]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        result[#result\
    \ + 1] = number\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {}\n\
    \    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n  \
    \      result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        result[#result\
    \ + 1] = number\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {}\n\
    \    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n  \
    \      result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i ~= #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    if #numbers == 0 then\n        return {}\n    end\n    local result = {}\n\
    \    for i = 1, #numbers - 1 do\n        result[#result + 1] = numbers[i]\n  \
    \      result[#result + 1] = delimeter\n    end\n    result[#result + 1] = numbers[#numbers]\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        table.insert(result,\
    \ v)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        if i > 1 then\n\
    \            table.insert(result, delimeter)\n        end\n        table.insert(result,\
    \ v)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i, number in ipairs(numbers) do\n    result[#result\
    \ + 1] = number\n    if i < #numbers then\n      result[#result + 1] = delimeter\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        table.insert(result,\
    \ numbers[i])\n        if i < #numbers then\n            table.insert(result,\
    \ delimeter)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, v in ipairs(numbers) do\n        table.insert(result,\
    \ v)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        result[#result\
    \ + 1] = number\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    local i = 1\n    while i <= #numbers do\n        result[#result\
    \ + 1] = numbers[i]\n        if i < #numbers then\n            result[#result\
    \ + 1] = delimeter\n        end\n        i = i + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n\
    \    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,\
    \ 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},\
    \ 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    result[#result + 1] =\
    \ numbers[i]\n    result[#result + 1] = delimeter\n  end\n  result[#result + 1]\
    \ = numbers[#numbers]\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ > 1 then\n            table.insert(result, delimeter)\n        end\n       \
    \ table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[#result + 1]\
    \ = numbers[i]\n        if i < #numbers then\n            result[#result + 1]\
    \ = delimeter\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[#result + 1] = numbers[i]\n\
    \    if i < #numbers then\n      result[#result + 1] = delimeter\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        table.insert(result,\
    \ numbers[i])\n        table.insert(result, delimeter)\n    end\n    table.insert(result,\
    \ numbers[#numbers])\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        if i\
    \ > 1 then\n            table.insert(result, delimeter)\n        end\n       \
    \ table.insert(result, number)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i, number in ipairs(numbers) do\n        table.insert(result,\
    \ number)\n        if i < #numbers then\n            table.insert(result, delimeter)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \  local result = {}\n  for i = 1, #numbers - 1 do\n    table.insert(result, numbers[i])\n\
    \    table.insert(result, delimeter)\n  end\n  table.insert(result, numbers[#numbers])\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n   \
    \ lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2,\
    \ 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793803
- exit_code: 0
  program: "-- Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,\
    \ 2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\
    \    local result = {}\n    for i = 1, #numbers - 1 do\n        result[#result\
    \ + 1] = numbers[i]\n        result[#result + 1] = delimeter\n    end\n    result[#result\
    \ + 1] = numbers[#numbers]\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = intersperse\n    lu.assertEquals(candidate({},\
    \ 7), {})\n    lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8,\
    \ 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750217
