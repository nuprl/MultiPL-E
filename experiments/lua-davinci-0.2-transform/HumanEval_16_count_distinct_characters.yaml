name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local chars = {}\n    for char in string:gmatch('.') do\n     \
    \   chars[char:lower()] = true\n    end\n    return #chars\nend", "    local chars\
    \ = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()] = true\n\
    \    end\n    return #chars\nend", "  local chars = {}\n  for c in string:gmatch('.')\
    \ do\n    chars[c:lower()] = true\n  end\n  return #chars\nend", "    local chars\
    \ = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n   \
    \     chars[char:lower()] = true\n    end\n    return #chars\nend", "    local\
    \ count = 0\n    local characters = {}\n    for i = 1, #string do\n        local\
    \ char = string:sub(i, i)\n        if not characters[char] then\n            count\
    \ = count + 1\n            characters[char] = true\n        end\n    end\n   \
    \ return count\nend", "    local chars = {}\n    for char in string:gmatch('.')\
    \ do\n        chars[char:lower()] = true\n    end\n    return #chars\nend", " \
    \   local count = 0\n    local chars = {}\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not chars[char] then\n           \
    \ chars[char] = true\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "    local characters = {}\n    for i = 1, #string do\n\
    \        local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            characters[character] = true\n        end\n    end\n    return\
    \ #characters\nend", "  local characters = {}\n  for character in string:gmatch('.')\
    \ do\n    characters[character:lower()] = true\n  end\n  return #characters\n\
    end", "    local count = 0\n    local seen = {}\n    for c in string:gmatch('.')\
    \ do\n        if not seen[c:lower()] then\n            count = count + 1\n   \
    \         seen[c:lower()] = true\n        end\n    end\n    return count\nend",
  "    local characters = {}\n    for i = 1, #string do\n        local character =\
    \ string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n        end\n    end\n    return #characters\nend", "    local characters\
    \ = {}\n    for character in string:gmatch('.') do\n        characters[character:lower()]\
    \ = true\n    end\n    return #characters\nend", "    local count = 0\n    local\
    \ characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            count = count + 1\n  \
    \          characters[char] = true\n        end\n    end\n    return count\nend",
  "  local characters = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if not characters[char] then\n      characters[char] = true\n    end\n\
    \  end\n  return #characters\nend", "    local count = 0\n    local characters\
    \ = {}\n    for i = 1, #string do\n        local c = string:sub(i, i)\n      \
    \  if not characters[c] then\n            count = count + 1\n            characters[c]\
    \ = true\n        end\n    end\n    return count\nend", "    local chars = {}\n\
    \    for char in string:gmatch('.') do\n        chars[char:lower()] = true\n \
    \   end\n    return #chars\nend", "    local count = 0\n    local chars = {}\n\
    \    for i = 1, #string do\n        local char = string:sub(i, i)\n        if\
    \ not chars[char] then\n            chars[char] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local chars = {}\n \
    \   for i = 1, #string do\n        local char = string:sub(i, i)\n        if not\
    \ chars[char] then\n            chars[char] = true\n        end\n    end\n   \
    \ return #chars\nend", "    local chars = {}\n    for char in string:gmatch('.')\
    \ do\n        chars[char:lower()] = true\n    end\n    return #chars\nend", " \
    \   local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
