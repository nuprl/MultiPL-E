name: HumanEval_3_below_zero
language: rust
results:
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(0, |acc, x| acc + x) < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwbmey2wb.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptn3c5g7o.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdwe295f2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for i in operations {\n\
    \        balance += i;\n        if balance < 0 {\n            return true;\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpu06j5mv2.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n\
    \        balance += op;\n        if balance < 0 {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = 0;\n    for operation in operations\
    \ {\n        balance += operation;\n        if balance < 0 {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
