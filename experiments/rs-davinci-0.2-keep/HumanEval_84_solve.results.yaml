name: HumanEval_84_solve
language: rust
results:
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp5hq44bk9.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpoxswo1gf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp_kocpobb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpwvm90a4l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpxjb712k5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbs3yepjz.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_abl1n0a.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp0vsohyc7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpm9i8hlrq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpo5dnrke_.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6hbi3vtr.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut binary = String::new();\n    while N > 0\
    \ {\n        binary.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpu7j7hetc.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpstaws1ey.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut res = String::new();\n    while N > 0 {\n\
    \        res.push_str(&format!(\"{}\", N % 2));\n        N /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpsxy4c55t.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp5v8s_lma.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpilizamfg.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    // Write your code here\n    let mut result = String::new();\n    let\
    \ mut n = N;\n    while n > 0 {\n        result.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp4asdaf4p.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpni11d8xr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpa6ja88jy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmplzact8of.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2tkhdnvm.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpq3eewekb.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp398667nw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9qf6yjkh.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpzk5cl4hx.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpqyvdytji.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0jvi5g8w.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpfljr7a60.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdq8p0297.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmph5srrtfp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmt5p3jv2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpl00e5hz1.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2y40yc92.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpx7m7mtvb.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm6v9px5q.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpn58wju7i.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_ax71gf5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpp_5p7hvm.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3q3dwazq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpdv8huo7z.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpuyo2aobl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpi7kieig7.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6ot6c6sq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3bc30nov.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary = format!(\"{:b}\", N);\n    let mut sum = 0;\n    for\
    \ c in binary.chars() {\n        sum += c.to_digit(10).unwrap();\n    }\n    format!(\"\
    {:b}\", sum)\n}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"110\"`,\n right: `\"1\"`', /tmp/tmpmqvstpub.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9id1rcg5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmph842rk_i.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n\
    \        res.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpd25rq1yv.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n\
    \        res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmhhzlyhb.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2ao6byfv.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmph7yidero.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxecn082_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1katdjc9.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgcnnicd9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgxpoxhba.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut N = N;\n    while N > 0 {\n        sum\
    \ += N % 2;\n        N /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpt9qhxblw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpak8gj94j.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpswsntrib.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2_6knkfg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpp414qsjg.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpc4n_dd_7.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp2_1jj9_v.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpiua35deq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9e630gff.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpub7ujonl.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmppb54gnmh.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ohez22d.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpriz2p0m4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmzyebabi.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpwnlfn655.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&((N % 2).to_string()));\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_cmbgkds.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2irx9lcj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpyc5zkjo3.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpy0r03l8y.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp6duogtt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpxf5zvygq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpzcb2lnh5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmx1uuc0y.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmprvts3894.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpugpps4wj.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpuwyxibak.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvpjtvkda.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpvuaezzyj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpt8nqrc5o.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8sjp28os.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpys_vdrgw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpamdco7l2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpak67nkx1.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_22up7t_.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut N = N;\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpk_g2k723.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp1ax76qj3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5etr0h5y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0pvl9n80.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmptj1lmaj3.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp9k5r9rsu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpum9cq63u.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpzlasqw2x.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpq16dlng2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp966yl2eg.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8lh878_y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpz0si3jqr.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp7iahtw82.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpr49m4c8v.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3imetmvv.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2cln2m1c.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp678bc8fr.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpobenl1kb.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpmv3m8m0j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp7ct2eoh1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp24kyiywy.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpl3q3dqfq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpi5jb3aba.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphgd2fhm3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppi50c2p5.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphcj90r1m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp03fn_mlq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5tjp3hnq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp27nvkypi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmfi54g21.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpzso3yynu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmphf0nipv4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgtg5tzx3.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_azqjtps.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpmkbvnegl.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut n = N;\n    while n > 0 {\n \
    \       s.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbs_bloup.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp18e55bsw.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp5_6zor7l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpa9d9f07l.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpkzg0v4_e.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpyels1znd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpxp39sd_u.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpw6mvd_it.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpumqm0_ii.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_qhaf1fv.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp_ufdpb0_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpm7jhyx_9.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpqlrpr14k.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp9_joo226.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp9l_fwh5e.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp7ad7w9ph.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n\
    \        res.push_str(&((n % 2).to_string()));\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp8xe0dym5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpz4da6i2u.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_pgv3q7w.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp2nht5n06.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmped042dc8.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        let remainder = n % 2;\n        n = n / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpyaz56c27.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqvyrdbh3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut res = String::new();\n    while N > 0 {\n\
    \        res.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpc9_se75h.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmph2wr7mvf.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpjl0sclo6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3gdeazh9.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp3z501zot.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut N = N;\n    while N > 0 {\n        sum\
    \ += N % 2;\n        N /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgj46skgl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpo6nl_1vt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphqlejsxh.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpxlzyl5iv.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpzeq4lb51.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpirqjbrwo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp8xx41fc3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0c7nvk9i.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxjotymbw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpef8rwivn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpep500f10.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&((N % 2).to_string()));\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvpttkee1.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpu6cw_7aa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpbp_l4t10.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxmiqkoax.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpg5rveyvj.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp1zzg3852.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppgfqhjli.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmppde9ktnt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut res = String::new();\n    while N > 0 {\n\
    \        res.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpk2pe2yrk.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpgbuy7ui2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp5x4t9n73.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp_9n8j_mp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpsr9gwacb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp87mbvyiv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpl9n1ee47.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpxrfot6yg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmphyxdqpjq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpjp9vn6tq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut res = String::new();\n    let mut n = N;\n    while n > 0 {\n\
    \        res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpy4jqhy5x.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpr1l61ab5.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpsae6xs1f.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpzwlspd96.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpl3pb6dit.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp_5b2lsin.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmprxdnpfze.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpua1hr0d2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut binary = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpoivn6jtp.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpowdo3j2z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp87a562d7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut n = N;\n    let mut result = String::new();\n    while n > 0\
    \ {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpown6oj_3.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpu38zyrrz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut n = N;\n    while n > 0\
    \ {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvlcbwwb7.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp7pus7t3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpwtzvwmvm.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpsm2ng0g2.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n        sum\
    \ += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main() {\n \
    \   let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"\
    ));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmp1wc0t6kj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n/// For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n/// For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264\
    \ 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize) -> String\
    \ {\n    let mut N = N;\n    let mut result = String::new();\n    while N > 0\
    \ {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmplt_e6805.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
