name: HumanEval_159_eat
language: rust
prompt: "/// You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4, 8, 9) -> [12, 1]\n/// * eat(1, 10,\
  \ 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7, 0]\n/// Variables:\n/// @number : integer\n\
  /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
  \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
  \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n\
  /// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfn eat(number:\
  \ isize, need: isize, remaining: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6,\
  \ 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
  \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n   \
  \ assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1),\
  \ vec![5, 0]);\n}\n"
completions: ["    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need <= left {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut result = Vec::new();\n\
    \    let mut total = number + remaining;\n    if total < need {\n        result.push(total);\n\
    \        result.push(0);\n    } else {\n        result.push(need);\n        result.push(total\
    \ - need);\n    }\n    result", "    let mut result = vec![];\n    if number +\
    \ remaining >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![number + need, remaining - need];\n\
    \    if result[1] < 0 {\n        result[1] = 0;\n        result[0] = number +\
    \ remaining;\n    }\n    result", "    let mut total = number + remaining;\n \
    \   if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut result = vec![number];\n    if need > remaining {\n\
    \        result.push(0);\n    } else {\n        result.push(remaining - need);\n\
    \    }\n    result", "    let mut res = vec![number];\n    if number < need {\n\
    \        res.push(need - number);\n        if remaining < res[1] {\n         \
    \   res[1] = remaining;\n        }\n    }\n    res", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut total = number + remaining;\n    if total >= need {\n \
    \       total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ total = number + remaining;\n    if total >= need {\n        total = need;\n\
    \    }\n    vec![total, remaining - (total - number)]", "    let mut carrots =\
    \ number + remaining;\n    if carrots < need {\n        carrots = 0;\n    } else\
    \ {\n        carrots -= need;\n    }\n    vec![number + remaining - carrots, carrots]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ result = vec![];\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = vec![number];\n    if number < need {\n        result.push(need\
    \ - number);\n        result.push(remaining - (need - number));\n    } else {\n\
    \        result.push(0);\n        result.push(remaining);\n    }\n    result",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut remaining = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        remaining = 0;\n    } else {\n     \
    \   eaten += need;\n        remaining -= need;\n    }\n    vec![eaten, remaining]",
  "    let mut result = vec![number + remaining, 0];\n    if result[0] >= need {\n\
    \        result[0] = need;\n        result[1] = remaining - (need - number);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut result = vec![number + need, remaining - need];\n    if result[1] <\
    \ 0 {\n        result[1] = 0;\n        result[0] = number + remaining;\n    }\n\
    \    result", "    let mut result = vec![number + need, remaining - need];\n \
    \   if result[1] < 0 {\n        result[1] = 0;\n        result[0] = number + remaining;\n\
    \    }\n    result", "    let mut result = vec![];\n    if remaining < need {\n\
    \        result.push(number + remaining);\n        result.push(0);\n    } else\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut total = number + remaining;\n    if total < need {\n        total =\
    \ number + remaining;\n    } else {\n        total = number + need;\n    }\n \
    \   vec![total, remaining - need]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > left {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut total = number + remaining;\n    let mut left = 0;\n\
    \    if total < need {\n        total = total;\n        left = 0;\n    } else\
    \ {\n        total = need;\n        left = total - need;\n    }\n    vec![total,\
    \ left]", "    let mut total = number + remaining;\n    if total >= need {\n \
    \       total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    if remaining < need {\n        eaten += remaining;\n  \
    \      return vec![eaten, 0];\n    }\n    eaten += need;\n    return vec![eaten,\
    \ remaining - need];", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ total = number + remaining;\n    if total < need {\n        total = number +\
    \ remaining;\n    } else {\n        total = number + need;\n    }\n    vec![total,\
    \ remaining - need]", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut total = number + remaining;\n    let mut left = 0;\n    if total <\
    \ need {\n        total = total;\n        left = 0;\n    } else {\n        total\
    \ = need;\n        left = total - need;\n    }\n    vec![total, left]", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if left >= need {\n\
    \        eaten += need;\n        left -= need;\n    } else {\n        eaten +=\
    \ left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        result.push(need);\n        result.push(total - need);\n    } else {\n\
    \        result.push(total);\n        result.push(0);\n    }\n    result", " \
    \   let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut result = Vec::new();\n    if number\
    \ + need > remaining {\n        result.push(remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - (number + need));\n    }\n    result", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > left {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ result = vec![];\n    if remaining >= need {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = number + remaining;\n\
    \    } else {\n        total = number + need;\n    }\n    vec![total, remaining\
    \ - need]", "    let mut carrots = number + remaining;\n    if carrots >= need\
    \ {\n        carrots -= need;\n    } else {\n        carrots = 0;\n    }\n   \
    \ vec![number + remaining - carrots, carrots]", "    let mut total = number +\
    \ remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut total = number + remaining;\n \
    \   if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if eaten + left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n   \
    \ let mut left = 0;\n    if total < need {\n        total = total;\n        left\
    \ = 0;\n    } else {\n        total = need;\n        left = total - need;\n  \
    \  }\n    vec![total, left]", "    let mut result = vec![number + need, remaining\
    \ - need];\n    if result[1] < 0 {\n        result[1] = 0;\n        result[0]\
    \ = number + remaining;\n    }\n    result", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut result = vec![number\
    \ + remaining, 0];\n    if result[0] >= need {\n        result[0] = need;\n  \
    \      result[1] = remaining - (need - number);\n    }\n    result", "    let\
    \ mut eaten = number;\n    let mut remaining = remaining;\n    if remaining <\
    \ need {\n        eaten += remaining;\n        remaining = 0;\n    } else {\n\
    \        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten, remaining]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = number + remaining;\n\
    \    } else {\n        total = number + need;\n    }\n    vec![total, remaining\
    \ - need]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ need > remaining {\n        eaten += remaining;\n        left = 0;\n    } else\
    \ {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut total = number + remaining;\n \
    \   if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    if number < 0 || need\
    \ < 0 || remaining < 0 {\n        result.push(0);\n        result.push(0);\n \
    \   } else if number + remaining < need {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    } else {\n        result.push(number + need);\n\
    \        result.push(remaining - need);\n    }\n    result", "    let mut number\
    \ = number;\n    let mut need = need;\n    let mut remaining = remaining;\n  \
    \  if need > remaining {\n        number += remaining;\n        remaining = 0;\n\
    \    } else {\n        number += need;\n        remaining -= need;\n    }\n  \
    \  vec![number, remaining]", "    let mut total = number + remaining;\n    if\
    \ total >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut result = vec![];\n    if number + remaining >= need\
    \ {\n        result.push(number + need);\n        result.push(remaining - need);\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total <\
    \ need {\n        total = number + remaining;\n    } else {\n        total = number\
    \ + need;\n    }\n    vec![total, remaining - need]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![number + remaining, 0];\n    if result[0]\
    \ >= need {\n        result[0] = need;\n        result[1] = remaining - (need\
    \ - number);\n    }\n    result", "    let mut number = number;\n    let mut need\
    \ = need;\n    let mut remaining = remaining;\n    if number + remaining >= need\
    \ {\n        number += need;\n        need = 0;\n        remaining -= need;\n\
    \    } else {\n        number += remaining;\n        need -= remaining;\n    \
    \    remaining = 0;\n    }\n    vec![number, need]", "    if remaining < need\
    \ - number {\n        vec![number + remaining, 0]\n    } else {\n        vec![number\
    \ + need, remaining - need + number]\n    }", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut total = number +\
    \ remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut total = number + remaining;\n \
    \   let mut left = 0;\n    if total >= need {\n        total = need;\n       \
    \ left = remaining - (need - number);\n    }\n    vec![total, left]", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if left >= need {\n\
    \        eaten += need;\n        left -= need;\n    } else {\n        eaten +=\
    \ left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if eaten + remaining >= need {\n        eaten += need;\n \
    \       left -= need;\n    } else {\n        eaten += remaining;\n        left\
    \ = 0;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if need > remaining {\n        eaten += remaining;\n        left = 0;\n  \
    \  } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut total = number + remaining;\n    if total >= need {\n \
    \       total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut result = vec![];\n    if number >= need {\n        result.push(number);\n\
    \        result.push(remaining);\n    } else {\n        let mut total = number;\n\
    \        let mut remain = remaining;\n        while total < need && remain > 0\
    \ {\n            total += 1;\n            remain -= 1;\n        }\n        result.push(total);\n\
    \        result.push(remain);\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut total_eaten = number;\n    let mut remaining_carrots = remaining;\n\
    \    if remaining_carrots >= need {\n        total_eaten += need;\n        remaining_carrots\
    \ -= need;\n    } else {\n        total_eaten += remaining_carrots;\n        remaining_carrots\
    \ = 0;\n    }\n    result.push(total_eaten);\n    result.push(remaining_carrots);\n\
    \    result", "    let mut total = number + remaining;\n    if total >= need {\n\
    \        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > left {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = Vec::new();\n    let mut eaten =\
    \ number;\n    if remaining >= need {\n        eaten += need;\n        result.push(eaten);\n\
    \        result.push(remaining - need);\n    } else {\n        eaten += remaining;\n\
    \        result.push(eaten);\n        result.push(0);\n    }\n    result", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    if remaining\
    \ < need {\n        eaten += remaining;\n        remaining = 0;\n    } else {\n\
    \        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten, remaining]",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut total = number + remaining;\n    if total >= need {\n \
    \       total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![];\n    if number +\
    \ remaining < need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut number\
    \ = number;\n    let mut need = need;\n    let mut remaining = remaining;\n  \
    \  if number + remaining >= need {\n        number += need;\n        remaining\
    \ -= need;\n        need = 0;\n    } else {\n        number += remaining;\n  \
    \      need -= remaining;\n        remaining = 0;\n    }\n    vec![number, remaining]",
  "    let mut result = Vec::new();\n    let mut total = number + remaining;\n   \
    \ if total >= need {\n        result.push(need);\n        result.push(total -\
    \ need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    if number + remaining >= need {\n        vec![need,\
    \ number + remaining - need]\n    } else {\n        vec![number + remaining, 0]\n\
    \    }", "    let mut total = number + need;\n    if total > remaining {\n   \
    \     total = remaining;\n    }\n    vec![total, remaining - total]", "    let\
    \ mut result = vec![];\n    let mut total = number + remaining;\n    if total\
    \ >= need {\n        result.push(need);\n        result.push(total - need);\n\
    \    } else {\n        result.push(total);\n        result.push(0);\n    }\n \
    \   result", "    let mut eaten = number;\n    let mut left = remaining;\n   \
    \ if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut total = number + remaining;\n    let mut left = 0;\n    if total >=\
    \ need {\n        total = need;\n        left = total - need;\n    }\n    vec![total,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut result = vec![];\n    if number + remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > left {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ need > left {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    if number < 0 || need < 0 || remaining < 0 {\n        result.push(0);\n\
    \        result.push(0);\n    } else if number + remaining >= need {\n       \
    \ result.push(need);\n        result.push(remaining - (need - number));\n    }\
    \ else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut result = vec![number + remaining, 0];\n    if\
    \ result[0] >= need {\n        result[0] = need;\n        result[1] = remaining\
    \ - (need - number);\n    }\n    result", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = Vec::new();\n    let mut total =\
    \ number + remaining;\n    if total >= need {\n        result.push(need);\n  \
    \      result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut result = vec![number\
    \ + remaining, 0];\n    if need > remaining {\n        result[0] += remaining;\n\
    \    } else {\n        result[0] += need;\n        result[1] = remaining - need;\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut total = number + remaining;\n    if total >= need {\n \
    \       total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left < need {\n     \
    \   eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![number];\n    if need\
    \ > remaining {\n        result.push(0);\n    } else {\n        result.push(remaining\
    \ - need);\n    }\n    result", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![];\n    if remaining < need\
    \ {\n        result.push(number + remaining);\n        result.push(0);\n    }\
    \ else {\n        result.push(number + need);\n        result.push(remaining -\
    \ need);\n    }\n    result", "    let mut total = number + remaining;\n    if\
    \ total >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut result = Vec::new();\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut result = vec![number\
    \ + need, remaining - need];\n    if result[1] < 0 {\n        result[1] = 0;\n\
    \        result[0] = number + remaining;\n    }\n    result", "    let mut result\
    \ = vec![number + need, remaining - need];\n    if result[1] < 0 {\n        result[1]\
    \ = 0;\n        result[0] = number + remaining;\n    }\n    result", "    let\
    \ mut result = vec![number + need, remaining - need];\n    if result[1] < 0 {\n\
    \        result[1] = 0;\n        result[0] = number + remaining;\n    }\n    result",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + need;\n    let mut left = remaining - need;\n    if left < 0 {\n        total\
    \ += left;\n        left = 0;\n    }\n    vec![total, left]", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut result = vec![];\n\
    \    let mut total = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut result = vec![];\n    if remaining >= need {\n   \
    \     result.push(number + need);\n        result.push(remaining - need);\n  \
    \  } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total <\
    \ need {\n        total = number + remaining;\n    } else {\n        total = number\
    \ + need;\n    }\n    vec![total, remaining - need]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![number + remaining,\
    \ 0];\n    if result[0] >= need {\n        result[0] = need;\n        result[1]\
    \ = remaining - (need - number);\n    }\n    result", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut result = vec![number];\n    if remaining\
    \ >= need {\n        result.push(remaining - need);\n    } else {\n        result.push(0);\n\
    \    }\n    result", "    let total = number + need;\n    if total <= remaining\
    \ {\n        vec![total, remaining - total]\n    } else {\n        vec![remaining\
    \ + number, 0]\n    }", "    let mut eaten = number;\n    if remaining >= need\
    \ {\n        eaten += need;\n    } else {\n        eaten += remaining;\n    }\n\
    \    vec![eaten, remaining - need]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]", "    let mut total = number + remaining;\n    if total\
    \ >= need {\n        total = need;\n    }\n    vec![total, remaining - (total\
    \ - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if need > remaining {\n        eaten += remaining;\n        left = 0;\n  \
    \  } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    if total >= need {\n        total = need;\n    }\n    vec![total,\
    \ remaining - (total - number)]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > remaining {\n        eaten += remaining;\n     \
    \   left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n \
    \   }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    let mut total = number + remaining;\n    if total >= need {\n\
    \        result.push(need);\n        result.push(total - need);\n    } else {\n\
    \        result.push(total);\n        result.push(0);\n    }\n    result", " \
    \   let mut result = vec![];\n    let mut total = number + remaining;\n    if\
    \ total >= need {\n        result.push(need);\n        result.push(total - need);\n\
    \    } else {\n        result.push(total);\n        result.push(0);\n    }\n \
    \   result", "    let mut result = Vec::new();\n    if remaining < need {\n  \
    \      result.push(number + remaining);\n        result.push(0);\n    } else {\n\
    \        result.push(number + need);\n        result.push(remaining - need);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total >=\
    \ need {\n        total = need;\n    }\n    vec![total, remaining - (total - number)]",
  "    let mut result = vec![number];\n    if need > remaining {\n        result.push(0);\n\
    \    } else {\n        result.push(remaining - need);\n    }\n    result", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ result = vec![number + need, remaining - need];\n    if result[1] < 0 {\n  \
    \      result[1] = 0;\n        result[0] = number + remaining;\n    }\n    result",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total >= need {\n        total = need;\n    }\n\
    \    vec![total, remaining - (total - number)]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = Vec::new();\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut total = number + remaining;\n    if total <\
    \ need {\n        total = number + remaining;\n    } else {\n        total = number\
    \ + need;\n    }\n    vec![total, remaining - need]"]
stop_tokens:
- "\n}"
