name: HumanEval_43_pairs_sum_to_zero
language: rust
results:
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function.\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1d0exd02.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkwxikwnd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() {\n  \
    \      let mut j = i + 1;\n        let mut k = l.len() - 1;\n        while j <\
    \ k {\n            let sum = l[i] + l[j] + l[k];\n            if sum == 0 {\n\
    \                return true;\n            } else if sum < 0 {\n             \
    \   j += 1;\n            } else {\n                k -= 1;\n            }\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplnex_qyv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzpqz9ap1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n    \
    \        if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphn9l4sgf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function.\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_x77kcfk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp365m53xo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n    \
    \        if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() {\n  \
    \      for j in (i + 1)..l.len() {\n            if l[i] + l[j] == 0 {\n      \
    \          return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt9wse39h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n  \
    \          if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprpzkm7v0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function.\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptu0m6e54.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprcxm_a7i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6wg49sgv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in l\
    \ {\n        if set.contains(&(-i)) {\n            return true;\n        }\n \
    \       set.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpug4un2pf.rs:15:18\n\
    \   |\n15 |     let mut set: HashSet<isize> = HashSet::new();\n   |          \
    \        ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpug4un2pf.rs:15:35\n\
    \   |\n15 |     let mut set: HashSet<isize> = HashSet::new();\n   |          \
    \                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut set = HashSet::new();\n    for i in l {\n        if set.contains(&(-i))\
    \ {\n            return true;\n        }\n        set.insert(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpmqhf67lp.rs:15:19\n   |\n15 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepgvsemf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyxfvzybh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp68ou_vue.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n  \
    \          if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() {\n  \
    \      for j in i+1..l.len() {\n            if l[i] + l[j] == 0 {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc2cu0_e7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in 0..l.len() {\n      \
    \      if i != j && l[i] + l[j] == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut s: HashSet<isize> = HashSet::new();\n    for i in l {\n\
    \        if s.contains(&(-i)) {\n            return true;\n        }\n       \
    \ s.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpd9lhfd18.rs:15:16\n\
    \   |\n15 |     let mut s: HashSet<isize> = HashSet::new();\n   |            \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpd9lhfd18.rs:15:33\n   |\n15\
    \ |     let mut s: HashSet<isize> = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut set = HashSet::new();\n    for i in l {\n        if set.contains(&(-i))\
    \ {\n            return true;\n        }\n        set.insert(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpra59l4yx.rs:15:19\n   |\n15 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgzphnh6p.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n    \
    \        if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf381ff1i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8unqlnbp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l_copy = l.clone();\n    l_copy.sort();\n    let mut\
    \ i = 0;\n    let mut j = l_copy.len() - 1;\n    while i < j {\n        let sum\
    \ = l_copy[i] + l_copy[j];\n        if sum == 0 {\n            return true;\n\
    \        } else if sum < 0 {\n            i += 1;\n        } else {\n        \
    \    j -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7lj29z2v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    for i in 0..l.len() {\n  \
    \      for j in i+1..l.len() {\n            if l[i] + l[j] == 0 {\n          \
    \      return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmdbpsrlr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvv_kj3ny.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpek8h0r_x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement me!\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpykbljc_0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n  \
    \          if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut sum = 0;\n    for i in 0..l.len() {\n        for j in\
    \ i+1..l.len() {\n            sum = l[i] + l[j];\n            if sum == 0 {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcddi4g6i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvos2o83z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvld79869.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n    \
    \        if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp31cat1th.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n  \
    \          if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l_copy = l.clone();\n    l_copy.sort();\n    let mut\
    \ i = 0;\n    let mut j = l_copy.len() - 1;\n    while i < j {\n        let sum\
    \ = l_copy[i] + l_copy[j];\n        if sum == 0 {\n            return true;\n\
    \        } else if sum < 0 {\n            i += 1;\n        } else {\n        \
    \    j -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5xrrsuh_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n  \
    \          if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpefutu_qn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l_sorted = l.clone();\n    l_sorted.sort();\n    let\
    \ mut i = 0;\n    let mut j = l_sorted.len() - 1;\n    while i < j {\n       \
    \ let sum = l_sorted[i] + l_sorted[j];\n        if sum == 0 {\n            return\
    \ true;\n        } else if sum < 0 {\n            i += 1;\n        } else {\n\
    \            j -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function.\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj00i_wxm.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut left = 0;\n    let\
    \ mut right = l.len() - 1;\n    while left < right {\n        let sum = l[left]\
    \ + l[right];\n        if sum == 0 {\n            return true;\n        } else\
    \ if sum < 0 {\n            left += 1;\n        } else {\n            right -=\
    \ 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    // TODO: Implement this function\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp57e750zz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    for i in 0..l.len() {\n        for j in i+1..l.len() {\n    \
    \        if l[i] + l[j] == 0 {\n                return true;\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        if l[i] + l[j] == 0 {\n       \
    \     return true;\n        } else if l[i] + l[j] < 0 {\n            i += 1;\n\
    \        } else {\n            j -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
    \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
    \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfn pairs_sum_to_zero(l: Vec<isize>)\
    \ -> bool {\n    let mut l = l;\n    l.sort();\n    let mut i = 0;\n    let mut\
    \ j = l.len() - 1;\n    while i < j {\n        let sum = l[i] + l[j];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
