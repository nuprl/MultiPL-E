name: HumanEval_134_check_if_last_char_is_a_letter
language: rust
results:
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   if txt.is_empty() {\n        return false;\n    }\n    let mut last_char =\
    \ txt.chars().last().unwrap();\n    if last_char.is_alphabetic() {\n        if\
    \ last_char.is_uppercase() {\n            last_char = last_char.to_lowercase().next().unwrap();\n\
    \        }\n        if !txt.contains(last_char) {\n            return true;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9xid9t0o.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut txt = txt.chars().rev();\n    let mut last_char = txt.next().unwrap();\n\
    \    if !last_char.is_alphabetic() {\n        return false;\n    }\n    while\
    \ let Some(c) = txt.next() {\n        if c.is_alphabetic() {\n            return\
    \ false;\n        }\n        if c != ' ' {\n            return true;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_w3t1z5b.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg3fihzu6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for ch in txt.chars() {\n        if ch.is_alphabetic()\
    \ {\n            last_char = ch;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_7oxv6n9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2qwnca1r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj1so5b5o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphxnjojpw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpektx7e9q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   txt.chars().last().map_or(false, |c| c.is_alphabetic() && !c.is_alphanumeric())\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl4z2woy6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp40nhm_xf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3b7ct51_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpygfo_we3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpi0ku2h0z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpan23re7p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut result = false;\n    let mut last_char = ' ';\n    for c in txt.chars()\
    \ {\n        if c.is_alphabetic() {\n            last_char = c;\n        }\n \
    \   }\n    if last_char.is_alphabetic() {\n        result = true;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf8wg3bxo.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptptk50vl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpywiaqmz9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf7f5cj4_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4661jy5i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgik05mg6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2xcr2yrn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpid4euzq8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   txt.chars().last().map_or(false, |c| c.is_alphabetic() && !c.is_alphanumeric())\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzu9nrrq6.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp85vapfjz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvuwa4xpw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphd8bkyp_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdzb5waj_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6c3_rfek.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp088aqxu_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvix4zv22.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ last_char.is_ascii_lowercase()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzp4v2rkk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   txt.chars().last().map_or(false, |c| c.is_alphabetic() && !c.is_alphanumeric())\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdvyi34wr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n  \
    \      return false;\n    }\n    last_char = last_char.unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwdjeq85.rs:15:17\n   |\n\
    11 |     let mut last_char = txt.chars().last();\n   |                       \
    \  ------------------ expected due to this value\n...\n15 |     last_char = last_char.unwrap();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     last_char = Some(last_char.unwrap());\n\
    \   |                 +++++                  +\n\nerror[E0599]: no method named\
    \ `is_alphabetic` found for enum `Option` in the current scope\n  --> /tmp/tmptwdjeq85.rs:16:15\n\
    \   |\n16 |     last_char.is_alphabetic() && !last_char.is_alphanumeric()\n  \
    \ |               ^^^^^^^^^^^^^ method not found in `Option<char>`\n\nerror[E0599]:\
    \ no method named `is_alphanumeric` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmptwdjeq85.rs:16:45\n   |\n16 |     last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n   |                                         \
    \    ^^^^^^^^^^^^^^^ method not found in `Option<char>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpje9kzbom.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1xhg_ci2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0a9a5uax.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1rmsyp46.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut iter = txt.chars().rev();\n    let mut last_char = iter.next();\n\
    \    while let Some(c) = last_char {\n        if c.is_alphabetic() {\n       \
    \     if let Some(c) = iter.next() {\n                if c.is_whitespace() {\n\
    \                    return true;\n                }\n            } else {\n \
    \               return true;\n            }\n        }\n        last_char = iter.next();\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp08u4s_b6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   if txt.is_empty() {\n        return false;\n    }\n    let last_char = txt.chars().last().unwrap();\n\
    \    last_char.is_alphabetic() && !last_char.is_alphanumeric()\n}\n\nfn main()\
    \ {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl9pacfpd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgo2kby5i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvfkx12it.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyr9hljxc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    let mut last_char_is_letter\
    \ = false;\n    for c in chars {\n        if c.is_alphabetic() {\n           \
    \ last_char_is_letter = true;\n        } else {\n            last_char_is_letter\
    \ = false;\n        }\n        last_char = c;\n    }\n    last_char_is_letter\
    \ && last_char.is_alphabetic()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9v4sjpr7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr2ijitfo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz8h_oi59.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp26jyqa_b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa93blt5l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppqs65y91.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    !last_char.is_alphabetic()\
    \ || last_char.is_uppercase()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9x5ia0qc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgwlu7kpi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpakke9y64.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq1rm_hzp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n  \
    \      return false;\n    }\n    last_char = last_char.unwrap();\n    if last_char.is_alphabetic()\
    \ {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbbgbpcve.rs:15:17\n   |\n\
    11 |     let mut last_char = txt.chars().last();\n   |                       \
    \  ------------------ expected due to this value\n...\n15 |     last_char = last_char.unwrap();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     last_char = Some(last_char.unwrap());\n\
    \   |                 +++++                  +\n\nerror[E0599]: no method named\
    \ `is_alphabetic` found for enum `Option` in the current scope\n  --> /tmp/tmpbbgbpcve.rs:16:18\n\
    \   |\n16 |     if last_char.is_alphabetic() {\n   |                  ^^^^^^^^^^^^^\
    \ method not found in `Option<char>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprto57qah.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplop7j29l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpds6wn9z3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe_lkdwrx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg0c0zah5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsmybtoqe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp951mn631.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_dxd6wyq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpce0w1gdv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    !last_char.is_alphabetic() ||\
    \ chars.next_back().is_none()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4vfwu58q.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp97ht0fy_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps4f3cetz.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz7tllo9g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz8ke_llo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    let mut last_last_char\
    \ = ' ';\n    while let Some(c) = chars.next() {\n        last_last_char = last_char;\n\
    \        last_char = c;\n    }\n    last_char.is_alphabetic() && !last_last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1hwcb2k0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for ch in txt.chars() {\n        if ch.is_alphabetic()\
    \ {\n            last_char = ch;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr2loguqu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ last_char.is_uppercase()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq0vt6ddz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdhfo4jed.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcn19wwmk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpajq8aw8u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsemaqzcp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbv_kwhzl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for ch in txt.chars() {\n        if ch.is_alphabetic()\
    \ {\n            last_char = ch;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3pie5hm9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgs430dvy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3uvpf4l2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkuwuup6d.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1on18s4_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last();\n    match last_char {\n        Some(c)\
    \ => c.is_alphabetic() && !c.is_alphanumeric(),\n        None => false,\n    }\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyxmpiu38.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6_3wx59j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpiqhrut3s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt9r9yyr4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2rnt68b7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4a6ni5_7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjhqypkn4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpapwxtjhn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt0cx792a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ last_char.is_lowercase()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp2wd9ly_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0irf297f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyw5zvca9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy0abb3m2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpms0o7x_e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8cg5yai5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfeta9kuv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbxbudlq0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmwf4rvww.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7a1nmuh3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcipe6b61.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7qp4f0nb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxbiuma91.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4zn8eloe.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc84_wuds.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().rev().next();\n    while last_char.is_some()\
    \ && last_char.unwrap().is_whitespace() {\n        last_char = txt.chars().rev().skip(1).next();\n\
    \    }\n    last_char.is_some() && last_char.unwrap().is_alphabetic()\n}\n\nfn\
    \ main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo5lfadm6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbwo5y_rg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpilhi23ot.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_r78yzbj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmped15brl4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_chcfdj_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqsdk_q4y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp851wp76p.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpetd86quy.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzhjgr2bh.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   txt.chars().last().map_or(false, |c| c.is_alphabetic() && !c.is_alphanumeric())\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpd_ud9mr4.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpoj9fatit.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n  \
    \      return false;\n    }\n    last_char = last_char.unwrap();\n    if last_char.is_alphabetic()\
    \ {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoq3qy2py.rs:15:17\n   |\n\
    11 |     let mut last_char = txt.chars().last();\n   |                       \
    \  ------------------ expected due to this value\n...\n15 |     last_char = last_char.unwrap();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     last_char = Some(last_char.unwrap());\n\
    \   |                 +++++                  +\n\nerror[E0599]: no method named\
    \ `is_alphabetic` found for enum `Option` in the current scope\n  --> /tmp/tmpoq3qy2py.rs:16:18\n\
    \   |\n16 |     if last_char.is_alphabetic() {\n   |                  ^^^^^^^^^^^^^\
    \ method not found in `Option<char>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa49bd16b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxsxr0a_o.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   txt.chars().last().map_or(false, |c| c.is_alphabetic() && !c.is_alphanumeric())\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr_n1jgqj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    let mut last_char_is_letter\
    \ = false;\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic()\
    \ {\n            last_char_is_letter = true;\n        } else {\n            last_char_is_letter\
    \ = false;\n        }\n        last_char = c;\n    }\n    last_char.is_alphabetic()\
    \ && !last_char_is_letter\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7t5ke7so.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpiiv2xo0m.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkx7zqpdz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4ult3_am.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7osfazcu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm6np3qkv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprwbfjoy8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph6n7g_7b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvgvqqq9s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjat3bq8u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpidszk1fb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpu8l3i8cj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuwrpupno.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf9hr_wvd.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfbbnwrdf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkhxtauyw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphewpgn7q.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp411y3dbc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbw_yz_23.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut result = false;\n    let mut last_char = ' ';\n    for c in txt.chars()\
    \ {\n        if c.is_alphabetic() {\n            last_char = c;\n        }\n \
    \   }\n    if last_char.is_alphabetic() {\n        result = true;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpd3i89qew.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1jf65vyp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   if txt.is_empty() {\n        return false;\n    }\n    let mut last_char =\
    \ txt.chars().last().unwrap();\n    if last_char.is_alphabetic() {\n        last_char\
    \ = txt.chars().rev().skip(1).next().unwrap();\n        if last_char == ' ' {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpzvrbkquo.rs:16:54\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3mklbp85.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptr6ojry7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsqutpxoj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbuh1omk2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut result = false;\n    let mut last_char = ' ';\n    for c in txt.chars()\
    \ {\n        if c.is_alphabetic() {\n            last_char = c;\n        }\n \
    \   }\n    if last_char.is_alphabetic() {\n        result = true;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp437q44s_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqx_yzxv_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa1dl_igc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut result = false;\n    let mut last_char = ' ';\n    for c in txt.chars()\
    \ {\n        if c.is_alphabetic() {\n            last_char = c;\n        }\n \
    \   }\n    if last_char.is_alphabetic() {\n        result = true;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcd7jp3_6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char_is_letter = false;\n    let mut last_char_is_space = false;\n\
    \    for c in txt.chars() {\n        if c.is_alphabetic() {\n            last_char_is_letter\
    \ = true;\n            last_char_is_space = false;\n        } else if c.is_whitespace()\
    \ {\n            last_char_is_space = true;\n        }\n    }\n    last_char_is_letter\
    \ && !last_char_is_space\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjy3bh5f0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphc1mp9ha.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe6mb49qe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1ui6_i9_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6rjx3npa.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n  \
    \      return false;\n    }\n    last_char = last_char.unwrap();\n    if last_char.is_alphabetic()\
    \ {\n        let mut last_char_is_a_letter = true;\n        for c in txt.chars().rev()\
    \ {\n            if c == ' ' {\n                break;\n            }\n      \
    \      if c.is_alphabetic() {\n                last_char_is_a_letter = false;\n\
    \                break;\n            }\n        }\n        return last_char_is_a_letter;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1t1gmdhc.rs:15:17\n   |\n\
    11 |     let mut last_char = txt.chars().last();\n   |                       \
    \  ------------------ expected due to this value\n...\n15 |     last_char = last_char.unwrap();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     last_char = Some(last_char.unwrap());\n\
    \   |                 +++++                  +\n\nerror[E0599]: no method named\
    \ `is_alphabetic` found for enum `Option` in the current scope\n  --> /tmp/tmp1t1gmdhc.rs:16:18\n\
    \   |\n16 |     if last_char.is_alphabetic() {\n   |                  ^^^^^^^^^^^^^\
    \ method not found in `Option<char>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_iz4jemc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwofydt8z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj0q57gmu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsf7hjaa7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp87ykrl7w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut result = false;\n    let mut last_char = ' ';\n    for c in txt.chars()\
    \ {\n        if c.is_alphabetic() {\n            last_char = c;\n        }\n \
    \   }\n    if last_char.is_alphabetic() {\n        result = true;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphnmx67ck.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2z2zlp7s.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ last_char.is_ascii_alphabetic()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp80_gla11.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    while let\
    \ Some(c) = chars.next_back() {\n        if c.is_alphabetic() {\n            last_char\
    \ = c;\n            break;\n        }\n    }\n    last_char.is_alphabetic() &&\
    \ !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1s09ttxa.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = txt.chars().last();\n    if last_char.is_none() {\n  \
    \      return false;\n    }\n    last_char = last_char.unwrap();\n    if last_char.is_alphabetic()\
    \ {\n        let mut last_char_is_a_letter = true;\n        for c in txt.chars().rev()\
    \ {\n            if c.is_alphabetic() {\n                continue;\n         \
    \   }\n            if c.is_whitespace() {\n                last_char_is_a_letter\
    \ = false;\n            }\n            break;\n        }\n        return last_char_is_a_letter;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa72jgvci.rs:15:17\n   |\n\
    11 |     let mut last_char = txt.chars().last();\n   |                       \
    \  ------------------ expected due to this value\n...\n15 |     last_char = last_char.unwrap();\n\
    \   |                 ^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n15 |     last_char = Some(last_char.unwrap());\n\
    \   |                 +++++                  +\n\nerror[E0599]: no method named\
    \ `is_alphabetic` found for enum `Option` in the current scope\n  --> /tmp/tmpa72jgvci.rs:16:18\n\
    \   |\n16 |     if last_char.is_alphabetic() {\n   |                  ^^^^^^^^^^^^^\
    \ method not found in `Option<char>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr2dzo0xo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp11dn9_46.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt48l8eu4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnh3hu8s4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for ch in txt.chars() {\n        if ch.is_alphabetic()\
    \ {\n            last_char = ch;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwcq44n8i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe2ksp2a8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz0ecglt7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw5y9jpom.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpb93h764u.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuh4nr_7f.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6jbf8ne9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo2g0t65z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp110ddd4g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4gfpj2sh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgb2yiym3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_hitftpu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzj6_c9hg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut chars = txt.chars();\n    let mut last_char = ' ';\n    let mut last_char_is_letter\
    \ = false;\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic()\
    \ {\n            last_char_is_letter = true;\n        } else {\n            last_char_is_letter\
    \ = false;\n        }\n        last_char = c;\n    }\n    last_char.is_alphabetic()\
    \ && !last_char_is_letter\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu4wsumc2.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprd3dpkrv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphmxptir0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx0flgpav.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzxo__2g4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9okkrs06.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv7u3600h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuvwc8a99.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjcd_9vy1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpug13m75w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let last_char = txt.chars().last().unwrap();\n    last_char.is_alphabetic()\
    \ && !last_char.is_alphanumeric()\n}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n\
    \    assert_eq!(candidate(String::from(\"apple\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e\")), true);\n    assert_eq!(candidate(String::from(\"eeeee\")), false);\n\
    \    assert_eq!(candidate(String::from(\"A\")), true);\n    assert_eq!(candidate(String::from(\"\
    Pumpkin pie \")), false);\n    assert_eq!(candidate(String::from(\"Pumpkin pie\
    \ 1\")), false);\n    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
    eeeee e \")), false);\n    assert_eq!(candidate(String::from(\"apple pie\")),\
    \ false);\n    assert_eq!(candidate(String::from(\"apple pi e \")), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnkcnx9rc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp69r_yon3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp01kf9slq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0n2xworl.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp67_2dw3t.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function that returns True if the last character\n/// of\
    \ a given string is an alphabetical character and is not\n/// a part of a word,\
    \ and False otherwise.\n/// Note: \"word\" is a group of characters separated\
    \ by space.\n/// Examples:\n/// check_if_last_char_is_a_letter(\"apple pie\")\
    \ \u279E False\n/// check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n\
    /// check_if_last_char_is_a_letter(\"apple pi e \") \u279E False\n/// check_if_last_char_is_a_letter(\"\
    \") \u279E False\nfn check_if_last_char_is_a_letter(txt: String) -> bool {\n \
    \   let mut last_char = ' ';\n    for c in txt.chars() {\n        if c.is_alphabetic()\
    \ {\n            last_char = c;\n        }\n    }\n    last_char.is_alphabetic()\n\
    }\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n    assert_eq!(candidate(String::from(\"\
    apple\")), false);\n    assert_eq!(candidate(String::from(\"apple pi e\")), true);\n\
    \    assert_eq!(candidate(String::from(\"eeeee\")), false);\n    assert_eq!(candidate(String::from(\"\
    A\")), true);\n    assert_eq!(candidate(String::from(\"Pumpkin pie \")), false);\n\
    \    assert_eq!(candidate(String::from(\"Pumpkin pie 1\")), false);\n    assert_eq!(candidate(String::from(\"\
    \")), false);\n    assert_eq!(candidate(String::from(\"eeeee e \")), false);\n\
    \    assert_eq!(candidate(String::from(\"apple pie\")), false);\n    assert_eq!(candidate(String::from(\"\
    apple pi e \")), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_f0yijgj.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
