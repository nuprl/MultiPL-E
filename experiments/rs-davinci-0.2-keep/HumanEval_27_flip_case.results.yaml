name: HumanEval_27_flip_case
language: rust
results:
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpki_6ynvk.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmptiti7504.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpemdkiyqt.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpspcndqcg.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().to_string()\n        } else {\n            c.to_uppercase().to_string()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip the case of {}\", string)\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip the case of ', /tmp/tmpmp5ksn2g.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpo0_1hj7y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpf6lyc2av.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp32314szy.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpxklj79jr.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp7vb7clss.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp5nx0i1yk.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpy99v_9us.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpq_hkwv0l.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for c\
    \ in string.chars() {\n        if c.is_lowercase() {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp1fjhqd2d.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() {\n    \
    \    c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpy5nksu5c.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmprg4hb_0f.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpherfp5pr.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!(\"Flip the case of {}\", string)\n}\n\
    \nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Flip the case of ', /tmp/tmpx2heqs58.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for c\
    \ in string.chars() {\n        if c.is_uppercase() {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp8piqnokn.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for c\
    \ in string.chars() {\n        if c.is_lowercase() {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp_j0i9qvr.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp4b0g167u.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\n\
    \        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpltp6sy85.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmp6hio_g0a.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpidodl1eh.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            flipped.push(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            flipped.push(c.to_ascii_lowercase());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpokynspos.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpg_sl2enz.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpw6wer6o3.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped_string = String::new();\n    for c\
    \ in string.chars() {\n        if c.is_lowercase() {\n            flipped_string.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped_string.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped_string\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmprql3afh_.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpij4wud09.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmphd4wbkld.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpwjmgmg8e.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_lowercase()\
    \ => c.to_uppercase().next().unwrap(),\n        c if c.is_uppercase() => c.to_lowercase().next().unwrap(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\
    \ c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| c.to_ascii_uppercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmpggutyv8s.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpy34kypiy.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpin0wpl_t.rs:5:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        match c {\n     \
    \       'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n\
    \            _ => c,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        c if c.is_ascii_lowercase()\
    \ => c.to_ascii_uppercase(),\n        c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmpmhwesttw.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_ascii_lowercase() {\n\
    \        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    let mut flipped = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            flipped.push(c.to_uppercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        }\n    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_uppercase()\
    \ {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_uppercase()\
    \ {\n            c.to_lowercase().next().unwrap()\n        } else {\n        \
    \    c.to_uppercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_lowercase()\
    \ {\n            c.to_uppercase().next().unwrap()\n        } else {\n        \
    \    c.to_lowercase().next().unwrap()\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase()\
    \ } else { c.to_lowercase() }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: `if` and `else` have incompatible types\n --> /tmp/tmppabrfhrz.rs:5:76\n\
    \  |\n5 |     string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() }\
    \ else { c.to_lowercase() }).collect()\n  |                                  \
    \                ----------------          ^^^^^^^^^^^^^^^^ expected struct `ToUppercase`,\
    \ found struct `ToLowercase`\n  |                                            \
    \      |\n  |                                                  expected because\
    \ of this\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'..='z'\
    \ => c.to_ascii_uppercase(),\n        'A'..='Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap()\
    \ } else { c.to_uppercase().next().unwrap() }).collect()\n}\n\nfn main() {\n \
    \   let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| if c.is_uppercase() {\n    \
    \    c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfn flip_case(string:\
    \ String) -> String {\n    string.chars().map(|c| match c {\n        'a'...'z'\
    \ => c.to_ascii_uppercase(),\n        'A'...'Z' => c.to_ascii_lowercase(),\n \
    \       _ => c,\n    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
