name: HumanEval_52_below_threshold
language: rust
results:
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for x in l {\n        if x >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_d8pe8z.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    let mut result = true;\n    for i in l {\n        if i > t {\n      \
    \      result = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqe0uw7xz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3n_wwy0w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzam1dk43.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzmnw7xj_.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpquge_172.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8tak4pin.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3b5u2jer.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1jgerxoi.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    // TODO: Implement me!\n    false\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp69f5xczn.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptwxqtp4l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0weu7v40.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp31riim9b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk0o145uv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_sikc2zw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc3quwu2h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdf3bzqw0.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8o04wncv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1aw0d0lf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    for i in l {\n        if i > t {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvvmcruko.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return True if all numbers in the list l are below threshold t.\n\
    /// >>> below_threshold([1, 2, 4, 10], 100)\n/// True\n/// >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n/// False\nfn below_threshold(l: Vec<isize>, t: isize) -> bool\
    \ {\n    l.iter().all(|x| x < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
