name: HumanEval_77_iscube
language: rust
results:
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <\
    \ a.abs() {\n        i += 1;\n    }\n    i * i * i == a.abs()\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz9a3inmp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgijn47y0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnhu2gc1d.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprw1phw78.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <=\
    \ a.abs() {\n        if i * i * i == a.abs() {\n            return true;\n   \
    \     }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let x =\
    \ (a as f64).sqrt().sqrt();\n    x.fract() == 0.0\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv03oqdau.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvtshhv_u.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7wejdwmk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2x2ozk_t.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyj8cwvh4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp14m89vg4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0tu1vdi6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcvx5l0di.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbgue27yq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgw7hf84c.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqksb779w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1flxqi_p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut cube = 0;\n    while cube < a {\n        i += 1;\n     \
    \   cube = i * i * i;\n    }\n    cube == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxfkn_3yc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let x =\
    \ (a as f64).powf(1.0/3.0);\n    x.floor() == x\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9_415768.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp64_02hex.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvrkfjyw0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpffjfyo26.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpas0vp2ar.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzv6tyjvt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ x = 1;\n    while x * x * x < a {\n        x += 1;\n    }\n    x * x * x ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpauy667gl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp__k3yrh4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprt_hi1xu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_vgbpw0o.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ b = a;\n    if b < 0 {\n        b = -b;\n    }\n    let mut i = 0;\n    while\
    \ i * i * i < b {\n        i += 1;\n    }\n    i * i * i == b\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut result = 0;\n    while result < a {\n        i += 1;\n \
    \       result = i * i * i;\n    }\n    result == a\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiovyh90z.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy4lnj8ad.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1wsy8zod.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp32uddova.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i*i*i < a {\n        i += 1;\n    }\n    i*i*i == a\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqrtjnuvj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo66911_h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg65hv33z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb6ellw28.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprh_3m0bd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6r61su8h.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return false;\n    }\n    let mut i = 0;\n    while i * i * i <=\
    \ a {\n        if i * i * i == a {\n            return true;\n        }\n    \
    \    i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprickpgk_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnlilxje8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpihtndeb6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp2eve4nr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp27lr82qf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv1_akx3g.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0o6achlq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkliovssr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpow31yw2t.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_dlzwrym.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg39glcmu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprynsadof.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqkngmyvf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4hl4w3h_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut result = 0;\n    while result < a {\n        i += 1;\n \
    \       result = i * i * i;\n    }\n    result == a\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbtdydltz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp72o8f656.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptk0n7nep.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbs3__cxf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwo4pf0ws.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmperpmv3q9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpifxq3527.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk3t_21xf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvbvfmsr1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplhwkyqob.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpny6_bv4w.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps69upwp4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2yrn95_t.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu3yptbd5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp76wjbdoz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ cube = 0;\n    let mut i = 0;\n    while cube < a {\n        i += 1;\n     \
    \   cube = i * i * i;\n    }\n    cube == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplx0kr1gr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprzx7lxuk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn7kdyi53.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmply4celai.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpciq0_rgz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf13xrjqu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkfw53w2f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1ytc2vur.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn7g2c284.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <\
    \ a.abs() {\n        i += 1;\n    }\n    i * i * i == a.abs()\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpen34e6o2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6f2je4nc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let b =\
    \ a.abs();\n    let c = (b as f64).powf(1.0 / 3.0);\n    c.fract() == 0.0\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp89fnl585.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.pow(3)\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9uv1im4y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa1kdh66l.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppit9ps7m.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyi2jprkv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let b =\
    \ a.abs();\n    let mut i = 0;\n    while i * i * i < b {\n        i += 1;\n \
    \   }\n    i * i * i == b\n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1i4soozr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqqetz_qr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjvyxo5q_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkrxqr_yy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi_ng65cd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsn_8i6mu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdj9_lqo1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvrpde5gv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpryrzsk3p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return false;\n    }\n    let mut i = 0;\n    while i * i * i <=\
    \ a {\n        if i * i * i == a {\n            return true;\n        }\n    \
    \    i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm5yiule3.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk3cegcu3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmvgsk0u5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnhluhqhq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpeqxhw8jv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphjci1vjw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgn7rhigx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6x1ev518.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqucvtpso.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphew2f3np.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsbeydetj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp95wf_bar.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.pow(3)\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo4drnceg.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjuwtj2g1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.pow(3)\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4p_ds6up.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphj86fmcb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8ksjf2uc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe6ec93jn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr3d5gdu3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.abs().pow(1.0/3.0)\
    \ % 1.0 == 0.0\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpguazpsa2.rs:12:17\n   |\n\
    12 |     a.abs().pow(1.0/3.0) % 1.0 == 0.0\n   |                 ^^^^^^^ expected\
    \ `u32`, found floating-point number\n\nerror[E0277]: cannot mod `isize` by `{float}`\n\
    \  --> /tmp/tmpguazpsa2.rs:12:26\n   |\n12 |     a.abs().pow(1.0/3.0) % 1.0 ==\
    \ 0.0\n   |                          ^ no implementation for `isize % {float}`\n\
    \   |\n   = help: the trait `Rem<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Rem<Rhs>`:\n            \
    \ <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a\
    \ i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32\
    \ as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp81djj7yc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfi5iuj62.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkhenpk_q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_csuepd_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpjjv6i798.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpptxapx95.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe170qsol.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppst2o4tx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3demsjnv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps5zl627k.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpipme79az.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpihpveqqa.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz5t1cntx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_m99pc5h.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbz01s1u5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9858q0y8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw6dy9d3m.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <\
    \ a.abs() {\n        i += 1;\n    }\n    i * i * i == a.abs()\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp35_1vidc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpniipzhgx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmcmk5kqt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph5o5wi6x.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9wvsz68v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvbim3o1l.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp8m0161q5.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp76rwaqbu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3o9h9i7f.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbyirohm8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt9ho_t_v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpedp65e64.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let b =\
    \ a.abs();\n    let c = (b as f64).cbrt() as isize;\n    c * c * c == b\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3tty_skm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcm2x0jck.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpseiigs5p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyxayfrg3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <\
    \ a.abs() {\n        i += 1;\n    }\n    i * i * i == a.abs()\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp08oxzghv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr0l_x5ry.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp22eh9hn0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmp2u0a37.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2xnb1_z0.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpt8xxe6hb.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.pow(3)\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppkn8n3mp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0o6nfs8i.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp49o5fprq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprpeovn48.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq5d4_iia.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let b =\
    \ (a as f64).sqrt().sqrt();\n    b == b.round()\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9azqcvod.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp712hkhn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkrev77ff.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp12im3nru.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp266mnb5e.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqlsoukv6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdfucdps5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo39uis0s.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwyjxpqi4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp1dokc29.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let mut i = 0;\n    while i * i *\
    \ i <= a {\n        if i * i * i == a {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp87dk3zh2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp36kow2k6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpre4vwyy9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjvztd2t3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2q6vju8w.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpub2mt6_t.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a ==\
    \ 0 {\n        return true;\n    }\n    let mut i = 1;\n    while i * i * i <=\
    \ a.abs() {\n        if i * i * i == a.abs() {\n            return true;\n   \
    \     }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj51sdqg9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2oz_tilf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut cube = 0;\n    while cube < a {\n        i += 1;\n     \
    \   cube = i * i * i;\n    }\n    cube == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzc6wdcvp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut result = 0;\n    while result < a {\n        i += 1;\n \
    \       result = i * i * i;\n    }\n    result == a\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi2gzmrlq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpigmzacq4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    let mut cube = 0;\n    while cube < a {\n        i += 1;\n     \
    \   cube = i * i * i;\n    }\n    cube == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3d6typo5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    if a < 0\
    \ {\n        return false;\n    }\n    let mut i = 0;\n    while i * i * i <=\
    \ a {\n        if i * i * i == a {\n            return true;\n        }\n    \
    \    i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpihphhcmz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprn3u2nzh.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpixx1o9xm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ n = 0;\n    while n * n * n <= a {\n        if n * n * n == a {\n          \
    \  return true;\n        }\n        n += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoh05e7f4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    a.pow(3)\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu5sxsxy8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n          \
    \  return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkm36x95o.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 1;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4vf6oh_q.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns True \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfn iscube(a: isize) -> bool {\n    let mut\
    \ i = 0;\n    while i * i * i < a {\n        i += 1;\n    }\n    i * i * i ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprmthb30b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
