name: HumanEval_25_factorize
language: rust
results:
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            result.push(factor);\n            n /= factor;\n        }\n     \
    \   factor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        res.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     result.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            result.push(divisor);\n            n /= divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     result.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     result.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     res.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        res.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            result.push(divisor);\n            n /= divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            result.push(divisor);\n            n /= divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut factor = 2;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut d = 2;\n    while n > 1 {\n        while n % d == 0 {\n         \
    \   factors.push(d);\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            factors.push(divisor);\n            n /= divisor;\n        }\n  \
    \      divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            n /= i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n    \
    \        result.push(i);\n            n /= i;\n        }\n        i += 1;\n  \
    \  }\n    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut n = n;\n    let mut result = Vec::new();\n\
    \    let mut divisor = 2;\n    while n > 1 {\n        while n % divisor == 0 {\n\
    \            result.push(divisor);\n            n /= divisor;\n        }\n   \
    \     divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n///\
    \ >>> factorize(25)\n/// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfn factorize(n:\
    \ isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut n = n;\n\
    \    let mut i = 2;\n    while n > 1 {\n        while n % i == 0 {\n         \
    \   result.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
