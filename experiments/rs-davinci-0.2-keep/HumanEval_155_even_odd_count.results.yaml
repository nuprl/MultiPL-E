name: HumanEval_155_even_odd_count
language: rust
results:
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn7mhqqci.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpb5oisli9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpwfcxmjw5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5ljy3icv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp1691y8hp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxiv_pkhr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpct0lk3vr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppk2_mji9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv6b0pkel.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp30cl9ebs.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for digit in\
    \ num.to_string().chars() {\n        if digit.to_digit(10).unwrap() % 2 == 0 {\n\
    \            even_count += 1;\n        } else {\n            odd_count += 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpsjr5luht.rs:9:31\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpxinn6srj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpoy6mzwtp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpijhmq9n0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpui8qslys.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        if num % 2 == 0 {\n            even += 1;\n      \
    \  } else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfaunkhxz.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5c9upfm6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkm6fyjt2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpw_y8xlrf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpsgh6krgn.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpymnowjab.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpemhca600.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6bavd_8m.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpux8f4jf3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8ajbq8x6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmplcyzxsb7.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptbv5gr2s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpph0s0tjy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp35d0g2hy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmps18cu2n8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpey80aox4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptyni7uvu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphpzqix_n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num.to_string().chars()\
    \ {\n        if i.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n \
    \       } else {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmprqocvkgv.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4ycikyg8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpudh2wyd2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnaa3_5ld.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpnlyb_3du.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcc4hkgxj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzdo2so8f.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp0ejf1636.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzupxriv0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbi9z8v0h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpl5qpzx1x.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4b36e_6_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpljbujrt_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprw49mvo6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpv5cepxup.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp89we4vfq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn03zs1hu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprq44w97k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpj7vhvnek.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmph0un51lx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4bspnbt5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpyxeusdne.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqc0_r8dj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpt7rk9yeo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppn05omwb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpg75vm3t_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp321_18sj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpgt6suki1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpt0bfr9pz.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpekn3jfb0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp26yqwggw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4zpmsyhy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpgtudmx9z.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_fjdu0k7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpumbmwzzs.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpaim3c5rb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpth6fseut.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmptlvx341s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn5b1xfem.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpceobwez7.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9dly_nob.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpu84mgx0s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfsoajulu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyve9l8ef.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplgvvpy2s.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqgytbm5t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpq872pf1l.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6l9_720v.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqk_r66r4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpdhuzdm4z.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpuiqke49g.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpya43dynp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5p3g7805.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpa345uhvu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_8me4f5i.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfcount8w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpo4pt1bw5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp03245x8u.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpprl5l9b5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpieymlri1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvz2o_63e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp198dk_7_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpe31v2irf.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpffwvqt1t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp122j5vr1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpzv4lov9d.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpgn2tm_un.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpq8t7vnfk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp2fw7f776.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpx4o1r3x4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphhlufks6.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp5x_z74sk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpypsjcvba.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpl_zsqlln.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn2b4pek1.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpdcwqzwku.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpe5oeo9wu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvdy2nj_v.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ while num != 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcmj79pp0.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpj6y23cl8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp0ucd_v4q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp1yty4jqv.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpocv01rtv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3wnjk0o6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3lxyv964.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp71ofuf2m.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpke396qfu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9l7__gqh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpee7arwfs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    (0, 0)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpguz4sghk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmphx9bhjpr.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvo3i48q_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpw0_74od2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyb4yty54.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpk_cdh25u.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpczednh2i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for c in num.to_string().chars()\
    \ {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            even_count +=\
    \ 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpbvebpg1b.rs:9:27\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7rj0ln78.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9oea4x6c.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbjctoreb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpteicccd2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz62k6w2i.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpppzqw6fu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpqh7f1c6u.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp26m_mmii.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpaijqsclw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbct4oyhp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7_57ak3h.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp1s_ohnif.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8fflndq9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmef4gzid.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp54gu1r6d.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn67m4n6g.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmplgib_ldd.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkv2s_m7c.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7y9jkqf3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp9qdg5efq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkgu6a3qm.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp91axq2lz.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    while\
    \ n != 0 {\n        if n % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        n /= 10;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpslhtwxvr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmppdurgz96.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpd_l4iwwq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmph8l47cdp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvhql0rwk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp23l3zzrx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6v66313l.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpe62_10m8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpcccxcegn.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz5mmtt5e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp7tvto01x.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpd2flz86s.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpr9ho8gzi.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp1mmk3tws.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut n = num;\n    if\
    \ n < 0 {\n        n = -n;\n    }\n    while n > 0 {\n        if n % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \        n /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp10sxrsp1.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpl7wr3txj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp8_7m7bd_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpww6_gue2.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp4wdm7kti.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        let digit = num % 10;\n        if digit\
    \ % 2 == 0 {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n        num /= 10;\n    }\n    (even_count, odd_count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmtupryev.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpmzairhm5.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpceyx0ouz.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpkylrqzdt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpvdcui02e.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpn0bor4l4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp3l49i1o8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6yaahhyt.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpd7zae86_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpbwkgjfo4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmps25ugeh_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyti9jy34.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpgy1v0coa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        let digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpiqe0exl4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpthv_kqxl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpyxdyc4eo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprajnotar.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz1wamcd4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpqd0mylaa.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    while num != 0 {\n        if num % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpfa6_iao9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp6zdcyaqy.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpgdddjvfs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp53s7sjdm.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = num;\n   \
    \ if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        } else {\n            odd += 1;\n\
    \        }\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprtkiu2q3.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmprjg7ge65.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_v6inph3.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpz2ivnork.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmpxa_k3tsn.rs:6:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n///\
    \ even_odd_count(123) ==> (1, 2)\nfn even_odd_count(num: isize) -> (isize, isize)\
    \ {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut num\
    \ = num;\n    if num < 0 {\n        num = -num;\n    }\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n        num\
    \ /= 10;\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmpu_l8qpqb.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
