name: HumanEval_104_unique_digits
language: rust
results:
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpswm2ncbh.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        let mut flag = true;\n        let mut temp = i;\n \
    \       while temp > 0 {\n            if temp % 2 == 0 {\n                flag\
    \ = false;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if flag {\n            res.push(i);\n        }\n    }\n   \
    \ res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               has_even = true;\n                break;\n            }\n    \
    \        num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpz2zc_y1i.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n       \
    \         has_even = true;\n                break;\n            }\n          \
    \  j /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmphklxva2c.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut j = i;\n\
    \        while j > 0 {\n            if j % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            j /= 10;\n     \
    \   }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut n = i;\n        while n > 0 {\n            if n % 2 == 0 {\n       \
    \         has_even = true;\n                break;\n            }\n          \
    \  n /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpgrdqdgv8.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|x| x.is_digit(10) &&\
    \ x.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmphqcwbqx7.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpzma75d6z.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut is_unique = true;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               is_unique = false;\n                break;\n            }\n  \
    \          num /= 10;\n        }\n        if is_unique {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for num in x {\n        if !has_even_digit(num) {\n     \
    \       result.push(num);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpxswmopz_.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_odd = true;\n        let mut j = i;\n  \
    \      while j > 0 {\n            if j % 2 == 0 {\n                is_odd = false;\n\
    \                break;\n            }\n            j /= 10;\n        }\n    \
    \    if is_odd {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp2joq_sbu.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut number = i;\n        while number > 0 {\n            if number % 2 ==\
    \ 0 {\n                has_even = true;\n                break;\n            }\n\
    \            number /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpnrhwcesi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpcxhd4d3j.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp32mpdj3p.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp2ja0gh3v.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even_digit = false;\n \
    \       let mut n = i;\n        while n > 0 {\n            if n % 2 == 0 {\n \
    \               has_even_digit = true;\n                break;\n            }\n\
    \            n /= 10;\n        }\n        if !has_even_digit {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpv99s000q.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp7rk7aykr.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            n /= 10;\n    \
    \    }\n        if is_unique {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpn5_6zvnc.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp7_e80w8k.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp73dtzf4f.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpbfq77mcc.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpbmfbrjic.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            n /= 10;\n     \
    \   }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n       \
    \         has_even = true;\n                break;\n            }\n          \
    \  j /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmplmtrx_h6.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpbums29mj.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpn5xql7nm.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ tmp = i;\n        while tmp > 0 {\n            if tmp % 10 % 2 == 0 {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  tmp /= 10;\n        }\n        if flag {\n            res.push(i);\n      \
    \  }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if is_unique {\n            result.push(i);\n        }\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !i.to_string().contains(\"2\") &&\
    \ !i.to_string().contains(\"4\") && !i.to_string().contains(\"6\") && !i.to_string().contains(\"\
    8\") {\n            result.push(i);\n        }\n    }\n    result.sort();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpz3ksvnqt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp92l8z9_8.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ num = i;\n        while num > 0 {\n            if num % 10 % 2 == 0 {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  num /= 10;\n        }\n        if flag {\n            res.push(i);\n      \
    \  }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpq58o7zok.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ temp = i;\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     temp /= 10;\n        }\n        if flag {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4l68ah7k.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            res.push(i);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if is_unique {\n            result.push(i);\n        }\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for num in x {\n        if !has_even_digit(num) {\n            res.push(num);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpzbnr4tbi.rs:12:13\n   |\n12 |         if !has_even_digit(num) {\n  \
    \ |             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n       \
    \         has_even = true;\n                break;\n            }\n          \
    \  j /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ (c.to_digit(10).unwrap() % 2 == 0)) {\n            continue;\n        }\n  \
    \      res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp85740k3g.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for num in x {\n        let mut has_even = false;\n     \
    \   let mut num_copy = num;\n        while num_copy > 0 {\n            if num_copy\
    \ % 2 == 0 {\n                has_even = true;\n                break;\n     \
    \       }\n            num_copy /= 10;\n        }\n        if !has_even {\n  \
    \          result.push(num);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               has_even = true;\n                break;\n            }\n    \
    \        num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpwf1fn_ep.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp7dosc570.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpcy1uzo5q.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().filter(|&c|\
    \ c.is_digit(10)).all(|c| c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpv6r3xknk.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpa_sgkies.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpb6hhb1to.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp2arvplqg.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut v = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            v.push(i);\n        }\n    }\n    v.sort();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            n /= 10;\n    \
    \    }\n        if is_unique {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if is_unique {\n            result.push(i);\n        }\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               has_even = true;\n                break;\n            }\n    \
    \        num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ (c.to_digit(10).unwrap() % 2 == 0)) {\n            continue;\n        }\n  \
    \      result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpd6_ci954.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ !has_even_digit(n)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp9v8amm_7.rs:10:32\n   |\n10 |     x.into_iter().filter(|&n| !has_even_digit(n)).collect()\n\
    \   |                                ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmptgf_bt74.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even_digit = false;\n \
    \       let mut n = i;\n        while n > 0 {\n            if n % 2 == 0 {\n \
    \               has_even_digit = true;\n                break;\n            }\n\
    \            n /= 10;\n        }\n        if !has_even_digit {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp69x953dy.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ temp = i;\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     temp /= 10;\n        }\n        if flag {\n            res.push(i);\n  \
    \      }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp2k9dd91h.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpuh9qcjx7.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even_digit = false;\n \
    \       let mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n \
    \               has_even_digit = true;\n                break;\n            }\n\
    \            j /= 10;\n        }\n        if !has_even_digit {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for num in x {\n        if num.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(num);\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even_digit = false;\n \
    \       let mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n \
    \               has_even_digit = true;\n                break;\n            }\n\
    \            j /= 10;\n        }\n        if !has_even_digit {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmphl2q9c6d.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !i.to_string().contains(\"2\") &&\
    \ !i.to_string().contains(\"4\") && !i.to_string().contains(\"6\") && !i.to_string().contains(\"\
    8\") {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpc10uw2mw.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    // TODO\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n               \
    \ flag = false;\n                break;\n            }\n            j /= 10;\n\
    \        }\n        if flag {\n            res.push(i);\n        }\n    }\n  \
    \  res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            num /= 10;\n  \
    \      }\n        if is_unique {\n            result.push(i);\n        }\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpe1baq1je.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               has_even = true;\n                break;\n            }\n    \
    \        num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ (c.to_digit(10).unwrap() % 2 == 0)) {\n            continue;\n        }\n  \
    \      result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpe_qo8_nz.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpks0w8nfd.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp1rbobmi6.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmptadt2tpc.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut is_unique = true;\n       \
    \ let mut i_copy = i;\n        while i_copy > 0 {\n            if i_copy % 2 ==\
    \ 0 {\n                is_unique = false;\n                break;\n          \
    \  }\n            i_copy /= 10;\n        }\n        if is_unique {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpa5k2grul.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmprved0qyj.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpb29nnf7r.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp5nvu8xy_.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp0b7hy6lt.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ num = i;\n        while num > 0 {\n            if num % 10 % 2 == 0 {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  num /= 10;\n        }\n        if flag {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut is_unique = true;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               is_unique = false;\n                break;\n            }\n  \
    \          num /= 10;\n        }\n        if is_unique {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp9b2xsm84.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut flag = true;\n        let mut num = i;\n  \
    \      while num > 0 {\n            if num % 2 == 0 {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if flag {\n            result.push(i);\n        }\n    }\n   \
    \ result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpy5hjnqsi.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&n|\
    \ n.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1u88i6mn.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            n /= 10;\n     \
    \   }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut n = i;\n\
    \        while n > 0 {\n            if n % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            n /= 10;\n     \
    \   }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !i.to_string().contains(\"2\") && !i.to_string().contains(\"\
    4\") && !i.to_string().contains(\"6\") && !i.to_string().contains(\"8\") {\n \
    \           result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpxqszjrdo.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&x|\
    \ x.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp8p1fbb4x.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ temp = i;\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     temp /= 10;\n        }\n        if flag {\n            res.push(i);\n  \
    \      }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for n in x {\n        if !has_even_digit(n) {\n           \
    \ res.push(n);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpal5aotef.rs:12:13\n   |\n12 |         if !has_even_digit(n) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp57gberw2.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if !i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ (c.to_digit(10).unwrap() % 2 == 0)) {\n            res.push(i);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut has_even = false;\n       \
    \ let mut num = i;\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               has_even = true;\n                break;\n            }\n    \
    \        num /= 10;\n        }\n        if !has_even {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpetja5dbn.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpsnhethds.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpm4fvyhr9.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpa2f5bqx7.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    x.into_iter().filter(|&i|\
    \ i.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpd_lf0pn2.rs:15:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpsth_jvn_.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut even_digit = false;\n     \
    \   let mut i_copy = i;\n        while i_copy > 0 {\n            if i_copy % 2\
    \ == 0 {\n                even_digit = true;\n                break;\n       \
    \     }\n            i_copy /= 10;\n        }\n        if !even_digit {\n    \
    \        result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpbc0x4_xw.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpxooe2wn_.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpoz8l8jta.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut has_even = false;\n        let mut num = i;\n\
    \        while num > 0 {\n            if num % 2 == 0 {\n                has_even\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if !has_even {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut is_unique = true;\n        let mut j = i;\n\
    \        while j > 0 {\n            if j % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n            j /= 10;\n    \
    \    }\n        if is_unique {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n           \
    \ res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpnl8oe3fx.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        let mut flag = true;\n        let mut num = i;\n  \
    \      while num > 0 {\n            if num % 2 == 0 {\n                flag =\
    \ false;\n                break;\n            }\n            num /= 10;\n    \
    \    }\n        if flag {\n            result.push(i);\n        }\n    }\n   \
    \ result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpo5_p7346.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 != 0) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n \
    \       result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpqsyyd3wl.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        let mut flag = true;\n        let mut\
    \ temp = i;\n        while temp > 0 {\n            if temp % 10 % 2 == 0 {\n \
    \               flag = false;\n                break;\n            }\n       \
    \     temp /= 10;\n        }\n        if flag {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmp2j2zdp89.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) &&\
    \ c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n\
    \    for i in x {\n        if i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1) {\n            res.push(i);\n        }\n    }\n    res.sort();\n \
    \   res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422,\
    \ 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\n\
    fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in x {\n        if !has_even_digit(i) {\n         \
    \   result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n  -->\
    \ /tmp/tmpgsw99a28.rs:12:13\n   |\n12 |         if !has_even_digit(i) {\n   |\
    \             ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
